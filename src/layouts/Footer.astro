---
import Block from '@/components/Block.astro';
import Heading from '@/components/Heading.astro';
import Button from '@/components/Button.astro';
---

<footer class="footer transition-fade">
  <Heading text="サイト内リンク" tag="h2" level={2} />
  <Block tag="ul">
    <li><a href="/">トップページ</a></li>
    <li><a href="/blog/">ブログ記事一覧</a></li>
    <li><a href="/feed.xml">RSSフィード</a></li>
  </Block>
  <Button type="button" text="ダークモードに切り替える" data-toggle-theme />
</footer>

<script>
  class ThemeManager {
    constructor() {
      this.init();
    }

    init() {
      this.initColorMode();
    }

    setRootColorMode(mode: string) {
      const root = document.querySelector(':root') as HTMLElement;
      root?.style.setProperty('--color-mode', mode);
      window.colorMode = mode;
    }

    updateToggleButton(mode: string) {
      const button = document.querySelector('[data-toggle-theme]') as HTMLButtonElement;
      button.innerHTML = mode === 'dark' ? 'ライトモードに切り替える' : 'ダークモードに切り替える';
    }

    setColorMode(mode: string) {
      this.setRootColorMode(mode);
      this.updateToggleButton(mode);
    }

    getColorMode(): string {
      if (window.colorMode) {
        return window.colorMode;
      }
      let storedMode: string | null = null;
      try {
        storedMode = localStorage.getItem('color-mode');
      } catch (error) {
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      }
      return (
        storedMode || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light')
      );
    }

    toggleColorMode() {
      const toggleButton = document.querySelector('[data-toggle-theme]') as HTMLButtonElement;
      if (!toggleButton) return;

      const handleClick = () => {
        const currentMode = this.getColorMode();
        const newMode = currentMode === 'dark' ? 'light' : 'dark';
        try {
          localStorage.setItem('color-mode', newMode);
        } catch (error) {
          console.log(error);
        }
        this.setColorMode(newMode);
      };

      toggleButton.addEventListener('click', handleClick);
    }

    initColorMode() {
      const initialColorMode = this.getColorMode();
      this.setColorMode(initialColorMode);
      this.toggleColorMode();
    }
  }

  new ThemeManager();
</script>

<style lang="scss">
  @use '@/styles/variables' as var;
  @use '@/styles/extension' as *;

  .footer {
    margin-block-start: var(--spacing-sm);

    &:global(.button) {
      margin-block-start: var(--spacing-sm);
    }
  }
</style>

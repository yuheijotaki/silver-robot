[ARTICLE-START]
---
title: 'View Transitions API で画面遷移アニメーション'
description: ''
publishDate: '09/03/2023 15:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230918203032.png" width="1200" height="721" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h1 id="View-Transitions-API-とは"><a href="https://developer.mozilla.org/en-US/docs/Web/API/View_Transitions_API">View Transitions API</a> とは</h1>

<ul>
<li>異なるDOM状態間のアニメーション遷移を簡単に実現できるAPI</li>
<li>これまでネイティブアプリでしか実装できなかったページをまたがるズムーズなアニメーション遷移も可能になる</li>
<li>Chrome、Edgeはバージョン111以降でサポートされているがSafari、Firefoxでは現状未サポート

<ul>
<li><a href="https://caniuse.com/mdn-api_viewtransition">ViewTransition API | Can I use... Support tables for HTML5, CSS3, etc</a></li>
</ul>
</li>
</ul>


<h1 id="デモ">デモ</h1>

<ol>
<li>ひとつのHTMLファイル内の要素をアニメーションさせる</li>
<li>異なるHTMLファイルの遷移間をアニメーションさせる</li>
</ol>


<p>のふたつが大きく分けて View Transitions API では実現できますが、今回は <strong>2.</strong> の異なるHTMLファイル間のデモです。</p>

<p><a href="https://github.com/ics-creative/230510_view_transitions_api">ics-creative/230510_view_transitions_api</a> を触りながら少し改変してみました。（ <a href="https://github.com/yuheijotaki/view-transitions-api">GitHub</a> ）</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230918202637.gif" width="600" height="447" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>Chromeで確認。URLが変更されブラウザバックでも動作しました。</p>

<h1 id="作成の流れ">作成の流れ</h1>

<ul>
<li>HTML

<ul>
<li>トップページ（ <code>index.html</code> ）、詳細ページ（ <code>cat_*.html</code> ）を作成。</li>
<li>互いのページに同じ画像を使用するようにしておく。</li>
</ul>
</li>
<li>JavaScript

<ul>
<li>こちらもChrome、Edgeのみサポートの <a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigation_API">Navigation API</a> を使ってページ遷移を感知</li>
<li>ページ間のアニメーションをさせたい要素に対して <code>style.viewTransitionName</code> を設定

<ul>
<li>今回は <code>cat-anime</code></li>
</ul>
</li>
<li>遷移動線のパターンによって <code>&lt;html&gt;</code> にクラスを付与

<ul>
<li>今回の例

<ul>
<li>トップページから詳細ページ（ <code>from-index</code>, <code>to-detail</code> ）</li>
<li>詳細ページからトップページ（ <code>from-detail</code>, <code>to-detail</code> ）</li>
<li>詳細ページから詳細ページ（ <code>from-detail</code>, <code>to-detail</code> ）</li>
</ul>
</li>
</ul>
</li>
<li>遷移先のDOMを取得し更新</li>
</ul>
</li>
<li>CSS

<ul>
<li>アニメーションさせる要素に対して <code>view-transition-name: cat-anime;</code> を指定</li>
<li>トップ、詳細で画像のサイズを指定

<ul>
<li>画像の拡縮アニメーションは自動的に行われる</li>
</ul>
</li>
<li>その他のDOMのアニメーションを設定

<ul>
<li><code>::view-transition-old</code> , <code>::view-transition-new</code> 疑似要素に対して先ほどの遷移動線パターンで付与したクラスを使用

<ul>
<li>今回の例

<ul>
<li> <code>html.from-index.to-detail::view-transition-old(root) { ... }</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2 id="参考Safariの場合">（参考）Safariの場合</h2>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230918202640.gif" width="600" height="447" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>未サポートのブラウザでは遷移時のアニメーションは無くなりますが、遷移自体は可能です。</p>

<h1 id="所感">所感</h1>

<ul>
<li>「簡単に実現できる」とは言ったものの、ブラウザAPIとしてサポートされてライブラリ等が必要ないだけで実装内容によっては簡単ではない</li>
<li><a href="https://github.com/defunkt/jquery-pjax">pjax</a>では遷移時に更新する/しないDOMを指定したりしてたが、遷移動線のパターンを網羅しながらやるという所は考え方的には似てる気がした</li>
<li>今回のデモの場合ページタイトルは遷移時に切り替わらないため、headの中身は自前で切り替えが必要そう</li>
<li>「ひとつのHTMLファイル内の要素をアニメーションさせる」方法は、例えば画像ライトボックスが実装できるため全モダンブラウザでサポートしたら本格的に使うことになりそう</li>
</ul>


<h1 id="参考記事">参考記事</h1>

<ul>
<li><a href="https://ics.media/entry/230510/">View Transitions API入門 - 連続性のある画面遷移アニメーションを実現するウェブの新技術 - ICS MEDIA</a></li>
<li><a href="https://zenn.dev/yhatt/articles/cfa6c78fabc8fa">Chrome 111 の View Transitions API でリッチなページ間トランジションを実現する</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】ウェブ・インクルーシブデザイン ─ Webのアクセシビリティとインクルージョンを実現するための実践ガイド'
description: ''
publishDate: '08/27/2023 02:00:00'
---

[CONTENTS-START]
<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/dp/4839980950?tag=hatena-22&amp;linkCode=ogi&amp;th=1&amp;psc=1" class="hatena-asin-detail-image-link" target="_blank" rel="noopener"><img src="https://m.media-amazon.com/images/I/51+A5H5MosL._SL500_.jpg" class="hatena-asin-detail-image" alt="ウェブ・インクルーシブデザイン　Webのアクセシビリティとインクルージョンを実現するための実践ガイド" title="ウェブ・インクルーシブデザイン　Webのアクセシビリティとインクルージョンを実現するための実践ガイド"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/dp/4839980950?tag=hatena-22&amp;linkCode=ogi&amp;th=1&amp;psc=1" target="_blank" rel="noopener">ウェブ・インクルーシブデザイン　Webのアクセシビリティとインクルージョンを実現するための実践ガイド</a></p><ul class="hatena-asin-detail-meta"><li><span class="hatena-asin-detail-label">作者:</span><a href="https://d.hatena.ne.jp/keyword/Regine%20Gilbert" class="keyword">Regine Gilbert</a></li><li>マイナビ出版</li></ul><a href="https://www.amazon.co.jp/dp/4839980950?tag=hatena-22&amp;linkCode=ogi&amp;th=1&amp;psc=1" class="asin-detail-buy" target="_blank" rel="noopener">Amazon</a></div></div></p>

<h1 id="目次概要">目次・概要</h1>

<ul>
<li>第1章 アクセシビリティを考慮したデザイン</li>
<li>第2章 アクセシビリティ、コンテンツ、HTML、JavaScript、CSS、そしてARIAの世界</li>
<li>第3章 わずらわしい＝おそらくアクセシブルではない</li>
<li>第4章 コンプライアンスとアクセシビリティ</li>
<li>第5章 未来のためのビジョンを描く：アクセシビリティのためのデザイン戦略</li>
<li>第6章 インクルーシブデザインリサーチ</li>
<li>第7章 支援技術</li>
<li>第8章 インクルーシブデザインの実現に向けて</li>
<li>第9章 ユーザビリティテスト</li>
<li>第10章 Webを超えて</li>
</ul>


<p>著者は<a href="https://reginegilbert.com/">レジーン・M・ギルバート</a>氏。UXデザイナーであり、国際アクセシビリティプロフェッショナル協会が認定するアクセシビリティの専門家。<br/>
もともと障害を持つご家族と暮らした影響から、アクセシビリティに興味を持ちガイドラインを整えたり、トレーニングを実施されているとのこと。</p>

<p>この本では、主にデザイン要件の中に最初からアクセシビリティを組み込んでおけば、アクセシビリティとデザインは継ぎ目のないプロセスになるというアイデアが紹介されています。</p>

<h3 id="インクルーシブデザインとは">インクルーシブデザインとは</h3>

<p>インクルーシブは「多様な人を包摂する」こと。<br/>
インクルーシブデザインとは「民間・公共を問わずあらゆるサービスに多様なユーザーがアクセスし、理解し、操作できるようにする」こと。</p>

<h3 id="日本の状況">日本の状況</h3>

<p>さまざまな疾患・障害を持つ人が日本では964万人、割合にすると約7.6%の人が何かしら障害を抱えて生活し、さらにその中の95%の人が入院をせずに生活している。</p>

<h3 id="障害者の表記">障害者の表記</h3>

<p>障害の原因を個々人の機能障害や他社との差異に置くのではなく、社会のあり方にあるとする考えに基づくため本書内では「障害者」と表記。</p>

<h1 id="ポイント">ポイント</h1>

<p>気になった点のメモです。</p>

<h2 id="第1章-アクセシビリティを考慮したデザイン">第1章 アクセシビリティを考慮したデザイン</h2>

<h3 id="アクセシビリティとインクルーシブデザイン">アクセシビリティとインクルーシブデザイン</h3>

<p>「アクセシビリティ」とは、誰もが抵抗なくアクセスできるようにすること。（性質）<br/>
「インクルーシブデザイン」とは、すべての人のためにプロダクトをつくること。（方法論）</p>

<h3 id="障害の社会モデルと医学モデル">障害の社会モデルと医学モデル</h3>

<p>本書では「社会モデル」を前提。</p>

<ul>
<li>社会モデル

<ul>
<li>社会のあり方に障害の原因があるとする考え方。</li>
<li>障害者の人生の選択を制限する障壁（バリア）を取り除くことを検討する。</li>
</ul>
</li>
<li>医学モデル

<ul>
<li>個人の機能障害や他社との差異に原因があるとする考え方。</li>
<li>心身の機能障害や差異は医療その他の治療によって「治す」か、交換により回復すべきと考える。</li>
</ul>
</li>
</ul>


<h3 id="5W1H">5W1H</h3>

<p>アイデアが浮かんだら、形にする前に5W1Hを考える。</p>

<ul>
<li>Who：あなたのプロダクトを使うのは<strong>誰</strong>ですか？</li>
<li>What：彼らは<strong>なに</strong>をしていますか？</li>
<li>Where：彼らは<strong>どこ</strong>でそれを使いますか？</li>
<li>When：彼らは<strong>いつ</strong>それを使いますか？</li>
<li>Why：彼らは<strong>なぜ</strong>そうするのですか？</li>
<li>How：彼らは<strong>どうやって</strong>それを使っていますか？</li>
</ul>


<h3 id="さまざまな人が恩恵を受ける">さまざまな人が恩恵を受ける</h3>

<p>障害を障害抱える人のためにデザインをすれば、状況によって制限を感じる人もその恩恵を受ける。<br/>
たとえば、片腕の人のためにデザインされたデバイスは、手首を一時的に怪我している人や幼児を腕に抱えた新米の親にも効果的に使ってもらえる。<br/>
これを「ペルソナ・スペクトル」と呼ぶ。</p>

<h2 id="第2章-アクセシビリティコンテンツHTMLJavaScriptCSSそしてARIAの世界">第2章 アクセシビリティ、コンテンツ、HTML、JavaScript、CSS、そしてARIAの世界</h2>

<h3 id="Webアクセシビリティ">Webアクセシビリティ</h3>

<p>Webアクセシビリティとは「Webサイト、ツール、およびテクノロジーが、障害を持つ人たちが使えるように設計され、開発されていること」とW3Cでは定義されている。<br/>
つまり、障害を持つ人たちが次のことをできる状態にあること。</p>

<ul>
<li>Webを認識して理解し、Web上を自由に動き回り、必要なインタラクションをする</li>
<li>Webに貢献する。</li>
</ul>


<h3 id="HTMLのベストプラクティス">HTMLのベストプラクティス</h3>

<ul>
<li>コンテナ要素はレイアウトのみに使う

<ul>
<li><code>&lt;div&gt;</code> や <code>&lt;span&gt;</code> のような要素はレイアウト専用。</li>
</ul>
</li>
<li>他のHTML要素を本来の意図通りに使う

<ul>
<li><code>&lt;header&gt;</code>, <code>&lt;nav&gt;</code>, <code>&lt;main&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;aside&gt;</code>, <code>&lt;footer&gt;</code></li>
</ul>
</li>
<li>ヘッダー

<ul>
<li>h1は1ページにつき1個で、ページタイトルと一致させる</li>
<li>階層を上げるときはスキップ不可、下げるときはスキップ可

<ul>
<li>例：h1, h2, h3, h2, h3, h4, h2, h3, h4</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>ボタン、モーダル、フォーカスなどの動作はJavaScriptで制御できるが、アクセシビリティの観点からはJavaScriptの仕様はある程度に限定にするのが理想で、セマンティックHTMLとCSSに比重を置く。</p>

<h2 id="第3章-わずらわしいおそらくアクセシブルではない">第3章 わずらわしい＝おそらくアクセシブルではない</h2>

<h3 id="よりアクセシブルなプロダクトをつくるためにできること">よりアクセシブルなプロダクトをつくるためにできること</h3>

<ul>
<li>行動を促す明確な呼びかけ

<ul>
<li>ボタンやリンクをしっかり区別して見せる</li>
</ul>
</li>
<li>明快なレイアウト

<ul>
<li>サイトのユーザーにとってももっとも論理的なレイアウトにする</li>
</ul>
</li>
<li>タイポグラフィ

<ul>
<li>読みやすいタイポグラフィを採用する</li>
</ul>
</li>
<li>フィルター適用の昨日

<ul>
<li>サイト上でユーザーがフィルターをコントロールできるようにする</li>
</ul>
</li>
<li>明快なナビゲーション

<ul>
<li>次にどこへ進めば良いかをはっきり示す</li>
</ul>
</li>
<li>適切で関連のあるコンテンツ

<ul>
<li>コンテンツがレイアウトと衝突していないことを確認する</li>
</ul>
</li>
<li>コンテンツへのジャンプ

<ul>
<li>ユーザーが「コンテンツへジャンプ」できるようにする</li>
</ul>
</li>
<li>適切なコントラスト

<ul>
<li>カラーコントラストチェッカーを使って、色づかいがガイドラインに準拠していることを確認する</li>
</ul>
</li>
</ul>


<h2 id="第4章-コンプライアンスとアクセシビリティ">第4章 コンプライアンスとアクセシビリティ</h2>

<h3 id="WCAGのPOUR">WCAGの「POUR」</h3>

<p>2018年にアップデートされたWCAGの骨子は「POUR」という呼び名で知られる四原則でできている。</p>

<ul>
<li>知覚可能（Perceivable）</li>
<li>操作可能（Operable）</li>
<li>理解可能（Understandable）</li>
<li>堅牢性（Robust）</li>
</ul>


<h3 id="POURの概要と実例">POURの概要と実例</h3>

<ul>
<li>知覚可能

<ul>
<li>代替テキストを提供できること

<ul>
<li>Instagramでの代替テキスト追加機能</li>
</ul>
</li>
<li>キャプション（字幕）の提供

<ul>
<li>Yahoo!の動画でのクローズドキャプション機能の提供</li>
</ul>
</li>
<li>音声認識</li>
</ul>
</li>
<li>操作可能

<ul>
<li>キーボードアクセシビリティ

<ul>
<li>Google Chromeブラウザのキーボードショートカット</li>
</ul>
</li>
<li>ジェスチャー

<ul>
<li>iPhoneにおける電話のシェイク</li>
</ul>
</li>
</ul>
</li>
<li>理解可能

<ul>
<li>エラーの特定

<ul>
<li>フォーム入力画面でのバリデーション</li>
</ul>
</li>
</ul>
</li>
<li>堅牢性

<ul>
<li>あらゆる種類の支援技術と互換性があること</li>
</ul>
</li>
</ul>


<h2 id="第5章-未来のためのビジョンを描くアクセシビリティのためのデザイン戦略">第5章 未来のためのビジョンを描く：アクセシビリティのためのデザイン戦略</h2>

<h3 id="デザインフレームワークを用いる">デザインフレームワークを用いる</h3>

<p>インクルーシブデザインの実現に向けた取り組みは、誰のためにつくろうとしていて、誰を排除してしまう可能性があるかをはっきりさせるところからはじまる。<br/>
そのためプロジェクトのスタート時点で、デザイン戦略（例えば著者が作成したEVVCCフレームワーク）を用いることがプロダクトの生産や開発の肝となる。</p>

<ul>
<li>共感（Empathy）

<ul>
<li>同僚や顧客が必要とすることを理解し、応じる能力</li>
</ul>
</li>
<li>価値（Value）

<ul>
<li>組織の価値観、目標、同僚や顧客に対する説明責任が共有され一致していること</li>
</ul>
</li>
<li>ビジョン（Vision）

<ul>
<li>組織の規範のおおもとにあって中核をなす共通の信念</li>
</ul>
</li>
<li>コンテキスト（Context）

<ul>
<li>プロジェクト、人、緊急性、リスク、ベネフィット、およびさまざまな状況要因に関連する課題</li>
</ul>
</li>
<li>コミュニケーション（Communication）

<ul>
<li>対話やプロダクトのニーズ、目標、意図、フィードバックなどの表明</li>
</ul>
</li>
</ul>


<h3 id="Airbnbが採用するAnother-Lens">Airbnbが採用する「Another Lens」</h3>

<p>Airbnbでは<a href="https://airbnb.design/anotherlens/">Another Lens</a>というツールを採用している。<br/>
<img src="https://miro.medium.com/v2/resize:fit:2000/format:webp/1*g_GF91BxDTL3mcpFi_W8qg.jpeg" alt="https://miro.medium.com/v2/resize:fit:2000/format:webp/1*g_GF91BxDTL3mcpFi_W8qg.jpeg" /></p>

<p>これは偏った視点に対峙し、思慮深く、インクルーシブなものづくりをできるようになるために作られたツールで、次の基本原則がある。</p>

<ul>
<li>バイアスのバランスを取る

<ul>
<li>あなた自身の生まれついてのもの、育ててきたもの、行動に関係するもの、さまざまなレンズがあり、誰もがレンズを持っている。自分が持っていないレンズについても考える</li>
<li>確証バイアスを常に意識し、あなたが取り組むことがどんな不均衡をもららす可能性があるかを考える</li>
</ul>
</li>
<li>逆を考える

<ul>
<li>「逆を考える」ことが確証バイアスの克服に直接的な影響がある</li>
<li>同類性をもった人だけでなく、まったく違う視点を持つ人にも意見を聞く</li>
</ul>
</li>
<li>グロースマインドセットを受け入れる

<ul>
<li>グロース（成長型）マインドセットの持ち主は、自分の特性や能力には成長や改善の余地があると信じ、学習し、柔軟性を高めるための機会として経験を捉える</li>
</ul>
</li>
</ul>


<h2 id="第6章-インクルーシブデザインリサーチ">第6章 インクルーシブデザインリサーチ</h2>

<h3 id="リサーチ計画書">リサーチ計画書</h3>

<p>早い段階でリサーチを行うこと、はじめからアクセシビリティを計画に入れることこそが組織のためになる。<br/>
下記はリサーチ計画書の内容例。</p>

<ul>
<li>リサーチの目的</li>
<li>プロダクトの使用状況</li>
<li>ゴール（目標）</li>
<li>リサーチの優先事項</li>
<li>手法</li>
<li>懸念事項（失敗要因になりそうなこと）</li>
<li>タイムフレーム</li>
<li>質問</li>
<li>参加者（対象者）</li>
<li>スクリプト</li>
<li>倫理</li>
</ul>


<h3 id="ケーススタディ">ケーススタディ</h3>

<p>ジョージア州のデジタルサービスプラットフォーム（失業給付、退役軍人サービス、税務情報など）をアクセシブルにするために行った例。</p>

<ul>
<li>カラーコントラストの向上</li>
<li>フォントの読みやすさを向上</li>
<li>セマンティックマークアップの改善</li>
<li>キーボード操作のみでナビゲーションできるように改善</li>
<li>スクリーンリーダー用に機能を拡張

<ul>
<li>ARIAラベルを使う。例えば、

<ul>
<li>「つづきを読む」リンク</li>
<li>「次へ」「戻る」リンク</li>
</ul>
</li>
</ul>
</li>
</ul>


<h2 id="第7章-支援技術">第7章 支援技術</h2>

<h3 id="支援技術とは">支援技術とは</h3>

<p>支援技術は、5W1Hの中の「なにを（What）」にあたる。<br/>
つまり、障害を持つ人たちの補助や適応、そしてリハビリに使われるデバイスのこと。それらを使用するときのプロセスも支援技術に含まれる。<br/>
よく「適応技術」と同義語として扱われるが別物で、適応技術は障害を持つ人たちのために特別にデザインされた製品を指す。</p>

<h3 id="ケーススタディ-1">ケーススタディ</h3>

<p>Xbox アダプティブ コントローラーのアクセシブルなパッケージデザインの例。<br/>
<img src="https://news.xbox.com/en-us/wp-content/uploads/sites/2/Xbox-Adaptive-Controller-Packaging_940x528-1-hero.png" alt="https://news.xbox.com/en-us/wp-content/uploads/sites/2/Xbox-Adaptive-Controller-Packaging_940x528-1-hero.png" /></p>

<p>開梱しやすいデザインにするため、Microsoftのデザイナーが事例探しから着手。<br/>
支援者たちにフィードバックをもらいながら、少ない手順にまとめるよりも、手順が増えたとしてもシンプルなステップを踏むデザインになった。</p>

<h2 id="第8章-インクルーシブデザインの実現に向けて">第8章 インクルーシブデザインの実現に向けて</h2>

<h3 id="アクセシビリティがビジネスにもたらす利点">アクセシビリティがビジネスにもたらす利点</h3>

<p>デジタルプロダクトのデザインと開発にアクセシビリティを組み込むことは一人で抱えきれる仕事ではない。<br/>
リーダーが支持していない状況では実現はかなり難しいが、アクセシビリティがビジネスにもたらす下記のような利点をしっかり捉えて、まずは種まきから行うとよい。</p>

<ul>
<li>差別と訴状を回避できる</li>
<li>幅広いオーディエンスにリーチできる</li>
<li>プラスイメージの広報活動になる</li>
<li>SEOが向上する</li>
<li>ユーザビリティが向上する</li>
<li>ソースコードの質が上がる</li>
</ul>


<h3 id="アクセシビリティをデザインシステムに組み込む">アクセシビリティをデザインシステムに組み込む</h3>

<p>コーディングがはじまる前の段階で組み込むのが得策。<br/>
デザインシステムがチームにもたらす恩恵は次の通り。</p>

<ul>
<li>自分たちのプロダクトに関連するアクセシビリティについて、チーム全員が理解していることを確認できる</li>
<li>ユーザーストーリー、ワイヤーフレーム、要件定義などにアクセシビリティが盛り込まれる</li>
<li>全チームがアクセシビリティに責任を負うことと各チームの責任の範囲を明確にできる</li>
<li>ナビゲーションが明確にドキュメント化される</li>
<li>色、フォーム、ナビゲーションのフォーカスなどの使い方が明確になる</li>
<li>新たに加わるメンバーが参照できる資料が整う</li>
</ul>


<p>これは確かに、構想やデザイン段階からアクセシビリティに対しての考えがまとまってないと難しくなることが多いと実務を通して感じているためその通りだなと思った。</p>

<h2 id="第9章-ユーザビリティテスト">第9章 ユーザビリティテスト</h2>

<h3 id="ユーザーテストとユーザビリティテスト">ユーザーテストとユーザビリティテスト</h3>

<ul>
<li>ユーザーテスト

<ul>
<li>プロダクトやサービスを使うことになる人（ユーザー）が持つニーズが何かをを確認すること</li>
</ul>
</li>
<li>ユーザビリティテスト

<ul>
<li>プロダクトやサービスに備わる機能に注目し、それが使えるかを確認すること</li>
</ul>
</li>
</ul>


<h3 id="なぜユーザビリティテストを行うのか">なぜユーザビリティテストを行うのか</h3>

<ol>
<li>人が持つ能力の多様性に合わせた選択肢を提供することで、UXを底上げできる</li>
<li>提供しようとしていプロダクトやサービスが使える人を増やせる</li>
<li>市場シェアやブランドの認知を上げられる</li>
<li>内部のテストでは見つけられないユーザビリティの課題を特定できる</li>
<li>正しいことをできる！</li>
</ol>


<p>ユーザビリティテストを行う前に観点を整理する。</p>

<ul>
<li>なんのためにテストを行うのか？</li>
<li>プロダクトが実現しようとしていることはなにか？</li>
<li>どのくらいの時間を使えるか？</li>
<li>どのくらいの予算があるか？</li>
<li>テストに使えるリソースはどのくらいか？</li>
<li>特別な機器やデバイスが必要になるか？</li>
<li>ユーザーに何をしてもらうか？</li>
</ul>


<h2 id="第10章-Webを超えて">第10章 Webを超えて</h2>

<h3 id="過去に作られたイノベーション">過去に作られたイノベーション</h3>

<ul>
<li>電話

<ul>
<li>1870年代にアメリカにてアレクサンダー・グラハム・ベルによって発明。</li>
<li>ベルには進行性の難聴を患っていた母親がいたバックグランドがあった。</li>
</ul>
</li>
<li>インターネット

<ul>
<li>難聴を抱えていたGoogleのエバンジェリスト、ヴィントン・サーフが1970年代にインターネットプロトコルの初代研究チームに加わる。</li>
<li>IPベースのネットワークが1981年に登場する。</li>
</ul>
</li>
<li>テキストメッセージ

<ul>
<li>マッティ・マッコネンが聴覚障害者がコミュニケーションを取れるようにするためにSMSを発明。</li>
</ul>
</li>
</ul>


<h3 id="ユニバーサルデザイン">ユニバーサルデザイン</h3>

<p>エクストリームユーザー（極端な事情や理由を持ってプロダクトやサービスと向き合っている人）のニーズを満たすものづくりに取り組むことが、結局は大勢に響くものを生み出す事例もある。</p>

<ul>
<li>縁石カット</li>
<li>傾斜路</li>
<li>自動車のクルーズコントロールシステム</li>
<li>スクリーンリーダー</li>
</ul>


<h1 id="感想">感想</h1>

<ul>
<li>デザイン戦略〜リサーチ〜WCAGの定義〜HTMLのコードレベルでこうやるとアクセシブルなどと、取り扱われている範囲が広かった。

<ul>
<li>それがインクルーシブデザインを実践する、ということなのだと解釈。</li>
</ul>
</li>
<li>特にアクセシビリティについての記事を読む際に、どういうスタンスで取り組むべきかはぼんやりと理解していたが、それが社会モデルと定義されていたことを初めて知った。</li>
<li>Airbnbの「Another Lens」、ググっても日本語の関連記事はあまりでてこなかったが何かをデザインするときに大事な視点だと感じた。</li>
<li>今後の展望としてVR/ARが書籍内でもピックアップされていたが、 <a href="https://blog.asial.co.jp/4016/">Apple Vision Proで変わるWebサイトのデザインとナビゲーション</a> あたりもWeb制作で考慮する点としてスタンダードになってくるのだろうかと思った。</li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】縁の下のUIデザイン ─ 小さな工夫で大きな効果をもたらす実践TIPS＆テクニック'
description: ''
publishDate: '08/23/2023 03:00:00'
---

[CONTENTS-START]
<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/dp/4297134098?tag=hatena-22&amp;linkCode=osi&amp;th=1&amp;psc=1" class="hatena-asin-detail-image-link" target="_blank" rel="noopener"><img src="https://m.media-amazon.com/images/I/41kRYXeIskL._SL500_.jpg" class="hatena-asin-detail-image" alt="縁の下のUIデザイン──小さな工夫で大きな効果をもたらす実践TIPS＆テクニック (WEB+DB PRESS plus)" title="縁の下のUIデザイン──小さな工夫で大きな効果をもたらす実践TIPS＆テクニック (WEB+DB PRESS plus)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/dp/4297134098?tag=hatena-22&amp;linkCode=osi&amp;th=1&amp;psc=1" target="_blank" rel="noopener">縁の下のUIデザイン──小さな工夫で大きな効果をもたらす実践TIPS＆テクニック (WEB+DB PRESS plus)</a></p><ul class="hatena-asin-detail-meta"><li><span class="hatena-asin-detail-label">作者:</span><a href="https://d.hatena.ne.jp/keyword/%C3%D3%C5%C4%20%C2%F3%BB%CA" class="keyword">池田 拓司</a></li><li>技術評論社</li></ul><a href="https://www.amazon.co.jp/dp/4297134098?tag=hatena-22&amp;linkCode=osi&amp;th=1&amp;psc=1" class="asin-detail-buy" target="_blank" rel="noopener">Amazon</a></div></div></p>

<h1 id="目次概要">目次・概要</h1>

<ul>
<li>第1章：色，文字，動きによる見せ方の工夫

<ul>
<li>赤の使い方──色が与える直感的な印象を活かす</li>
<li>上手に配色するためのコツとテクニック</li>
<li>ユーザーに使い方を文字で説明するためのUI</li>
<li>動きによる楽しさの演出──コンテンツの変化や操作へのフィードバック</li>
</ul>
</li>
<li>第2章：機能表現の工夫

<ul>
<li>「いいね！」の効果的な使い方</li>
<li>保存のデザインの使い分け</li>
<li>未読と既読のデザイン</li>
<li>情報の更新をどう表現するか</li>
</ul>
</li>
<li>第3章：UIコンポーネントの使い方による工夫

<ul>
<li>ボタンのデザインと使い分け</li>
<li>数値の入力・選択に適したUI</li>
<li>カードUIの向き不向き</li>
<li>メッセンジャーサービスにおけるデザインの工夫</li>
</ul>
</li>
<li>第4章：ユーザーの行動への配慮

<ul>
<li>エラーと確認──スムーズな手続きを実現するには</li>
<li>受動的な体験のデザイン──「なんとなく眺める」を快適にするには</li>
<li>異なるユーザー層へのデザイン</li>
<li>待ち時間中のユーザーへの配慮</li>
<li>待ち時間を短く感じさせる方法</li>
<li>コンテンツがないときに考えること</li>
</ul>
</li>
<li>第5章：画面と画面遷移の設計

<ul>
<li>画像はどう置く？──位置，大きさ，そろえ方</li>
<li>長くなりがちなコンテンツをどう見やすくするか</li>
<li>横配置メニューの項目数が多くなった場合の表現</li>
<li>「もっと見る」をちゃんとデザインする</li>
<li>入力フォームを1画面にする？ 分割する？</li>
<li>画面単位ではなく，画面遷移を意識した改善</li>
</ul>
</li>
<li>第6章：コミュニケーションとツール

<ul>
<li>エンジニアに意識してほしいこと</li>
<li>初期リリースにおける理想像とのずれをどうするか</li>
<li>「○○っぽいデザイン」のエッセンス</li>
<li>デザインシステムで，使い勝手・デザイン・コードに統一感を持たせる</li>
<li>UIデザインのためのGoogle アナリティクス</li>
<li>説得力・納得感のあるデザインにする工夫</li>
</ul>
</li>
<li>第7章：考察，雑感

<ul>
<li>今，iOS/Androidアプリのデザインガイドラインにどう向き合うか</li>
<li>業務利用サービスのデザイン──多くの情報，専門用語をどう見やすく表示するか</li>
<li>中国のスマートフォンアプリの共通項──所変わればデザイン変わる</li>
<li>長押しを使ったデザインの可能性</li>
<li>「当然そうなるだろう」という思い込みを考慮する</li>
</ul>
</li>
</ul>


<p>著書は <a href="https://twitter.com/tikeda">池田 拓司</a> さん。はてなやクックパッドに勤務されていた方で「<a href="https://jtk.hatenablog.com/entry/2019/08/15/084019">はじめてのUIデザイン</a>」 の著書のひとりです。</p>

<p>「細かなデザインの工夫がどのような意図を持っているか」「なぜこのデザインが使いやすいのか」を具体的なWebサービスの事例を使用して各トピックに分けて解説されています。</p>

<p>掲載内容は過去に WEB+DB PRESS に掲載されたトピックから加筆されていたり、新規で書籍用に追加されたものがあります。<br/>
<a href="https://gihyo.jp/list/group/%E7%B8%81%E3%81%AE%E4%B8%8B%E3%81%AEUI%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3-%E5%B0%91%E3%81%97%E3%81%AE%E5%B7%A5%E5%A4%AB%E3%81%A7%E5%A4%A7%E3%81%8D%E3%81%AA%E6%94%B9%E5%96%84">gihyo.jp</a> にも一部記事が掲載されています。</p>

<h1 id="ポイント">ポイント</h1>

<p>気になった点のメモです。</p>

<h2 id="第1章色文字動きによる見せ方の工夫">第1章：色，文字，動きによる見せ方の工夫</h2>

<h3 id="赤の使い方色が与える直感的な印象を活かす">赤の使い方──色が与える直感的な印象を活かす</h3>

<p>TwitterやLINEのユーザーアイコンの円形のように、特定サービス限らずユーザーが認知できる見た目や機能がある。<br/>
同じように赤色のテキストやボタンは、UIにおいて「危険」「注意」を表現することが多くあるが、どのようなユーザー体験を提供したいかを踏まえて色の選択をする必要がある。<br/>
（例：インジケータで、多い状態が赤になる／少ない状態が赤になる）<br/>
<img src="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0003/thumb/TH800_007.png" alt="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0003/thumb/TH800_007.png" /></p>

<h3 id="上手に配色するためのコツとテクニック">上手に配色するためのコツとテクニック</h3>

<p>UIデザインの配色選定では、早い段階で完成イメージが湧く色で考えることが大切。<br/>
全体的な調和を取るために、テーマカラー以外のエラーやdisabledの色も最初のうちに決めておきたい。<br/>
また配色は構成とセットで考えるべきで、配色はどの色をどのくらいの面積で使われるか等はシミュレーションしながら作るとコンセンサスも取りやすい。（ その手法を試すためのFigmaファイル：<a href="https://www.figma.com/community/file/823034839513472700">UI Color Impression Simulator</a> ）</p>

<p>サービスの補足的なUI（背景/枠線など）には無彩色が使われがちだが、有彩色を少し入れることも検討してみると調和が取れることもある。<br/>
<img src="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0019/thumb/TH800_005.png" alt="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0019/thumb/TH800_005.png" /></p>

<h3 id="ユーザーに使い方を文字で説明するためのUI">ユーザーに使い方を文字で説明するためのUI</h3>

<p>直感的なデザインでテキストでUIを説明しないことに越したことはないが、テキストで説明な必要がある。その際、</p>

<ol>
<li>特定の条件でだけ（たとえば初回に一度）見ることができる</li>
<li>常に説明を見ることができる</li>
<li>ユーザーが見たいときにだけ表示させてみることができる</li>
</ol>


<p>の3パターンが検討できる。</p>

<h3 id="動きによる楽しさの演出コンテンツの変化や操作へのフィードバック">動きによる楽しさの演出──コンテンツの変化や操作へのフィードバック</h3>

<p>サービスを作る過程では「わかりやすいか、使いやすいか」は考慮されるが、「楽しいか」という観点はなかなか意識されづらい。<br/>
＠cosmeトップの口コミ数表示、Yahooショッピング商品ページの「現在◯人がカートに入れています」など、数値の上昇でサービスが賑わっている感を演出できる。<br/>
<img src="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0008/003.png" alt="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0008/003.png" /></p>

<h2 id="第2章機能表現の工夫">第2章：機能表現の工夫</h2>

<h3 id="いいねの効果的な使い方">「いいね！」の効果的な使い方</h3>

<p>Facebook登場以降、スタンダードになっている「いいね！」のようなアクションをライトフィードバックと定義する。<br/>
このライトフィードバックの目的は、コンテンツに対して手軽にフィードバックを返せること。<br/>
例えば「いいね！」を言い換えて異なるワーディングで検討する場合、その変更が有効かどうかは慎重になったほうがいい場合もある。</p>

<p>またTwitterやInstagramのように「保存」機能とライトフィードバックは区別して違いを明確化するなど、細かいところだが様々な配慮が必要なUIでもある。</p>

<h3 id="保存のデザインの使い分け">保存のデザインの使い分け</h3>

<p>UIにおける「保存」の概念は技術の変化に伴いユーザー体験に合わせた形で多様化した。<br/>
例えば管理画面の一覧ページの場合3つの手法が考えられ、ユーザーの行動を想像して考えるプロセスが大切。</p>

<p><img src="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0013/thumb/TH800_002.png" alt="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0013/thumb/TH800_002.png" /></p>

<ol>
<li>自動保存

<ul>
<li>保存忘れを防げる</li>
<li>慎重に変更するデータには不向き</li>
<li>保存されたことをユーザーに伝えることをおすすめ</li>
</ul>
</li>
<li>行ごとに保存ボタン

<ul>
<li>必要に応じてこまめに保存できる</li>
<li>画面が煩雑になるケースも</li>
<li>どこを保存したか分からなくなってしまうケースも</li>
</ul>
</li>
<li>すべて保存ボタン

<ul>
<li>シンプルで操作がラク</li>
<li>ページをまたがず、1つのページで保存が完結できるように設計が必要</li>
<li>先の状態が想像できないようなケースはプレビューの用意があると良い</li>
</ul>
</li>
</ol>


<h3 id="未読と既読のデザイン">未読と既読のデザイン</h3>

<p>iPhoneホーム画面のアプリにつくバッジや、コンテンツの未読表現について。<br/>
<img src="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0028/001.png" alt="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0028/001.png" /></p>

<p>前提としては厳選したコンテンツへのアクセスにこそ意味があるため、無駄な未読表現は控える。<br/>
下記を考慮し表現されていると使い勝手が良くなる。</p>

<ul>
<li>未読数を出すもの、出さないものを分ける</li>
<li>数字が意味している情報を明確にする</li>
<li>未読を既読にするタイミングを考える</li>
</ul>


<h3 id="情報の更新をどう表現するか">情報の更新をどう表現するか</h3>

<p>排他制御が行われた際にどのようにユーザーに伝えるか。</p>

<ul>
<li>お知らせ画面で更新情報を伝える</li>
<li>モーダルを使って伝える</li>
<li>詳細画面に更新情報のスペースを設ける</li>
<li>一覧と詳細にアイコンで組み込む</li>
<li>履歴管理機能を備える</li>
<li>メールや通知を送る</li>
</ul>


<p>「この機能をどのように使ってもらいたいか」「ユーザーの解決したい課題は何か」を具体的な案を元に考えると判断もスムーズになる。</p>

<h2 id="第3章UIコンポーネントの使い方による工夫">第3章：UIコンポーネントの使い方による工夫</h2>

<h3 id="ボタンのデザインと使い分け">ボタンのデザインと使い分け</h3>

<p>ボタンはユーザーのアクションを査収する重要な要素。どのような場面でどういった形状のボタンを使うか、また画面内で複数のボタンがある場合どのように対応するかなど考えることが重要。</p>

<p>状態によるバリエーションでは下記のルールを参考にしてみると良い。</p>

<ul>
<li>マウスオーバーまたはボタン押下時

<ul>
<li>通常よりもボタン背景と文字のコントラストを上げる</li>
</ul>
</li>
<li>利用不可の状態

<ul>
<li>通常よりも画面背景とボタン背景、ボタン背景と文字の両方のコントラストを下げる</li>
</ul>
</li>
</ul>


<p>「状態の違い」「形状の違い」以外にも、画面内での重要度によって強弱をつけるため、プライマリボタン／セカンダリボタンを用意することが多い。<br/>
ほかの要素と比較してボタンの主張が強くなりすぎないように、また複数のボタンが出現したときにどのアクションが重要なのかを明確にするためにこれらを使い分ける。<br/>
複数のボタンが登場するケースでは、プライマリボタンは基本的に「画面の中に1つしか使わない」と考えてデザインすることをおすすめ。</p>

<h3 id="数値の入力選択に適したUI">数値の入力・選択に適したUI</h3>

<p>数値を入力・選択してもらう場合、どのようなUIコンポーネントが考えられるか。<br/>
ユーザーの自由度や操作性を考え、キーボードで入力ができるものが一番良い。</p>

<ul>
<li>テキストフィールド（キーボード入力）

<ul>
<li>普段使い慣れた入力方法をそのまま利用できる</li>
<li>ユーザー自身が自由に入力ができてしまうため制限がかけづらい</li>
</ul>
</li>
<li>プルダウンメニュー

<ul>
<li>あらかじめ用意された数値を選んでもらう場合</li>
<li>選択肢がたくさんある場合は選択が面倒</li>
</ul>
</li>
<li>スライダー（シークバー）

<ul>
<li>定められた最小値と最大値の間の数値を選択させたい場合</li>
<li>直感的な操作で変更ができる</li>
</ul>
</li>
<li>ステッパー

<ul>
<li>数値を確実に上下できる</li>
<li>数値の変更幅を一気に変えるにはボタンを押し続けなければいけない</li>
</ul>
</li>
</ul>


<h3 id="カードUIの向き不向き">カードUIの向き不向き</h3>

<p>カードUIは、不均一な情報の集まりをまとめることに適したUIと言われている。<br/>
ただし目的を明確に持たないと、その良さを引き出すことができない。</p>

<p>効果的な場面の一例は以下。</p>

<ul>
<li>不均一な情報をきれいに整理する</li>
<li>個々のコンテンツの主張を強くする</li>
</ul>


<p>逆に注意点として、情報の比較がしにくくなるケースは避ける。<br/>
<img src="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0015/007.png" alt="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0015/007.png" /></p>

<p>この例ではカードUIよりテーブル形式のほうが情報の比較がしやすい。</p>

<h2 id="第4章ユーザーの行動への配慮">第4章：ユーザーの行動への配慮</h2>

<h3 id="エラーと確認スムーズな手続きを実現するには">エラーと確認──スムーズな手続きを実現するには</h3>

<p>エラーをどのように伝えるかもスムーズに手続きを完了させるための大切な要素で、ユーザーが離脱する大きな要因になってしまう。</p>

<p>必要な項目がすべて埋まらない限り機能しないdisabledボタンは避けるべきで、いつでもボタンは押せる状態にしエラーメッセージを表示できることが理想。<br/>
<img src="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0002/002.png" alt="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0002/002.png" /></p>

<p>また状況に応じた確認手段を用いることも必要で、例えば日用品と車の購入では、意思決定をするまでのプロセスが異なる。実社会の体験も踏まえてUIを検討することで、ユーザーの気持ちを読み取りやすくなる。</p>

<h3 id="受動的な体験のデザインなんとなく眺めるを快適にするには">受動的な体験のデザイン──「なんとなく眺める」を快適にするには</h3>

<p>YouTubeやInstagramなど、暇な時間にとりあえず眺めるコンテンツが増えた。<br/>
そのようなコンテンツには「ハンズフリー（操作しなくてよい）な体験作り」が向いている。</p>

<p>例えば、Instagramのストーリー機能はユーザーアイコンをタップしてショート動画が再生、次の動画も自動またはタップで再生できる。</p>

<h3 id="異なるユーザー層へのデザイン">異なるユーザー層へのデザイン</h3>

<ul>
<li>ユーザー層が重なっていない（重なりにくい）サービス / ユーザー層が重なっているサービス</li>
<li>はじめて使うユーザー / ずっと使っているリピートユーザー</li>
</ul>


<p>など、サービスを使うユーザー層はさまざま。</p>

<p>例えばAirbnbは「部屋を貸したいユーザー」と「民泊希望のユーザー」でユーザー層が重ならないことが想定されるが、もう片方のユーザーがどのように見えているかを簡単にプレビューできるなど、サービスやユーザーの特性に応じて考慮することが重要。</p>

<h3 id="待ち時間中のユーザーへの配慮">待ち時間中のユーザーへの配慮</h3>

<p>待ち時間であることをユーザーに視覚的に伝えるUI表現は「終わり時間を明確に示していないタイプ」「終わり時間を明確に示したタイプ」に分かれる。<br/>
またUIコンポーネントとしては、「スピナー」もしくは「プログレスバー」で表すことが多い。</p>

<ul>
<li>待ち時間を感じさせない設計ができないか</li>
<li>時間がかかることが事前にわかっている場合それをどう伝えるか</li>
<li>待ち時間に別の行動がとれるようにできないか</li>
</ul>


<p>を考慮することが必要で、例えば「みてね」アプリではアップロードしたい写真を選択した直後から別の操作が可能となっている。<br/>
<img src="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0004/004.png" alt="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0004/004.png" /></p>

<h3 id="コンテンツがないときに考えること">コンテンツがないときに考えること</h3>

<p>サービスの使用開始直後など、コンテンツが空の状態「エンプティステート」での表現や対応手段について。</p>

<p>画面全体が空の状態の場合、ユーザーの行動によって状態を解消できるケースと、解消できないケースがある。</p>

<p>できるケース：ユーザーが積極的に行動できるように次へのアクションを促す。<br/>
できないケース：ユーザーの心情をなだめるコミュニケーションが必要。</p>

<p>「できないケース」の例はクックパッドマートの未対応地域への対応開始メッセージ。</p>

<h2 id="第5章画面と画面遷移の設計">第5章：画面と画面遷移の設計</h2>

<h3 id="画像はどう置く位置大きさそろえ方">画像はどう置く？──位置，大きさ，そろえ方</h3>

<p>一覧形式のレイアウトで左側／右側に置く、またその詳細ページでは大きく表示／カルーセル付きで複数展開など、動線やユーザーのニーズに合わせて考慮する。</p>

<p>また画像をメインに使い感性に訴えかけたい場合は、一休のトップページのように全面に写真を大きく用いることが効果的。<br/>
「何県何温泉のあのホテルを今すぐに最安で予約したい」という目的よりも、「貴重な休みがとれたのでどこか良い場所はないだろうか」という目的に沿ってデザインされている。
<img src="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0001/005.png" alt="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0001/005.png" /></p>

<h3 id="長くなりがちなコンテンツをどう見やすくするか">長くなりがちなコンテンツをどう見やすくするか</h3>

<p>できるだけ画面が長くならないようにするためどうすればよいか。</p>

<ul>
<li>すでにある要素を削る。または分け合う</li>
<li>効果の最大化を意識する</li>
<li>面積比率をルール化する

<ul>
<li>筆者は「その画面に本来あるべき要素が7割、関連する情報など関係の薄い要素は3割」といったように具体的にルールを用いたことも</li>
</ul>
</li>
</ul>


<p>長くなった場合どのように考えて対応するか。</p>

<ul>
<li>画面内のキーとなる要素を知る</li>
<li>追加要素を分散させる</li>
<li>一部の要素を隠す</li>
</ul>


<h3 id="横配置メニューの項目数が多くなった場合の表現">横配置メニューの項目数が多くなった場合の表現</h3>

<p>横に配置するメニューを使うときの注意点として、「縦方向に比べ、一度に表示できるメニュー件数が少ない」「複数の階層構造を一度に表示しにくい」というデメリットがある。</p>

<p>その上で横配置メニューを使用するパターンとしては下記が挙げられる。</p>

<ul>
<li>スクローラブルにするパターン</li>
<li>最後のメニューにまとめるパターン</li>
<li>複数段にするパターン</li>
<li>長押しで表示するパターン</li>
</ul>


<h3 id="もっと見るをちゃんとデザインする">「もっと見る」をちゃんとデザインする</h3>

<p>「もっと見る」には大きく分けて2つの使い方がある。</p>

<ul>
<li>特定の切り口の情報だけではなく、いろいろな切り口で情報を少しずつ見せる必要がある場面</li>
<li>すべての情報を一度に表示させると件数が多すぎるため途中で切って表示し、続きを見たい人が「もっと見る」を押すような場面</li>
</ul>


<p>「画面遷移する」か「その場で開く」かも2通りあるが、実装コストやユーザーの現在地の理解しやすさの観点で、画面遷移する（ページング処理）ほうがおすすめ。<br/>
<img src="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0006/thumb/TH800_005.png" alt="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0006/thumb/TH800_005.png" /></p>

<h3 id="入力フォームを1画面にする-分割する">入力フォームを1画面にする？ 分割する？</h3>

<p>入力フォームを、長くなっても分割せずに1画面にするのか、それとも画面を分割して複数画面にするのか、悩む場合が多い。<br/>
<img src="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0016/001.png" alt="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0016/001.png" /></p>

<p>分割するかしないかの基準は下記を目安とするとよい。</p>

<ul>
<li>コンバージョン重視ならできるだけ分割しない</li>
<li>モバイルならスクロールよりタップ移動のほうが行いやすいので分割する

<ul>
<li>Uber Eatsの評価画面など</li>
</ul>
</li>
<li>じっくり編集したり、あとから更新が多い場合は分割する

<ul>
<li>特にB2Bサービスなど会社情報やビジネス情報の入力／編集画面</li>
</ul>
</li>
</ul>


<h3 id="画面単位ではなく画面遷移を意識した改善">画面単位ではなく，画面遷移を意識した改善</h3>

<p>UIデザインの改善をする際に画面単位や機能単位での小さな改修を優先していくと、全体の流れが崩れがち。<br/>
その際はユーザーストーリーマッピングをしましょう、という話。</p>

<ul>
<li>体験をストーリー単位で考える</li>
<li>すべての画面変化を書き出す</li>
</ul>


<p>をしたら、「違和感がある」「改善したい」という箇所について書き出し解決案を探る。（「課題」（issue）と「解決案」を分けることが大事）
<img src="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0022/003.png" alt="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0022/003.png" /></p>

<h2 id="第6章コミュニケーションとツール">第6章：コミュニケーションとツール</h2>

<h3 id="エンジニアに意識してほしいこと">エンジニアに意識してほしいこと</h3>

<p>デザイナー／エンジニアそれぞれお互いの歩み寄りが必要。そのうえでエンジニアに意識してほしいこと。</p>

<ul>
<li>実装の認識合わせ

<ul>
<li>実装方法を知りたい</li>
<li>デザインに制限がかかるライブラリを利用するかを知りたい</li>
<li>負荷による制限を教えてほしい

<ul>
<li>デザイナーはサクサク動くこと前提で考えてしまう</li>
<li>検索結果の絞り込みなど、読み込み状態が必要かなど</li>
</ul>
</li>
</ul>
</li>
<li>デザイナーのこだわりとの付き合い

<ul>
<li>再現の精度を上げてほしい

<ul>
<li>余白 / フォント / 文字サイズ / 行間</li>
</ul>
</li>
<li>立地な表現や細やかな表現を行いたい

<ul>
<li>デザイナーはDribbbleなど見て突っ走っちゃうときがあるので、事前にスケジュール感と表現の幅についてできるだけ認識を合わせておく</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3 id="初期リリースにおける理想像とのずれをどうするか">初期リリースにおける理想像とのずれをどうするか</h3>

<p>サービスはミニマム状態と理想状態がある場合が多く、それぞれの状態で何を考慮すべきか。<br/>
大きな観点としては「充足した情報がどれくらい作られるか」</p>

<ul>
<li>理想状態は1,000商品を取り扱うECサイトを作りたいが、ミニマム状態では10商品しかない</li>
<li>理想状態は毎日5記事更新、全部で1,500記事できるようなメディアサイトを作りたいが、ミニマム状態は週に1記事更新でリリース時は50記事しかストックがない</li>
<li>理想状態は10,000人が集まるクチコミサイトを作りたいが、ミニマム状態ではメンバーに情報を集めてもらう</li>
</ul>


<p>など、いずれかの状態専用でデザインする／共用でデザインするには大きな違いがある。</p>

<p>例えば、ミニマムリリース時にアイテム件数が少ないサービスでは、フリーワード検索ではなく用意しているタグ検索を用いる。<br/>
<img src="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0021/002.png" alt="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0021/002.png" /></p>

<h3 id="っぽいデザインのエッセンス">「○○っぽいデザイン」のエッセンス</h3>

<p>デザインの依頼時に「○○っぽいデザインでお願いします」の「○○っぽさ」とは何なのか。<br/>
3つの観点がある。</p>

<ul>
<li>UIデザインを指すパターン

<ul>
<li>例）画面全体のベースカラーが「ベージュ」で、アクセントカラーに「緑」を用いている</li>
</ul>
</li>
<li>体験そのものを指すパターン

<ul>
<li>例）ボタンを押したときのフィードバックや画面のロードタイムがとても早い</li>
</ul>
</li>
<li>利用者の傾向を指すパターン</li>
</ul>


<p>例えば「Pinterestっぽい一覧画面のデザインにしたい」という「○○っぽさ」を「UIデザインを指すパターン」と仮定する。<br/>
その中でエッセンスはどこかを探ると最適なデザインに近づくことがある。
<img src="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0026/001.png" alt="https://gihyo.jp/assets/images/design/serial/01/ui-design-unsung/0026/001.png" /></p>

<ul>
<li>情報が2カラムに配置されている</li>
<li>写真がレンガ状に互い違いに並んでいる</li>
<li>写真とラベルだけで情報の要素が少ない</li>
<li>余白が最小限で、少ないスクロールで数多くの情報を見ることができる</li>
</ul>


<h3 id="デザインシステムで使い勝手デザインコードに統一感を持たせる">デザインシステムで，使い勝手・デザイン・コードに統一感を持たせる</h3>

<p>デザインシステムがどのようなものか。構築メリットとして下記が挙げられる。</p>

<ul>
<li>一貫した使い勝手をユーザーに提供する</li>
<li>統一した視覚表現で魅力的な世界観を表現する</li>
<li>提供しているサービスの思想や価値観の認識を開発者間で合わせられる</li>
<li>スタイルやコンポーネント単位でソースコードを共通化し効率化する</li>
</ul>


<p>含まれる要素として</p>

<ul>
<li>デザインガイドライン</li>
<li>UIコンポーネントのパターンライブラリ</li>
<li>スタイルガイド</li>
<li>アイコンやフォントなどのリソース</li>
<li>CSSフレームワーク</li>
<li>React Components</li>
</ul>


<p>が挙げられるが、例えばデザインガイドラインがエンジニアと共有されているか、それが実装レベルまで反映されているかは、デザイナーだけエンジニアだけではなく両者での構築が必要となる。</p>

<h3 id="説得力納得感のあるデザインにする工夫">説得力・納得感のあるデザインにする工夫</h3>

<p>大前提として自分が作ったデザインに自信を持って提案するのは、実際にユーザーに使ってもらい、うまくいっている様子を確かめない限り難しい。<br/>
その上でそれ以外の方法で筆者が意識していること。</p>

<ul>
<li>一緒に仕事をする人の好みや癖を読み取る</li>
<li>できるだけ言葉を添えてデザインを説明する</li>
<li>他社の事例などの情報を上手に参考にする

<ul>
<li>100%は当てはまらないが、どこに共通点／相違点があるかを明確にした上で用意する

<ul>
<li>例）<a href="https://note.com/kurashicom_tech/n/n104bec8332b6">「北欧、暮らしの道具店」のメルマガをABテストで改善した話</a></li>
<li>例）<a href="https://note.com/navitime_tech/n/n33bb56598235">iOS版『NAVITIME』アプリをリニューアルした話</a></li>
</ul>
</li>
</ul>
</li>
<li>デザインに関連する知識を役立てる

<ul>
<li>行動経済学や認知科学</li>
<li>示差性について

<ul>
<li><a href="https://www.amazon.co.jp/dp/4788914832/">心を動かすデザインの秘密</a></li>
</ul>
</li>
</ul>
</li>
</ul>


<h1 id="感想">感想</h1>

<ul>
<li>スマートフォンアプリ限定の話題もありましたが、Webサービス/サイトに通ずるところも多く勉強になった。

<ul>
<li>補足的なUI（背景/枠線など）に無彩色が使われがちや、ボタンの状態作成、実際の案件だと確かに半ば思考停止でやり過ごしてしまいがちなので気づきになった。</li>
</ul>
</li>
<li>「どのUIが最適か」に対する答えとしてはケースバイケースということが多い。（決まりきったことはほぼない）

<ul>
<li>サービス全体とその中のその画面内で、どの属性のユーザーが何を達成したいかによって、どのようなUIが適切かが判断できる。</li>
<li>引き出しを多く持ちその特性を理解すること、常日頃から自身が使うサービスのUIについて考えることが重要と感じた。</li>
</ul>
</li>
<li>第6章の「エンジニアに意識してほしいこと」や「初期リリースにおける理想像とのずれをどうするか」の内容、こういう類の本でなかなか語られない開発視点の内容なので新鮮でした。</li>
<li>最後にChatGPTなど技術進化は増しているが、「開発者の小さな工夫や細かなこだわりが大切なことは変わることがないと感じています」という所がいいなと思いました。</li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'GASでMLB試合予定を日本時間でGoogleカレンダーに登録する'
description: ''
publishDate: '04/20/2023 20:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230224173736.jpg" width="960" height="504" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<ul>
<li>MLB の Stats API を使用</li>
<li>GAS で予定取得し変換、Googleカレンダーに登録

<ul>
<li>特定チーム（今回はエンゼルス）の予定を取得</li>
<li>時刻は日本時間に</li>
<li>タイトルのチーム名は3文字の省略形（LAA など）に</li>
</ul>
</li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230420160628.png" width="1200" height="695" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// GoogleカレンダーIDをセット</span>
<span class="synStatement">const</span> CALENDAR_ID = <span class="synConstant">'[GOOGLE_CALENDAR_ID]'</span>;

<span class="synComment">// MLB Data APIからエンゼルスの試合情報を取得</span>
<span class="synIdentifier">function</span> fetchAngelsSchedule() <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> apiUrl = <span class="synConstant">'https://statsapi.mlb.com/api/v1/schedule?teamId=108&amp;season=2023&amp;sportId=1'</span>;
  <span class="synStatement">const</span> response = UrlFetchApp.fetch(apiUrl);
  <span class="synStatement">const</span> data = JSON.parse(response.getContentText());
  <span class="synStatement">const</span> games = data.dates.flatMap(date =&gt; date.games);

  <span class="synStatement">return</span> games.map(game =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">const</span> gameDate = <span class="synStatement">new</span> <span class="synType">Date</span>(game.gameDate);
    <span class="synStatement">const</span> end = <span class="synStatement">new</span> <span class="synType">Date</span>(gameDate.getTime() + 3 * 60 * 60 * 1000); <span class="synComment">// 試合終了時間を仮定して3時間後に設定</span>
    <span class="synStatement">const</span> isHome = game.teams.home.team.id === 108;
    <span class="synStatement">const</span> opponent = isHome ? game.teams.away.team : game.teams.home.team;
    <span class="synStatement">const</span> opponentShortName = getShortName(opponent);
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      start: gameDate,
      end: end,
      opponent: opponentShortName,
      isHome: isHome,
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>

<span class="synIdentifier">function</span> getShortName(team) <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> shortNames = <span class="synIdentifier">{</span>
    <span class="synConstant">'Baltimore Orioles'</span>: <span class="synConstant">'BAL'</span>,
    <span class="synConstant">'Boston Red Sox'</span>: <span class="synConstant">'BOS'</span>,
    <span class="synConstant">'New York Yankees'</span>: <span class="synConstant">'NYY'</span>,
    <span class="synConstant">'Tampa Bay Rays'</span>: <span class="synConstant">'TBR'</span>,
    <span class="synConstant">'Toronto Blue Jays'</span>: <span class="synConstant">'TOR'</span>,
    <span class="synConstant">'Chicago White Sox'</span>: <span class="synConstant">'CWS'</span>,
    <span class="synConstant">'Cleveland Guardians'</span>: <span class="synConstant">'CLE'</span>,
    <span class="synConstant">'Detroit Tigers'</span>: <span class="synConstant">'DET'</span>,
    <span class="synConstant">'Kansas City Royals'</span>: <span class="synConstant">'KC'</span>,
    <span class="synConstant">'Minnesota Twins'</span>: <span class="synConstant">'MIN'</span>,
    <span class="synConstant">'Los Angeles Angels'</span>: <span class="synConstant">'LAA'</span>,
    <span class="synConstant">'Oakland Athletics'</span>: <span class="synConstant">'OAK'</span>,
    <span class="synConstant">'Seattle Mariners'</span>: <span class="synConstant">'SEA'</span>,
    <span class="synConstant">'Texas Rangers'</span>: <span class="synConstant">'TEX'</span>,
    <span class="synConstant">'Houston Astros'</span>: <span class="synConstant">'HOU'</span>,
    <span class="synConstant">'Atlanta Braves'</span>: <span class="synConstant">'ATL'</span>,
    <span class="synConstant">'Miami Marlins'</span>: <span class="synConstant">'MIA'</span>,
    <span class="synConstant">'New York Mets'</span>: <span class="synConstant">'NYM'</span>,
    <span class="synConstant">'Philadelphia Phillies'</span>: <span class="synConstant">'PHI'</span>,
    <span class="synConstant">'Washington Nationals'</span>: <span class="synConstant">'WSH'</span>,
    <span class="synConstant">'Chicago Cubs'</span>: <span class="synConstant">'CHC'</span>,
    <span class="synConstant">'Cincinnati Reds'</span>: <span class="synConstant">'CIN'</span>,
    <span class="synConstant">'Milwaukee Brewers'</span>: <span class="synConstant">'MIL'</span>,
    <span class="synConstant">'Pittsburgh Pirates'</span>: <span class="synConstant">'PIT'</span>,
    <span class="synConstant">'St. Louis Cardinals'</span>: <span class="synConstant">'STL'</span>,
    <span class="synConstant">'Arizona Diamondbacks'</span>: <span class="synConstant">'ARI'</span>,
    <span class="synConstant">'Colorado Rockies'</span>: <span class="synConstant">'COL'</span>,
    <span class="synConstant">'Los Angeles Dodgers'</span>: <span class="synConstant">'LAD'</span>,
    <span class="synConstant">'San Diego Padres'</span>: <span class="synConstant">'SDP'</span>,
    <span class="synConstant">'San Francisco Giants'</span>: <span class="synConstant">'SFG'</span>,
  <span class="synIdentifier">}</span>;

  <span class="synStatement">return</span> shortNames<span class="synIdentifier">[</span>team.name<span class="synIdentifier">]</span> || team.name;
<span class="synIdentifier">}</span>

<span class="synComment">// 日時を日本時間に変換</span>
<span class="synIdentifier">function</span> convertToJST(date) <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> jstDate = <span class="synStatement">new</span> <span class="synType">Date</span>(date.toLocaleString(<span class="synConstant">'en-US'</span>, <span class="synIdentifier">{</span> timeZone: <span class="synConstant">'Asia/Tokyo'</span> <span class="synIdentifier">}</span>));
  <span class="synStatement">return</span> jstDate;
<span class="synIdentifier">}</span>

<span class="synComment">// Googleカレンダーに試合予定を登録</span>
<span class="synIdentifier">function</span> addAngelsScheduleToCalendar() <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> calendar = CalendarApp.getCalendarById(CALENDAR_ID);
  <span class="synStatement">const</span> games = fetchAngelsSchedule();

  <span class="synStatement">const</span> seasonStart = <span class="synStatement">new</span> <span class="synType">Date</span>(2023, 2, 31); <span class="synComment">// 2023年3月31日</span>
  <span class="synStatement">const</span> seasonEnd = <span class="synStatement">new</span> <span class="synType">Date</span>(2023, 9, 31); <span class="synComment">// 2023年10月31日</span>

  games.forEach(game =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">const</span> startJST = convertToJST(game.start);
    <span class="synStatement">const</span> endJST = convertToJST(game.end);

    <span class="synStatement">if</span> (startJST &gt;= seasonStart &amp;&amp; startJST &lt;= seasonEnd) <span class="synIdentifier">{</span>
      <span class="synStatement">const</span> title = game.isHome ? <span class="synConstant">`LAA vs </span><span class="synSpecial">${game.opponent}</span><span class="synConstant">`</span> : <span class="synConstant">`</span><span class="synSpecial">${game.opponent}</span><span class="synConstant"> vs LAA`</span>;

      <span class="synComment">// 予定がすでにあるかチェック</span>
      <span class="synStatement">const</span> rangeStart = <span class="synStatement">new</span> <span class="synType">Date</span>(startJST.getTime() - 24 * 60 * 60 * 1000);
      <span class="synStatement">const</span> rangeEnd = <span class="synStatement">new</span> <span class="synType">Date</span>(startJST.getTime() + 24 * 60 * 60 * 1000);
      <span class="synStatement">const</span> events = calendar.getEvents(rangeStart, rangeEnd, <span class="synIdentifier">{</span> search: title <span class="synIdentifier">}</span>);

      <span class="synStatement">const</span> isEventExist = events.some(<span class="synStatement">event</span> =&gt; <span class="synIdentifier">{</span>
        <span class="synStatement">const</span> eventStart = <span class="synStatement">event</span>.getStartTime();
        <span class="synStatement">return</span> eventStart.getYear() === startJST.getYear() &amp;&amp;
               eventStart.getMonth() === startJST.getMonth() &amp;&amp;
               eventStart.getDate() === startJST.getDate();
      <span class="synIdentifier">}</span>);

      <span class="synStatement">if</span> (!isEventExist) <span class="synIdentifier">{</span>
        <span class="synComment">// 予定がなければ新たに追加</span>
        calendar.createEvent(title, startJST, endJST);
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>
</pre>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'React / OpenAI API でコードを説明してもらう'
description: ''
publishDate: '04/05/2023 12:19:11'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230319224343.png" width="310" height="162" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><a href="https://whatdoesthiscodedo.com/">What does this code do?</a> を見て、日本語で同じようなもの作れそうなのでやってみる。</p>

<p>コード入力/送信ボタン押下でOpenAI APIにリクエストを送りコードの説明を得る。フロントのみなのでセッション保持などはなし。</p>

<p>GitHub: <a href="https://github.com/yuheijotaki/chatgpt-what-does-this-code-do">https://github.com/yuheijotaki/chatgpt-what-does-this-code-do</a></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230405120440.gif" width="480" height="266" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>OpenAI APIへのリクエスト、これまでAxiosを使ってましたが <a href="https://www.npmjs.com/package/openai">openai</a> のライブラリがあったので使ってみる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synIdentifier">{</span> Configuration, OpenAIApi <span class="synIdentifier">}</span> from <span class="synConstant">'openai'</span>;

<span class="synStatement">const</span> configuration = <span class="synStatement">new</span> Configuration(<span class="synIdentifier">{</span>
  apiKey: process.env.REACT_APP_OPENAI_API_KEY,
<span class="synIdentifier">}</span>);
<span class="synStatement">const</span> openai = <span class="synStatement">new</span> OpenAIApi(configuration);
</pre>


<p>messages には下記を仕込んでおく。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>messages: <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span> role: <span class="synConstant">&quot;system&quot;</span>, content: <span class="synConstant">&quot;あなたはコードを説明するエキスパートです。&quot;</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> role: <span class="synConstant">&quot;user&quot;</span>, content: <span class="synConstant">`このプログラムのコードを</span><span class="synSpecial">${maxTokens}</span><span class="synConstant">文字以内で説明してください:</span><span class="synSpecial">\n${code}</span><span class="synConstant">`</span> <span class="synIdentifier">}</span>,
<span class="synIdentifier">]</span>,
</pre>


<h1 id="所感">所感</h1>

<p><code>gpt-3.5-turbo</code> でやりましたが、<a href="https://platform.openai.com/docs/models/gpt-3-5">GPT-3.5のモデル</a> みると <code>text-davinci-003</code> が本来は妥当なのかも？<br/>
<code>max_tokens</code> 周りもよく分かってないので、もう少し検証や調査が必要。</p>

<h1 id="参考">参考</h1>

<ul>
<li><a href="https://kinsta.com/jp/blog/chatgpt-clone/">ChatGPTクローンアプリケーションをReactとOpenAI APIで構築、デプロイする方法｜Kinsta®</a></li>
<li><a href="https://zenn.dev/kurehajime/scraps/f8e59991ab68c8">nodeでもChatGPTのAPIを使ってみる</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'React / DALL-E API で画像生成'
description: ''
publishDate: '03/20/2023 11:14:24'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230319224343.png" width="310" height="162" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>ReactとOpenAI API（DALL-E API）を使って画像生成アプリを作ってみる。</p>

<p>キーワードを入力/画像生成ボタン押下でAPIにリクエストを送り画像を取得する。フロントのみなのでセッション保持などはなし。</p>

<p>GitHub: <a href="https://github.com/yuheijotaki/chatgpt-dall-e-sample">https://github.com/yuheijotaki/chatgpt-dall-e-sample</a></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230320110102.gif" width="600" height="512" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><a href="https://platform.openai.com/docs/api-reference/images/create">Create image</a> のエンドポイントへPOSTする。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  <span class="synStatement">const</span> generateImage = async () =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">try</span> <span class="synIdentifier">{</span>
      <span class="synStatement">const</span> response = await axios.post(
        <span class="synConstant">&quot;https://api.openai.com/v1/images/generations&quot;</span>,
        <span class="synIdentifier">{</span>
          <span class="synStatement">prompt</span>: inputText,
          n: 1,
          size: <span class="synConstant">&quot;256x256&quot;</span>,
          response_format: <span class="synConstant">&quot;url&quot;</span>,
        <span class="synIdentifier">}</span>,
        ...
      );
      setImageUrl(response.data.data<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>.url);
    <span class="synIdentifier">}</span> <span class="synStatement">catch</span> (error) <span class="synIdentifier">{</span>
      ...
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>;
</pre>


<p><code>size</code> でサイズ変更、 <code>response_format</code> で <code>b64_json</code> などのフォーマットと変更も可能。</p>

<h1 id="所感">所感</h1>

<p>例えば「3匹の猫」と入力したら白い花の画像が生成されたり、結構厳密にキーワード指定しないと精度的にはそこまで高くなさそう。（現状では）<br/>
Create image edit や Create image variation など、インプットが画像ベースになるのも試してみたい。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'React / OpenAI API でチャットボット作成'
description: ''
publishDate: '03/19/2023 23:05:22'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230319224343.png" width="310" height="162" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>ReactとOpenAI APIを使ってチャットボットを作ってみる。</p>

<p>ChatGPTのWebブラウザ版と同じく、メッセージ入力/送信ボタン押下でOpenAI APIにリクエストを送り回答を得る。フロントのみなのでセッション保持などはなし。</p>

<p>GitHub: <a href="https://github.com/yuheijotaki/chatgpt-bot-sample">https://github.com/yuheijotaki/chatgpt-bot-sample</a></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230319232339.gif" width="434" height="472" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>OpenAI APIへのPOSTは、</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> response = await axios.post(
  <span class="synConstant">'https://api.openai.com/v1/chat/completions'</span>,
  <span class="synIdentifier">{</span>
    model: <span class="synConstant">'gpt-3.5-turbo'</span>,
    messages: <span class="synIdentifier">[</span>
      ...conversation,
      <span class="synIdentifier">{</span>
        role: <span class="synConstant">'user'</span>,
        content: message,
      <span class="synIdentifier">}</span>,
    <span class="synIdentifier">]</span>,
  <span class="synIdentifier">}</span>,
  ...
);
</pre>


<p><code>messages</code> 内で会話履歴を配列にいれておくことで、文脈を踏まえて回答するようになる。</p>

<h1 id="所感">所感</h1>

<p>レスポンスの早さが gpt-3.5-turbo っていうくらいなので、早いと期待していましたがそこまでではなかったです。<br/>
GPT-4も招待来たら使ってみたいと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Slack APIの確認ダイアログ'
description: ''
publishDate: '03/07/2023 13:41:17'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230224173736.jpg" width="960" height="504" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>Slackメッセージ内のボタンクリックをトリガーとしてダイアログを表示させる場合。</p>

<p>ダイアログ内でユーザーのインプットが必要なときは <code>dialog.open</code> が必要。<br/>
<a href="https://api.slack.com/dialogs">Interacting with users through dialogs | Slack</a></p>

<p>シンプルに <code>OK</code> , <code>Cancel</code> などの2択のボタンをダイアログで置く場合は <code>button</code> の <code>confirm</code> フィールドで実装できる。<br/>
<a href="https://api.slack.com/reference/block-kit/composition-objects#confirm">Reference: Composition objects | Slack</a></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// main/function.gs</span>
<span class="synStatement">const</span> blockKit = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span>
    <span class="synConstant">&quot;type&quot;</span>: <span class="synConstant">&quot;section&quot;</span>,
    <span class="synConstant">&quot;text&quot;</span>: <span class="synIdentifier">{</span>
      <span class="synConstant">&quot;type&quot;</span>: <span class="synConstant">&quot;mrkdwn&quot;</span>,
      <span class="synConstant">&quot;text&quot;</span>: <span class="synConstant">&quot;ボタン横のテキスト&quot;</span>
    <span class="synIdentifier">}</span>,
    <span class="synConstant">&quot;accessory&quot;</span>: <span class="synIdentifier">{</span>
      <span class="synConstant">&quot;type&quot;</span>: <span class="synConstant">&quot;button&quot;</span>,
      <span class="synConstant">&quot;text&quot;</span>: <span class="synIdentifier">{</span>
        <span class="synConstant">&quot;type&quot;</span>: <span class="synConstant">&quot;plain_text&quot;</span>,
        <span class="synConstant">&quot;text&quot;</span>: <span class="synConstant">&quot;ボタンのラベルテキスト&quot;</span>,
        <span class="synConstant">&quot;emoji&quot;</span>: <span class="synConstant">true</span>
      <span class="synIdentifier">}</span>,
      <span class="synConstant">&quot;value&quot;</span>: <span class="synConstant">&quot;BUTTON CLICKED&quot;</span>,
      <span class="synConstant">&quot;action_id&quot;</span>: <span class="synConstant">&quot;button-action-id&quot;</span>,
      <span class="synConstant">&quot;confirm&quot;</span>: <span class="synIdentifier">{</span>
        <span class="synConstant">&quot;title&quot;</span>: <span class="synIdentifier">{</span>
          <span class="synConstant">&quot;type&quot;</span>: <span class="synConstant">&quot;plain_text&quot;</span>,
          <span class="synConstant">&quot;text&quot;</span>: <span class="synConstant">&quot;確認ダイアログのタイトルテキスト&quot;</span>
        <span class="synIdentifier">}</span>,
        <span class="synConstant">&quot;text&quot;</span>: <span class="synIdentifier">{</span>
          <span class="synConstant">&quot;type&quot;</span>: <span class="synConstant">&quot;mrkdwn&quot;</span>,
          <span class="synConstant">&quot;text&quot;</span>: <span class="synConstant">&quot;確認ダイアログの本文テキスト&quot;</span>
        <span class="synIdentifier">}</span>,
        <span class="synConstant">&quot;confirm&quot;</span>: <span class="synIdentifier">{</span>
          <span class="synConstant">&quot;type&quot;</span>: <span class="synConstant">&quot;plain_text&quot;</span>,
          <span class="synConstant">&quot;text&quot;</span>: <span class="synConstant">&quot;OK&quot;</span>
        <span class="synIdentifier">}</span>,
        <span class="synConstant">&quot;deny&quot;</span>: <span class="synIdentifier">{</span>
          <span class="synConstant">&quot;type&quot;</span>: <span class="synConstant">&quot;plain_text&quot;</span>,
          <span class="synConstant">&quot;text&quot;</span>: <span class="synConstant">&quot;Cancel&quot;</span>
        <span class="synIdentifier">}</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>
postSlack(blockKit)
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// post/slack.gs</span>
<span class="synStatement">const</span> postSlack = (blocks) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> blockKit = blocks
  <span class="synStatement">const</span> endpoint = <span class="synConstant">'https://slack.com/api/chat.postMessage'</span>
  <span class="synStatement">const</span> headers = <span class="synIdentifier">{</span>
    <span class="synConstant">'Content-Type'</span>: <span class="synConstant">'application/json'</span>,
    <span class="synConstant">'Authorization'</span>: <span class="synConstant">'Bearer '</span> + SLACK_AUTH_TOKEN
  <span class="synIdentifier">}</span>
  <span class="synStatement">const</span> payload = <span class="synIdentifier">{</span>
    channel: SLACK_CHANNEL_ID,
    blocks: blockKit,
    unfurl_links: <span class="synConstant">false</span>,
    unfurl_media: <span class="synConstant">false</span>,
  <span class="synIdentifier">}</span>
  <span class="synStatement">const</span> params = <span class="synIdentifier">{</span>
    method : <span class="synConstant">'post'</span>,
    headers: headers,
    payload : JSON.stringify(payload),
  <span class="synIdentifier">}</span>
  UrlFetchApp.fetch(endpoint, params)
<span class="synIdentifier">}</span>
</pre>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230307133918.png" width="1200" height="504" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GASで受け取る場合、 <code>doPost()</code> の値にOKを押したときのみ <code>BUTTON CLICKED</code> が入ってくる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// event/doPost.gs</span>
<span class="synStatement">const</span> doPost = (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> parameter = <span class="synStatement">event</span>.parameter
  <span class="synStatement">const</span> data = parameter.payload
  <span class="synStatement">const</span> json = JSON.parse(decodeURIComponent(data))

  <span class="synStatement">const</span> value = json.actions<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>.value
  console.log(value) <span class="synComment">// BUTTON CLICKED</span>
<span class="synIdentifier">}</span>
</pre>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Newt + Next.js + Vercel でポートフォリオサイトを作る'
description: ''
publishDate: '02/28/2023 11:55:44'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927101723.png" width="1200" height="750" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>以前の <a href="https://jtk.hatenablog.com/entry/2020/02/28/102822">WordPress + Nuxt.js（Netlify）</a> から Newt + Next.js（Vercel）の構成に変更しました。</p>

<p>GitHub: <a href="https://github.com/yuheijotaki/works-next">https://github.com/yuheijotaki/works-next</a><br/>
Vercel: <a href="https://works.yuheijotaki.com/">https://works.yuheijotaki.com/</a></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230228114822.png" width="1200" height="480" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>絞り込み機能のところで、 <code>useState()</code> を使って状態管理してみましたが、TypeScriptも相まってなかなか苦戦しました。</p>

<p>SSGのためサイトの表示速度が速いなど表に見える面は満足していますが、状態管理やPropsあたりの使いこなしはまだまだです。<br/>
また別のサイト作ったりで学んでいきたいと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '@next/font でローカルフォントを扱う'
description: ''
publishDate: '02/27/2023 10:23:22'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927101723.png" width="1200" height="750" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>ページ遷移時にローカルフォントのチラつきが気になったので対策。<br/>
結果改善されたようなのでメモ。</p>

<h2 id="コード">コード</h2>

<p><code>@next/font</code> モジュールをインストール</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install @next/font
</pre>


<p>ローカルフォントを定義。<br/>
フォントのデータは <code>pages/fonts/**</code> に配置する。</p>

<p><code>display: 'swap'</code> や <code>preload: true</code> あたりの設定は <a href="https://nextjs.org/docs/api-reference/next/font">公式のドキュメント</a> を参照した。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// _app.tsx</span>

...
<span class="synStatement">import</span> localFont <span class="synStatement">from</span> <span class="synConstant">'@next/font/local'</span>
<span class="synType">const</span> PostgroteskBookFont <span class="synStatement">=</span> localFont<span class="synStatement">(</span><span class="synIdentifier">{</span>
  src: <span class="synIdentifier">[</span>
    <span class="synIdentifier">{</span>
      path: <span class="synConstant">'./fonts/PostGrotesk-Book.woff'</span><span class="synStatement">,</span>
      weight: <span class="synConstant">'400'</span><span class="synStatement">,</span>
      style: <span class="synConstant">'normal'</span><span class="synStatement">,</span>
    <span class="synIdentifier">}</span><span class="synStatement">,</span>
    <span class="synIdentifier">{</span>
      path: <span class="synConstant">'./fonts/PostGrotesk-Book.eot'</span><span class="synStatement">,</span>
      weight: <span class="synConstant">'400'</span><span class="synStatement">,</span>
      style: <span class="synConstant">'normal'</span><span class="synStatement">,</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">]</span><span class="synStatement">,</span>
  display: <span class="synConstant">'swap'</span><span class="synStatement">,</span>
  preload: <span class="synConstant">true</span>
<span class="synIdentifier">}</span><span class="synStatement">)</span>

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synStatement">function</span> App<span class="synStatement">(</span><span class="synIdentifier">{</span> Component<span class="synStatement">,</span> pageProps <span class="synIdentifier">}</span>: AppProps<span class="synStatement">)</span> <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synStatement">(</span>
    <span class="synStatement">&lt;&gt;</span>
      <span class="synStatement">&lt;</span>style jsx <span class="synSpecial">global</span><span class="synStatement">&gt;</span><span class="synIdentifier">{</span><span class="synConstant">`</span>
<span class="synConstant">        :root {</span>
<span class="synConstant">          --postgrotesk-book: </span><span class="synSpecial">${</span>PostgroteskBookFont.style.fontFamily<span class="synSpecial">}</span><span class="synConstant">;</span>
<span class="synConstant">        }</span>
<span class="synConstant">      `</span><span class="synIdentifier">}</span><span class="synStatement">&lt;</span>/style<span class="synStatement">&gt;</span>
      <span class="synStatement">&lt;</span>Component <span class="synIdentifier">{</span>...pageProps<span class="synIdentifier">}</span> /<span class="synStatement">&gt;</span>
    <span class="synStatement">&lt;</span>/<span class="synStatement">&gt;</span>
  <span class="synStatement">)</span>
<span class="synIdentifier">}</span>
</pre>


<p>定義したCSS変数をSCSSで指定する。</p>

<pre class="code lang-sass" data-lang="sass" data-unlink>  <span class="synStatement">body</span> <span class="synIdentifier">{</span>
    <span class="synType">font-family</span>: var(--postgrotesk-<span class="synConstant">book</span>), ...;
  <span class="synIdentifier">}</span>
</pre>


<h2 id="他参考">他参考</h2>

<ul>
<li><a href="https://nextjs.org/docs/basic-features/font-optimization">Basic Features: Font Optimization | Next.js</a></li>
<li><a href="https://blog.logrocket.com/next-js-font-optimization/">Next.js font optimization: Adding custom and Google fonts - LogRocket Blog</a></li>
<li><a href="https://zenn.dev/siino/articles/b42d658af571f0">Next13新機能、@next/fontでフォント読み込みを高速化してみた</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'GASからAWS API Gateway（Lambda）へリクエスト送信、ファイルをS3へアップ'
description: ''
publishDate: '02/24/2023 17:42:44'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230224173736.jpg" width="960" height="504" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GAS → API Gatewayのリクエストのみ（レスポンスなし）でJSONファイルをS3へアップロードする。</p>

<h2 id="主な手順">主な手順</h2>

<ul>
<li>S3バケットを作成</li>
<li>権限作成

<ul>
<li>該当バケットへの <code>s3:PutObject</code> ポリシー作成</li>
<li>ロールにポリシーをつけて作成</li>
</ul>
</li>
<li>Lambda

<ul>
<li>実行ロールに先程作成したロールを付与</li>
<li>関数作成

<ul>
<li>デプロイ

<ul>
<li>テスト

<ul>
<li>Execution resultsが200で成功することを確認</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>API Gateway

<ul>
<li>リソース作成

<ul>
<li>REST APIで作成し、</li>
</ul>
</li>
<li>APIキーを有効化する場合（今回は割愛）

<ul>
<li>APIキー > アクション > APIキーの作成</li>
<li>使用量プラン > 作成</li>
<li>リソース > APIキーの必要性 をtrueにしてキー選択</li>
</ul>
</li>
<li>WAFの設定

<ul>
<li>WAFのページからIPセットを作成しておく

<ul>
<li><a href="https://docs.aws.amazon.com/ja_jp/waf/latest/developerguide/waf-ip-set-creating.html">https://docs.aws.amazon.com/ja_jp/waf/latest/developerguide/waf-ip-set-creating.html</a></li>
</ul>
</li>
<li>ステージ > 該当ステージ > 設定 > ウェブアプリケーションファイアウォール (WAF) から設定</li>
</ul>
</li>
<li>デプロイ

<ul>
<li>リソース > アクション > APIのデプロイ</li>
</ul>
</li>
</ul>
</li>
<li>GAS

<ul>
<li>JSONファイルを作成する（今回は割愛）</li>
<li><code>UrlFetchApp()</code> でリクエストを投げる</li>
</ul>
</li>
</ul>


<h2 id="コード">コード</h2>

<h3 id="ポリシー">ポリシー</h3>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
    &quot;<span class="synStatement">Version</span>&quot;: &quot;<span class="synConstant">2012-10-17</span>&quot;,
    &quot;<span class="synStatement">Statement</span>&quot;: <span class="synSpecial">[</span>
        <span class="synSpecial">{</span>
            &quot;<span class="synStatement">Sid</span>&quot;: &quot;<span class="synConstant">ExampleStmt</span>&quot;,
            &quot;<span class="synStatement">Action</span>&quot;: <span class="synSpecial">[</span>
                &quot;<span class="synConstant">s3:PutObject</span>&quot;
            <span class="synSpecial">]</span>,
            &quot;<span class="synStatement">Effect</span>&quot;: &quot;<span class="synConstant">Allow</span>&quot;,
            &quot;<span class="synStatement">Resource</span>&quot;: <span class="synSpecial">[</span>
                &quot;<span class="synConstant">arn:aws:s3:::MY-BACKET-NAME/*</span>&quot;
            <span class="synSpecial">]</span>
        <span class="synSpecial">}</span>
    <span class="synSpecial">]</span>
<span class="synSpecial">}</span>
</pre>


<h3 id="Lambda">Lambda</h3>

<p>少しハマった点として、object putする際に <code>ContentType='application/json'</code> など明示的に指定をしないと、Lambda側で自動でContentTypeが設定されてしまう。<br/>
参考： <a href="https://stackoverflow.com/questions/34550816/aws-content-type-settings-in-s3-using-boto3">python - AWS Content Type Settings in S3 Using Boto3 - Stack Overflow</a></p>

<p>lambda_function.py</p>

<pre class="code lang-python" data-lang="python" data-unlink><span class="synPreProc">import</span> json
<span class="synPreProc">import</span> boto3

s3 = boto3.resource(<span class="synConstant">'s3'</span>)
<span class="synComment"># バケット名を指定</span>
BUCKET_NAME = <span class="synConstant">&quot;MY-BACKET-NAME&quot;</span>

<span class="synStatement">def</span> <span class="synIdentifier">lambda_handler</span>(event, context):

    <span class="synComment"># request_idを取得</span>
    request_id = context.aws_request_id

    <span class="synComment"># バケット名、オブジェクト名を指定</span>
    bucket = s3.Bucket(BUCKET_NAME)
    object_key_name = <span class="synConstant">&quot;PATH/MY-JSON-NAME.json&quot;</span>

    <span class="synComment"># オブジェクトを生成</span>
    obj = bucket.Object(object_key_name)

    <span class="synComment"># 対象のバケットにjsonデータをアップロード</span>
    json_data = event
    r = obj.put(Body = json.dumps(json_data), ContentType=<span class="synConstant">'application/json'</span>)

    <span class="synStatement">return</span> {
        <span class="synConstant">'request_id'</span>: request_id,
        <span class="synConstant">'statusCode'</span>: <span class="synConstant">200</span>,
    }
</pre>


<h3 id="GAS">GAS</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> uploadS3() <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> endpoint = <span class="synConstant">'MY-API-END-POINT'</span>
  <span class="synStatement">const</span> json = JSON.stringify(<span class="synIdentifier">{</span><span class="synConstant">&quot;key1&quot;</span>: <span class="synConstant">&quot;value1&quot;</span><span class="synIdentifier">}</span>)

  <span class="synStatement">const</span> params = <span class="synIdentifier">{</span>
    <span class="synConstant">'method'</span> : <span class="synConstant">'post'</span>,
    <span class="synConstant">'contentType'</span>: <span class="synConstant">'application/json'</span>,
    <span class="synConstant">'payload'</span> : json
  <span class="synIdentifier">}</span>;
  <span class="synStatement">const</span> req = UrlFetchApp.fetch(endpoint, params)
  Logger.log(req.getContentText())
<span class="synIdentifier">}</span>
</pre>


<h2 id="その他参考">その他参考</h2>

<ul>
<li><a href="https://qiita.com/okap_ea/items/14ee1dac3f9335b34e9c">GASからAWS API Gateway(Lambda)へリクエストするときのパラメーターの送受信方法 - Qiita</a></li>
<li><a href="https://www.yamamanx.com/googleform-gas-lambda/">GoogleForm,GASからAPI Gateway, Lambdaで入力情報をDynamoDBに格納する | ヤマムギ</a></li>
<li><a href="https://non-it-engineer.com/api-gateway%E3%81%A7api%E3%82%AD%E3%83%BC%E8%AA%8D%E8%A8%BC%E3%82%92%E8%A1%8C%E3%81%86%E6%96%B9%E6%B3%95/">API GatewayでAPIキー認証を行う方法 - ITエンジニアへの転身</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'GASからSlack AppのBlock Kitでメッセージを送る & ボタンの値を受け取る'
description: ''
publishDate: '02/24/2023 17:39:14'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230224173736.jpg" width="960" height="504" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><a href="https://api.slack.com/block-kit">Block Kit</a> を使ってGAS → Slackにメッセージを送り、Slackで押下したボタンの値を受け取る。
※ WebhookではなくSlack APIを使用する場合。</p>

<p><code>attachments</code> でもリッチなメッセージは送れるが、SlackはBlock Kit Builderなどを利用した <code>blocks</code> 押しらしい。</p>

<h2 id="メッセージを送る">メッセージを送る</h2>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> sendToSlack() <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> endpoint = <span class="synConstant">'https://slack.com/api/chat.postMessage'</span>
  <span class="synStatement">const</span> token = <span class="synConstant">'MY-TOKEN'</span>
  <span class="synStatement">const</span> headers = <span class="synIdentifier">{</span>
    <span class="synConstant">'Content-Type'</span>: <span class="synConstant">'application/json'</span>,
    <span class="synConstant">'Authorization'</span>: <span class="synConstant">'Bearer '</span> + token
  <span class="synIdentifier">}</span>

  <span class="synStatement">const</span> blockKit = <span class="synIdentifier">[</span>
    <span class="synIdentifier">{</span>
      <span class="synConstant">&quot;type&quot;</span>: <span class="synConstant">&quot;section&quot;</span>,
      <span class="synConstant">&quot;text&quot;</span>: <span class="synIdentifier">{</span>
        <span class="synConstant">&quot;type&quot;</span>: <span class="synConstant">&quot;mrkdwn&quot;</span>,
        <span class="synConstant">&quot;text&quot;</span>: <span class="synConstant">&quot;Block Kitのデモです。&quot;</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span>
      <span class="synConstant">&quot;type&quot;</span>: <span class="synConstant">&quot;section&quot;</span>,
      <span class="synConstant">&quot;text&quot;</span>: <span class="synIdentifier">{</span>
        <span class="synConstant">&quot;type&quot;</span>: <span class="synConstant">&quot;mrkdwn&quot;</span>,
        <span class="synConstant">&quot;text&quot;</span>: <span class="synConstant">&quot;ボタンの説明テキストが入ります。&quot;</span>
      <span class="synIdentifier">}</span>,
      <span class="synConstant">&quot;accessory&quot;</span>: <span class="synIdentifier">{</span>
        <span class="synConstant">&quot;type&quot;</span>: <span class="synConstant">&quot;button&quot;</span>,
        <span class="synConstant">&quot;text&quot;</span>: <span class="synIdentifier">{</span>
          <span class="synConstant">&quot;type&quot;</span>: <span class="synConstant">&quot;plain_text&quot;</span>,
          <span class="synConstant">&quot;text&quot;</span>: <span class="synConstant">&quot;ボタンのラベルテキスト&quot;</span>,
          <span class="synConstant">&quot;emoji&quot;</span>: <span class="synConstant">true</span>
        <span class="synIdentifier">}</span>,
        <span class="synConstant">&quot;value&quot;</span>: <span class="synConstant">&quot;MY-VALUE-01&quot;</span>,
        <span class="synConstant">&quot;action_id&quot;</span>: <span class="synConstant">&quot;button-action&quot;</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">]</span>

  <span class="synStatement">const</span> payload = <span class="synIdentifier">{</span>
    channel: <span class="synConstant">'MY-CHANNEL-NAME'</span>,
    blocks: blockKit,
  <span class="synIdentifier">}</span>

  <span class="synStatement">const</span> params = <span class="synIdentifier">{</span>
    method : <span class="synConstant">'post'</span>,
    headers: headers,
    payload : JSON.stringify(payload),
  <span class="synIdentifier">}</span>

  UrlFetchApp.fetch(endpoint, params)
<span class="synIdentifier">}</span>
</pre>


<p>payload が <code>text</code> の場合は、 <code>token</code> を payload に格納していけたが、 <code>blocks</code> の場合にはheaderに渡してあげないと成功しなかった。</p>

<h2 id="押下したボタンの値を受け取る">押下したボタンの値を受け取る</h2>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> doPost(e) <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> parameter = e.parameter
  <span class="synStatement">const</span> data = parameter.payload
  <span class="synStatement">const</span> json = JSON.parse(decodeURIComponent(data))
  <span class="synStatement">const</span> value = json.actions<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>.value
  console.log(value) <span class="synComment">// 'MY-VALUE-01'</span>
<span class="synIdentifier">}</span>
</pre>


<p><code>doPost()</code> のGASは変更する度にデプロイし、デプロイされたGASのエンドポイントを
Slack Appページ > Features > Interactivity &amp; Shortcuts の <code>Request URL</code>
に都度設定する必要がある。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Next.js マークアップ観点の勘所'
description: ''
publishDate: '02/17/2023 22:41:15'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927101723.png" width="1200" height="750" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>フロントをNext.js（TypeScript）、ヘッドレスCMSをNewtでサイトを作ってみて、勘所とまでいくか分からないですがつまづいたところ中心のメモです。</p>

<h2 id="型">型</h2>

<h3 id="型の作成">型の作成</h3>

<p>型の作成はNewtのJSONプレビューから <a href="https://app.quicktype.io/">quicktype</a> 使ったら早かった。<br/>
ここで生成したコードを <code>types/**.ts</code> にコピペして整える。</p>

<h3 id="子要素を渡さないときの型">子要素を渡さないときの型</h3>

<p>デフォルトのESLint設定でエラーになるが、 <code>ReactNode</code> を使うようにした。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// components/children.tsx</span>
<span class="synStatement">import</span> <span class="synIdentifier">{</span> ReactNode <span class="synIdentifier">}</span> <span class="synStatement">from</span> <span class="synConstant">'react'</span>

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synStatement">function</span> Children<span class="synStatement">(</span><span class="synIdentifier">{</span> children <span class="synIdentifier">}</span>: <span class="synIdentifier">{</span>children: ReactNode<span class="synIdentifier">}</span><span class="synStatement">)</span> <span class="synIdentifier">{</span>
...
</pre>


<p>参考： <a href="https://blog.kimizuka.org/entry/2021/06/02/132327">TypeScriptでReactを開発するとき、childrenの型をどうするか考える 👦 - みかづきブログ・カスタム</a></p>

<h2 id="コンポーネント化">コンポーネント化</h2>

<h3 id="ファイル階層">ファイル階層</h3>

<p>正解というか一般的なものがつかめてないが、</p>

<pre class="code" data-lang="" data-unlink>.
├── components/
│   └── **.tsx
├── pages/
│   └── **.tsx
└── styles/
     ├── foundation/
     │   ├── variables.scss
     │   ├── mixin.scss
     │   └── global.scss
     ├── components/
     │   └── **.module.scss
     └── page/
         └── **.module.scss</pre>


<p>のような感じで、コンポーネントが多いようならさらに階層切ってあげるとかでとりあえずの管理はできそう。</p>

<h2 id="CSS">CSS</h2>

<h3 id="リセットCSSress">リセットCSS（ress）</h3>

<p>今の時代は <a href="https://www.npmjs.com/package/ress">ress</a> があついらしい。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// _app.tsx</span>
<span class="synStatement">import</span> <span class="synConstant">'ress'</span>
</pre>


<h3 id="SCSSの有効化">SCSSの有効化</h3>

<p><a href="https://www.npmjs.com/package/sass">sass</a> をインストール後、</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// next.config.js</span>
<span class="synStatement">const</span> path = require(<span class="synConstant">'path'</span>)

<span class="synStatement">const</span> nextConfig = <span class="synIdentifier">{</span>
  ...
  sassOptions: <span class="synIdentifier">{</span>
    includePaths: <span class="synIdentifier">[</span>path.join(__dirname, <span class="synConstant">'styles'</span>)<span class="synIdentifier">]</span>,
  <span class="synIdentifier">}</span>,
  ...
<span class="synIdentifier">}</span>
</pre>


<p>これで <code>**.modules.scss</code> が使えるようになる。<br/>
ファイル名に <code>modules.</code> が付いたSCSSがモジュール用と定義される。</p>

<p>参考： <a href="https://zenn.dev/link/comments/8df1021fc1463c">Next.jsにCSS Modulesを導入する</a></p>

<h3 id="共通SCSS">共通SCSS</h3>

<p><code>**.modules.scss</code> 以外のグローバルなSCSSを各PagesやComponentsでインポートしようとすると怒られる。</p>

<p>先の <code>foundation/variables.scss</code> のようにして、 <code>global.scss</code> の中でインポートする。<br/>
<code>global.scss</code> は <code>_app.tsx</code> でインポートするとすべての画面で適用される。（<code>html, body</code> への指定など）</p>

<pre class="code lang-sass" data-lang="sass" data-unlink><span class="synComment">// styles/foundation/global.scss</span>
<span class="synPreProc">@import </span><span class="synConstant">'./variables.scss'</span><span class="synPreProc">;</span>
<span class="synPreProc">@import </span><span class="synConstant">'./mixin.scss'</span><span class="synPreProc">;</span>

<span class="synStatement">body</span> <span class="synIdentifier">{</span>
  <span class="synType">background</span>: <span class="synIdentifier">$hoge</span>;
  <span class="synPreProc">@include</span> fuga <span class="synIdentifier">{</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
...
</pre>




<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// _app.tsx</span>
<span class="synStatement">import</span> <span class="synConstant">'@/styles/foundation/global.scss'</span>
</pre>


<h3 id="CSS-Modules">CSS Modules</h3>

<p>importしたSCSSに記述したクラスを参照する。<br/>
慣れないとなかなか辛い。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synStatement">import</span> styles <span class="synStatement">from</span> <span class="synConstant">'@/styles/components/Button.module.scss'</span>
...
<span class="synStatement">return</span> <span class="synStatement">(</span>
  <span class="synComment">// クラス単数（ハイフンなし）の場合</span>
  <span class="synStatement">&lt;</span>button className<span class="synStatement">=</span><span class="synIdentifier">{</span>styles.className<span class="synIdentifier">}</span><span class="synStatement">&gt;</span>ラベルテキスト<span class="synStatement">&lt;</span>/button<span class="synStatement">&gt;</span>

  <span class="synComment">// クラス単数（ハイフンあり）の場合</span>
  <span class="synStatement">&lt;</span>button className<span class="synStatement">=</span><span class="synIdentifier">{</span>styles<span class="synIdentifier">[</span><span class="synConstant">'class-name'</span><span class="synIdentifier">]}</span><span class="synStatement">&gt;</span>ラベルテキスト<span class="synStatement">&lt;</span>/button<span class="synStatement">&gt;</span>

  <span class="synComment">// クラス複数の場合</span>
  <span class="synStatement">&lt;</span>button className<span class="synStatement">=</span><span class="synIdentifier">{</span><span class="synConstant">`</span><span class="synSpecial">${</span>styles[<span class="synConstant">'className01'</span>]<span class="synSpecial">}</span><span class="synConstant"> </span><span class="synSpecial">${</span>styles[<span class="synConstant">'class-name-02'</span>]<span class="synSpecial">}</span><span class="synConstant">`</span><span class="synIdentifier">}</span><span class="synStatement">&gt;</span>ラベルテキスト<span class="synStatement">&lt;</span>/button<span class="synStatement">&gt;</span>
<span class="synStatement">)</span>
</pre>


<p>参考： <a href="https://satoshimurata.com/css-modules-sample">CSS ModulesでCSSを書く時に実務で必要になる書き方まとめ - Satoshi Murata</a></p>

<h3 id="CSS変数">CSS変数</h3>

<p>よく使うものでもないが、取ってきたデータに色情報があってCSS変数とする場合、 <a href="https://www.npmjs.com/package/styled-components">styled-components</a> をインストールして使う。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// Post.tsx</span>
<span class="synStatement">import</span> <span class="synIdentifier">{</span> createGlobalStyle <span class="synIdentifier">}</span> <span class="synStatement">from</span> <span class="synConstant">'styled-components'</span>

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synStatement">function</span> Post<span class="synStatement">(</span><span class="synIdentifier">{</span> post<span class="synStatement">,</span> posts <span class="synIdentifier">}</span>: <span class="synIdentifier">{</span> post: Post<span class="synStatement">,</span> posts: Post<span class="synIdentifier">[]</span> <span class="synIdentifier">}</span><span class="synStatement">)</span> <span class="synIdentifier">{</span>
  <span class="synType">const</span> GlobalStyles <span class="synStatement">=</span> createGlobalStyle<span class="synConstant">`</span>
<span class="synConstant">    html {</span>
<span class="synConstant">      --color-text: </span><span class="synSpecial">${</span>post.colorText<span class="synSpecial">}</span><span class="synConstant">;</span>
<span class="synConstant">    }</span>
<span class="synConstant">  `</span>
  <span class="synStatement">return</span> <span class="synStatement">(</span>
    <span class="synStatement">&lt;&gt;</span>
      <span class="synStatement">&lt;</span>GlobalStyles /<span class="synStatement">&gt;</span>
      ...
    <span class="synStatement">&lt;</span>/<span class="synStatement">&gt;</span>
  <span class="synStatement">)</span>
<span class="synIdentifier">}</span>
</pre>




<pre class="code lang-sass" data-lang="sass" data-unlink><span class="synComment">// Post.module.scss</span>
<span class="synIdentifier">$color_text</span>: var(--color-<span class="synConstant">text</span>);

<span class="synSpecial">.</span><span class="synType">title</span> <span class="synIdentifier">{</span>
  <span class="synType">color</span>: <span class="synIdentifier">$color_text</span>;
<span class="synIdentifier">}</span>
</pre>


<p>参考： <a href="https://www.joshwcomeau.com/css/css-variables-for-react-devs/">How to use CSS variables with React</a></p>

<h2 id="画像">画像</h2>

<h3 id="nextimage">next/image</h3>

<p><code>&lt;Image&gt;</code> コンポーネントで読み込むといいことがたくさんあるらしい。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synStatement">import</span> Image <span class="synStatement">from</span> <span class="synConstant">'next/image'</span>
...
<span class="synStatement">&lt;</span>Image
  src<span class="synStatement">=</span><span class="synIdentifier">{</span>post.image.src<span class="synIdentifier">}</span>
  width<span class="synStatement">=</span><span class="synIdentifier">{</span>post.image.width<span class="synIdentifier">}</span>
  height<span class="synStatement">=</span><span class="synIdentifier">{</span>post.image.height<span class="synIdentifier">}</span>
  alt<span class="synStatement">=</span><span class="synIdentifier">{</span>post.title<span class="synIdentifier">}</span>
  quality<span class="synStatement">=</span><span class="synIdentifier">{</span><span class="synConstant">70</span><span class="synIdentifier">}</span>
  priority<span class="synStatement">=</span><span class="synIdentifier">{</span><span class="synConstant">true</span><span class="synIdentifier">}</span>
  unoptimized
/<span class="synStatement">&gt;</span>
</pre>


<p>最後の <code>unoptimized</code> をしないと逆に表示がもたついた。<br/>
じゃあ意味あるの、って感じだが外部でホスティングしている画像だからかもしれない。</p>

<p>参考： <a href="https://nextjs.org/docs/api-reference/next/image">next/image | Next.js</a><br/>
参考： <a href="https://zenn.dev/unreact/articles/nextjs-next-image">【Next.js和訳】API Reference/ next/image</a></p>

<p>外部でホスティングしている画像を読み込みする際は設定にドメインの追加が必要。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// next.config.js</span>
<span class="synStatement">const</span> nextConfig = <span class="synIdentifier">{</span>
  ...
  images: <span class="synIdentifier">{</span> <span class="synComment">// next/image で外部画像を参照</span>
    domains: <span class="synIdentifier">[</span><span class="synConstant">'storage.googleapis.com'</span><span class="synIdentifier">]</span>,
  <span class="synIdentifier">}</span>,
  ...
<span class="synIdentifier">}</span>
</pre>


<h2 id="JSX">JSX</h2>

<h3 id="ifの分岐">ifの分岐</h3>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synStatement">function</span> Posts<span class="synStatement">(</span><span class="synIdentifier">{</span> posts <span class="synIdentifier">}</span>: <span class="synIdentifier">{</span> posts: Post<span class="synIdentifier">[]</span> <span class="synIdentifier">}</span><span class="synStatement">)</span> <span class="synIdentifier">{</span>
  <span class="synType">let</span> detectStatus <span class="synStatement">=</span> <span class="synStatement">(</span>post: Post<span class="synStatement">)</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
    <span class="synStatement">if</span> <span class="synStatement">(</span>post.isPublish<span class="synStatement">)</span> <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synStatement">(</span>
        <span class="synStatement">&lt;</span>p<span class="synStatement">&gt;</span>公開中の投稿<span class="synStatement">&lt;</span>/p<span class="synStatement">&gt;</span>
        ...
      <span class="synStatement">)</span>
    <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synStatement">(</span>
        <span class="synStatement">&lt;</span>p<span class="synStatement">&gt;</span>非公開の投稿<span class="synStatement">&lt;</span>/p<span class="synStatement">&gt;</span>
        ...
      <span class="synStatement">)</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
  <span class="synStatement">return</span> <span class="synStatement">(</span>
    <span class="synStatement">&lt;&gt;</span>
      <span class="synStatement">&lt;</span>ul<span class="synStatement">&gt;</span>
        <span class="synIdentifier">{</span>posts.map<span class="synStatement">((</span>post<span class="synStatement">)</span> <span class="synStatement">=&gt;</span> <span class="synIdentifier">{</span>
          <span class="synStatement">return</span> <span class="synStatement">(</span>
            <span class="synStatement">&lt;</span>li key<span class="synStatement">=</span><span class="synIdentifier">{</span>post._id<span class="synIdentifier">}</span><span class="synStatement">&gt;</span>
              <span class="synIdentifier">{</span>detectStatus<span class="synStatement">(</span>post<span class="synStatement">)</span><span class="synIdentifier">}</span>
            <span class="synStatement">&lt;</span>/li<span class="synStatement">&gt;</span>
          <span class="synStatement">)</span>
        <span class="synIdentifier">}</span><span class="synStatement">)</span><span class="synIdentifier">}</span>
      <span class="synStatement">&lt;</span>/ul<span class="synStatement">&gt;</span>
    <span class="synStatement">&lt;</span>/<span class="synStatement">&gt;</span>
  <span class="synStatement">)</span>
<span class="synIdentifier">}</span>
</pre>


<p>参考： <a href="https://chaika.hatenablog.com/entry/2019/05/16/083000">React JSX の中で if で分岐させたい - かもメモ</a></p>

<h3 id="テキストの改行">テキストの改行</h3>

<p>いろいろやり方あるようだが <a href="https://www.npmjs.com/package/react-nl2br">react-nl2br</a> を使うと簡単。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synStatement">import</span> nl2br <span class="synStatement">from</span> <span class="synConstant">'react-nl2br'</span>
...
<span class="synStatement">&lt;</span>p<span class="synStatement">&gt;</span><span class="synIdentifier">{</span>nl2br<span class="synStatement">(</span>post.description<span class="synStatement">)</span><span class="synIdentifier">}</span><span class="synStatement">&lt;</span>/p<span class="synStatement">&gt;</span>
</pre>


<h2 id="その他">その他</h2>

<h3 id="定数">定数</h3>

<p>これもいろいろやり方あるようだが next.config.js に作ってみた。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// next.config.js</span>
<span class="synStatement">const</span> nextConfig = <span class="synIdentifier">{</span>
  ...
  env: <span class="synIdentifier">{</span> <span class="synComment">// 定数</span>
    customKey: <span class="synConstant">'my-value'</span>,
  <span class="synIdentifier">}</span>,
  ...
<span class="synIdentifier">}</span>
</pre>




<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synStatement">&lt;</span>p<span class="synStatement">&gt;</span><span class="synIdentifier">{</span><span class="synSpecial">process</span>.env.customKey<span class="synIdentifier">}</span><span class="synStatement">&lt;</span>/p<span class="synStatement">&gt;</span>
</pre>


<p>参考： <a href="https://nextjs.org/docs/api-reference/next.config.js/environment-variables">next.config.js: Environment Variables | Next.js</a></p>

<h3 id="urlの末尾にスラッシュつけたい">urlの末尾にスラッシュつけたい</h3>

<p>デフォルトで [id].tsx とか動的にするとスラッシュがつかない。<br/>
これも next.config.js で設定。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// next.config.js</span>
<span class="synStatement">const</span> nextConfig = <span class="synIdentifier">{</span>
  ...
  trailingSlash: <span class="synConstant">true</span>, <span class="synComment">// URL末尾にスラッシュを追加</span>
  ...
<span class="synIdentifier">}</span>
</pre>


<p>参考： <a href="https://nextjs-ja-translation-docs.vercel.app/docs/api-reference/next.config.js/trailing-slash">next.config.js: 末尾のスラッシュ | Next.js</a></p>

<h3 id="meta設定">meta設定</h3>

<p>定数作ってちまちま <code>pages/**.tsx</code> のHeadに書いていたが、 <a href="https://zenn.dev/temasaguru/articles/641a10cd5af02a">この方法</a> の方ががよさそう。</p>

<h3 id="画面遷移時のローディング">画面遷移時のローディング</h3>

<p><a href="https://www.npmjs.com/package/nprogress">NProgress</a> はちゃちゃっと入れれる。<br/>
TypeScriptの場合は <a href="https://www.npmjs.com/package/@types/nprogress">types/nprogress</a> もインストールする。</p>

<pre class="code lang-typescript" data-lang="typescript" data-unlink><span class="synComment">// _app.tx</span>
<span class="synStatement">import</span> Router <span class="synStatement">from</span> <span class="synConstant">'next/router'</span>
<span class="synStatement">import</span> NProgress <span class="synStatement">from</span> <span class="synConstant">'nprogress'</span>
<span class="synStatement">import</span> <span class="synConstant">'nprogress/nprogress.css'</span>

Router.events.on<span class="synStatement">(</span><span class="synConstant">'routeChangeStart'</span><span class="synStatement">,</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> NProgress.start<span class="synStatement">())</span>
Router.events.on<span class="synStatement">(</span><span class="synConstant">'routeChangeComplete'</span><span class="synStatement">,</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> NProgress.done<span class="synStatement">())</span>
Router.events.on<span class="synStatement">(</span><span class="synConstant">'routeChangeError'</span><span class="synStatement">,</span> <span class="synStatement">()</span> <span class="synStatement">=&gt;</span> NProgress.done<span class="synStatement">())</span>
</pre>


<h3 id="Vercelのドメイン設定">Vercelのドメイン設定</h3>

<p>CNAMEは <code>cname.vercel-dns.com.</code> を登録する。</p>

<p>参考： <a href="https://blog.okaryo.io/20220320-vercel-deploy-with-custom-domain">Vercelでデプロイしたサイトに独自ドメインのサブドメインを設定する | okaryo.log</a></p>

<h2 id="ひとこと">ひとこと</h2>

<p>最低限マークアップするくらいだと抵抗は少なくなってきました。<br/>
値の受け渡しは雛形通りだったりストア周り触れてなかったりするので触れていきたいです。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress（ACF）とNewtの管理画面の違い'
description: ''
publishDate: '02/17/2023 21:03:09'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230217210128.jpg" width="600" height="300" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>Newtをもう少し触る機会があったので、管理画面のフィールド作成や編集画面をWordPressと比べてみました。</p>

<h2 id="フィールド作成">フィールド作成</h2>

<h3 id="WordPressACF">WordPress（ACF）</h3>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230217205927.png" width="1200" height="886" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h3 id="Newt">Newt</h3>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230217205941.png" width="1200" height="885" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h2 id="編集画面">編集画面</h2>

<h3 id="WordPressACF-1">WordPress（ACF）</h3>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230217205955.png" width="1031" height="1200" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h3 id="Newt-1">Newt</h3>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230217210002.png" width="666" height="1200" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h2 id="所感">所感</h2>

<ul>
<li>WordPressは元々ブログCMSのため、日付やカテゴリーが標準で用意されている。

<ul>
<li>Newtはブログ形式にとらわれないため、日付は日付フィールドを、カテゴリーは別モデルを作成し参照するなどで対応する。</li>
</ul>
</li>
<li>WordPress（ACF）は入力制御（バリデーション）が豊富。

<ul>
<li>Newtは例えばテキストフィールドの場合、

<ul>
<li>必須フィールド</li>
<li>一意の文字列（ユニーク）</li>
<li>最大/最小文字数

<ul>
<li>がオプションとして用意されている。ACFのようにURLなどがあるとよいと思った。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>WordPress（ACF）はカラーピッカーなどフィールド作成タイプの幅が広い。

<ul>
<li>Newtもカラーフィールドはあるが登録したパレットから選択の必要あり。その他も含め豊富なほうだと感じるがACFと比べると幅はまだ狭い。（これから使いやすくはなるはず）</li>
</ul>
</li>
<li>繰り返しフィールドはNewtでも「カスタムフィールドタイプ」を「マルチタイプ」と組み合わせることで作れるよう。

<ul>
<li><a href="https://zenn.dev/21f/articles/newt-cms-review">参考</a></li>
</ul>
</li>
<li>画像アップはメディアアップローダーがWordPress、Newtともにある。

<ul>
<li>Newtは一度に10ファイル制限（無料プランのため？）</li>
</ul>
</li>
</ul>


<p>Newtに限らないですが、ヘッドレスCMSはゼロの状態からフィールドを作るので、自由度が高いのと、逆に言うとすべて作る必要があるのだと改めて認識しました。<br/>
ただそういう煩雑さを避けたいユーザー向けに <a href="https://www.newt.so/docs/app-template#anchor-2">スターター</a> があるのかと思います。<br/>
実際に今回作ってみる際もカテゴリーの作り方が分からなかったので、スターターのBlogのモデルを参考にしました。</p>

<p>Newtの「カスタムフィールドタイプ」あたり、今回テストでしか作らなかったのでもう少し使い慣れていきたいと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Google Cloud 認定資格 受験記（CDL/ACE/PCA）'
description: ''
publishDate: '02/15/2023 18:58:31'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215185729.png" width="640" height="426" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>Google Cloud（GC）の資格を昨年末に取得したので振り返りたいと思います。</p>

<table>
<thead>
<tr>
<th>  取得日  </th>
<th>  資格名  </th>
</tr>
</thead>
<tbody>
<tr>
<td>  2022/11/24  </td>
<td>  Cloud Digital Leader（CDL）  </td>
</tr>
<tr>
<td>  2022/12/13  </td>
<td>  Associate Cloud Engineer（ACE）  </td>
</tr>
<tr>
<td>  2022/12/26  </td>
<td>  Professional Cloud Architect（PCA）  </td>
</tr>
</tbody>
</table>


<h2 id="受験理由モチベーション">受験理由・モチベーション</h2>

<p>会社で資格取得推進がされていたことがはじめのきっかけです。<br/>
Firebaseは少し触ったことがありましたが、全体像もつかめない状態だったため最初はとりあえずCDLのみ取得しようと思っていました。</p>

<h2 id="勉強方法や各試験の所感">勉強方法や各試験の所感</h2>

<h3 id="Cloud-Digital-Leader">Cloud Digital Leader</h3>

<ul>
<li>公式模擬試験</li>
<li>書籍

<ul>
<li><a href="https://www.amazon.co.jp/dp/4297123010/">図解即戦力 Google Cloudのしくみと技術がこれ1冊でしっかりわかる教科書</a></li>
</ul>
</li>
<li>問題集

<ul>
<li><a href="https://www.udemy.com/course/google-cloud-cloud-digital-leader-ja/">Udemy</a></li>
</ul>
</li>
</ul>


<p>最初はサービス名を覚えるところから、AWSと比較してどういうサービスかを書籍で埋めていきました。<br/>
AWSのプラクティショナー的な立ち位置で、Udemyもやっておくと問題なく合格できると思います。</p>

<h3 id="Associate-Cloud-Engineer">Associate Cloud Engineer</h3>

<ul>
<li>公式模擬試験</li>
<li>問題集

<ul>
<li><a href="https://techstock.jp/exam/ace/">TechStock</a></li>
</ul>
</li>
</ul>


<p>TechStockは33セットくらいあるのでそれなりに繰り返しやって臨んだのですが、かなり難しかった記憶があります。<br/>
おそらく正解率6割以下くらいじゃないかと思いますが、運良く合格した印象です。</p>

<h3 id="Professional-Cloud-Architect">Professional Cloud Architect</h3>

<ul>
<li>公式模擬試験</li>
<li>問題集

<ul>
<li><a href="https://www.udemy.com/course/google-cloud-professional-cloud-architect-i/">Udemy</a></li>
<li><a href="https://techstock.jp/exam/pca/">TechStock</a></li>
</ul>
</li>
</ul>


<p>ACEが難しかったですが、そこまでレベル感が変わらないという声も大きかったのでPCAも受けました。<br/>
確かにAWSのSAP（Solutions Architect）と比べると、同じプロフェッショナルレベルとは思えないくらい簡単に感じます。</p>

<p>最低限サービス名言われて特長分かるくらいには覚えれたので、一旦ここでGC資格は止まっています。</p>

<h2 id="オンライン試験">オンライン試験</h2>

<p>今回3回ともオンラインで受験しました。<br/>
AWS資格も何度かオンラインで受けていたため比較的スムーズにいったと思います。</p>

<p>準備や雰囲気をつかむのに下記の記事を参考にしました。<br/>
<a href="https://qiita.com/mugaki/items/eec91f1c1833fedee06b">Google Cloud Digital Leaderをオンラインで受けてみた - Qiita</a></p>

<p>担当の方によっての違い等があるかと思いますが、私の場合は次のような形でやり過ごせました。</p>

<ul>
<li>事前にアプリのインストールと生体認証（写真撮るのみ）が必要

<ul>
<li>アプリは本番の際にのみ立ち上がるようで事前インストールの際にOnVueのようなテストはしなかった</li>
</ul>
</li>
<li>開始時の待機時間が長かった

<ul>
<li>チャット開始まで15分くらい待機した</li>
</ul>
</li>
<li>オペレータさんとのやりとりはチャットのみ

<ul>
<li>英語と（翻訳された？）日本語で指示が送られるので日本語で返答でOK

<ul>
<li>休憩ないためお手洗いなど必要でしたら5分以内にお願いします → 必要ないです、など</li>
<li>試験終了時はアンケート→合否表示したら終了のため特にやりとりなし</li>
</ul>
</li>
</ul>
</li>
<li>PC、机、椅子のみの部屋で受験

<ul>
<li>AWSのときのような4方面のスマホ撮影はなし。顔写真もPCで撮影のためスマホの用意なくてOK</li>
</ul>
</li>
<li>MacBookを使用

<ul>
<li>macOS Monterey（12.6）

<ul>
<li>一部試験ガイドページにはMontereyが推奨環境が入っていなかったが問題なかった</li>
</ul>
</li>
<li>外付けカメラではなくインカメラでもOK

<ul>
<li>AWSと同様でインカメラでも部屋の周りを映すので、PCをぐるぐるさせて映す必要あり（少しやりづらいので外付けがおすすめ）</li>
</ul>
</li>
<li>マウス使用もOK</li>
</ul>
</li>
<li>自分の場合、本人確認はパスポートを使用</li>
</ul>


<h1 id="さいごに">さいごに</h1>

<p>AWSのSAPが辛すぎて資格勉強のやる気があまり起きなかったのですが、いざ初めてみるとハマってしまうものだと思いました。<br/>
GCとAWSでだいたい同じようなサービスや機能があるため、そこまで壁も高くなく精神的にも余裕持ちながらできたと感じます。</p>

<p>実際の業務でGCを触れる機会が少ないのですが、抵抗はだいぶなくなったのでできればプライベートでも触ってみようと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Newtで登録したコンテンツをNext.jsで表示する'
description: ''
publishDate: '02/15/2023 13:25:25'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927101723.png" width="1200" height="750" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><a href="https://jtk.hatenablog.com/entry/2022/09/16/000000">前回の記事</a> にて、Next.jsのHello WorldからVercelへのデプロイまでを行いました。<br/>
今回はヘッドレスCMSを用いて登録したコンテンツの表示までを行ってみます。</p>

<h1 id="構成">構成</h1>

<ul>
<li>フロントエンド：Next.js</li>
<li>ヘッドレスCMS：Newt</li>
<li>ホスティング：Vercel</li>
</ul>


<p><a href="https://www.newt.so/">Newt</a> は昨年にローンチされた国産のヘッドレスCMSで、元プレイドの方々が<a href="https://www.newt.so/blog/creating-the-next-wordpress">「次のWordPressをつくる」</a>をミッションとして開発されているサービスです。</p>

<p>競合として同じく国産の <a href="https://microcms.io/">microCMS</a> は以前に触ったことがあったため、今回は比較も兼ねてNewtを使用してみることにしました。</p>

<h1 id="やってみる">やってみる</h1>

<p>ざっくり次のような流れになります。</p>

<ul>
<li>Newtで投稿の枠を作る</li>
<li>Newtで投稿をする</li>
<li>投稿したコンテンツのAPIをたたく</li>
<li>Next.jsで表示させる</li>
<li>GitHubにプッシュする</li>
<li>自動でVercelへビルドとデプロイする</li>
</ul>


<h2 id="Newtでコンテンツ登録">Newtでコンテンツ登録</h2>

<p>まずはCMS側でコンテンツ（データ）を登録しておきます。</p>

<h3 id="アカウントを登録とスペース作成">アカウントを登録とスペース作成</h3>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215131830.png" width="800" height="488" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://app.newt.so/sign-up/">サインアップ画面</a> からアカウントを登録後、スペースを作成します。<br/>
スペースはひとつのプロジェクト単位にあたります。</p>

<h3 id="Appの追加">Appの追加</h3>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215131836.png" width="800" height="488" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span>
Appを追加します。
<img src="https://storage.googleapis.com/newt-files/ac34dcef-2b25-4985-b157-d8017049a930/app.png" alt="https://storage.googleapis.com/newt-files/ac34dcef-2b25-4985-b157-d8017049a930/app.png" />
Appは簡単に言うとモデルとビューを含んだモジュールで、ひとつのスペースにAppをいくつか登録する構成になります。<br/>
例えば「お知らせ」Appと「制作実績」Appでそれぞれ分けて作成するようなイメージで、WordPressのカスタム投稿タイプに粒度基準の考え方は近そうです。</p>

<p>Appには、</p>

<ul>
<li>テンプレートから追加</li>
<li>タイプを選択して追加</li>
<li>ファイルから追加</li>
</ul>


<p>の3種類があります。</p>

<h4 id="テンプレート"><a href="https://www.newt.so/docs/app-template">テンプレート</a></h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215131842.png" width="800" height="452" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<blockquote><p>モデル、ビュー、ダミーコンテンツが予めセットされたAppテンプレートを管理画面から1クリックでインストールできます。GitHubに公開されているスターターと組み合わせて使う事ができます。</p></blockquote>

<p>例えばブログの一覧/詳細/検索結果セットのテンプレートがあり、細かい要件がなく素早く作りたいなどの際に使えそうです。</p>

<h4 id="タイプ">タイプ</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215131847.png" width="800" height="452" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>タイプは、モデルとビューを自身で作成する際に使用します。<br/>
今回はこのタイプの「CMS App」を使用します。</p>

<h4 id="ファイル"><a href="https://www.newt.so/docs/export-and-import">ファイル</a></h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215131853.png" width="800" height="452" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<blockquote><p>Newt上で管理しているモデル、ビュー、コンテンツ、メディア等のデータを、App単位でエクスポート（JSON形式）することができます。</p></blockquote>

<p>ファイルは使い所がしっくりきていませんが、無料プランでは使用できません。</p>

<h3 id="CMS-Appのモデル作成">CMS Appのモデル作成</h3>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215131858.png" width="800" height="452" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span>
CMS Appを追加します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215131904.png" width="800" height="452" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span>
左のナビゲーションに「test-app」が追加されたので、モデルを作成します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215131909.png" width="800" height="452" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span>
今回はサンプルのため適当なモデル名で作成します。</p>

<h3 id="フィールドの作成">フィールドの作成</h3>

<p>モデルができたら、フィールドを作成します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215131915.png" width="800" height="452" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span>
画面右側にフィールドの種類がでているので、設定をしていきます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215131920.png" width="800" height="452" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span>
追加すると一覧に表示されます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215131925.png" width="800" height="452" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span>
JSONプレビューに切り替えると、JSONのサンプルが確認できます。</p>

<h3 id="コンテンツ登録">コンテンツ登録</h3>

<p>取り急ぎフィールドはここまでで、次にコンテンツを登録します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215131930.png" width="800" height="452" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span>
スペースのトップに戻って、「test-modelを追加」を押します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215131936.png" width="800" height="452" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span>
コンテンツ登録をします。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215131941.png" width="800" height="452" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span>
「保存して公開」を押すと一覧に表示されます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215131946.png" width="800" height="452" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span>
テストで3件公開してみました。</p>

<p>コンテンツ登録については以上です。</p>

<h2 id="APIを取得する">APIを取得する</h2>

<p>主に <a href="https://www.newt.so/docs/quick-start#anchor-1">クイックスタート</a> の通りに進めていきます。</p>

<h3 id="APIデータ取得">APIデータ取得</h3>

<p>エンドポイントは下記のフォーマットになるので、</p>

<pre class="code" data-lang="" data-unlink>https://{spaceUid}.cdn.newt.so/v1/{appUid}/{modelUid}</pre>


<p>今回の場合、下記に置き換えます。</p>

<pre class="code" data-lang="" data-unlink>https://next-sample.cdn.newt.so/v1/test-app/test-model</pre>


<p>APIキーの発行を「スペース設定」>「APIキー」より行います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215131951.png" width="800" height="487" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span>
Newt CDN API から「作成」します。<br/>
取得対象のカスタマイズ（○○Appのみ、など）も可能です。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215131959.png" width="800" height="502" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<pre class="code" data-lang="" data-unlink>curl -H &#34;Authorization: Bearer {YOUR_TOKEN}&#34; \
  -X GET &#34;https://next-sample.cdn.newt.so/v1/test-app/test-model&#34;</pre>


<p>フォーマットに合わせてcurlでリクエストすると登録したコンテンツのレスポンスが返ってきました。</p>

<p>API取得については以上です。</p>

<h2 id="Nextjsでコンテンツ表示">Next.jsでコンテンツ表示</h2>

<p>Next.jsを利用して登録コンテンツの表示を行います。<br/>
前回までに create-next-app コマンドでプロジェクトを作成していたので、そのリポジトリを使用します。</p>

<p>主に <a href="https://www.newt.so/docs/tutorials/get-contents-in-nextjs#anchor-4">チュートリアル</a> 通りに進めていきます。</p>

<h3 id="環境変数の設定">環境変数の設定</h3>

<p><code>.env.local</code> ファイルを作成しスペースUIDとトークンの定義をします。</p>

<pre class="code" data-lang="" data-unlink>NEWT_SPACE_UID=next-sample
NEWT_CDN_API_TOKEN=xxxxxxxxxxxxxxx</pre>


<h3 id="newt-client-js-のインストール">newt-client-js のインストール</h3>

<p>Newt用のJavaScriptクライアントSDKをインストールします。</p>

<pre class="code" data-lang="" data-unlink>npm install newt-client-js</pre>


<h3 id="APIクライアントの作成">APIクライアントの作成</h3>

<p>インストールしたSDKを使ってクライアントを作成します。</p>

<p><details><summary>▼ コードを展開する</summary><div></p>

<pre class="code js" data-lang="js" data-unlink>// lib/newt.js

import { createClient } from &#39;newt-client-js&#39;

const client = createClient({
  spaceUid: process.env.NEWT_SPACE_UID + &#39;&#39;,
  token: process.env.NEWT_CDN_API_TOKEN + &#39;&#39;,
  apiType: &#39;cdn&#39;,
})</pre>


<p></div></details></p>

<h3 id="一覧ページの作成">一覧ページの作成</h3>

<p>投稿一覧の取得メソッドを作成し、一覧を表示します。</p>

<p><details><summary>▼ コードを展開する</summary><div></p>

<pre class="code js" data-lang="js" data-unlink>// lib/newt.js

export const getArticles = async () =&gt; {
  const { items } = await client.getContents({
    appUid: &#39;test-app&#39;,
    modelUid: &#39;test-model&#39;,
    query: {
      select: [&#39;_id&#39;, &#39;title&#39;, &#39;slug&#39;, &#39;body&#39;],
    },
  })
  return items
}</pre>




<pre class="code js" data-lang="js" data-unlink>// pages/index.js

import Head from &#39;next/head&#39;
import Link from &#39;next/link&#39;
import { getArticles } from &#39;../lib/newt&#39;

export default function Home({ articles }) {
  return (
    &lt;&gt;
      &lt;Head&gt;
        &lt;title&gt;Newt・Next.jsブログ&lt;/title&gt;
        &lt;meta name=&#34;description&#34; content=&#34;NewtとNext.jsを利用したブログです&#34; /&gt;
      &lt;/Head&gt;
      &lt;main&gt;
        &lt;ul&gt;
          {articles.map((article) =&gt; {
            return (
              &lt;li key={article._id}&gt;
                &lt;Link href={`test-model/${article.slug}`}&gt;{article.title}&lt;/Link&gt;
              &lt;/li&gt;
            )
          })}
        &lt;/ul&gt;
      &lt;/main&gt;
    &lt;/&gt;
  )
}

export const getStaticProps = async () =&gt; {
  const articles = await getArticles()
  return {
    props: {
      articles,
    },
  }
}</pre>


<p></div></details></p>

<h3 id="詳細ページの作成">詳細ページの作成</h3>

<p>投稿詳細の取得メソッドを作成し、一覧を表示します。</p>

<p><details><summary>▼ コードを展開する</summary><div></p>

<pre class="code js" data-lang="js" data-unlink>// lib/newt.js

export const getArticleBySlug = async (slug) =&gt; {
  const article = await client.getFirstContent({
    appUid: &#39;test-app&#39;,
    modelUid: &#39;test-model&#39;,
    query: {
      slug,
      select: [&#39;_id&#39;, &#39;title&#39;, &#39;slug&#39;, &#39;body&#39;],
    },
  })
  return article
}</pre>




<pre class="code js" data-lang="js" data-unlink>// test-model/[slug].js

import Head from &#39;next/head&#39;
import { getArticles, getArticleBySlug } from &#39;../../lib/newt&#39;

export default function Article({ article }) {
  return (
    &lt;&gt;
      &lt;Head&gt;
        &lt;title&gt;{article.title}&lt;/title&gt;
        &lt;meta name=&#34;description&#34; content=&#34;投稿詳細ページです&#34; /&gt;
      &lt;/Head&gt;
      &lt;main&gt;
        &lt;h1&gt;{article.title}&lt;/h1&gt;
        &lt;div dangerouslySetInnerHTML={{ __html: article.body }} /&gt;
      &lt;/main&gt;
    &lt;/&gt;
  )
}

export const getStaticPaths = async () =&gt; {
  const articles = await getArticles()
  return {
    paths: articles.map((article) =&gt; ({
      params: {
        slug: article.slug,
      },
    })),
    fallback: false,
  }
}

export const getStaticProps = async ({
  params,
}) =&gt; {
  const { slug } = params
  const article = await getArticleBySlug(slug)
  return {
    props: {
      article,
    },
  }
}</pre>


<p></div></details></p>

<h2 id="Vercelへのデプロイ">Vercelへのデプロイ</h2>

<p>Next.jsのコードをVercelへデプロイします。</p>

<h3 id="環境変数の設定-1">環境変数の設定</h3>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20230215132006.png" width="800" height="487" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span>
プロジェクトトップ > 「Settings」 > 「Environment Variables」から <code>NEWT_SPACE_UID</code> と <code>NEWT_CDN_API_TOKEN</code> を設定します。</p>

<h3 id="デプロイ">デプロイ</h3>

<p>ブランチへプッシュ、デプロイして無事にサクセスになりました。<br/>
<a href="https://next-sample-yuheijotaki.vercel.app/">https://next-sample-yuheijotaki.vercel.app/</a></p>

<h1 id="感想など">感想など</h1>

<h2 id="Newt">Newt</h2>

<ul>
<li><a href="https://www.newt.so/docs/app-template#anchor-2">スターター</a> という、モデルやダミーコンテンツ、フロントエンド（Nuxt.jsやNext.js）がセットになったパッケージが便利そう。

<ul>
<li>本当にパッと作りたいときや、たたきとして作る際に使えそう。</li>
</ul>
</li>
<li>ドキュメントやSDKも用意されているので、変わった要件でなければ問題なく使えそうという所感。

<ul>
<li>下書きやフィールドの指定等は簡単なことしか試してないため、案件で使用する際はもう少し検証が必要。</li>
<li>コンテンツ画像を <a href="https://www.newt.so/docs/tutorials/upload-files-to-amazon-s3-external-storage">外部ストレージ機能</a> でS3やCloud Storageに置けるのがmicroCMSとの違いになりそうで、そこらへんも使ってみたい。</li>
<li>ググったときに見つかる記事などは現状だと断然microCMSの方が多い。</li>
</ul>
</li>
<li>microCMSも同様だが、Newtのスペース、App、モデルの概念を理解した上でCMS設計していく必要があり。

<ul>
<li>ここも実際にサンプルでもう少し手を動かしたり試してみないとつかめなさそうだと感じた。</li>
</ul>
</li>
</ul>


<h2 id="Nextjs">Next.js</h2>

<ul>
<li>詳細ページの <code>/**/[slug].js</code> など、ディレクトリで分ける方法はVueのNuxt.jsと変わりなく、これくらいのレベルだと違和感なく作れた。

<ul>
<li><a href="https://www.youtube.com/watch?v=15WLMqnkPsE&amp;list=PLwM1-TnN_NN6fUhOoZyU4iZiwhLyISopO">しまぶーのYouTube</a> にReact（Next.js）講座があったので、とりあえずコード的なところはそちらで学びたいと思います。</li>
</ul>
</li>
<li>今回はJSやSSGでの作成でしたので、機会があればTypeScriptやSSRも試してみたい。</li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】ザ・ダークパターン ユーザーの心や行動をあざむくデザイン'
description: ''
publishDate: '02/15/2023 13:09:16'
---

[CONTENTS-START]
<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/dp/4798172464?tag=hatena-22&amp;linkCode=ogi&amp;th=1&amp;psc=1" class="hatena-asin-detail-image-link" target="_blank" rel="noopener"><img src="https://m.media-amazon.com/images/I/51JM6+w8L+L._SL500_.jpg" class="hatena-asin-detail-image" alt="ザ・ダークパターン ユーザーの心や行動をあざむくデザイン" title="ザ・ダークパターン ユーザーの心や行動をあざむくデザイン"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/dp/4798172464?tag=hatena-22&amp;linkCode=ogi&amp;th=1&amp;psc=1" target="_blank" rel="noopener">ザ・ダークパターン ユーザーの心や行動をあざむくデザイン</a></p><ul class="hatena-asin-detail-meta"><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%C3%E7%CC%EE%20%CD%A4%B4%F5" class="keyword">仲野 佑希</a></li><li>翔泳社</li></ul><a href="https://www.amazon.co.jp/dp/4798172464?tag=hatena-22&amp;linkCode=ogi&amp;th=1&amp;psc=1" class="asin-detail-buy" target="_blank" rel="noopener">Amazon</a></div></div></p>

<h1 id="目次概要">目次・概要</h1>

<ul>
<li>Chapter1 ダークパターンとは何か

<ul>
<li>1.1 消費者を惑わせるWeb サイト設計</li>
<li>1.2 ダークパターンとは何か、その定義</li>
<li>1.3 ダークパターンの世界的調査</li>
<li>1.4 ダークパターンは人の選択をどれほど歪めるか</li>
<li>1.5 国内外で高まるダークパターンへの忌避感</li>
<li>1.6 企業がダークパターンを使うリスク</li>
</ul>
</li>
<li>Chapter2 意思決定の科学

<ul>
<li>2.1 その選択は、誰が決めているのか</li>
<li>2.2 意思決定に影響を与えるマイクロコピー</li>
<li>2.3 ユーザーが行動を起こす3条件</li>
<li>2.4 ファストアンドスロー 速い思考と遅い思考</li>
<li>2.5 説得 vs. 欺瞞、操作、強制</li>
</ul>
</li>
<li>Chapter3 ダークパターンの種類

<ul>
<li>3.1 スニーキング（こっそり）</li>
<li>3.2 アージェンシー（緊急性）</li>
<li>3.3 ミスディレクション（誘導）</li>
<li>3.4 ソーシャルプルーフ（社会的証明）</li>
<li>3.5 スケアシティ（希少性）</li>
<li>3.6 オブストラクション（妨害）</li>
<li>3.7 フォースドアクション（強制）</li>
</ul>
</li>
<li>Chapter4 ダークパターンを防ぐために

<ul>
<li>4.1 組織をプレッシャーから解放する</li>
<li>4.2 ユーザーをリスクから解放する</li>
</ul>
</li>
</ul>


<p>ざっくりですが、<br/>
第1章：概要としてダークパターンとはの説明や起源について<br/>
第2章：人間の意思決定について、行動経済学を中心としたデータの紹介<br/>
第3章：ダークパターンの種類と特徴<br/>
第4章：ダークパターンを防ぐためにできる取り組み<br/>
について書かれています。</p>

<p>著書は <a href="https://twitter.com/nakanoyuki_tw">仲野 佑希</a> さんで、フリーランスのUXライターをされている方です。<br/>
<a href="https://www.amazon.co.jp/dp/4798167339/">UXライティングの教科書</a> もこの方の著書です。</p>

<h2 id="Chapter1-ダークパターンとは何か">Chapter1 ダークパターンとは何か</h2>

<h3 id="消費者を惑わせるWeb-サイト設計">消費者を惑わせるWeb サイト設計</h3>

<p>筆者がショッピングサイトで「注文手続きへ」のボタンを押した際、知らずのうちに有料のプレミアム会員に登録されていたという経験談のあとに、下記のニュースが引用されています。</p>

<blockquote><p>2021年3月、日本経済新聞が「<a href="https://www.nikkei.com/article/DGXZQOGD0859R0Y1A100C2000000/">国内の主要ウェブサイトの6割でダークパターンが確認された</a>」と大きく報じました。</p></blockquote>

<p>このニュースを皮切りにメディアでもダークパターンについて取り上げられたとのことですが、サイトを作る側から見て、どこまでが「セールステクニック」で、どこからが「ダークパターン」になるか考えてみましょうという問題提起をしています。</p>

<h3 id="ダークパターンとは何かその定義">ダークパターンとは何か、その定義</h3>

<p>2010年にUXの専門家であるハリー・ブリグナルさんが <a href="https://www.deceptive.design/">darkpatterns.org</a> のなかでダークパターンの概念を初めて紹介しました。</p>

<blockquote><p>ダークパターンとは、ユーザーを騙して何かを購入させたり、登録させたりするなど、意図しないことを実行させる、Webサイトやアプリで使われているトリックのこと</p></blockquote>

<p>ユーザーを欺くインターフェース = ダークパターンは、いくつかの種類に分けられますが、どのダークパターンもユーザー（消費者）に対して次の3つを行うように設計されているといいます。</p>

<ol>
<li>より多くのお金を支払わせる</li>
<li>より多くの個人情報を提供させる</li>
<li>より多くの時間を浪費させる</li>
</ol>


<p>ユーザーの操作の失敗につながる「アンチパターン」と「ダークパターン」は区別するべきで、「ダークパターン」は意図的（あるいは無自覚）に設計がされているパターンを指します。</p>

<table>
<thead>
<tr>
<th> アンチパターン </th>
<th> ダークパターン </th>
</tr>
</thead>
<tbody>
<tr>
<td> ・正しく機能しない<br>・双方にメリットがない<br>・純粋なデザインの失敗<br>・未熟な設計<br>・基準を元に識別しやすい<br>・意図的ではない </td>
<td> ・それなりに機能する<br>・ビジネス側にのみメリットがある<br>・人間の「弱点」を突くデザイン<br>・慎重かつ巧妙<br>・識別するのが困難<br>・意図的（あるいは無自覚） </td>
</tr>
</tbody>
</table>


<h3 id="国内外で高まるダークパターンへの忌避感">国内外で高まるダークパターンへの忌避感</h3>

<p>消費者保護やプライバシーに敏感な欧米では、GDPRにおいてダークパターンに対する規制を強化しています。<br/>
国内でも忌避感は高まっており、消費者センターへの問い合わせ件数増加も顕著になっています。</p>

<p>2022年6月から定商取引法の改正法が施行されましたが、そのような背景もあり「詐欺的な定期購入商法」への対策も強化されています。</p>

<p><span style="font-size:80%;"><span style="color:#6c737b;">参考：<a href="https://www.kokusen.go.jp/news/data/n-20220609_1.html">「おトクにお試しだけ」のつもりが「定期購入」に！？－「詐欺的な定期購入商法」の規制が強化された改正特定商取引法が施行されました！</a></span></span></p>

<h3 id="企業がダークパターンを使うリスク">企業がダークパターンを使うリスク</h3>

<blockquote><p>ダークパターンを使って売上を伸ばし、数字上はビジネスが成長するように見えても、思いもよらぬところに悪影響を及ぼしている場合があります。以下に挙げる9つのリストは、ダークパターンを使うことによって生じ得る損失やリスクの一覧です。</p></blockquote>

<ol>
<li>カスタマーサポートへの負担増</li>
<li>返品率の増加</li>
<li>SNSでの悪評の拡散・ネガティブレビュー</li>
<li>顧客のライフタイムバリューの低下</li>
<li>新規顧客獲得コストの増加</li>
<li>従業員の離職率・人材採用コストの増加</li>
<li>消費者トラブルへの発展</li>
<li>法律違反・罰則リスク</li>
<li>業界全体の信頼が損なわれる</li>
</ol>


<h2 id="Chapter3-ダークパターンの種類">Chapter3 ダークパターンの種類</h2>

<h3 id="スニーキングこっそり">スニーキング（こっそり）</h3>

<p>スニーキング（こっそり）とは、ユーザーにとって重要な情報を隠したり、偽装したり、公開を遅らせたりする行為のこと。</p>

<h4 id="こっそりカゴに入れる">こっそりカゴに入れる</h4>

<p>ユーザーの同意を得ずに、勝手に商品をショッピングカートに入れられる</p>

<p><img src="https://darkpatterns.jp/wp-content/uploads/2021/05/2.%E3%81%93%E3%81%A3%E3%81%9D%E3%82%8A%E3%82%AB%E3%82%B3%E3%82%99%E3%81%AB%E5%85%A5%E3%82%8C%E3%82%8B.jpg" alt="https://darkpatterns.jp/wp-content/uploads/2021/05/2.%E3%81%93%E3%81%A3%E3%81%9D%E3%82%8A%E3%82%AB%E3%82%B3%E3%82%99%E3%81%AB%E5%85%A5%E3%82%8C%E3%82%8B.jpg" /></p>

<p><span style="font-size:80%;"><span style="color:#6c737b;"><a href="https://darkpatterns.jp/types-of-dark-pattern/sneak-into-basket/">こっそりカゴに入れる – darkpatterns.jp</a> より</span></span></p>

<h4 id="隠れたコスト">隠れたコスト</h4>

<p>商品の購入プロセスの最後で、予想外の料金が明らかになる</p>

<p><img src="https://darkpatterns.jp/wp-content/uploads/2021/05/7.%E9%9A%A0%E3%81%95%E3%82%8C%E3%81%9F%E8%B2%BB%E7%94%A8.jpg" alt="https://darkpatterns.jp/wp-content/uploads/2021/05/7.%E9%9A%A0%E3%81%95%E3%82%8C%E3%81%9F%E8%B2%BB%E7%94%A8.jpg" /></p>

<p><span style="font-size:80%;"><span style="color:#6c737b;"><a href="https://darkpatterns.jp/types-of-dark-pattern/hidden-costs/">隠されたコスト – darkpatterns.jp</a> より</span></span></p>

<h4 id="おとりの商法">おとりの商法</h4>

<p>ユーザーがインターフェースを操作して、特定のアクションを起こそうとすると、期待した結果とは別のことが起きる</p>

<p><img src="https://darkpatterns.jp/wp-content/uploads/2021/05/8.%E6%92%92%E3%81%8D%E9%A4%8C%E3%81%A8%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88-%E3%81%8A%E3%81%A8%E3%82%8A%E5%95%86%E6%B3%95.jpg" alt="https://darkpatterns.jp/wp-content/uploads/2021/05/8.%E6%92%92%E3%81%8D%E9%A4%8C%E3%81%A8%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88-%E3%81%8A%E3%81%A8%E3%82%8A%E5%95%86%E6%B3%95.jpg" /></p>

<p><span style="font-size:80%;"><span style="color:#6c737b;"><a href="https://darkpatterns.jp/types-of-dark-pattern/bait-and-switch/">おとり商法 – darkpatterns.jp</a> より</span></span><br/>
この画像の例では、ポップアップ右上の「✗」ボタンを押すと、「アップグレード」が開始されユーザーの反感を招きました。</p>

<h3 id="アージェンシー緊急性">アージェンシー（緊急性）</h3>

<h4 id="カウントダウンタイマー">カウントダウンタイマー</h4>

<p>実際には時間が0になるとループするタイマー</p>

<p><img src="https://www.asobou.co.jp/blog/wp-content/uploads/2021/04/darkpatterns001.jpg" alt="https://www.asobou.co.jp/blog/wp-content/uploads/2021/04/darkpatterns001.jpg" /></p>

<p><span style="font-size:80%;"><span style="color:#6c737b;"><a href="https://www.asobou.co.jp/blog/web/darkpatterns#">Webサイト上での行動を操られている！? ユーザー心理に付け込む「ダークパターン」とは : ビジネスとIT活用に役立つ情報</a> より</span></span></p>

<h4 id="期間限定メッセージ">期間限定メッセージ</h4>

<p>特別セールがまもなく終了することを匂わせるが、締め切りが明記されていない</p>

<p><img src="https://www.asobou.co.jp/blog/wp-content/uploads/2021/04/darkpatterns004-1.jpg" alt="https://www.asobou.co.jp/blog/wp-content/uploads/2021/04/darkpatterns004-1.jpg" /></p>

<p><span style="font-size:80%;"><span style="color:#6c737b;"><a href="https://www.asobou.co.jp/blog/web/darkpatterns#">Webサイト上での行動を操られている！? ユーザー心理に付け込む「ダークパターン」とは : ビジネスとIT活用に役立つ情報</a> より</span></span></p>

<h3 id="ミスディレクション誘導">ミスディレクション（誘導）</h3>

<h4 id="コンファームシェイミング">コンファームシェイミング</h4>

<p>ユーザーの感情に訴えかけて、オファーを断りづらくさせる</p>

<p><img src="https://darkpatterns.jp/wp-content/uploads/2021/05/9.%E7%BE%9E%E6%81%A5%E5%BF%83%E3%81%AE%E6%A4%8D%E3%81%88%E4%BB%98%E3%81%91.jpg" alt="https://darkpatterns.jp/wp-content/uploads/2021/05/9.%E7%BE%9E%E6%81%A5%E5%BF%83%E3%81%AE%E6%A4%8D%E3%81%88%E4%BB%98%E3%81%91.jpg" /></p>

<p><span style="font-size:80%;"><span style="color:#6c737b;"><a href="https://darkpatterns.jp/types-of-dark-pattern/confirmshaming/">コンファームシェイミイング（羞恥心の植え付け） – darkpatterns.jp</a> より</span></span></p>

<h4 id="視覚的干渉">視覚的干渉</h4>

<p>色、文字のサイズ、レイアウトなどの視覚的要素を利用して、ユーザーを特定の選択に誘導したり、あるいは遠ざけたりする</p>

<p><img src="https://darkpatterns.jp/wp-content/uploads/2021/05/6.%E6%B3%A8%E6%84%8F%E3%82%92%E9%80%B8%E3%82%89%E3%81%99.jpg" alt="https://darkpatterns.jp/wp-content/uploads/2021/05/6.%E6%B3%A8%E6%84%8F%E3%82%92%E9%80%B8%E3%82%89%E3%81%99.jpg" /></p>

<p><span style="font-size:80%;"><span style="color:#6c737b;"><a href="https://darkpatterns.jp/types-of-dark-pattern/misdirection/">視覚的干渉 – darkpatterns.jp</a> より</span></span></p>

<h4 id="ひっかけ質問">ひっかけ質問</h4>

<p>紛らわしい言葉を使って、ユーザーを特定の選択へ誘導する</p>

<p><img src="https://darkpatterns.jp/wp-content/uploads/2021/05/1.%E3%81%B2%E3%81%A3%E3%81%8B%E3%81%91%E8%B3%AA%E5%95%8F.jpg" alt="https://darkpatterns.jp/wp-content/uploads/2021/05/1.%E3%81%B2%E3%81%A3%E3%81%8B%E3%81%91%E8%B3%AA%E5%95%8F.jpg" /></p>

<p><span style="font-size:80%;"><span style="color:#6c737b;"><a href="https://darkpatterns.jp/types-of-dark-pattern/trick-questions/">ひっかけ質問 – darkpatterns.jp</a> より</span></span></p>

<h4 id="クリックベイト">クリックベイト</h4>

<p>Webコンテンツに扇情的なタイトルをつけて、ユーザーにリンクを踏ませる</p>

<p><img src="https://image-careerhack.en-japan.com/1565/9.jpg" alt="https://image-careerhack.en-japan.com/1565/9.jpg" /></p>

<p><span style="font-size:80%;"><span style="color:#6c737b;"><a href="https://careerhack.en-japan.com/report/detail/1565">【全15種類】その仕掛け、ユーザーの信頼を失ってない？ 僕らが知っておくべきダークパターン | キャリアハック</a> より</span></span></p>

<h3 id="ソーシャルプルーフ社会的証明">ソーシャルプルーフ（社会的証明）</h3>

<h4 id="偽のアクティビティメッセージ">偽のアクティビティメッセージ</h4>

<p>アクティビティメッセージ（「現在、○○人がこのプランを検討しています」）を捏造する</p>

<p><img src="https://www.asobou.co.jp/blog/wp-content/uploads/2021/04/darkpatterns002-1.jpg" alt="https://www.asobou.co.jp/blog/wp-content/uploads/2021/04/darkpatterns002-1.jpg" /></p>

<p><span style="font-size:80%;"><span style="color:#6c737b;"><a href="https://www.asobou.co.jp/blog/web/darkpatterns#">Webサイト上での行動を操られている！? ユーザー心理に付け込む「ダークパターン」とは : ビジネスとIT活用に役立つ情報</a> より</span></span></p>

<h4 id="出所不明のお客様の声">出所不明のお客様の声</h4>

<p>捏造したお客様の声で商品を買うように仕向ける</p>

<p><img src="https://image-careerhack.en-japan.com/1565/11.jpg" alt="https://image-careerhack.en-japan.com/1565/11.jpg" /></p>

<p><span style="font-size:80%;"><span style="color:#6c737b;"><a href="https://careerhack.en-japan.com/report/detail/1565">【全15種類】その仕掛け、ユーザーの信頼を失ってない？ 僕らが知っておくべきダークパターン | キャリアハック</a> より</span></span></p>

<h3 id="スケアシティ希少性">スケアシティ（希少性）</h3>

<h4 id="在庫僅少需要高騰メッセージ">在庫僅少＆需要高騰メッセージ</h4>

<p>豊富に在庫があるのに売り切れ間近に見せかけたり、売れ残り商品を人気があるかのように見せかける</p>

<p><img src="https://image-careerhack.en-japan.com/1565/12.jpg" alt="https://image-careerhack.en-japan.com/1565/12.jpg" /></p>

<p><span style="font-size:80%;"><span style="color:#6c737b;"><a href="https://careerhack.en-japan.com/report/detail/1565">【全15種類】その仕掛け、ユーザーの信頼を失ってない？ 僕らが知っておくべきダークパターン | キャリアハック</a> より</span></span></p>

<h3 id="オブストラクション妨害">オブストラクション（妨害）</h3>

<h4 id="ローチーモーテル">ローチーモーテル</h4>

<p>解約が著しく難しいサービス</p>

<p><img src="https://darkpatterns.jp/wp-content/uploads/2018/01/3.%E3%82%B3%E3%82%99%E3%82%AD%E3%83%95%E3%82%99%E3%83%AA%E3%83%9B%E3%82%A4%E3%83%9B%E3%82%A4.jpg" alt="https://darkpatterns.jp/wp-content/uploads/2018/01/3.%E3%82%B3%E3%82%99%E3%82%AD%E3%83%95%E3%82%99%E3%83%AA%E3%83%9B%E3%82%A4%E3%83%9B%E3%82%A4.jpg" /></p>

<p><span style="font-size:80%;"><span style="color:#6c737b;"><a href="https://darkpatterns.jp/types-of-dark-pattern/roach-motel/">ゴキブリホイホイ – darkpatterns.jp</a> より</span></span></p>

<h3 id="フォースドアクション強制">フォースドアクション（強制）</h3>

<h4 id="強制的な登録">強制的な登録</h4>

<p>ユーザーがコンテンツにアクセスしたり、サービスを利用しようとする過程で、アカウントの作成を強制する</p>

<p><img src="https://image-careerhack.en-japan.com/1565/14.jpg" alt="https://image-careerhack.en-japan.com/1565/14.jpg" /></p>

<p><span style="font-size:80%;"><span style="color:#6c737b;"><a href="https://careerhack.en-japan.com/report/detail/1565">【全15種類】その仕掛け、ユーザーの信頼を失ってない？ 僕らが知っておくべきダークパターン | キャリアハック</a> より</span></span></p>

<h4 id="強制的な継続">強制的な継続</h4>

<p>サービスの無料トライアル期間が終了した際に、事前の予告や通知をすることなく、ユーザーのクレジットカードに課金・請求を行う</p>

<p><img src="https://darkpatterns.jp/wp-content/uploads/2021/05/11.%E5%BC%B7%E5%88%B6%E7%9A%84%E3%81%AA%E7%B6%99%E7%B6%9A.jpg" alt="https://darkpatterns.jp/wp-content/uploads/2021/05/11.%E5%BC%B7%E5%88%B6%E7%9A%84%E3%81%AA%E7%B6%99%E7%B6%9A.jpg" /></p>

<p><span style="font-size:80%;"><span style="color:#6c737b;"><a href="https://darkpatterns.jp/types-of-dark-pattern/forced-continuity/">強制的な継続性 – darkpatterns.jp</a> より</span></span></p>

<h2 id="Chapter4-ダークパターンを防ぐために">Chapter4 ダークパターンを防ぐために</h2>

<h3 id="ユーザーをリスクから解放する">ユーザーをリスクから解放する</h3>

<h4 id="ユーザーの不安を取り除く">ユーザーの不安を取り除く</h4>

<p>ダークパターンがあふれるWebサイトに向かい合っているユーザーが抱える不安に対して、どのような言葉で対処していくかを説明しています。</p>

<ul>
<li>お金（支払い）に関する不安

<ul>
<li>キャンセル料はかかりません</li>
<li>クレジットカードは不要です</li>
<li>有料後続プランはいつでも解約できます</li>
<li>返品無料</li>
<li>30日間返金保証</li>
</ul>
</li>
<li>個人情報とプライバシーの不安（データセキュリティ）

<ul>
<li>スパムメールは贈りません</li>
<li>個人情報を第三者に提供することはありません</li>
<li>電話番号は配送に関してご連絡が必要な場合にのみ使用します</li>
<li>あなたの許可なくSNSに投稿することはありません</li>
<li>クレジットカード情報は安全なデータ通信によって保護されています</li>
</ul>
</li>
<li>不明瞭なプロセス（時間・手間がかかり過ぎる）

<ul>
<li>所要時間はたった3分です</li>
<li>あと2ステップで完了します</li>
<li>予約確定ボタンを押すまで請求はされません</li>
<li>あと○項目で入力完了</li>
<li>通常2営業日以内に返信します</li>
</ul>
</li>
<li>複雑な退会プロセス（引き止められる）

<ul>
<li>いつでも解約できます</li>
<li>ワンクリックで配信停止できます</li>
<li>お好きな方法で退会できます</li>
<li>解約理由を尋ねたり、引き止めたりすることはありません</li>
<li>毎月15日までにご連絡いただければ、次回の定期配送は停止します</li>
</ul>
</li>
<li>自分好みのオプションがない（融通が利かない）

<ul>
<li>これはあとで変更できます</li>
<li>柔軟なお支払い方法から選べます</li>
<li>いつでも一時休会できます</li>
<li>ご契約プランは好きなときに変更できます</li>
<li>実際に利用した分のみの料金が請求されます</li>
</ul>
</li>
</ul>


<h4 id="ユーザーの認知負荷を和らげる">ユーザーの認知負荷を和らげる</h4>

<p>コンテンツを流し読みするようなユーザーに対しても情報を正しく拾えるようにすることが重要で、その点においてUXライティングが最良のアプローチになります。<br/>
UXライティングの三原則（明快、簡潔、役に立つ）に則ってコピーを書くことで、プロダクトの使い心地とコンバージョンに大きな影響を与えられるとのことです。</p>

<h4 id="1枚のスタイルガイド">1枚のスタイルガイド</h4>

<p>組織やプロジェクトが大きくなってくると次のような問題が次第に大きくなります。</p>

<ul>
<li>サイトのあちこちで表記ゆれが起き、ユーザーが混乱する</li>
<li>サイト全体のUIデザインから一貫性が失われ、ユーザーが快適な操作をできなくなる</li>
<li>ブランドボイスとトーンが乱れ、自分たちのメッセージが意図した通りに伝わらない</li>
<li>コンテンツの表現が原因で、広告の審査落ちなどプロジェクト全体に支障をきたす（信頼性の喪失）</li>
</ul>


<p>このような事態を避け、ブランドとしての調和を取るために、デザインやライティングのルールを定めた、1枚のスタイルガイドから始めることを提案しています。<br/>
「日付の表記ルール」や「ボタンのカラーコード」など、簡単なものから始めることを勧めています。</p>

<h1 id="感想">感想</h1>

<p>ダークパターンについて、本のタイトルを見たときに言葉としては想像はできましたが、初めて触れる内容で興味深かったです。<br/>
近頃のエシカル的な流行りの側面とGDPRなど法規制とも関わる部分なので、今後広く取り扱われるテーマになりそうだと感じます。</p>

<p>内容的には、UXライターの方が書いているだけあって読みやすいのと、流れ的にも最後にUXライティングやスタイルガイドの話が上がっているのが実務をやっている人に感覚が近いと思いました。<br/>
<a href="https://careerhack.en-japan.com/report/detail/1565">キャリアハック</a> の記事の最後のほうにも取り上げていましたが、Netflix のエピソードも知らなかったのでおもしろかったです。</p>

<p>できるだけ業務内でこのような考えを取り入れていきたいですが、難しい部分（例えば「視覚的干渉」はラインが難しい）もあるので、このような考え方があるということは心に留めながら考えていきたいと思いました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AWS Amplify Studio を触ってみた'
description: ''
publishDate: '09/27/2022 12:09:31'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120907.png" width="300" height="168" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>すこし前に話題になったAmplify Studioを触ってみました。</p>

<p>ReactもFigmaも詳しくないのですが、今っぽいサービスなのと実際にどのくらい使えそうかを確認する目的です。</p>

<p>主に3つツールがそれぞれの役割で登場することになります。</p>

<ul>
<li>Amplify Studio（AWSコンソール）

<ul>
<li>データモデルの定義</li>
<li>デザインの取り込み</li>
</ul>
</li>
<li>Figma（デザインツール）

<ul>
<li>UIコンポーネントの作成</li>
</ul>
</li>
<li>ターミナル、VSCodeなど

<ul>
<li>Amplify CLIから生成コードの取り込み</li>
<li>Reactアプリケーションの開発作業</li>
</ul>
</li>
</ul>


<p>行う順序の縛りはそこまでないので、得意なものや気が向いたものから始められると思います。</p>

<p>※ 動作環境：macOS Monterey / npm v8.19.2 / Node.js v14.17.0</p>

<h1 id="Amplify-StudioでStudio起動">Amplify StudioでStudio起動</h1>

<p>AWSコンソールからAmplifyに移動し、Amplify Studioの「使用を開始する」からスタート。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120104.png" width="800" height="470" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>アプリケーション名は適当に「amplify-studio-sample」に。
2,3分でセットアップが完了する。</p>

<p>「Studioを起動する」をクリック。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120110.png" width="800" height="377" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>Studioが起動される。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120119.png" width="800" height="477" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h1 id="Figmaのデザインをインポート">Figmaのデザインをインポート</h1>

<p>Figmaのデザインを取り込む設定をする。<br />
サイドバーの Design > UI Library を選択。「Get started」をクリック。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120127.png" width="800" height="444" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>今回はFigmaのデザインをゼロから作るのではなくテンプレートを使う。<br />
「①Use our Figma templateto get started」をクリック。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120134.png" width="800" height="477" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>ブラウザでFigmaのページが開くので「コピーを取得する」をクリック。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120142.png" width="800" height="477" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>Figmaにファイルがコピーされる。<br />
右上の「共有」から「リンクをコピーする」をクリック。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220928092457.png" width="800" height="444" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>先ほどのAmplify Studioのページに戻ってコピーしたリンクを②に貼り付け。<br />
アップデート（初回の場合はすべての変更）を取り込むかどうかを聞かれる。<br />
「Accept all changes」で取り込み。<br />
以上でAmplify StudioとFigmaの連携が完了。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120156.png" width="800" height="444" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h1 id="データモデルの作成">データモデルの作成</h1>

<p>Set up > Data の「Add model」からデータモデルの追加を行う。<br />
今回は書籍のタイトル、書影、金額を表示できるようなものにする。<br />
編集が終わったら「Save and Deploy」をクリック。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120204.png" width="800" height="444" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>データモデルのデプロイは5分ほどで完了。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120212.png" width="800" height="444" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>Manage > Content のからサンプルデータを作成しておく。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120219.png" width="800" height="444" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h1 id="データモデルとコンポーネントとの紐付け">データモデルとコンポーネントとの紐付け</h1>

<p>次にコンポーネントとの紐付けをする。<br />
UI Libraryから「TallCard」を選択して「Configure」をクリック。</p>

<p>「Component properties」で登録したデータモデルを選択。<br />
「Child properties」では項目を紐付け設定する。<br />
紐付けしていくと、先ほど登録していたサンプルデータのプレビューが見れる。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120226.png" width="800" height="444" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>次にコレクション（作成したコンポーネントのかたまり）を作成する。<br />
TallCardコンポーネントの作成画面から「Create collection」を選択し「TallCardCollection」の名前で登録。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120234.png" width="800" height="444" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>今回は横並びのリストとしてレイアウトを決定してコレクションの作成を完了。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120243.png" width="800" height="477" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h1 id="Amplify-CLIのインストールとユーザー作成">Amplify CLIのインストールとユーザー作成</h1>

<p>Amplify CLIのインストールをする。</p>

<pre class="code" data-lang="" data-unlink>$ npm install -g @aws-amplify/cli</pre>


<p><a href="https://github.com/aws-amplify/amplify-cli/issues/10127">command not found: amplify</a> で詰まったが、ターミナル再起動で次へ進めた。</p>

<p>AWSアカウント設定をする。</p>

<pre class="code" data-lang="" data-unlink>$ amplify configure</pre>


<p>ブラウザが起動してログイン画面が表示される。<br />
ブラウザでログイン後、ターミナルに戻ってエンターを押す。</p>

<pre class="code" data-lang="" data-unlink>Follow these steps to set up access to your AWS account:

Sign in to your AWS administrator account:
https://console.aws.amazon.com/
Press Enter to continue</pre>


<p>リージョン選択、IAMユーザー名の設定をする。</p>

<pre class="code" data-lang="" data-unlink>Specify the AWS Region
? region:  ap-northeast-1
Specify the username of the new IAM user:
? user name:  amplify-xxxxx</pre>


<p>ブラウザが起動してIAMユーザー作成画面が表示される。<br />
デフォルトで権限選択されているので、そのままユーザー作成する。<br />
ブラウザで作成後、ターミナルに戻ってエンターを押す。</p>

<pre class="code" data-lang="" data-unlink>Complete the user creation using the AWS console
https://console.aws.amazon.com/iam/home?region=ap-northeast-1#/...
Press Enter to continue</pre>


<p>ターミナルで作成したIAMユーザーの accessKeyId と secretAccessKey を入力する。<br />
Profile名は <code>amplify-xxxxx</code> などに設定して完了。</p>

<pre class="code" data-lang="" data-unlink>Enter the access key of the newly created user:
? accessKeyId:  ********************
? secretAccessKey:  ****************************************
This would update/create the AWS Profile in your local machine
? Profile Name: amplify-xxxxx

Successfully set up the new user.</pre>


<h1 id="ローカルでReactアプリの作成">ローカルでReactアプリの作成</h1>

<p>必要なUIモジュールをインストールしておく。</p>

<pre class="code" data-lang="" data-unlink>$ npm i @aws-amplify/ui-react</pre>


<p>Reactアプリの作成をする。</p>

<pre class="code" data-lang="" data-unlink>$ cd /[PATH]/amplify-studio-sample
$ npx create-react-app .</pre>


<p><code>y</code> ですすむ。</p>

<pre class="code" data-lang="" data-unlink>Need to install the following packages:
  create-react-app@5.0.1
Ok to proceed? (y)</pre>


<p>アプリ作成完了。</p>

<pre class="code" data-lang="" data-unlink>Success! Created amplify-studio-sample at /[PATH]/amplify-studio-sample</pre>


<p><code>$npm start</code> でReactアプリの作成できたことを確認。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120250.png" width="800" height="444" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h1 id="ローカルのReactアプリで動作確認">ローカルのReactアプリで動作確認</h1>

<p>Amplify Studioで作成したコンポーネントコレクションの「Get component code」をクリック。</p>

<p>初回は「Initial project setup」の内容を行う。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120257.png" width="800" height="444" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>src/index.js の中身を下記に変更。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> React from <span class="synConstant">'react'</span>;
<span class="synStatement">import</span> ReactDOM from <span class="synConstant">'react-dom/client'</span>;
<span class="synStatement">import</span> <span class="synConstant">'./index.css'</span>;
<span class="synStatement">import</span> App from <span class="synConstant">'./App'</span>;
<span class="synStatement">import</span> reportWebVitals from <span class="synConstant">'./reportWebVitals'</span>;

<span class="synStatement">import</span> Amplify from <span class="synConstant">'aws-amplify'</span>;
<span class="synStatement">import</span> <span class="synConstant">&quot;@aws-amplify/ui-react/styles.css&quot;</span>;
<span class="synStatement">import</span> <span class="synIdentifier">{</span> AmplifyProvider <span class="synIdentifier">}</span> from <span class="synConstant">&quot;@aws-amplify/ui-react&quot;</span>;
<span class="synStatement">import</span> awsconfig from <span class="synConstant">'./aws-exports'</span>;
Amplify.configure(awsconfig);

<span class="synStatement">const</span> root = ReactDOM.createRoot(<span class="synStatement">document</span>.getElementById(<span class="synConstant">'root'</span>));
root.render(
  &lt;React.StrictMode&gt;
    &lt;AmplifyProvider&gt;
      &lt;App /&gt;
    &lt;/AmplifyProvider&gt;
  &lt;/React.StrictMode&gt;
);

<span class="synComment">// If you want to start measuring performance in your app, pass a function</span>
<span class="synComment">// to log results (for example: reportWebVitals(console.log))</span>
<span class="synComment">// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals</span>
reportWebVitals();
</pre>


<p>次に「Use this component」の内容を行う。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120304.png" width="800" height="444" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>コンポーネントをローカルにプルする。</p>

<pre class="code" data-lang="" data-unlink>$ amplify pull --appId XXXXX --envName staging</pre>


<p>ブラウザで認証を開いたりするがOKのまますすめる。<br />
その後コマンドで質問受けるがこれも基本はそのまま。一部のコマンド設定を変更した。</p>

<pre class="code" data-lang="" data-unlink>...
? Choose your default editor: Visual Studio Code
? Choose the type of app that you&#39;re building javascript
? What javascript framework are you using react
? Source Directory Path:  src
? Distribution Directory Path: build
? Build Command:  npm run build
? Start Command: npm start
...</pre>


<p>src/App.js を下記に変更する。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> <span class="synIdentifier">{</span> TallCardCollection <span class="synIdentifier">}</span> from <span class="synConstant">'./ui-components'</span>;

<span class="synIdentifier">function</span> App() <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> (
    &lt;div className=<span class="synConstant">&quot;App&quot;</span>&gt;
      &lt;TallCardCollection /&gt;
    &lt;/div&gt;
  );
<span class="synIdentifier">}</span>

<span class="synStatement">export</span> <span class="synStatement">default</span> App;
</pre>


<p>コマンドで <code>$ npm start</code> とすると、ブラウザでAmplify Studioと同様のコンテンツが表示された。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120311.png" width="800" height="444" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h1 id="その他">その他</h1>

<p><code>/src/ui-components/</code> 配下にFigmaで作成したコンポーネントのコードが配置されている。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120319.png" width="800" height="527" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>データモデルの型は <code>/src/models/schema.js</code> に定義されている。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120327.png" width="800" height="481" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>データはDynamoDBに格納されている。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927120334.png" width="800" height="444" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h1 id="まとめ">まとめ</h1>

<h3 id="良さそうなこと">良さそうなこと</h3>

<ul>
<li>デザインや開発の不得意がある人でもひとりで簡単な認証含めたサービスが作れてしまいそう</li>
</ul>


<h3 id="イマイチそうなこと">イマイチそうなこと</h3>

<ul>
<li>Amplify Studioでコレクション作成する作業でビジュアルの再現ができなそう（他のやり方があるのかも？）</li>
<li>Amplifyの生成コードとローカル（Git）のコードとごちゃごちゃになりそう</li>
<li>どこまでFigmaのコンポーネントとするか、すべてをコンポーネントにするかなど、設計や認識合わせが事前により必要になってきそう</li>
</ul>


<p>エンジニアとデザイナーが相互に理解があれば大きな問題にはならないかもですが、実際のプロジェクトのフローを想定すると、ここ誰がやるのかなみたいなフローがちょくちょくあったので、現実的に難しくなりそうな点もありました。</p>

<p>正直勝手に自分の期待値が高かっただけなのか、もう少しいい感じのサービスなのかなと想像してしまっていました。<br />
ただ流行り系のサービスではあるので、アップデートは追っていこうかなと思いました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'CSS Container Queries を理解する'
description: ''
publishDate: '09/22/2022 00:00:00'
---

[CONTENTS-START]
<h1 id="Container-Queriesとは">Container Queriesとは</h1>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Container_Queries">MDN</a>によると、「コンテナのサイズを見て、コンテナ内のスペースに応じてレイアウトを調整できる」とあります。</p>

<p>この「コンテナ」とは、基本的にスタイル指定を行うコンポーネントの親要素になります。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927115240.png" width="1200" height="543" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>例えば、サイドバーとメインエリアで構成要素が同等のアイテムコンポーネントAがある場合、</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927115252.png" width="1200" height="888" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<ul>
<li>サイドバーのアイテムコンポーネントAにとっては、<strong>サイドバーのエリア</strong></li>
<li>メインエリアのアイテムコンポーネントAにとっては、<strong>メインのコンテンツエリア</strong></li>
</ul>


<p>のそれぞれが「コンテナ」に当たり、<strong>コンテナのサイズに応じてコンポーネントAのCSSの指定を書き分けることが可能</strong> になります。</p>

<p>Container Queriesは現時点でFireFox以外のモダンブラウザでサポートされています。<br />
FireFoxにも対応が必要な実際のプロジェクトでは、<a href="https://github.com/GoogleChromeLabs/container-query-polyfill">Polyfill</a> を使用することが現実的な手法となりそうです。</p>

<h1 id="Media-Queriesとの違い">Media Queriesとの違い</h1>

<p>従来より使用しているMedia Queriesとの違いはどこにあるのでしょうか。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927115311.png" width="1200" height="888" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>Media Queriesでは、基本的に画面のビューポート幅に応じてレイアウトを切り替えていました。<br />
対してContainer Queriesは、コンテナ幅に基づいてコンポーネントのCSSを切り替えることができるため、これまでより柔軟かつシンプルにCSSを記述できるケースがでてきそうです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927115333.png" width="1200" height="1156" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>この例のように構成要素が同等のコンポーネントが1画面内にある場合でも、画面のビューポート幅ではなく、それぞれのコンテナ幅から指定したスタイル適用ができます。</p>

<p>これまでは個別にコンポーネントに対してクラスを追加付与するなどの必要がありましたが、Container Queriesを使えばCSSのみでコンポーネントのスタイルを分岐させることができます。</p>

<h1 id="使ってみる">使ってみる</h1>

<p>これまで例で見てきたサイドバーとメインのエリアで、構成要素が同等のアイテムコンポーネントを簡素な形で書いてみました。</p>

<iframe height="300.09783935546875" style="width: 100%;" scrolling="no" title="codepen-container-queries-01" src="https://codepen.io/iret-jotaki/embed/oNdwRpd?default-tab=" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/iret-jotaki/pen/oNdwRpd">
  codepen-container-queries-01</a> by iret-jotaki (<a href="https://codepen.io/iret-jotaki">@iret-jotaki</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>


<p>全体を <code>div.wrapper</code> で囲い <code>div.sidebar</code> と <code>div.main</code> を左右に配置します。<br />
それぞれのアイテムリストは <code>ul.list</code> 、コンポーネントは <code>li.item</code> としてマークアップしています。</p>

<p>CSSのContainer Queriesの部分は下記のようになっています。</p>

<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">.list</span> <span class="synIdentifier">{</span>
  container-type: <span class="synConstant">inline</span>-size;
<span class="synIdentifier">}</span>

@container(min-width:400px) <span class="synIdentifier">{</span>
  <span class="synIdentifier">.item</span> <span class="synIdentifier">{</span>
    <span class="synType">display</span>: <span class="synConstant">flex</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>親のコンテナとなる <code>ul.list</code> に <code>container-type: inline-size</code> を指定します。</p>

<p>デフォルトはテキストが縦並び（ <code>display: block</code> ）になり、コンテナが400px以上の際はテキストが横並びになるようにするため、 <code>@container(min-width:400px) {}</code> の中に <code>li.item</code> が <code>display: flex</code> するように記述します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927115353.gif" width="600" height="313" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>画面をリサイズしながら確認すると分かりやすいですが、ビューポート幅ではなくコンテナ幅によってスタイルの変更が適用されていることが確認できました。</p>

<h1 id="まとめ">まとめ</h1>

<p>Container Queriesに初めて触れてみましたが、今後のレスポンシブデザインに対するアプローチに幅を持たせてくれるような機能だと感じました。</p>

<p>コンテナ幅でCSS指定ができることで、自由度が増す反面、デザインやコーディングのルールもより重要になってきます。<br />
FigmaのAuto Layoutなどデザインツールで出来ることとの親和性も高そうですが、同時にデザイナーとの連携も密に行っていく必要がありそうです。</p>

<p>なかなかメリットのみ取り入れるのは難しいですが、特にコンポーネント指向の開発などではPolyfillを用いて取り入れることを検討してみても面白いと思いました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: ':modal 擬似クラスを試してみた'
description: ''
publishDate: '09/21/2022 00:00:00'
---

[CONTENTS-START]
<h1 id="modal-擬似クラスとは"><code>:modal</code> 擬似クラスとは</h1>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/:modal#usage_notes">MDN</a>では、下記のように説明されています。</p>

<ol>
<li>JavaScriptの <code>showModal()</code> によって表示される <code>dialog</code> 要素</li>
<li>JavaScriptの <code>requestFullscreen()</code> によって表示されるフルスクリーン要素</li>
</ol>


<p>先日リリースされたChrome 105、Edge 105でSafari、Firefoxを含めた主要ブラウザにサポートされる擬似クラスとなりました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927114525.png" width="1200" height="303" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size:80%;">※ <a href="https://caniuse.com/mdn-css_selectors_modal">Can I use</a> より</span></p>

<p>この記事では、業務で使用する頻度が高そうな 1. の <strong><code>showModal()</code> によって表示される <code>dialog</code> 要素</strong> について検証を行いました。</p>

<h1 id="基本的な使い方">基本的な使い方</h1>

<p>まず、シンプルに「モーダルを開く」ボタンを押すとモーダルが表示され、「モーダルを閉じる」ボタンを押すとモーダルが非表示になる例を見ていきます。</p>

<iframe height="300" style="width: 100%;" scrolling="no" title="codepen-modal-01" src="https://codepen.io/iret-jotaki/embed/BaxZLgM?default-tab=result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/iret-jotaki/pen/BaxZLgM">
  codepen-modal-01</a> by iret-jotaki (<a href="https://codepen.io/iret-jotaki">@iret-jotaki</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>


<p>簡単な例にはなりますが、3点のポイントを解説します。</p>

<h2 id="モーダルは-dialog-要素でマークアップする">モーダルは <code>&lt;dialog&gt;</code> 要素でマークアップする</h2>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>dialog<span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- モーダルの中身です --&gt;</span>
<span class="synIdentifier">&lt;/</span>dialog<span class="synIdentifier">&gt;</span>
</pre>


<p>ボタン押下後に表示されるモーダルは <code>&lt;dialog&gt;</code> 要素でマークアップをします。</p>

<h2 id="modal-のスタイル調整"><code>:modal</code> のスタイル調整</h2>

<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">#my-modal</span>:modal <span class="synIdentifier">{</span>
  <span class="synComment">/* モーダルのボックス自体 */</span>
<span class="synIdentifier">}</span>
<span class="synIdentifier">#my-modal</span>::backdrop <span class="synIdentifier">{</span>
  <span class="synComment">/* モーダル後ろの背景レイヤー */</span>
<span class="synIdentifier">}</span>
</pre>


<p>CSSセレクターとしての <code>:modal</code> は、モーダルのボックス自体、<code>::backdrop</code> はモーダル背景レイヤーのスタイル指定となります。</p>

<h2 id="JavaScriptで表示制御を行う">JavaScriptで表示制御を行う</h2>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> modal = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#my-modal'</span>)
<span class="synStatement">const</span> buttonOpen = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#button-open'</span>)
<span class="synStatement">const</span> buttonClose = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#button-close'</span>)

buttonOpen.addEventListener(<span class="synConstant">'click'</span>, () =&gt; <span class="synIdentifier">{</span>
  modal.showModal() <span class="synComment">// 表示</span>
<span class="synIdentifier">}</span>)

buttonClose.addEventListener(<span class="synConstant">'click'</span>, () =&gt; <span class="synIdentifier">{</span>
  modal.close() <span class="synComment">// 非表示</span>
<span class="synIdentifier">}</span>)
</pre>


<p>それぞれのボタンをクリックして、<code>showModal()</code> で表示、<code>close()</code> で非表示するようにします。</p>

<h1 id="デザイン観点での検証">デザイン観点での検証</h1>

<p>過去にモーダルのデザイン調整では次のような悩みがあったため、<code>:modal</code> 擬似クラスでは解消できるのかを検証します。</p>

<ul>
<li>モーダルと背景レイヤーのスタイル調整</li>
<li>コンテンツ量が多い場合のボックス位置</li>
<li>フェードイン・アウトで表示・非表示</li>
<li>スマートフォンでの背景コンテンツがスクロールしてしまう件</li>
</ul>


<p>※ 本記事執筆時点の Mac/Chrome、もしくは iOS/Safari の環境で再現した内容になります。</p>

<h2 id="モーダルと背景レイヤーのスタイル調整">モーダルと背景レイヤーのスタイル調整</h2>

<p>まずはモーダルと背景レイヤーに対してどのようなCSS指定が必要になりそうかを見ていきます。</p>

<iframe height="300" style="width: 100%;" scrolling="no" title="codepen-modal-02" src="https://codepen.io/iret-jotaki/embed/WNJOGVq?default-tab=result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/iret-jotaki/pen/WNJOGVq">
  codepen-modal-02</a> by iret-jotaki (<a href="https://codepen.io/iret-jotaki">@iret-jotaki</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>




<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">#my-modal</span>:modal <span class="synIdentifier">{</span>
  <span class="synType">padding</span>: <span class="synConstant">2.5rem</span>;
  <span class="synType">border</span>: <span class="synConstant">0</span>;
  <span class="synType">border-radius</span>: .<span class="synConstant">5rem</span>;
  <span class="synType">background-color</span>: <span class="synConstant">#fff</span>;
  <span class="synType">box-shadow</span>: <span class="synConstant">0</span> <span class="synConstant">0</span> <span class="synConstant">2rem</span> .<span class="synConstant">5rem</span> <span class="synIdentifier">rgba(</span><span class="synConstant">0</span><span class="synIdentifier">,</span><span class="synConstant">0</span><span class="synIdentifier">,</span><span class="synConstant">0</span><span class="synIdentifier">,</span><span class="synConstant">.1</span><span class="synIdentifier">)</span>;
<span class="synIdentifier">}</span>
<span class="synIdentifier">#my-modal</span>::backdrop <span class="synIdentifier">{</span>
  <span class="synType">background-color</span>: <span class="synIdentifier">rgba(</span><span class="synConstant">255</span><span class="synIdentifier">,</span><span class="synConstant">255</span><span class="synIdentifier">,</span><span class="synConstant">255</span><span class="synIdentifier">,</span><span class="synConstant">.8</span><span class="synIdentifier">)</span>;
<span class="synIdentifier">}</span>

<span class="synComment">/* 以降省略 */</span>
</pre>


<p>CodePenでのサンプル通り、モーダルのボックス自体へ枠線、角丸、背景色、影の指定が再現されました。<br />
背景についても <code>::backdrop</code> 疑似要素がブラウザのデフォルトで固定配置（ <code>position: fixed</code> ）となっているため、背景色の指定のみで基本は問題なさそうです。</p>

<p>重なり順についても <code>z-index</code> を必要とせずに意図通りにレイヤーが構成されています。</p>

<h2 id="コンテンツ量が多い場合のボックス位置">コンテンツ量が多い場合のボックス位置</h2>

<p>モーダルの中のコンテンツ量が多い場合、どのような挙動になるでしょうか。</p>

<iframe height="300" style="width: 100%;" scrolling="no" title="codepen-modal-03" src="https://codepen.io/iret-jotaki/embed/zYjzomR?default-tab=result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/iret-jotaki/pen/zYjzomR">
  codepen-modal-03</a> by iret-jotaki (<a href="https://codepen.io/iret-jotaki">@iret-jotaki</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>


<p>ブラウザのデフォルトCSSでは、モーダルはコンテンツ量に応じてなりゆきで可変しますが、例えば CodePenのサンプルのように <code>max-width</code> と <code>max-height</code> を</p>

<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">#my-modal</span>:modal <span class="synIdentifier">{</span>
  <span class="synType">max-width</span>: <span class="synConstant">50</span>vw;
  <span class="synType">max-height</span>: <span class="synConstant">50</span>vh;
<span class="synIdentifier">}</span>
</pre>


<p>と指定すると、モーダル外のマージンを保ち中央に配置されつつ、全体の横幅や高さが短い場合でもスクロールバーが表示されました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927114622.gif" width="600" height="270" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>ただ細かい点にはなりますが、モーダルコンテンツ内がスクロールするサイズで表示された際、スクロール位置が最下部に来てしまうようなので、気にすべきポイントではある印象です。</p>

<h2 id="フェードインアウトで表示非表示">フェードイン・アウトで表示・非表示</h2>

<p>デフォルトCSSの場合は瞬時にモーダルが表示・非表示されるため、フェードイン・アウトのアニメーションを付与できるかを検証します。</p>

<p>結果、<code>:modal</code> に対しては <code>transition</code> を指定した場合もアニメーションは動作しませんでした。</p>

<p>そこで多少強引な部分もありますが、JavaScriptでクラスを付け替えしつつ、<code>@keyframes</code> を用いたCSSアニメーションでフェードイン・アウトを実現することはできました。</p>

<iframe height="300" style="width: 100%;" scrolling="no" title="codepen-modal-04" src="https://codepen.io/iret-jotaki/embed/GRdENYV?default-tab=result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/iret-jotaki/pen/GRdENYV">
  codepen-modal-04</a> by iret-jotaki (<a href="https://codepen.io/iret-jotaki">@iret-jotaki</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>


<p>参考記事： <a href="https://codepen.io/geckotang/post/dialog-with-animation">dialog with animation by geckotang on CodePen</a></p>

<h2 id="スマートフォンでの背景コンテンツがスクロールしてしまう件">スマートフォンでの背景コンテンツがスクロールしてしまう件</h2>

<p>スマートフォン端末で意図せず背景コンテンツがスクロールしてしまう現象は <code>:modal</code> 擬似クラスでは解消できるのでしょうか。</p>

<iframe height="300" style="width: 100%;" scrolling="no" title="Untitled" src="https://codepen.io/iret-jotaki/embed/wvjedmv?default-tab=result" frameborder="no" loading="lazy" allowtransparency="true" allowfullscreen="true">
  See the Pen <a href="https://codepen.io/iret-jotaki/pen/wvjedmv">
  Untitled</a> by iret-jotaki (<a href="https://codepen.io/iret-jotaki">@iret-jotaki</a>)
  on <a href="https://codepen.io">CodePen</a>.
</iframe>


<p>コンテンツのエリアの高さを取った上でモーダルを表示したところ、背景コンテンツもスクロールしてしまいCSSでは解消できませんでした。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927114553.gif" width="320" height="521" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>現時点ではモーダル表示時にbody要素を <code>position: fixed</code> にするなど従来通りJavaScriptを含めた対策が必要そうです。</p>

<h1 id="まとめ">まとめ</h1>

<p><code>:modal</code> 擬似クラスについて、主にデザインの観点から再現できること、できないことを検証しました。</p>

<p>個人的には思っていたよりも再現できることも多く、JavaScriptでの指定なしでEscキーでモーダルを閉じることができるなど他のメリットも多い印象でした。</p>

<p>記事内で再現が難しかった事項とのトレードオフにはなりますが、実際のプロジェクトでも要件によって使用の検討をして良いのかなという感触を得られました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Next.js の Hello World から Vercel へのデプロイまで'
description: ''
publishDate: '09/16/2022 00:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927101723.png" width="1200" height="750" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>React のフレームワーク Next.js の Hello World から Vercel へのデプロイまでを試してみます。</p>

<p>基本的には <a href="https://nextjs.org/docs/getting-started">公式のチュートリアル</a> を参考にしています。</p>

<h2 id="やってみた">やってみた</h2>

<h3 id="環境作成">環境作成</h3>

<p>create-next-app コマンドでプロジェクト作成します。</p>

<pre class="code bash" data-lang="bash" data-unlink>$ npx create-next-app@latest

...

✨  Done in 9.20s.
Initialized a git repository.
Success! Created next-sample at /PATH/next-sample</pre>


<p>この場合、聞かれるのはプロジェクト名のみです。</p>

<p>※ オプションで <code>--ts</code> をつけると TypeScript を使ったプロジェクトになる。<br />
※ ESLint のインストールエラーで Node.js を v14.13.0 → v14.17.0に変更した。</p>

<h3 id="ローカルサーバー起動">ローカルサーバー起動</h3>

<p>ローカル環境の起動は</p>

<pre class="code bash" data-lang="bash" data-unlink>$ cd /PATH/next-sample
$ npm run dev</pre>


<p>のみ。</p>

<pre class="code bash" data-lang="bash" data-unlink>ready - started server on 0.0.0.0:3000, url: http://localhost:3000</pre>


<p>と出たらブラウザで <a href="http://localhost:3000">http://localhost:3000</a> にアクセスして表示が確認できます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927101851.png" width="1200" height="854" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h3 id="ファイルの確認">ファイルの確認</h3>

<p>create-next-app のみ行って生成されるのは最小構成の模様。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927101902.png" width="484" height="884" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>特にコンポーネントに分かれているわけではなく、 pages/index.js にトップページの記述がまとめてあります。</p>

<p>ルートにある next.config.js が設定ファイルで色々なプラグインを追加したりするとのこと。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927101913.png" width="1008" height="414" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h3 id="Vercelへのデプロイ">Vercelへのデプロイ</h3>

<p>まずは GitHub のリポジトリにプッシュ。</p>

<pre class="code bash" data-lang="bash" data-unlink>$ git remote add origin https://github.com/USERNAME/next-sample.git
$ git push -u origin main</pre>


<p>次に <a href="https://vercel.com/new">Vercelのサイト</a> でアカウント作成します。</p>

<p>アカウント作成してログイン後の画面、「Import Git Repository」から、先ほどプッシュしたGitHubのリポジトリを選択します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927101922.png" width="1200" height="465" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>リポジトリ選択後、デプロイ設定画面に移ります。<br />
今回はデフォルトで問題ないのですが、ビルドコマンドや出力ディレクトリ、環境変数の設定ができそうです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927101933.png" width="1200" height="803" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>最下部に表示される「DEPLOY」ボタンをクリックすると・・・</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927101945.png" width="1200" height="806" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>ビルドやデプロイの進捗状況が表示された後、デプロイ成功の画面が表示されました。<br />
ダッシュボードの「DOMAINS」のURLにアクセスするとサーバーにデプロイされていました。</p>

<h2 id="感想">感想</h2>

<ul>
<li>Vue.js や Nuxt.js のCLIでのセットアップとあまり変わらずに立ち上げまではできました。</li>
<li>Vercel でのデプロイはGitHubで管理しているプロジェクトはチュートリアルの通りのため簡単でした。</li>
<li>ローカルのホットリロードやVercel上での画面表示が引くほど早かったです。</li>
<li>Zero Config を謳っているとおり、必要最低限のファイルや機能から始めれそうだなと思いました。</li>
</ul>


<p>中身のほうはマークアップするのに困らないくらいはこれからポチポチいじってみたいなと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'コンポーネント設計との上手な付き合い方'
description: ''
publishDate: '09/15/2022 00:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927101316.png" width="1200" height="464" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size:80%;"><span style="color:#878d93;"><a href="https://jp.vuejs.org/v2/guide/components.html">コンポーネントの基本 — Vue.js</a></span></span> より</p>

<h2 id="これはなにか">これはなにか</h2>

<p>Webアプリケーション開発において、コンポーネント指向で開発を行うことがあります。</p>

<p>「コンポーネント指向で開発」とは、例えばこのインターフェース上のパーツ要素（=コンポーネント）は汎用的に使用するため</p>

<ul>
<li>どういう名称で</li>
<li>どういう粒度で</li>
<li>どういうバリエーションを用意して</li>
</ul>


<p>他のページでも使いまわせるようにしましょう、といった具合で設計する工程を指します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927100750.png" width="1200" height="546" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size:80%;"><span style="color:#878d93;">DocBaseのButtonコンポーネントの例。</span></span><span style="font-size:80%;"><span style="color:#878d93;"><a href="https://kray.jp/blog/figma-atomic-design/">Figma + Atomic Design でUIコンポーネント集を作りました – KRAY Inc.</a> より</span></span></p>

<p>これまで何度かコンポーネント設計の工程を挟むプロジェクトにマークアップエンジニアとして携わってきましたが、反省点も多く、未だに正解も見えない部分もあるのが実情です。</p>

<p>記事のタイトルでは偉そうに書いていますが、今回はデザイナーやエンジニアを含んだチームがコンポーネント設計をどのように行えば良さそうかを考えたいと思います。</p>

<p><span style="font-size:80%;">※ ビジュアルデザイン、ディレクトリ構成、コードの実例等は本記事に含まれません。</span><br/>
<span style="font-size:80%;">※ 主にデザイン（情報設計、UI作成、マークアップ）から見た視点での内容です。</span><br/>
<span style="font-size:80%;">※ 基本的にはWebサイトではなくWebアプリケーション開発を想定しています。</span></p>

<h2 id="コンポーネント設計のメリットと失敗例">コンポーネント設計のメリットと失敗例</h2>

<h3 id="メリット">メリット</h3>

<p>まずはコンポーネント設計を適切に行えると、どのような利点があるのでしょうか。</p>

<ol>
<li>画面のUIデザインが統一できる</li>
<li>責務毎に分割したコードを作れる</li>
</ol>


<p>1.はデザイン職種、2.はエンジニア職種が感じることが多い利点になるかと思います。<br/>
後ほど触れますが、これは同時に職種によって気にする視点が異なるということも言えそうです。</p>

<p>これらの利点によって、ユーザーや開発組織にとってはどのようなメリットが生まれるのかを考えます。<br/>
より分かりやすくするため抽象的な表現になりますが、</p>

<ul>
<li>一貫性</li>
<li>再利用性</li>
<li>拡張性</li>
<li>保守性</li>
</ul>


<p>を高めることができるというのが私の現時点での所感です。</p>

<p><span style="font-size:80%;">※ 話が広がるため深堀りしませんが、この議題で私の考えにしっくりくる記事は  <a href="https://note.com/seyanote/n/ne8b5a0576f5e#8fbfd657-7659-46c6-ab48-3c6047efc4bd">デザインシステムの目的を考える｜seya｜note</a> になります。</span></p>

<h3 id="ありがちな失敗例">ありがちな失敗例</h3>

<p>逆にそんなコンポーネント設計の難しさを理解するために、ありがちな失敗例について見ていきます。</p>

<p>「コンポーネント設計 失敗」などでググると、下記の記事などが出てきました。</p>

<ul>
<li><a href="https://note.com/tabelog_frontend/n/n07b4077f5cf3">Atomic Designをやめてディレクトリ構造を見直した話｜食べログ フロントエンドエンジニアブログ｜note</a></li>
<li><a href="https://qiita.com/okauend/items/39ddf1814904b047ad4b">AtomicDesignでAtomsの設計を失敗した話 - Qiita</a></li>
<li><a href="https://logmi.jp/tech/articles/321961">Atomic Designが刺さる現場・刺さらない現場 - ログミーTech</a></li>
<li><a href="https://tech.itandi.co.jp/entry/react-give-up-atomic-design">Reactを使ったコンポーネント指向設計で、Atomic Designをやめようとしている話 - ITANDI Engineer Blog</a></li>
</ul>


<p>どの記事もAtomic Designというメジャーな設計思想（フレームワーク）を使用した際の失敗体験になっています。<br/>
これはAtomic Designを使用すること自体が難易度が高いという点もあると思いますが、共通して書かれている設計の難しさとしては下記にまとめることができそうでした。</p>

<ul>
<li>人によってルールや粒度がバラバラになりがち

<ul>
<li>だんだんとこんなに細かく分割する必要あるの？という疑問が生まれてくる</li>
</ul>
</li>
<li>運用が辛くなりがち

<ul>
<li>エンジニアの意見を取り入れられていない場合など

<ul>
<li>ひとつのコンポーネントや状態追加の作業がこんなに大変になってしまった、など</li>
</ul>
</li>
</ul>
</li>
<li>最終的にコンポーネント設計を何のためにやっているのか分からなくなりがち

<ul>
<li>誰が幸せになるためにやり始めたんだっけ、など</li>
</ul>
</li>
</ul>


<p>これらは私も過去に感じたことがあった内容ですね。<br/>
以降ではこの問題をより解決に導くために、どのように取り組むべきかを考えていきます。</p>

<h2 id="私の考え">私の考え</h2>

<p>コンポーネント設計は、こうして取り組んだほうが良さそうという現時点での私の意見は次の3点です。</p>

<ul>
<li><strong>関わる人全員で、粒度・分割の方法の認識を合わせておく</strong></li>
<li><strong>どのような設計思想にも独自ルールは発生するものと考える</strong></li>
<li><strong>デザイン観点よりも開発観点での正解を優先する</strong></li>
</ul>


<h3 id="関わる人全員で粒度分割の方法の認識を合わせておく">関わる人全員で、粒度・分割の方法の認識を合わせておく</h3>

<p>コンポーネントの分割について最も難しさを感じるのは、人によって解釈の違いが多いことだと思います。</p>

<p>この齟齬を埋めるにはデザイナーとエンジニアの共同作業が必要で、どちらかが関わるだけだと難しい印象です。<br/>
ただ、アウトプットの最初の出処がワイヤーフレームやビジュアルの場合が多いため、コンポーネント設計の話題についてデザインが主導になることが多くなるのは必然だと思います。</p>

<p>また、なるべく初期の段階でエンジニアも含めたコンポーネント設計についてのディスカッションをできると良さそうです。後述しますが、最終的に開発側の観点を採用したほうがメリットが多いため、後戻りをできる限りしないで済むようにするためです。<br/>
情報設計やワイヤーフレームを引いた後の段階で、コンポーネントの粒度をどうするか、の話し合いが始まるケースがありますが、できる限りその前の工程の段階で、どのような分割方針で行うのかを皆でディスカッションできると、エンジニア側が設計思想の理解やディレクトリの想定等もしやすいのではないかと思います。</p>

<p><span style="font-size:80%;">※ <a href="https://zenn.dev/offers/articles/20220523-component-design-best-practice">【React/Vue.js】コンポーネント設計の（個人的）ベストプラクティス | Offers Tech Blog</a> の「設計はデザイナーと協業で行う」項と同じ意見。</span></p>

<h3 id="どのような設計思想にも独自ルールは発生するものと考える">どのような設計思想にも独自ルールは発生するものと考える</h3>

<p>いざコンポーネント指向で作っていきます、という段階で、</p>

<ul>
<li>完全にオリジナルのルールを作るのか</li>
<li>何かしらの設計思想やフレームワークに沿って作るのか</li>
</ul>


<p>大きく分けて2パターンになるかと思います。<br/>
この判断は、そのプロジェクトの内容や使用するフロントエンドのフレームワーク、メンバーの経験などによって決めることが多いでしょう。</p>

<p>「何かしらの設計思想やフレームワークに沿って作る」場合、Atomic Designは最も聞き馴染みのあるコンポーネントの設計思想と思いますが、先ほども紹介したとおり、上手く出来ずに断念した、ということもチラホラみかけます。</p>

<p>理由はそれぞれのプロジェクト内容に起因すると思いますが、Atomic Designという設計思想を使うという決定以外にも、本来は考慮したり決めたりする事が多いから、というのが多い印象です。</p>

<p>例えば、下記などが「本来は考慮したり決めたりする事」にあたるかと思います。</p>

<ul>
<li>Atoms と Molecules の境界はどこか</li>
<li>画面に出てくるすべてのパーツをコンポーネントとするか</li>
<li>コンポーネントの各状態の種類はどれだけ必要か</li>
<li>StoryBookなどでカタログ化をするのか</li>
<li>開発側の観点で不都合がないか

<ul>
<li>ディレクトリ構成をどうするのか</li>
<li>データ・状態の持ち方</li>
<li>Propsの流れ</li>
<li>テストのしやすさ</li>
</ul>
</li>
</ul>


<p>要は、Atomic Designを使っているから上手く開発が進められる保証はありません。<br/>
デザイン観点では破綻せずになんとか使えても、特に開発観点を考慮するとプロジェクト内での独自でルール決めが必要なことが多い印象です。<br/>
この「プロジェクト内での独自でルール決め」がそもそも発生しない想定で時間を取っていなかったり、チームのコミュニケーションが取りづらい状況で発生してしまうと段々と混沌として来てしまうなということを経験した記憶があります。</p>

<h3 id="デザイン観点よりも開発観点での正解を優先する">デザイン観点よりも開発観点での正解を優先する</h3>

<p>デザイン側は、見た目的にコンポーネントをどのくらいの粒度や分割で、という意見を持ちがちですが、開発側の苦労（工数）を気にせず言っていることも多く、基本的には開発の意見を優先するほうが良いと思います。</p>

<p>特に先ほど「本来は考慮したり決めたりする事」の中の</p>

<blockquote><ul>
<li>開発側の観点で不都合がないか

<ul>
<li>ディレクトリ構成をどうするのか</li>
<li>データ・状態の持ち方</li>
<li>Propsの流れ</li>
<li>テストのしやすさ</li>
</ul>
</li>
</ul>
</blockquote>

<p>など、なかなかデザイン観点だけでは考慮できないことが多いです。</p>

<p><span style="font-size:80%;">※ <a href="https://tech.kitchhike.com/entry/2018/09/30/230000">デザイナーとエンジニアで考えるReactコンポーネント設計 - KitchHike Tech Blog</a> の「"デザインとしての構造性" と "コードとしての再利用性"」項と同じ意見。</span></p>

<p>また、分割の粒度を小さくしすぎないことも重要と感じます。<br/>
コンポーネントを追加する際のコーディング時の作業として、下記などが挙げられますが、</p>

<ul>
<li>コンポーネント生成</li>
<li>HTMLとCSS書く</li>
<li>型を追加</li>
<li>親にコンポーネントを追加（値の受け渡し）</li>
<li>単体テストの追加</li>
<li>StoryBookの追加</li>
</ul>


<p>粒度が小さいとどうしてもバケツリレー的な処理が増えてきてしまうため、見通しやすさとのバランス次第で気持ち大きめを最小粒度とすることもアリかと思います。</p>

<h2 id="さいごに">さいごに</h2>

<p>この記事を書くにあたり、他のブログ等も読みながら過去の経験を思い返しましたが、プロジェクトごとにも正解は異なると思うので難しい話題だなと感じました。</p>

<p>なかなか端切れの悪い記事にはなってしまいましたが、現状での考えはまとめることができて良かったと思います。<br/>
これからは特にデザインとエンジニアの境界の人がどのように立ち振る舞うべきか等、継続して考察していき以降のプロジェクトでも活かせればと感じました。</p>

<h2 id="参考関連リンク">参考・関連リンク</h2>

<ul>
<li><a href="https://speakerdeck.com/uggds/modeling-awareness-changed-by-front-end-engineers">フロントエンドエンジニアが変える現場のモデリング意識/modeling-awareness-changed-by-front-end-engineers - Speaker Deck</a></li>
<li><a href="https://www.slideshare.net/techblogyahoo/ss-138353621">コンポーネントの分割に関する考察</a></li>
<li><a href="https://yuheiy.com/2022-06-11-css-components">CSS設計における、すべてがコンポーネントであるという誤謬</a></li>
<li><a href="https://qiita.com/seya/items/8814e905693f00cdade2">フロントエンドのコンポーネント設計に立ち向かう - Qiita</a></li>
<li><a href="https://tech.kitchhike.com/entry/2018/09/30/230000">デザイナーとエンジニアで考えるReactコンポーネント設計 - KitchHike Tech Blog</a></li>
<li><a href="https://zenn.dev/offers/articles/20220523-component-design-best-practice">【React/Vue.js】コンポーネント設計の（個人的）ベストプラクティス | Offers Tech Blog</a></li>
<li><a href="https://blog.rhyztech.net/atomic_component_design/">Atomic Component Design | Rhyztech blog</a></li>
<li><a href="https://ponday.hatenablog.com/entry/2018/12/05/085100">『Atomic Design周りについての私見』の補足 - ponday blog</a></li>
<li><a href="https://techblog.aumo.co.jp/articles/307">「Atomic Design × Nuxt.js」で破綻しにくい実装を目指すために決めたコンポーネント毎の責務 | aumo Tech Blog – アウモテックブログ</a></li>
<li><a href="https://mya-ake.com/posts/component-design-based-on-atomic-design/">Atomic Design ベースのコンポーネント設計を考えてみた - mya-ake com</a></li>
<li><a href="https://techtekt.persol-career.co.jp/entry/tech/210520_01">Salaries.jpのフロントエンド実装について ～ componentsとAtomic Design編 ～ - techtekt</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Nuxt.jsでAPI通信なしの静的ファイルを書き出す'
description: ''
publishDate: '04/03/2022 00:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190924093802.png" width="240" height="240" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>Nuxt.jsのComposition API、<code>useStatic()</code> メソッドを使用して、API通信しない静的ファイルを書き出しできるかを試してみました。</p>

<h1 id="経緯">経緯</h1>

<p>開発案件でマークアップを担当する際に、開発リポジトリとは別にデザインチーム用のGitを作成するケースは多いです。<br />
静的なHTML/CSSファイルを開発チームの方に組み込んでいただくフローになりますが、確認含めたコミュニケーションが煩雑になることもあったりします。</p>

<p>そのため開発のリポジトリ上で直接マークアップできたほうがいいとは考えているのですが、ディレクターやデザイナーに向けたデザイン内部のレビューが、プロジェクトによっては開発環境にデプロイされてからでないとできない、などいくつかの懸念点もあります。</p>

<p>そこで、ICSさんの <a href="https://ics.media/entry/210120/">API通信一切なし！Nuxt Composition APIで作る完全静的サイト</a> という記事を読んで、API通信しない静的書き出しが可能であればS3にアップすれば前述の懸念は少なくなるかなと思い、この記事を参考に開発環境下ではAPI通信するサイトを静的書き出しできるのかを試してみました。</p>

<h1 id="どうやるのか">どうやるのか</h1>

<h2 id="Composition-APIと非同期処理メソッド">Composition APIと非同期処理メソッド</h2>

<p>前述のNuxt.jsのComposition API、<code>useStatic()</code> メソッドを使用します。</p>

<p>まずComposition APIや <code>useStatic()</code> が何かをざっくり解釈すると、</p>

<ul>
<li>Vue2まで使われていたのはOptions API

<ul>
<li>Nuxt.jsでも2.13から <code>asyncData()</code>, <code>fetch()</code> メソッドを使用してデータ静的化ができた</li>
</ul>
</li>
<li>Vue3からComposition APIが推奨化された

<ul>
<li>Nuxt.js用に拡張されたNuxt Composition APIとしてリリースされた</li>
<li>Nuxt Composition APIには <code>asyncData()</code>, <code>fetch()</code> メソッド が用意されていない</li>
<li>代わりに <code>useAsync()</code>, <code>useFetch()</code>, <code>useStatic()</code> の3つの非同期処理メソッドが用意されている</li>
</ul>
</li>
</ul>


<p>という流れになるようです。</p>

<h2 id="Nuxt-Composition-APIでの静的化">Nuxt Composition APIでの静的化</h2>

<p><code>useAsync()</code>, <code>useFetch()</code>, <code>useStatic()</code> の3つの非同期処理メソッドの違いについても前述のICSさんの記事が詳しいですが、ざっくり解釈すると</p>

<ul>
<li>完全静的化で使用できるのは <code>useFetch()</code>, <code>useStatic()</code>

<ul>
<li><code>useFetch()</code> メソッドはSmart Prefetch機能がある

<ul>
<li>Smart Prefetch機能とは、ブラウザの表示領域に <code>&lt;nuxt-link&gt;</code> を見つけたらそのリンクをブラウザが先読みする機能</li>
</ul>
</li>
<li><code>useStatic()</code> は2回目以降、初回でファクトリー関数を実行したAPI通信内容を保存する

<ul>
<li>ファクトリー関数とは、オブジェクトを返す関数のこと</li>
<li>サーバーサイドレンダリングにおいては、2回目以降のアクセスでは <code>useStatic()</code> の方が高速に表示できる</li>
</ul>
</li>
</ul>
</li>
</ul>


<p>ということで、分かるような分からないような、メリット・デメリットはありますよ、ということだと解釈します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927095728.png" width="1200" height="675" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size: 80%"><span style="color: #8b939c"><a href="https://ics.media/entry/210120/">API通信一切なし！Nuxt Composition APIで作る完全静的サイト</a> より</span></span></p>

<p>今回はSSRのサイトを静的化したほうが目的に沿いそうなため <code>useStatic()</code> を使用します。</p>

<h1 id="やってみる">やってみる</h1>

<h2 id="プロジェクト作成">プロジェクト作成</h2>

<p>create nuxt app でつくります。<br />
Node.jsのバージョン：14.13.0</p>

<pre class="code bash" data-lang="bash" data-unlink>$ yarn create nuxt-app nuxt-composition-api-sample</pre>


<p>Nuxt Composition API と Axios を使うためにパッケージをインストール。</p>

<pre class="code bash" data-lang="bash" data-unlink>$ yarn add @nuxtjs/composition-api @nuxtjs/axios</pre>


<p>nuxt.config.js にそれぞれ追加。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
  buildModules: <span class="synIdentifier">[</span>
    ...
    <span class="synConstant">'@nuxtjs/composition-api/module'</span> <span class="synComment">// 追加</span>
  <span class="synIdentifier">]</span>,

  modules: <span class="synIdentifier">[</span>
    ...
    <span class="synConstant">&quot;@nuxtjs/axios&quot;</span> <span class="synComment">// 追加</span>
  <span class="synIdentifier">]</span>,
...
</pre>


<p>同じく nuxt.config.js にgenerate時のターゲットを設定。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  target: <span class="synConstant">'static'</span>
</pre>


<p>ローカル起動してみる。</p>

<pre class="code bash" data-lang="bash" data-unlink>$ yarn dev</pre>


<h2 id="useStatic-を使う"><code>useStatic()</code> を使う</h2>

<p>components/Tutorial.vue を適当にリネームします。<br />
今回は記事通り <a href="https://api.nuxtjs.dev/mountains">Nuxt.jsの山のAPI</a> を使うので、Mountains.vue としました。</p>

<p>CSS除いたコードは下記のような形になります。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;ul&gt;
    &lt;li v-<span class="synStatement">for</span>=<span class="synConstant">&quot;item in data&quot;</span> :key=<span class="synConstant">&quot;item.title&quot;</span>&gt;
      &lt;h1&gt;<span class="synIdentifier">{{</span> item.title <span class="synIdentifier">}}</span>&lt;/h1&gt;
      ... 省略
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">import</span> <span class="synIdentifier">{</span>
  defineComponent,
  useStatic,
  computed,
<span class="synIdentifier">}</span> from <span class="synConstant">'@nuxtjs/composition-api'</span>

<span class="synStatement">import</span> axios from <span class="synConstant">'axios'</span>

<span class="synStatement">export</span> <span class="synStatement">default</span> defineComponent(<span class="synIdentifier">{</span>
  setup() <span class="synIdentifier">{</span>
    <span class="synStatement">const</span> param = computed(() =&gt; <span class="synConstant">'hoge'</span>)
    <span class="synStatement">const</span> keyBase = <span class="synConstant">'fuga'</span>
    <span class="synStatement">const</span> data = useStatic(
      async (param, key) =&gt; <span class="synIdentifier">{</span>
        console.log(param) <span class="synComment">// hoge</span>
        console.log(key) <span class="synComment">// fuga-hoge</span>
        <span class="synStatement">const</span> mountains = await axios.get(<span class="synConstant">`https://api.nuxtjs.dev/mountains`</span>)
        <span class="synStatement">return</span> mountains.data
      <span class="synIdentifier">}</span>,
      param,
      keyBase
    )
    <span class="synStatement">return</span> <span class="synIdentifier">{</span> data <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>)
&lt;/script&gt;
</pre>


<p><code>useStatic()</code> の引数は下記のようになり、動的ルーティング（_id.vueなど）もできるようになっています。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927095754.png" width="1200" height="675" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size: 80%"><span style="color: #8b939c"><a href="https://ics.media/entry/210120/">API通信一切なし！Nuxt Composition APIで作る完全静的サイト</a> より</span></span></p>

<p>できた画面は下記</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927095807.png" width="1200" height="795" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h2 id="generate-する">generate する</h2>

<p>yarn generate をしてみると、dist/ に 山のデータが入った fuga-hoge.json があります。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927095819.png" width="1000" height="444" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>dist/ のHTMLをブラウザで見てみるとこのJSONを読みに行ってくれています。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927095829.png" width="717" height="451" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h1 id="所感など">所感など</h1>

<p>記事通り試す程度はできましたが、動的ルーティングで試したり、もう少し <code>useFetch()</code> との違いなどを理解できればもっと使えるような感じがします。<br />
単純にAPIから何かを表示するだけのサイトは問題ないですが、DBやセッションが絡むサイトは難しそうな感じもしますね。。</p>

<p>Composition APIは機能が多く書き方もOptions APIとは結構変わっていたので、また触っていきたいなと思いました。</p>

<h2 id="ほか参考にしたサイト">ほか参考にしたサイト</h2>

<ul>
<li><a href="https://composition-api.nuxtjs.org/">Nuxt Composition API（公式）</a></li>
<li><a href="https://zenn.dev/fjsh/scraps/19ab4063547184">Vue の Composition API の基本機能をまとめる | Zenn</a></li>
<li><a href="https://zenn.dev/matsu7089/scraps/fe34f312cc4ff9">Nuxt Composition API 備忘録 | Zenn</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【イベント】うちのデザインレビューは“ここ”を見る'
description: ''
publishDate: '03/31/2022 00:00:00'
---

[CONTENTS-START]
<p><a href="https://vivivit.connpass.com/event/239353/"><strong>「うちのデザインレビューは“ここ”を見る【デザナレVol.11】」</strong></a> を視聴したのでメモと感想を残しておきます。</p>

<h1 id="目次概要">目次・概要</h1>

<p>ポートフォリオを介したマッチングプラットフォーム <a href="https://www.vivivit.com/">ViViViT</a> を提供している <a href="https://vivivit.co.jp/">株式会社ビビビット</a> さん主催の勉強会。<br />
今回は3名の方が各社どのような目的や手法でデザインレビューを行っているかの発表。<br />
個人の発表というよりは、ViViViT のサービスの宣伝感が強いイベントでしたが、特に興味のあった <a href="https://speakerdeck.com/kgsi/smarthr">SmartHR 小木曽さんの登壇</a> についてまとめます。</p>

<ul>
<li>前段</li>
<li>「デザイン」とは本来何を指す？</li>
<li>デザインレビューとは？</li>
<li>品質とは何か？</li>
<li>SmartHRのデザイン組織紹介</li>
<li>開発組織での事例</li>
</ul>


<h1 id="ポイント">ポイント</h1>

<h2 id="前段">前段</h2>

<p>ソフトウェアの「デザイン」の重要性と期待値はますます高くなっている。</p>

<ul>
<li>不確実性が増した世界で、優れたアウトプットは1人の知見だけで生み出せるものではない</li>
<li>UIデザインだけに限らず、すべての「デザイン」という行為に当てはまる</li>
</ul>


<p><strong>「デザインレビュー」とは、設計品質を高め、理想を現実に近づける手段のひとつ</strong></p>

<h2 id="デザインとは本来何を指す">「デザイン」とは本来何を指す？</h2>

<p><a href="https://ja.wikipedia.org/wiki/%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3">Wikipedia</a> より</p>

<blockquote><p><strong>審美性を根源にもつ計画的行為の全般を指すものである。</strong></p></blockquote>

<p>つまりデザインの本来的な意味は、「UIやモックデザイン」ではなく <strong>「設計や計画全般」</strong> を指している解釈</p>

<h2 id="デザインレビューとは">デザインレビューとは？</h2>

<ul>
<li><a href="https://www.sophia-it.com/content/%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC">デザインレビューとは (Design Review, DR)： - IT用語辞典バイナリ</a></li>
<li><a href="https://e-words.jp/w/%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC.html">デザインレビュー（DR）とは - IT用語辞典 e-Words</a></li>
</ul>


<p>このふたつの難解そうだが、今回は <strong>「成果物の『品質』について精査・検証する儀式」</strong> と解釈</p>

<h2 id="品質とは何か">品質とは何か？</h2>

<ul>
<li><strong>「品質」という言葉は本来主観的なもの</strong></li>
<li>評価するステークホルダーによって、品質の定義はさまざま</li>
<li>1人のデザイナーの「主観」で出した答えが、客観としての「品質」の良さを証明することは難しい</li>
</ul>


<p>よって、</p>

<ul>
<li><strong>プロダクトは誰のために作っているのか？</strong></li>
<li><strong>ユーザーにとっての価値とは何か？</strong></li>
</ul>


<p>これらの疑問を開発者（プロダクトデザイナー含め）は常に持つべき、とのこと。</p>

<p><strong>ユーザーの目線にたち、常に主観を疑い、検証していくため</strong> にデザインレビューが必要となる。</p>

<h2 id="SmartHRのデザイン組織紹介">SmartHRのデザイン組織紹介</h2>

<ul>
<li>コミュニケーションデザイングループ

<ul>
<li>マーケティング・ブランディングなどコミュニケーションのデザイン</li>
</ul>
</li>
<li>プロダクトデザイングループ

<ul>
<li>プロダクトに関わるデザイン

<ul>
<li>発表者の小木曽さんはここに所属</li>
</ul>
</li>
</ul>
</li>
<li>プログレッシブデザイングループ

<ul>
<li>ユーザーの多様性に関わるデザイン

<ul>
<li>関連： <a href="https://note.com/oujimiyahara/n/n44e25b43f814">「やさしさ」禁止！SmartHRのプログレッシブデザイン宣言</a></li>
</ul>
</li>
</ul>
</li>
</ul>


<h2 id="開発組織での事例">開発組織での事例</h2>

<p>主なレビューイベントとしては、</p>

<ol>
<li>スプリントレビュー

<ul>
<li>一般的なスクラムイベントのスプリントレビューと同じ（開発PBI含む全てが対象）</li>
</ul>
</li>
<li>プロデザレビュー会

<ul>
<li>プロダクトデザイングループが中心になって行う</li>
<li>対象はSmartHRのプロダクトデザインに関わる成果物全て</li>
</ul>
</li>
</ol>


<p>の2つがあり、今回はプロデザレビュー会にフォーカスする。</p>

<h2 id="プロデザレビュー会とは">プロデザレビュー会とは</h2>

<h3 id="目的">目的</h3>

<ul>
<li>プロダクトを中心とした成果物の精度・品質の向上</li>
<li>各プロダクトの状況把握と情報共有</li>
<li>ナレッジや判断材料のシェアと標準化</li>
</ul>


<h3 id="レビュー対象">レビュー対象</h3>

<ul>
<li>UIデザイン</li>
<li>オブジェクト、UML図</li>
<li>ユビキタス言語</li>
<li>組織の方針・体制</li>
</ul>


<h3 id="実施内容">実施内容</h3>

<ul>
<li>完全オンライン</li>
<li>週1回1時間</li>
<li>デザイナーが多めだが、他職能の人も参加やレビュー依頼あり</li>
</ul>


<h3 id="レビューのやり方">レビューのやり方</h3>

<ul>
<li>レビューのお題を決めるのは、原則レビュー依頼者（レビューイ）</li>
<li>レビューイが用意したアジェンダに沿って進行

<ul>
<li>特に手順に決まりなし</li>
</ul>
</li>
<li>ツールはFigmaが多めでMiroやGoogle Docs、スプレッドシート、実装画面等</li>
</ul>


<h3 id="実際の事例">実際の事例</h3>

<ul>
<li>UIのバリデーション設計</li>
<li>アクセシビリティ改善

<ul>
<li>発表ではひとつのコンポーネントのデザインに対してのカラーコントラスト改善について</li>
<li>スコア基準の共有やモブデザインの実施</li>
</ul>
</li>
<li>スペシャルサイトの設計

<ul>
<li><a href="https://rubykaigi.org/2021-takeout/">RubyKaigi Takeout 2021</a> のUIデザインの設計</li>
<li>エンジニアと協力してサイトの設計、意匠を決めた事例</li>
</ul>
</li>
<li>非同期の改善案募集

<ul>
<li>レビュー枠を待たずに非同期で改善提案が走ることもある</li>
<li>今回の例はページのレイアウトへの改善提起をSlackで実施</li>
</ul>
</li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927095050.png" width="1200" height="749" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size: 80%"><span style="color: #8b939c"><a href="https://rubykaigi.org/2021-takeout/">RubyKaigi Takeout 2021</a> のWebサイト</span></span></p>

<h3 id="レビューで生まれる効果">レビューで生まれる効果</h3>

<ul>
<li>第三者視点の気づきと多様なフィードバック</li>
<li>創発的なアイデアとディスカッション</li>
</ul>


<h2 id="デザインレビューの場作り">デザインレビューの場作り</h2>

<ul>
<li>デザインを見るってどんな観点でみればいいの？</li>
<li>レビューはどんな粒度で持っていけばいい？</li>
<li>レビューを受け取ったら必ず反映しないといけない？</li>
<li>レビューでは何を言ってもいいの？</li>
</ul>


<p>これらの疑問があると思うが、</p>

<p>レビューは「チームの知見や気づきを勝てに品質を向上し、よりよいインターフェースにたどり着くための儀式」という前提があり、</p>

<ul>
<li>レビューはレビューイの気づかないところに気づきを与えるもの</li>
<li>レビューは押し付けではなく、ディスカッション</li>
<li>レビューは考えを否定するものではない</li>
</ul>


<p>という共通認識があるためうまく行えているとのこと。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927095112.png" width="1200" height="856" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size: 80%"><span style="color: #8b939c"><a href="https://smarthr.design/">SmartHR Design System</a></span></span></p>

<p>詳細： <a href="https://smarthr.design/products/design-process/review/">デザインレビューの手引 | デザインプロセス | SmartHR Design System</a><br />
関連： <a href="https://twitter.com/SHRDesignSystem/status/1509452635317092360">デザインシステムはピクセルグリッドと開発をすすめている</a></p>

<h1 id="感想">感想</h1>

<p>もともとこのイベントを視聴した理由は、最近SmartHRへデザイン〜フロントエンド界隈で強い人が移っているため、その人たちがどのようなことをしたり、どのような組織構造で働いているのかに興味があったため。<br />
またデザインレビューについて深堀りして他社の話を知ることのできる機会もあまりないと思ったため。</p>

<p>結果的に上記の目的はおおむね把握できてよかったです。<br />
特にレビューの粒度など、受託と事業会社で大きく異なることはあるなとは思いましたが、場作り的なことは取り入れれる部分も多いと思うので今後の参考にしたいと思いました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【イベント】事業とカルチャーを進化させる、Amebaのブランド戦略とデザインシステム'
description: ''
publishDate: '03/31/2022 00:00:00'
---

[CONTENTS-START]
<p>サイバーエージェントさんのオンラインイベント【CADC2022】内の <a href="https://cadc.cyberagent.co.jp/2022/program/ameba-branding-strategy-and-design-systems/"><strong>「事業とカルチャーを進化させる、Amebaのブランド戦略とデザインシステム」</strong></a> を視聴したのでメモと感想を残しておきます。</p>

<h1 id="目次概要">目次・概要</h1>

<ul>
<li>CHAPTER1 広がるデザインの役割</li>
<li>CHAPTER2 Amebaでのケース</li>
<li>CHAPTER3 ブランド再定義の全プロセス

<ul>
<li>Phase1. 未来構想、価値の顕在化</li>
<li>Phase2. らしさの共通言語化</li>
<li>Phase3. 戦略の設計とデザインシステム</li>
<li>Phase4. らしさの体現</li>
</ul>
</li>
<li>CHAPTER4 効果測定</li>
<li>CHAPTER5 まとめ</li>
</ul>


<blockquote><p>15年を超える歴史を持つAmebaでは「Amebaらしさ」を改めて解釈するために、ブランドを再定義し、それを体現するためのデザインシステム「Spindle」を構築しました。<br />
今回は、Amebaという大きく長い歴史を持つサービスで、どのようなプロセスでブランドを定義、デザインシステム構築までに至ったのかを今日のデザインの役割と共にご紹介します。</p></blockquote>

<p>とのことで、デザインシステムの中身についてのことはそこまで語られてなく、そもそもブランディングを行った経緯や設計や構築フローについて語られていました。</p>

<h1 id="ポイント">ポイント</h1>

<h2 id="CHAPTER1-広がるデザインの役割">CHAPTER1 広がるデザインの役割</h2>

<h3 id="狭義のデザインから広義のデザイン経営のデザインへ">狭義のデザインから広義のデザイン、経営のデザインへ</h3>

<ul>
<li>社会のデザイン

<ul>
<li>コミュニティ、ソーシャルビジネスの設計</li>
</ul>
</li>
<li>経営のデザイン

<ul>
<li>ビジネスモデル、エコシステムの設計、</li>
</ul>
</li>
<li>広義のデザイン

<ul>
<li>ユーザーの体験、製品/サービスの全体設計</li>
</ul>
</li>
<li>狭義のデザイン

<ul>
<li>グラフィック、UI</li>
</ul>
</li>
</ul>


<h3 id="デザインからデザイン思考">デザインからデザイン思考</h3>

<p>デザイン思考というプロセスが一般化されつつある。<br />
CAでは5年ほど前からデザインスプリントを実施。<br />
デザインスプリント：ユーザー体験を軸に発見・定義→展開・検証を繰り返す。</p>

<h3 id="ブランディング">ブランディング</h3>

<ul>
<li>BRAND（らしさ）</li>
<li>ING（届け方）</li>
</ul>


<p>すべてのタッチポイント（SNS・広告...）でブランドメッセージを伝えること。</p>

<h2 id="CHAPTER2-Amebaでのケース">CHAPTER2 Amebaでのケース</h2>

<h3 id="なぜブランド再定義が必要だったのか">なぜブランド再定義が必要だったのか？</h3>

<p>Amebaはブログを中心としたメディアプラットフォーム。</p>

<ul>
<li>市場や組織の様々な変化があった

<ul>
<li>他SNSの台頭など</li>
</ul>
</li>
<li>事業も成熟</li>
<li>古い機能やシステムが多く残り負債を重ねていた</li>
</ul>


<p>→ ブランドとして再生する必要があるタイミングだった。</p>

<h3 id="見えてきた課題">見えてきた課題</h3>

<ul>
<li>Ameba全体としてあるべき姿がぼやけていた感覚。</li>
<li>何かを作るにしても、何を指針にすればいいのか分かりづらい。</li>
</ul>


<p>→ 内側（ビジョン、意思）からのアップデートを行った。</p>

<h3 id="ブランド再定義の目的">ブランド再定義の目的</h3>

<p>根幹を定義することで、組織の向かう方向を作る。
→ 「Amebaらしさ」とは何か？を問い、サービスのベクトルを定めて、強固なカルチャーの創出を行う。</p>

<h2 id="CHAPTER3-ブランド再定義の全プロセス">CHAPTER3 ブランド再定義の全プロセス</h2>

<p>デザイン思考のプロセスを応用してつくる。</p>

<h3 id="Phase1-未来構想価値の顕在化">Phase1. 未来構想、価値の顕在化</h3>

<h4 id="共創メンバー">共創メンバー</h4>

<ul>
<li>事業責任者</li>
<li>BXデザイナー</li>
<li>フロントエンジニア</li>
<li>広報</li>
<li>サーバーサイドエンジニア</li>
<li>PM</li>
<li>UXエンジニア</li>
<li>編集</li>
<li>CS</li>
<li>デザイナー</li>
</ul>


<h4 id="手法">手法</h4>

<ul>
<li>社内イメージアンケート

<ul>
<li>ポジティブな部分とネガティブな部分を洗い出す</li>
</ul>
</li>
<li>ワーク形式でありたい姿を探す

<ul>
<li>事実と未来予測と意思をもとに、他にはないらしさを顕在化する

<ul>
<li>事実：独自性/歴史性/普遍性/未来予測/意思</li>
<li>未来予測・意思：ありたい姿</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3 id="Phase2-らしさの共通言語化">Phase2. らしさの共通言語化</h3>

<h4 id="共通言語化">共通言語化</h4>

<ul>
<li>ブランドコンセプト = 生きたコンテンツをつむぐ</li>
<li>ビジョン = 100年愛されるメディアを創る</li>
<li>ミッション = 人と情報をつなぎ、暮らしと心を豊かにする場所を提供し続ける</li>
</ul>


<p>最近で言うパーパスは、ミッションに近いところ</p>

<h3 id="Phase3-戦略の設計とデザインシステム">Phase3. 戦略の設計とデザインシステム</h3>

<p>ブランドの浸透戦略（届けるための施策）を考えていく。<br />
ゴールデンサークル理論（WHYからはじめる）を使う。</p>

<ol>
<li>組織</li>
<li>パートナー</li>
<li>市場コミュニケーション</li>
<li>カスタマーリレーション</li>
<li>キャッシュポイント</li>
<li>ユーザーが払うコスト</li>
</ol>


<p>の領域をもとに、それぞれに対してアクションを出していく。<br />
状態目標の設定と、どのようなアクションが必要なのかの設計。</p>

<h4 id="デザインシステムの構築">デザインシステムの構築</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927094617.png" width="1200" height="749" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size: 80%"><span style="color: #8b939c">サイバーエージェントのデザインシステム <a href="https://spindle.ameba.design/">Spindle</a> のWebサイト</span></span></p>

<ul>
<li>ブランドを体現するための手段、仕組み</li>
<li>組織のインナーブランディング</li>
<li>負債解消</li>
</ul>


<p>のため投資判断を行った。</p>

<h5 id="ブランドのパッケージ化">ブランドのパッケージ化</h5>

<ul>
<li>ブランドガイドライン</li>
<li>デザイン原則</li>
<li>パターンライブラリ</li>
<li>ボイス&amp;トーン</li>
<li>スタイルガイド</li>
<li>パフォーマンス</li>
<li>ビジュアルアイデンティティ</li>
<li>アクセシビリティガイドライン</li>
</ul>


<p>これらを丸々込みにして、デザインシステムを利用すればアメーバのブランドが分かる&amp;らしくなる状態を目指す。</p>

<h3 id="Phase4-らしさの体現">Phase4. らしさの体現</h3>

<p>実際のアウトプット</p>

<ul>
<li>記事デザイン</li>
<li>イラスト</li>
<li>ステッカー</li>
</ul>


<p>プロダクト、社内ツールなどあらゆる場所でブランドを体現していく。<br />
アウトプットしながら、改善、洗練を反復していく。</p>

<h2 id="CHAPTER4-効果測定">CHAPTER4 効果測定</h2>

<p>体現したことが、どこまで浸透したのか。</p>

<blockquote><ol>
<li>組織</li>
<li>パートナー</li>
<li>市場コミュニケーション</li>
<li>カスタマーリレーション</li>
<li>キャッシュポイント</li>
<li>ユーザーが払うコスト</li>
</ol>
</blockquote>

<p>の領域ごとの自己評価を行った。</p>

<p>社内アンケートも実施。</p>

<ul>
<li>ビジョン、ミッションに共感できる</li>
<li>コンセプトに共感できる</li>
<li>サービスバリューに共感できる</li>
</ul>


<p>など。</p>

<h3 id="ブランド浸透度を可視化">ブランド浸透度を可視化</h3>

<p>浸透度1〜4まで</p>

<ul>
<li>浸透度1

<ul>
<li>ビジョンなどが存在していない</li>
<li>ブランドの定義ができている</li>
</ul>
</li>
<li>浸透度2

<ul>
<li>ブランドを認知している</li>
<li>ブランドを理解している</li>
<li>ブランドに共感している</li>
</ul>
</li>
<li>浸透度3

<ul>
<li>ブランドを体現する行動ができている</li>
<li>ブランドを体現する行動が定着している</li>
</ul>
</li>
<li>浸透度4

<ul>
<li>社外に発信されている</li>
<li>ブランドに共感しファンが増えている</li>
</ul>
</li>
</ul>


<h1 id="感想">感想</h1>

<p>Spindleについてはリリースされてから知ってはいたので興味があり視聴しました。</p>

<p>最後のQ&amp;Aでも言っていたが、もともとデザインシステムのようなものが作りたいという声は社内からあがっていて、そこにうまくブランディングを紐付けられたので、モチベーション等も高かったという話がありました。</p>

<p>ただ最近各社構築しているデザインシステムというものでも、ブランディングの一部に過ぎないということや、やるだけの根拠みたいなものがここまで考えているんだなと感じました。</p>

<h5 id="関連記事">関連記事</h5>

<ul>
<li><a href="https://developers.cyberagent.co.jp/blog/archives/31641/">Amebaのデザインシステム「Spindle」の全貌公開 | CyberAgent Developers Blog</a></li>
<li><a href="https://developers.cyberagent.co.jp/blog/archives/26754/">「Ameba」15年の負債を払拭するカラーパレットのメソッド | CyberAgent Developers Blog</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】はじめてのUXリサーチ ―ユーザーとともに価値あるサービスを作り続けるために'
description: ''
publishDate: '03/21/2022 00:00:00'
---

[CONTENTS-START]
<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/dp/4798167924?tag=hatena-22&amp;linkCode=ogi&amp;th=1&amp;psc=1" class="hatena-asin-detail-image-link" target="_blank" rel="noopener"><img src="https://m.media-amazon.com/images/I/41bt0HCgvOL._SL500_.jpg" class="hatena-asin-detail-image" alt="はじめてのUXリサーチ ユーザーとともに価値あるサービスを作り続けるために" title="はじめてのUXリサーチ ユーザーとともに価値あるサービスを作り続けるために"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/dp/4798167924?tag=hatena-22&amp;linkCode=ogi&amp;th=1&amp;psc=1" target="_blank" rel="noopener">はじめてのUXリサーチ ユーザーとともに価値あるサービスを作り続けるために</a></p><ul class="hatena-asin-detail-meta"><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%BE%BE%B1%F2%20%C8%FE%C8%C1" class="keyword">松薗 美帆</a>,<a href="http://d.hatena.ne.jp/keyword/%C1%F0%CC%EE%20%B9%A6%B4%F5" class="keyword">草野 孔希</a></li><li>翔泳社</li></ul><a href="https://www.amazon.co.jp/dp/4798167924?tag=hatena-22&amp;linkCode=ogi&amp;th=1&amp;psc=1" class="asin-detail-buy" target="_blank" rel="noopener">Amazon</a></div></div></p>

<h1 id="目次概要">目次・概要</h1>

<ul>
<li>Chapter1 UXリサーチの捉え方</li>
<li>Chapter2 UXリサーチの始め方</li>
<li>Chapter3 UXリサーチの組み立て方</li>
<li>Chapter4 UXリサーチの手法を知る</li>
<li>Chapter5 UXリサーチを一緒にやる仲間の増やし方</li>
<li>Chapter6 UXリサーチを活かす仕組みの作り方</li>
<li>Chapter7 UXリサーチのケーススタディ</li>
<li>Chapter8 UXリサーチの実践知の共有</li>
</ul>


<p>本書は、<a href="https://www.merpay.com/">メルペイ</a> にてUXサービス開発に携わっている方（松薗さん、草野さん）の著書。</p>

<blockquote><ul>
<li>1人でも実践を小さく始めて続けられるように構成していること</li>
<li>UXリサーチのリアルな実践事例を扱っていること</li>
</ul>
</blockquote>

<p>を特徴として掲げており、UXリサーチに関する理論的な背景や詳細な手法については、専門家向けの他書籍に譲っています。<br />
「サービス作りのためにUXリサーチを実践し始め続けていきたい」という、わりとライトな層向けの書籍と捉えることができそうです。</p>

<h1 id="ポイント">ポイント</h1>

<h2 id="Chapter1-UXリサーチの捉え方">Chapter1 UXリサーチの捉え方</h2>

<h3 id="UXリサーチとは">UXリサーチとは</h3>

<p>この書籍では、「UXリサーチ」を</p>

<blockquote><p>「様々な場面で起きる人の知覚や反応（UX）について調べて明らかにすること」</p></blockquote>

<p>と定めている。<br />
UXリサーチの対象は、UIを使っているときに限らず、人の生活そのもの、既存の他サービスなど多岐にわたる。</p>

<h3 id="UXリサーチの必要性が高まっている背景">UXリサーチの必要性が高まっている背景</h3>

<ul>
<li>サービスが増え、人が一生かけても使い切れないサービス数の存在</li>
<li>他と比べて使いやすいことや、使っているときの体験の品質が高いことが求められる</li>
<li>市場の変化が年々激しくなっている（コロナの影響も然り）</li>
<li>ユーザーの多様性</li>
</ul>


<blockquote><p><strong>体験の品質が重視され、市場の変化が激しく、多様性が高い状況では、どういう人がどういう事情で使っているかをサービス提供者が推測する難易度が上がっている</strong></p></blockquote>

<p>背景からUXリサーチの重要性が増している。</p>

<h3 id="UXリサーチのメリットを捉える">UXリサーチのメリットを捉える</h3>

<ul>
<li>リリース前から学びが増やせる</li>
<li>データを解釈する精度を高められる</li>
<li>組織づくりに使える

<ul>
<li>ユーザーが実際にサービスを使っている様子を目の当たりにすることは、組織内の関係者にとって大きな刺激に</li>
</ul>
</li>
</ul>


<h3 id="UXリサーチを手段として捉える">UXリサーチを手段として捉える</h3>

<blockquote><p><strong>UXリサーチをして明らかになったことがきちんと組織の関係者に伝わり、議論や意思決定に活用されることが重要です。</strong></p></blockquote>

<h3 id="UXリサーチの分け方を捉える">UXリサーチの分け方を捉える</h3>

<ul>
<li>探索/検証のリサーチ

<ul>
<li>探索のリサーチの手法としては「デプスインタビュー」

<ul>
<li>期待できる結果は、今まで知らなかった新しい洞察が得られること</li>
</ul>
</li>
<li>検証のリサーチの手法としては「コンセプトテスト」や「ユーザビリティテスト」

<ul>
<li>期待できる結果は、自分たちが持っている仮説が支持されるか否かがわかること</li>
</ul>
</li>
</ul>
</li>
<li>質的/量的リサーチ

<ul>
<li>質的データは、ユーザーは実際にどのような行動をしているのか、そのときにユーザーはどのようなことを考えているのかを調べることに向く</li>
<li>量的データは、どこで、何が、どの量で起こっているかを調べることに向いている</li>
</ul>
</li>
<li>UXの要素ごとのリサーチ

<ul>
<li><a href="https://www.creativevillage.ne.jp/30892">ギャレットのユーザーエクスペリエンスの要素</a> のレイヤーで「どの段階の要素を調べて明らかにすることがサービス作りに役立つのか」を考える</li>
</ul>
</li>
</ul>


<h2 id="Chapter2-UXリサーチの始め方">Chapter2 UXリサーチの始め方</h2>

<h3 id="始めること自体が目的ではない">始めること自体が目的ではない</h3>

<blockquote><p><strong>UXリサーチはあくまで目的のための手段のひとつであることを見失わないようにしましょう。</strong></p></blockquote>

<p>「最近入ったばかりのメンバーもいるし、みんなでユーザーのイメージをあわせてコミュニケーションを円滑にするために実際にユーザーの声を聞く機会を作りたい」といった具合に状況に合わせて目的と手段を考えるのがよい。</p>

<h3 id="まずは小さく始めてみよう">まずは小さく始めてみよう</h3>

<blockquote><p><strong>「ユーザーのことを理解したい」という気持ちを忘れずに、相手に興味と尊敬を持って接することを心がけていれば十分です。</strong></p></blockquote>

<ul>
<li>高い専門性がなくても始められる</li>
<li>予算がなくても始められる</li>
<li>特別な設備や機材がなくても始められる</li>
<li>時間がなくても始められる</li>
<li>上司や同僚の理解がなくても始められる</li>
</ul>


<p>「上司や同僚の理解がなくても始められる」については「UXリサーチ」という言葉を使わずに説明することがおすすめの手段。「デザインのヒントを得たい」などの目的とセットで、「その手段としてユーザーを理解したいので、何人かにお話を聞いてくる時間を業務中に取ります」などすると上司としても賛同しやすいのではないか。</p>

<h3 id="何から始めるか">何から始めるか</h3>

<ul>
<li>探索のリサーチから始める

<ul>
<li>サービスの課題がいまいちわかっていなかったり、課題は把握しているものの優先順位がつけられていない状態</li>
</ul>
</li>
<li>検証のリサーチから始める

<ul>
<li>すでに課題が明らかで解決方法のアイデアもある状況</li>
</ul>
</li>
<li>すでにあるデータの活用から始める

<ul>
<li>使えるデータがすでにあるなら、まずはそれを活用するのもひとつの手</li>
</ul>
</li>
</ul>


<h3 id="より良いUXリサーチを目指す工夫">より良いUXリサーチを目指す工夫</h3>

<ul>
<li>ウォークスルーをやってみる（調査する前に模擬的にやってみる）</li>
<li>自分1人で振り返りする</li>
<li>他の人にフィードバックを依頼する</li>
<li>他の人のスタイルから学ぶ</li>
</ul>


<p>「実はもう始めていたUXリサーチ」の例のように、普段からユーザー目線で考えることを1歩進めることで、「UXリサーチ」になり得る or つながることになる、というのは良い視点だと感じた。</p>

<h2 id="Chapter3-UXリサーチの組み立て方">Chapter3 UXリサーチの組み立て方</h2>

<h3 id="UXリサーチで歩む7つのステップ">UXリサーチで歩む7つのステップ</h3>

<ol>
<li>状況理解</li>
<li>問い立案</li>
<li>手順設計</li>
<li>調査準備</li>
<li>調査実施</li>
<li>データ分析</li>
<li>結果活用</li>
</ol>


<p>全体を「UXリサーチの運用」と捉える。</p>

<h3 id="組み立て方の概要">組み立て方の概要</h3>

<p>大きく2つのパートに分けて考える。</p>

<blockquote><p>1.状況理解<br />
2.問い立案
3.手順設計</p></blockquote>

<p>なぜやるのか、何を明らかにするのか、を明確にするパート。<br />
状況を理解することで、自分たちが何が分かっていないのか、何を調べて明らかにするべきなのか考えやすくなる。</p>

<blockquote><p>4.調査準備<br />
5.調査実施<br />
6.データ分析</p></blockquote>

<p>何をどのように明らかにするのかを決めるパート。</p>

<h4 id="状況理解">状況理解</h4>

<p>どのような背景でこの事業がはじまっているか、リソース（ヒト・モノ・カネ）をどのくらい活用できるか、権限はどの程度持っているか or 必要か、等を状況理解で行う。</p>

<h4 id="問い立案">問い立案</h4>

<p>「状況理解」で把握した内容を加味して身の丈にあった「問い」を立てて関係者と合意する。<br />
また身の丈に合わせるために「明らかにしないこと」も明確にしておく。</p>

<h4 id="手順設計">手順設計</h4>

<ul>
<li>調査対象を決める</li>
<li>調査・分析手法を具体化する</li>
<li>スケジュールを決める</li>
<li>調査の実施手順を具体化する</li>
</ul>


<p>また、調査結果がどのようにプロジェクトで活用されていくのかを明確にイメージすること、を考えるのが効果的。</p>

<h4 id="調査準備">調査準備</h4>

<ul>
<li>調査の実施手順を具体化する</li>
<li>協力者を集める準備を進める</li>
</ul>


<h2 id="Chapter4-UXリサーチの手法を知る">Chapter4 UXリサーチの手法を知る</h2>

<p>だいたい以前読んだ<a href="https://jtk.hatenablog.com/entry/2020/03/17/131050">ユーザビリティエンジニアリング(第2版)</a>と同じ内容の掲載。<br />
この書籍の目的に書かれている通り、手法を細かく記しているわけではないので、ユーザビリティエンジニアリングの方が詳しい。</p>

<h2 id="Chapter5-UXリサーチを一緒にやる仲間の増やし方">Chapter5 UXリサーチを一緒にやる仲間の増やし方</h2>

<h3 id="段階に応じた仲間の増やし方">段階に応じた仲間の増やし方</h3>

<ul>
<li>まずは一度引き込む</li>
<li>継続的な関係を構築する</li>
<li>より広く・多くの人に認知してもらう</li>
<li>UXリサーチを文化にする</li>
</ul>


<h3 id="ますは一度引き込んでみよう">ますは一度引き込んでみよう</h3>

<ul>
<li>UXリサーチという単語を使わず、相手の視点から説明する</li>
<li>小さく実績を作って共有しながらおすすめする</li>
<li>キックオフとラップアップで関わりやすい雰囲気をつくる</li>
</ul>


<p><strong>なぜUXリサーチという手段を用いると良いのかを引き込みたい相手の視点から語る</strong> とよい。<br />
関係者が「目的を達成できそうな手段だから使ってみたい」と思われればよい。</p>

<h3 id="継続的な関係を構築しよう">継続的な関係を構築しよう</h3>

<ul>
<li>UXリサーチが必要な状況を察知できるようにする</li>
<li>UXリサーチに関する情報を蓄積して参照しやすくする</li>
</ul>


<h3 id="より広く多くの人を引き込もう">より広く・多くの人を引き込もう</h3>

<ul>
<li>組織の中で情報発信する</li>
<li>外部に情報発信して、組織の中に伝搬させる</li>
<li>主体的にUXリサーチを継続できる人を増やす</li>
</ul>


<p>主体的に継続してくれる仲間が増えることは、長い目で見れば組織でUXリサーチを活用できる機会が広がる。</p>

<h3 id="UXリサーチを文化にしよう">UXリサーチを文化にしよう</h3>

<p>UXリサーチを活用して、ユーザーとともに価値のあるサービスを作っていく文化を根付かせることを考える。</p>

<ul>
<li>UXリサーチを続けやすい仕組みの整備</li>
<li>定期的な勉強会や相談会の開催</li>
<li>UXリサーチャーという役割の定義</li>
<li>専任のUXリサーチャーの採用や育成</li>
<li>UXリサーチチームの組織化</li>
</ul>


<p>このあたり難しいなあと感じます。<br />
案件でなかなかUXリサーチ何かしらやってます、という話はそこまで多く聞かないので、それこそこの本で書かれているようにスモールスタートでやっていくことが必要なのかなと思いました。</p>

<h2 id="Chapter6-UXリサーチを活かす仕組みの作り方">Chapter6 UXリサーチを活かす仕組みの作り方</h2>

<h3 id="ResearchOpsとは">ResearchOpsとは</h3>

<p>UXリサーチの運用を単に効率化するだけでなく、標準化して品質を保つことや仕組み化していくこと。<br />
<a href="https://researchops.community/">ResearchOps Community</a> というコミュニティもある。</p>

<p>ResearchOpsには6つの要素がある。</p>

<ol>
<li>リクルーティングの効率化</li>
<li>ガバナンス</li>
<li>ツール</li>
<li>ナレッジマネジメント</li>
<li>コンピテンシー</li>
<li>広報活動</li>
</ol>


<p>概念的には他のOpsと同じ感じですが、文化的な雰囲気がします。</p>

<h4 id="ツール">ツール</h4>

<ul>
<li><a href="https://calendly.com/">Calendly</a> （日程調整用）</li>
<li><a href="https://www.cloudsign.jp/">クラウドサイン</a> （同意書契約用）</li>
<li><a href="https://azure.microsoft.com/ja-jp/products/video-analyzer/">Azure Video Analyzer</a> （書き起こし用）</li>
<li><a href="https://dovetailapp.com/">Dovetail</a> （分析用）</li>
<li>Figma（プロトタイプ用）</li>
<li>Miro（ワークショップ用）</li>
</ul>


<p>Dovetail というもの始めて知りましたが、こういう感じで分析できるの楽しそうですね。<br />
<a href="https://note.com/mihozono/n/n98886e008949">私の愛するリサーチツール「Dovetail」について語らせてください｜mihozono｜note</a></p>

<h2 id="Chapter7-UXリサーチのケーススタディ">Chapter7 UXリサーチのケーススタディ</h2>

<h3 id="事例のラインナップ">事例のラインナップ</h3>

<p>筆者がメルペイで行ってきたUXリサーチのプロジェクト事例</p>

<ul>
<li>利用上限金額の設定機能</li>
<li>リブランディング直後のサービス認知や利用実態の把握</li>
<li>おくる・もらう（送金サービス）</li>
<li>定額払い</li>
<li>初期設定フロー</li>
<li>Weekly UXリサーチ（週次のUXリサーチ日の設定）</li>
<li>リモートUXリサーチ</li>
</ul>


<p>これまでの始め方、組み立て方、手法を踏まえて実際にはどのように行ったかが記されている。<br />
ひとつのプロジェクトの粒度や、具体的にどのタイミングでどのようなことをしているのかが分かりやすかった。</p>

<h1 id="感想">感想</h1>

<p>改めて、なぜUXをやる必要があるのかを考えるきっかけになった気がします。<br />
個人的には、流行りや必要に迫られての部分もありますが、これまで一方方向だった作ることから、一歩踏み出しして使う人の意見を聞いてみて、それをもとに作る、ということで何かしら気づきや自身の成長ができるのではないかな、という期待があるからだと思い起こしました。</p>

<p>ちょっと思い出したつながりで、オフィスで働いていたときは「これが使いやすいか、見えやすいか」みたいな話はすぐ近くの席の人に聞きやすかったり話してたが、今はそのような細かいところは自身の感覚や判断で過ごしてしまっているのではないかと反省。<br />
共通言語でものを作れることや、良い or 悪いの基準や感覚が揃っていることは、とても大事と思っているのでそのあたり見直しながら仕事をしたいなと思いました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】UXデザインの法則 ―最高のプロダクトとサービスを支える心理学'
description: ''
publishDate: '03/20/2022 00:00:00'
---

[CONTENTS-START]
<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/dp/4873119499?tag=hatena-22&amp;linkCode=osi&amp;th=1&amp;psc=1" class="hatena-asin-detail-image-link" target="_blank" rel="noopener"><img src="https://m.media-amazon.com/images/I/51uSGP2lHHS._SL500_.jpg" class="hatena-asin-detail-image" alt="UXデザインの法則 ―最高のプロダクトとサービスを支える心理学" title="UXデザインの法則 ―最高のプロダクトとサービスを支える心理学"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/dp/4873119499?tag=hatena-22&amp;linkCode=osi&amp;th=1&amp;psc=1" target="_blank" rel="noopener">UXデザインの法則 ―最高のプロダクトとサービスを支える心理学</a></p><ul class="hatena-asin-detail-meta"><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/Jon%20Yablonski" class="keyword">Jon Yablonski</a></li><li>オライリージャパン</li></ul><a href="https://www.amazon.co.jp/dp/4873119499?tag=hatena-22&amp;linkCode=osi&amp;th=1&amp;psc=1" class="asin-detail-buy" target="_blank" rel="noopener">Amazon</a></div></div></p>

<h1 id="目次概要">目次・概要</h1>

<ul>
<li>CHAPTER1 ヤコブの法則</li>
<li>CHAPTER2 フィッツの法則</li>
<li>CHAPTER3 ヒックの法則</li>
<li>CHAPTER4 ミラーの法則</li>
<li>CHAPTER5 ポステルの法則</li>
<li>CHAPTER6 ピークエンドの法則</li>
<li>CHAPTER7 美的ユーザビリティ効果</li>
<li>CHAPTER8 フォン・レストルフ効果</li>
<li>CHAPTER9 テスラーの法則</li>
<li>CHAPTER10 ドハティのしきい値</li>
</ul>


<p>著者である <a href="https://jonyablonski.com/">Jon Yablonski</a> さんの <a href="https://lawsofux.com/">Laws of UX</a> というWebサイトから10の法則を紹介している本です。</p>

<p>「UXデザインの法則」という本ですが、実際にはUIやユーザビリティに関するTips集といった所感。<br />
同じ類の書籍はオライリーから出ていますが、<a href="https://jtk.hatenablog.com/entry/2019/08/05/102608">インタフェースデザインの心理学</a> シリーズや <a href="https://jtk.hatenablog.com/entry/2019/12/02/084734">「インタフェースデザインのお約束」</a> よりは広義のUI（UX）について書かれています。</p>

<p><a href="https://www.oreilly.com/library/view/laws-of-ux/9781492055303/">原書</a> のカバーのほうがおしゃれです。</p>

<h1 id="ポイント">ポイント</h1>

<h3 id="CHAPTER1-ヤコブの法則">CHAPTER1 ヤコブの法則</h3>

<blockquote><p><strong>ユーザーは他のサイトで多くの時間を費やしているので、あなたのサイトにもそれらと同じ挙動をするように期待している。</strong>
- ユーザーが慣れ親しんだプロダクトと見た目が似ていれば、同じように動くことを期待される。
- すでにあるメンタルモデルを活かせば、ユーザーは新たなメンタルモデルの学習なしにタスクに集中でき、ユーザー体験の質が高まる。
- 変更時の違和感を最小限にとどめるためには、慣れ親しんだバージョンを使い続けられる移行期間を設けよう。</p></blockquote>

<p><a href="https://ja.wikipedia.org/wiki/%E3%83%A4%E3%82%B3%E3%83%96%E3%83%BB%E3%83%8B%E3%83%BC%E3%83%AB%E3%82%BB%E3%83%B3">Jakob Nielsen</a> さんが2000年に提唱した法則。</p>

<ul>
<li>ページの構成や定番の要素（ナビゲーションや検索）の配置に、普及したデザインパターンや慣例を活用する。</li>
<li>ユーザーは他のウェブサイトでの経験の積み重ねを通じて「デザインはこうあるべき」という期待を築き上げる傾向がある。

<ul>
<li>その要因の根源には、<strong>メンタルモデル</strong> という心理学の概念がある。

<ul>
<li>メンタルモデルとは、システム、特にそのふるまいについて、わたしたち自身がどう理解しているかという概念のこと。</li>
</ul>
</li>
</ul>
</li>
<li>大規模なリデザインを行う場合はGoogleのサービス（Googleカレンダー、YouTube、Gmail）のように、ユーザーが新たなバージョンを使うか選択できるようにしましょう。</li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927091612.jpg" width="1200" height="600" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size: 80%"><span style="color: #8b939c">Gmail最近新デザイン展開されてましたが、自分はすぐに試す派です。 - <a href="https://softantenna.com/blog/new-gmail-design-rollout-to-personal/">Gmailの新デザインの展開が個人アカウントに対しても開始 | ソフトアンテナ</a></span></span></p>

<p>どこまで他のサイトのレイアウトや動きを活用するかは難しいところではあるなと感じます。<br />
ただ本の中でも触れられていますが、このような「同質化」の多くはデザインの慣例に従っているまでで、レイアウト、ナビゲーション、スタイル、検索機能の場所などすべてがバラバラだとすると、ユーザーは以前の経験に頼ることができなく腰砕けになってしまう。<br />
デザイナーは独創的である前に、ユーザーのニーズや文脈、それと技術的な制約を常に考えて最適な方法を選び抜かないといけない、と記されています。</p>

<h3 id="CHAPTER2-フィッツの法則">CHAPTER2 フィッツの法則</h3>

<blockquote><p><strong>ターゲットに至るまでの時間は、ターゲットの大きさと近さで決まる。</strong>
- タッチターゲットには、ユーザーが正確に押せるために十分な大きさが必要だ。
- タッチターゲット同士は、十分な間隔が空いていなければいけない。
- タッチターゲットは、インターフェース内で、ユーザーが簡単に到達できる場所に置かれてなければいけない。</p></blockquote>

<p><a href="https://en.wikipedia.org/wiki/Paul_Fitts">Paul Fitts</a> さんが1954年から予測、提唱した法則。</p>

<ul>
<li>ユーザーが対象に到達するのにかかる時間は対象の大きさと近さに反比例する</li>
<li>モバイルインターフェースでは、画面の中でタッチできる範囲が限られているため、とりわけこの法則が重要になる。</li>
</ul>


<p><strong>タッチターゲットの推奨最小サイズ</strong></p>

<table>
<thead>
<tr>
<th style="text-align:left;">企業・組織 </th>
<th style="text-align:left;"> サイズ</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> ヒューマンインターフェースガイドライン（Apple） </td>
<td style="text-align:left;"> 44 x 44 pt </td>
</tr>
<tr>
<td style="text-align:left;"> マテリアルデザインガイドライン（Google） </td>
<td style="text-align:left;"> 48 x 48 dp </td>
</tr>
<tr>
<td style="text-align:left;"> ウェブコンテンツアクセシビリティガイドライン（WCAG） </td>
<td style="text-align:left;"> 44 x 44 CSS px </td>
</tr>
<tr>
<td style="text-align:left;"> Nielsen Norman Group </td>
<td style="text-align:left;"> 1 x 1 cm </td>
</tr>
</tbody>
</table>


<p><strong>タッチターゲットの要素の間隔</strong>
Googleのマテリアルデザインガイドラインでは「8dp以上の余白を空けること」とされている。</p>

<p><strong>タッチターゲットの位置</strong>
デスクトップでは一般的に左上から右下に目を走らせる。
スマートフォンでは画面中心部に焦点が寄りやすい。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927091648.png" width="800" height="495" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size: 80%"><span style="color: #8b939c">どこに焦点が当たりやすいかと、どこに届くか、も考えなきゃですね。 -  <a href="https://www.netsolutions.com/insights/mobile-ux-design/">Mobile UX Design in 2022: A Complete Guide | Net Solutions</a> </span></span></p>

<p>タッチターゲットのサイズについては所属の会社の仕事の場合、例えばハンバーガーメニューのタップ範囲についてデザイナーさんから「タップエリアはここからここまで」という指示があるのは稀なので、マークアップエンジニアのさじ加減でやっている感じです。</p>

<h3 id="CHAPTER3-ヒックの法則">CHAPTER3 ヒックの法則</h3>

<blockquote><p><strong>意思決定にかかる時間は、とりうる選択肢の数と複雑さで決まる。</strong>
- 応答に時間がかかって意思決定が遅くなっているときは、選択肢を最小限にまで減らそう。
- タスクが複雑なら、小さなステップに分解して認知負荷を減らそう。
- ユーザーが情報量に圧倒されないように、おいすすめの選択肢を目立たせよう。
- 段階的なオンボーディングを採用し、新規ユーザーの認知不可を最小限にしよう。
- 単純化によって抽象的になりすぎないように注意しよう。</p></blockquote>

<p><a href="https://en.wikipedia.org/wiki/W._E._Hick">W. E. Hick</a> さんと <a href="https://en.wikipedia.org/wiki/Ray_Hyman">Ray Hyman</a> さんによって1952年に定式化された法則。</p>

<ul>
<li>インターフェイス上であまりに多くの選択肢があると、効率も優雅さも失われてしまう。</li>
<li>プロセスで面でも、わかりやすく目に入る行動喚起要素がない、情報設計が曖昧、ステップに無駄がある、選択肢が多すぎる、情報を盛り込みすぎる・・・、これらすべてがタスクを実行しようとするユーザーの妨げになる。</li>
<li>オンボーディングはSlackbotのようにメッセージでユーザーが学習し終えてから段階的に追加機能の説明が始まるのが有効となる。</li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927091654.jpg" width="700" height="766" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size: 80%"><span style="color: #8b939c">悪い/良いナビゲーション構造 - <a href="https://www.interaction-design.org/literature/article/hick-s-law-making-the-choice-easier-for-users">Hick’s Law: Making the choice easier for users | Interaction Design Foundation (IxDF)</a></span></span></p>

<p>本のなかでは認知負荷についても触れていますが、ユーザーが最終的に達成したい目的が合った上で</p>

<ul>
<li>UIがどのように動くか</li>
<li>目的のものをどのように探さないといけないか</li>
</ul>


<p>に対してメンタルリソースが求められ、しかも「そもそも何をしたかったのか」を覚えておく必要がある、というのは大事なポイントだと感じました。<br />
どうしても作っていると「UIがどのように動くか」のみに囚われがちなため。</p>

<h3 id="CHAPTER4-ミラーの法則">CHAPTER4 ミラーの法則</h3>

<blockquote><p><strong>普通の人が短期記憶に保持できるのは、7（±2）個まで。</strong>
- 「マジカルナンバー7」の数字に惑わされて無用なデザイン制約を作ってはいけない。
- コンテンツを小さなチャンク（かたまり）に分けることで、ユーザーがその情報を扱い、理解し、記憶しやすくできる。
- 短期記憶の容量は、個々人が持っている知識や状況、文脈によって大きく幅があることを覚えておこう。</p></blockquote>

<p><a href="https://en.wikipedia.org/wiki/George_Armitage_Miller">George Armitage Miller - Wikipedia</a>  さんが1956年に発表した論文に由来。</p>

<ul>
<li>ミラーの発見の中心は、制約のある短期記憶を最大限有効活用するために、情報の断片をいかに意味のあるチャンクに整理するかということである。

<ul>
<li>保存できるチャンク数の上限は、その情報に関する個々人の前提条件によって異なっている。</li>
<li>例えば、ナビゲーションの選択肢は常に見えているもので、適切にカテゴリ分けをしていれば7個以上でも成立する。</li>
</ul>
</li>
<li>チャンク化の最も単純な例は、電話番号の書式

<ul>
<li>4408675309</li>
<li>(440) 867-5309</li>
</ul>
</li>
<li>もう少し複雑な例は階層性や書式が全くないこと。</li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927091657.jpg" width="708" height="800" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size: 80%"><span style="color: #8b939c">✕のほうは「文字の壁（wall of text）」と呼ばれるらしい。 - <a href="https://baigie.me/officialblog/2021/04/15/9_principles_of_web_usability/">ウェブ・ユーザビリティの簡単9原則 | knowledge / baigie</a></span></span></p>

<p>主に情報設計やデザイン領域の話になるので、エンジニアは意図を汲み取ってスタイリングすることが大事そうです。</p>

<h3 id="CHAPTER5-ポステルの法則">CHAPTER5 ポステルの法則</h3>

<blockquote><p><strong>出力は厳密に、入力は寛容に。</strong>
- ユーザーがとりうるアクションや、入力しうる情報すべてに対して理解を示し、柔軟に対応し、寛容であろう。
- 信頼性高くアクセス可能なインターフェースを提供しながら、入力、アクセス、および機能の面で実際に起こりうるあらゆることを予測しよう。
- 予測・対応できることが多ければ多いほど、デザインはより柔軟になる。
- ユーザーからの多様な入力を受け入れ、それを要件に合わせて変換し、入力の境界線を定義し、ユーザーに明確なフィードバックを提供しよう。</p></blockquote>

<p><a href="https://en.wikipedia.org/wiki/Jon_Postel">Jon Postel</a> さんがTCPの初期実装の際に「ロバストネスの原則」と呼ばれる考え方を導入。もともとはコンピュータネットワーク間のデータ転送を意図したものだったが、ユーザー体験のデザインにも応用されている。</p>

<ul>
<li>ユーザーにとって良い体験をデザインすることということは、人間にとって良い体験をデザインするということ。

<ul>
<li>わたしたちは、プロダクトやサービスが自分のことを直感的に理解してくれていて、寛容であることを期待している。</li>
<li>また、常に自分がコントロールできていると感じたがり、必要以上の情報を求められるとイライラしてしまう。</li>
</ul>
</li>
<li>ユーザーが、どのような環境で、どの程度のスキルがあるのかについて、実際に起こりうるあらゆるパターンを予測した上で、信頼性やアクセシビリティが担保されたインターフェースを提供すべき、という考え方。

<ul>
<li>例として、Apple の Face ID、レスポンシブウェブデザイン、プログレッシブエンハンスメントなど。</li>
</ul>
</li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927091702.png" width="800" height="400" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size: 80%"><span style="color: #8b939c">閉じタグがなくても表示されるHTMLの例 - <a href="https://uxdaystokyo.com/articles/glossary/whats_postel_low/">ポステルの法則 | UX TIMES</a></span></span></p>

<p>やはり身近なのは入力フォームのバリデーションでしょうか。<br />
全角縛りや予測できないエラーなどはいちユーザーとしても辛いですね。</p>

<h3 id="CHAPTER6-ピークエンドの法則">CHAPTER6 ピークエンドの法則</h3>

<blockquote><p><strong>経験についての評価は、全体の総和や平均ではなく、ピーク時と終了時にどう感じたかで決まる。</strong>
- ユーザージャーニーの中で最も重要な瞬間（ピーク）と最後の瞬間（エンド）に細心の注意を払おう。
- エンドユーザーを喜ばせるためには、プロダクトが最も役立つ瞬間、最も価値がある瞬間、あるいは最も楽しい瞬間を見定めてデザインしよう。
- 人はポジティブな経験よりも、ネガティブな経験をより鮮明に思い出すことを心に刻んでおこう。</p></blockquote>

<p><a href="https://en.wikipedia.org/wiki/Daniel_Kahneman">Daniel Kahneman</a> さんらの1993年の論文ではじめて見い出された法則。</p>

<ul>
<li>わたしたちの記憶は、できごとを完全に正確に記録したものではない。</li>
<li>ユーザーは最も感情が高まったときに感じたことと、終わりの時点で感じたことが混ざり合い、それが経験全体に対する評価を大きく評価する。</li>
<li>Mailchimpの例

<ul>
<li>  会員向けに書き上げたメールの送信ボタンを押そうとする瞬間が「最も感情が高まるとき」

<ul>
<li>  シンプルな確認モーダルにとどまらず、イラスト、アニメーション、ユーモアを通してブランドの個性を吹き込むことで、ストレスの多い瞬間を和らげる。</li>
</ul>
</li>
<li>  送信確認画面でリダイレクトされるキャンペーン詳細画面が「終わりの時点で感じたこと」

<ul>
<li>  ユーザーの頑張りをねぎらうハイタッチのアニメーションで、やりきった安堵感を与える。</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927091707.png" width="608" height="411" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size: 80%"><span style="color: #8b939c">IKEAでのショッピング体験もピークエンドの法則の活用事例として挙げられる - <a href="https://uxdaystokyo.com/articles/glossary/peak-end-rule/">ピークエンドの法則：用語集 | UX TIMES</a></span></span></p>

<p>まずジャーニーマップのような設計をしていることが前提ですが、UXっぽい法則ですね。<br />
メールチャンプはどのUXの書籍でも事例として出てくる印象です。</p>

<h3 id="CHAPTER7-美的ユーザビリティ効果">CHAPTER7 美的ユーザビリティ効果</h3>

<blockquote><p><strong>見た目が美しいデザインはより使いやすいと感じられる</strong>
- 見た目が美しいデザインは、人の脳にポジティブな反応をもたらし、実際の場面でもよく機能すると受け取られる。
- プロダクトやサービスの見た目が美しければ、人は些細なユーザビリティの問題に対してより寛容になる。
- 見た目が美しいデザインはユーザビリティの問題を覆い隠し、ユーザビリティテスト中に課題を発見しにくくしてしまうこともある。</p></blockquote>

<p>1995年に日立デザインセンターの <a href="https://ja.wikipedia.org/wiki/%E9%BB%92%E9%A0%88%E6%AD%A3%E6%98%8E">黒須正明</a> さんと<a href="https://www.hitachihyoron.com/jp/100th/portraits/01.html">鹿志村香</a> さんが実施した研究が起源となる効果。</p>

<ul>
<li>見た目が美しいデザインは、ポジティブな感情的反応を生み出すとともに認知能力を拡張しユーザビリティがよいと感じやすくする、且つ信頼性を高める。</li>
<li>Braun や そのデザイン哲学に影響を受けている Apple プロダクトの例。</li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927091711.jpg" width="640" height="360" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size: 80%"><span style="color: #8b939c">iPod、iPhone、iMacなどのデバイスは、使いやすさを重視しながらも、Braunの製品群からミニマルな美しさを受け継いでいる - <a href="https://dailynewsagency.com/2012/09/08/apple-vs-braun-hjl/">アップル製品と約50年前のブラウン社の家電製品がどれくらい似ているか比べてみた - DNA</a></span></span></p>

<p>iOSの電卓もBraunと似ており、インターフェースにも落とし込んでいるのが面白いですね。<br />
ユーザビリティの問題を覆い隠してしまうところは、例えばユーザーインタビューはモックアップから段階的に行うことが解決策かなと思いました。</p>

<h3 id="CHAPTER8-フォンレストルフ効果">CHAPTER8 フォン・レストルフ効果</h3>

<blockquote><p><strong>似たものが並んでいると、その中で他とは異なるものが記憶に残りやすい。</strong>
- 重要な情報やアクションを視覚的に目立たせよう。
- 視覚的な要素を強調する際には、互いに競合したり、目立ちすぎて広告だと勘違いされたりしないようにしように抑制をかけよう。
- コントラストを伝えるのを色だけに頼ると、色覚障がい者やロービジョン（弱視者）を排除することにつながる。
- コントラストを伝える上で動きを使用する際には、動きに対し敏感なユーザーに配慮しよう。</p></blockquote>

<p><a href="https://en.wikipedia.org/wiki/Hedwig_von_Restorff">Hedwig von Restorff</a> さんの1933年の研究を起源とする効果。</p>

<ul>
<li>人は周囲へ集中力のキャパシティと持続時間の制約から、関連性のない情報を犠牲にいして関連する情報に集中する。

<ul>
<li>これは認知心理学では「選択的注意」として知られている生存本能

<ul>
<li>一例としてはバナーブラインドネス（広告だと認識されたものが無視される性向）</li>
</ul>
</li>
</ul>
</li>
<li>実例

<ul>
<li>Googleマテリアルデザインのフローティングアクション</li>
<li>iOSのアプリの通知マーク</li>
<li>ウェブサービスのプランのプライスリストで強調されるプラン</li>
</ul>
</li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927091715.png" width="600" height="374" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size: 80%"><span style="color: #8b939c">周囲のパターンと似通っていると□や赤丸と違って特異性があると認識しづらい - <a href="https://uxdaystokyo.com/articles/glossary/von-restorff-effect/">レストルフ効果 | UX TIMES</a></span></span></p>

<p>デザイン4大原則の「強弱」や、先ほどのミラーの法則にもつながるところかと思います。<br />
逆にあまり立たせ過ぎたり、その量を増やすと力が薄れ、他の要素に埋もれやすくなるのでデザイナーさんの腕の見せどころといった印象です。</p>

<h3 id="CHAPTER9-テスラーの法則">CHAPTER9 テスラーの法則</h3>

<blockquote><p><strong>どんなシステムにも、それ以上減らすことのできない複雑さがある。複雑性保存の法則ともいう。</strong>
- どんなプロセスも、その核となる部分にはデザインの工夫をもってしても取り除くことのできない複雑性を抱えている。この複雑性による負荷を負うのは、システムかユーザーだ。
- この固有の複雑性をデザインと開発の過程でどうにかしながら、できる限りユーザーの負荷を減らそう。
- シンプルにしすぎてインターフェースが抽象的になりすぎていないかを気にしよう。</p></blockquote>

<p><a href="https://en.wikipedia.org/wiki/Larry_Tesler">Larry Tesler</a> さんがDTP開発の鍵となる対話型システム言語の開発に携わっていたときに発見した法則。</p>

<ul>
<li>どんなプロセスにも固有の複雑性というものがあり、これ以上減らせずどこかにしわ寄せするしかなくなるときが必ずやってくる。

<ul>
<li>つまり、ユーザーインターフェースが複雑になるか、デザイナーやエンジニアの仕事が複雑になるか、のどちらかである。</li>
</ul>
</li>
<li>例としてEメール送信では、差出人と宛先の2つの情報が必要だが、最近のメールアプリでは2つのことが行われている。

<ul>
<li>差出人を事前に入力しておくことと、宛先の入力開始時に候補をサジェストすること。</li>
</ul>
</li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927091719.png" width="800" height="455" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size: 80%"><span style="color: #8b939c">優れたデザインは、複雑さの負担がユーザーではなくサービス側で処理する必要がある。 - <a href="https://blog.btrax.com/jp/ux-10-laws/">UXデザイナーなら知っておきたいデザインに関する10の法則 デザイン会社 ビートラックス: ブログ</a></span></span></p>

<p>後から追加で出てくる仕様のようなことではなく、サービスを提供するにあたって本質的に必要なプロセスでも複雑性は介在する、といった内容と理解しました。<br />
現場の立場からすると、どこにしわ寄せがいってるかを対処する人以外が把握できているかも大事な気がします。</p>

<h3 id="CHAPTER10-ドハティのしきい値">CHAPTER10 ドハティのしきい値</h3>

<blockquote><p><strong>応答が0.4秒以内のとき、コンピューターとユーザーの双方がもっとも生産的になる。</strong>
- 0.4秒以内にフィードバックを行うことで、ユーザーの注意を引きつけ、生産性を高めよう。
- 体感性能を改善し、感じられる待ち時間を減らそう。
- アニメーションをいれることで、バックグラウンドで読み込みや処理が行われている間も、ユーザーをつなぎとめられる。
- プログレスバーは、正確であってもなくても待ち時間へのいらだちを和らげる。
- ほとんど処理時間がかかっていない場合でも、意図的に遅延させることで体感性能が改善して信頼感の醸成につながる。</p></blockquote>

<p>IBM社員のWalter J. Doherty さんと Ahrvind J. Thadani さんによって提唱された基準。</p>

<ul>
<li>人は0.1秒程度の応答時間であればほとんど気づかない。しかし、0.1〜0.3秒の遅延になると目につくようになり、同時にタスクをコントロールできないと感じ始める。</li>
<li>規定時間を短縮できない場合、何かしらフィードバックを返すことが有用。

<ul>
<li>スケルトンスクリーンを表示</li>
<li>ブラーアップ（画像を初期はぼかし表示）の利用

<ul>
<li>Mediumの例</li>
</ul>
</li>
<li>プログレスバーの表示

<ul>
<li>Gmai、AppleのOSアップデートの例</li>
</ul>
</li>
<li>楽観的UI（処理完了前に楽観的なフィードバックを提示）

<ul>
<li>Instagramのコメント投稿の例</li>
</ul>
</li>
</ul>
</li>
</ul>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220927091725.gif" width="781" height="735" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><span style="font-size: 80%"><span style="color: #8b939c">ローディングプレースホルダーよりもスケルトンスクリーンという方が一般的なよう - <a href="https://uxmilk.jp/55463">UXを向上させる５種類のアニメーションの使い方 | UX MILK</a></span></span></p>

<p>フィードバックの仕方について、フロントエンドの実装では時間がかかればかかるほど、ユーザー体験はよくなりそうな印象でした。（ プログレスバーよりもローディングアニメーションのほうが簡単など）</p>

<h1 id="感想">感想</h1>

<p>どの法則も言われてみればそうだなと感じる反面、いざ制作や開発をしている際に説得力を持って持って言えるかは、知識的なところも必要なのかなと感じました。<br />
すべてのプロジェクトでこのような話ができない場合もありますが、常に具体例を出して伝えて改善できるように日々ウェブサイトやアプリを見てみようと思いました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AWS認定試験 プラクティショナーから始めた人のためのアソシエイト資格取得'
description: ''
publishDate: '03/11/2022 00:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200105065609.png" width="295" height="171" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h1 id="-対象読者">🔰 対象読者</h1>

<ul>
<li>クラウドプラクティショナーを取得済みで、次は各アソシエイト資格にチャレンジしようとしている方</li>
<li>開発、インフラ構築以外の業務を普段行っている方</li>
</ul>


<h1 id="-背景">💡 背景</h1>

<p>業務でAWSに触れる機会が少なめな人観点での記事は少なく感じましたので、かなり主観が入ったものにはなりますが、それらを踏まえて共有のためにまとめてみました。</p>

<p>なお、2年ほど前に各アソシエイト資格を取得した際の記憶ため、一部情報が古かったり記憶違いがあるかもしれません。<br />
出題内容等についても詳しくは書いていませんのでご了承ください。</p>

<h1 id="-前提">🐥 前提</h1>

<h2 id="業務でのAWSとの関わり">業務でのAWSとの関わり</h2>

<p>主にHTML/CSSでのマークアップを行っており、業務でAWSに触れる機会は多くありません。<br />
S3バケットへGUIを使用してファイルをアップするのが定期的に触れる程度です。</p>

<h2 id="アソシエイト資格までの取得経過">アソシエイト資格までの取得経過</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> 受験日 </th>
<th style="text-align:left;"> 試験名 </th>
<th style="text-align:left;"> 結果 </th>
<th style="text-align:left;"> スコア </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">2019/6/8 </td>
<td style="text-align:left;"> CLF </td>
<td style="text-align:left;"> 合格 </td>
<td style="text-align:left;"> 830点 </td>
</tr>
<tr>
<td style="text-align:left;">2019/7/6 </td>
<td style="text-align:left;"> SAA </td>
<td style="text-align:left;"> 不合格 </td>
<td style="text-align:left;"> 630点 </td>
</tr>
<tr>
<td style="text-align:left;">2020/1/4 </td>
<td style="text-align:left;"> SAA </td>
<td style="text-align:left;"> 合格 </td>
<td style="text-align:left;"> 771点 </td>
</tr>
<tr>
<td style="text-align:left;">2020/2/9 </td>
<td style="text-align:left;"> DVA </td>
<td style="text-align:left;"> 合格 </td>
<td style="text-align:left;"> 845点 </td>
</tr>
<tr>
<td style="text-align:left;">2020/2/14 </td>
<td style="text-align:left;"> SOA </td>
<td style="text-align:left;"> 合格 </td>
<td style="text-align:left;"> 801点 </td>
</tr>
</tbody>
</table>


<p>CLF（プラクティショナー）に合格し、調子に乗ってSAAを受けて一度不合格でして、その後半年は諦めていました。<br />
再びやる気が起きて年明けにSAAに合格し、DVA、SOAもその勢いで受けました。</p>

<h1 id="️-受験まで">🛤️ 受験まで</h1>

<h2 id="おおまかな流れ">おおまかな流れ</h2>

<ul>
<li>受けてみようかな♪</li>
<li>情報収集

<ul>
<li>試験ガイドを見る</li>
<li>サンプル問題をチラ見する</li>
<li>いろいろググって体験記を漁る</li>
<li>対策本を買う</li>
</ul>
</li>
<li>スケジュール

<ul>
<li>受験日をざっくり決める

<ul>
<li>なんとなく案件が落ち着いていそうな頃を見計らう</li>
</ul>
</li>
<li>スケジュールを引く

<ul>
<li>受験日から逆算して、いつにどこまで本読んだり問題集解くか

<ul>
<li>平日2〜3hでこなせる量にして週末は少し多めに設定する</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>勉強（できる限り繰り返す）

<ul>
<li>サンプル問題を解く

<ul>
<li>落ち込む</li>
</ul>
</li>
<li>公式の対策動画を見る（デジタルトレーニング・ある資格のみ）</li>
<li>対策本を一通り読む、付属する問題集を解く

<ul>
<li>落ち込む</li>
</ul>
</li>
<li>模擬試験を受ける

<ul>
<li>落ち込む</li>
</ul>
</li>
<li>BlackBeltを見る、読む</li>
<li>まとめスプシ見直す</li>
</ul>
</li>
<li>受験</li>
</ul>


<h2 id="ポイント">ポイント</h2>

<h3 id="反復する">反復する</h3>

<p>1度で全てを暗記しようとするとパンクしてしまうので、例えば対策本を読む際は、1周目を出題範囲の把握のみと割り切って最後までとりあえず読むことを意識しました。<br />
2周目以降はある程度用語に馴染みが出てくるので、気になったものは追加でググるなどしました。</p>

<h3 id="苦手なサービスはBlackBeltで補完する">苦手なサービスはBlackBeltで補完する</h3>

<p>プラクティショナーの際には使ってませんでしたが、出題範囲でメインになりそうなサービスや、問題集で理解が不足しているサービスはBlackBeltを通して理解を深めました。<br />
動画があるものは1時間弱の尺ですが、全てを頭に入れるのは難しいため、ある程度出題される内容を把握した段階で見るのがおすすめです。</p>

<h3 id="自分にとって理解しやすい解説を探す">自分にとって理解しやすい解説を探す</h3>

<p>同じ機能の解説なのに、書籍では分かりづらいけど、BlackBeltや公式のFAQでは分かりやすいみたいなことが時々ありました。<br />
あまりその媒体の解説に固執しないでググってみるのも手かもしれません。</p>

<h3 id="まとめスプシを作る">まとめスプシを作る</h3>

<p>スプレッドシートを作成して頻出サービスの理解しづらいところを都度まとめておき、受験前に見直す方法が漏れなくできたと感じます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20220926131956.png" width="711" height="1200" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h1 id="-各試験の対策">📙 各試験の対策</h1>

<p>私が対策した内容を書きますが、今考えるともう少しやり方は違うほうが良いと思いますので、<strong>失敗した部分も含めて記載します。</strong></p>

<p>例えば、65問セットの問題集は1度の問題数が多く、難易度もバラツキがあったりするため、今からやり直すのであれば、 <a href="https://aws.koiwaclub.com/">AWS WEB問題集で学習しよう（koiwaclub）</a> を使う、などです。<br />
対策本についても新しいものが出ていると思うので、そちらをおすすめします。</p>

<h2 id="AWS-Certified-Solutions-Architect---AssociateSAA">AWS Certified Solutions Architect - Associate（SAA）</h2>

<h4 id="対策本">対策本</h4>

<p><a href="https://www.amazon.co.jp/dp/479739739X/">AWS認定資格試験テキスト AWS認定 ソリューションアーキテクト-アソシエイト</a><br />
SAAのときだけでなく、他の2つの試験前にも読みました。</p>

<h4 id="問題集">問題集</h4>

<p><a href="https://www.udemy.com/course/aws-knan/learn/quiz/4632478">【2022年版】AWS 認定ソリューションアーキテクト アソシエイト模擬試験問題集（6回分390問）</a><br />
めっちゃ難しくてへこみまくりました。<br />
問題集は解説を読んだり調べたりする時間のほうが多くなりがちだったので、それを踏まえて教材選びしたほうがいいと思います。</p>

<h4 id="ハンズオン">ハンズオン</h4>

<p><a href="https://www.udemy.com/course/aws-associate/">【2022年版】これだけでOK！ AWS 認定ソリューションアーキテクト – アソシエイト試験突破講座</a><br />
ハンズオン形式で結構やった意味があった記憶があります。これだけでOKではなかったです。</p>

<h3 id="所感">所感</h3>

<p>アソシエイトがはじめてだったので問題文が長いなというのと、範囲が広いなと思いました。<br />
ハンズオンはUdemyでなくともサービス網羅できるような教材をこなしておくと自信がつきました。<br />
1度不合格になった際はこんな難しいの無理と思っていましたが、やればできました。</p>

<h2 id="AWS-Certified-Developer---AssociateDVA">AWS Certified Developer - Associate（DVA）</h2>

<h4 id="対策本-1">対策本</h4>

<p><a href="https://www.amazon.co.jp/dp/4865941991/">AWS認定アソシエイト3資格対策~ソリューションアーキテクト、デベロッパー、SysOpsアドミニストレーター~</a><br />
当時専用の書籍はなかったのでこちらを読んでました。</p>

<p>現在はDVA用でありますのでこちらをおすすめします。<br />
<a href="https://www.amazon.co.jp/dp/4798063401/">ポケットスタディ AWS認定 デベロッパーアソシエイト (アソシエイト試験ポケットスタディ)</a><br />
DevOpsプロフェッショナルの受験前に読んだのですが、DVAのためと思うと詳しすぎるため若干オーバースペックな印象でした。</p>

<h4 id="問題集-1">問題集</h4>

<p><a href="https://www.udemy.com/course/aws-31955/">AWS 認定デベロッパー アソシエイト模擬試験問題集（5回分325問）</a><br />
これも難しかったです。</p>

<h4 id="ハンズオン-1">ハンズオン</h4>

<ul>
<li><a href="https://qiita.com/icck/items/e30d62e878b1b2c6f3d7">5分でAWS Elastic Beanstalk(作って、修正して、お片付け) - Qiita</a></li>
<li><a href="https://qiita.com/icck/items/9271056c97b825838ff3">はじめてのECS（Fargete） - Qiita</a></li>
<li><a href="https://dev.classmethod.jp/articles/getting-start-api-gateway/">ゼロから作りながら覚えるAPI Gateway環境構築 ｜ Developers.IO</a></li>
<li><a href="https://pages.awscloud.com/event_JAPAN_Hands-on-for-Beginners-Serverless-2019_LP.html?trk=aws_blog">AWS Hands-on for Beginners | AWS（サーバーレスアーキテクチャ）</a></li>
</ul>


<p>ハンズオンはどれもやってみて身になった印象があります。</p>

<h3 id="所感-1">所感</h3>

<p>それなりに1ヶ月勉強して割とやっとで合格だったため、巷で言われている「SAA取れたらDVAも簡単」は普段AWS触っている開発者目線の話かなと思いました。<br />
API GatewayやCodeシリーズなど開発案件に携わっている方は少しはなじみのある用語が多いため、とっつきづらさはそこまでない印象です。</p>

<h2 id="AWS-Certified-SysOps-Administrator---AssociateSOA">AWS Certified SysOps Administrator - Associate（SOA）</h2>

<h4 id="問題集-2">問題集</h4>

<p><a href="https://www.whizlabs.com/aws-sysops-administrator-associate/">AWS Certified SysOps Administrator Associate</a><br />
当時Udemyで問題集がなかったため、Whizlabsという海外のサイトを利用しました。<br />
こちらも本番よりちょい難しかった感触です。</p>

<h3 id="所感-2">所感</h3>

<p>はじめにサンプル問題やってみたら全問正解できてしまったので、DVAの受験から1週間挟まずに勢いで受験しました。<br />
SAAのときにあやふやにしていたCloudWatch周りの設定値など、結局はここで覚えることになるんだなと思った記憶があります。<br />
現在はハンズオンがあるとのことなので、合格できる自信はありません。</p>

<h1 id="-受験する前に知りたかったこと">💬 受験する前に知りたかったこと</h1>

<h2 id="どのくらい勉強すれば受かるのか">どのくらい勉強すれば受かるのか</h2>

<p>もともとの関心度合いや、プラクティショナー含め前回受験からの期間等、人によってまちまちだと思います。<br />
私の場合、</p>

<ul>
<li>SAA：60h</li>
<li>DVA：40h</li>
<li>SOA：20h</li>
</ul>


<p>ほどの感覚で、後にいくにつれて前回までの上積みが活かされる感覚でした。</p>

<p>アソシエイト資格に1度合格していると、ここまで理解できていれば受かりそう、というラインも分かってくる気がしています。<br />
<span style="font-size: 80%"><span style="color: #8b939c">※ 私の場合は、解答の選択肢を見なくても問題文を読んだ段階で答えが分かるものが50%くらいになったら、がそのラインです。</span></span></p>

<h2 id="アソシエイトの中でどれが一番難しいのか">アソシエイトの中でどれが一番難しいのか</h2>

<p>こちらも人にはよると思いますが、私の場合はSAAが一番難しかったです。<br />
勉強した時間に比例してそう感じるところもありますし、プラクティショナーと比べると長い問題文に慣れるところもあり難しく感じました。</p>

<h2 id="受験する順番はどうすればいいのか">受験する順番はどうすればいいのか</h2>

<p>最初に受けるのはSAAがおすすめです。<br />
SAAが網羅的で、DVA、SOAは細部を聞かれる問題が多い印象のためです。<br />
その後、DVA → SOAの順にしましたが、SAAとの被り具合はSOAのほうが大きい印象のため、SOA → DVAのほうが正攻法かもしれません。<br />
開発知識のある方は一番最初にDVAがとっかかりやすい場合もあると思います。</p>

<h2 id="ハンズオンはしたほうがいいのか">ハンズオンはしたほうがいいのか</h2>

<p>できる限りしたほうがいいと思います。<br />
私もハンズオン面倒くさがってあまりしてきませんでしたが、画面いじった経験のあるものはその後記憶に入りやすく、問題文を読んだ際にもイメージがしやすかったりしたためです。</p>

<h2 id="アソシエイト3資格を取得したらAWSをどのくらい理解できるのか">アソシエイト3資格を取得したらAWSをどのくらい理解できるのか</h2>

<p>業務上で使用する観点では、深くは理解できている状態でないと思います。<br />
マークアップでも同じことが言えると思いますが、例えば職業訓練校の課題で作られるコードと、案件で納品までに作られるコードはほぼ別物だと思うので、そのような雰囲気です。<br />
<span style="font-size: 80%"><span style="color: #8b939c">※ metaの設定、コンソールエラーやブラウザチェック等までを自主学習でできる人は少なく、仕事で複数案件リリースまでして理解できることが多いなど、そのような雰囲気です。</span></span></p>

<h1 id="さいごに">さいごに</h1>

<p>向き不向きがありますし、何に学習機会を費やすかは人それぞれかなと思います。<br />
私は社内での会話で分からないことが少なくなったりすることが資格取得を通して特に良いことかなと感じました。</p>

<p>長くなってしまいましたが、もし受験の際の手助けになりましたら幸いです。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AWS DevOps エンジニア プロフェッショナル 受験記'
description: ''
publishDate: '06/05/2021 18:15:23'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200105065609.png" alt="f:id:jotaki:20200105065609p:plain" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>これまで・今回の結果</h2>

<ul>
<li><a href="https://jtk.hatenablog.com/entry/2019/06/12/223000">2019/6/8 CLF 合格 830点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2019/07/09/100106">2019/7/6 SAA 不合格 630点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/01/05/074534">2020/1/4 SAA 合格 771点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/02/09/193011">2020/2/9 DVA 合格 845点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/02/15/195608">2020/2/14 SOA 合格 801点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/07/26/093803">2020/7/24 SAP 不合格 730点</a></li>
<li>2020/8/8 SAP 不合格 723点</li>
<li><a href="https://jtk.hatenablog.com/entry/2020/08/24/110611">2020/8/23 SAP 不合格 730点</a> ※システム不具合により試験スコア無効</li>
<li>2021/1/3 SAP 不合格 730点</li>
<li><a href="https://jtk.hatenablog.com/entry/2021/02/13/221620">2021/2/13 SAP 合格 862点</a></li>
<li>2021/6/5 DOP 合格 845点 ※今回分</li>
</ul>


<h2>受験理由・モチベーション</h2>

<p>ここまでやったら取りたいなの精神で。</p>

<h2>今回分の勉強計画</h2>

<p>合格記を見ているとSAP取れればDOPも取れる風潮がありますが、SAA → DVAのときになかなか苦戦したので、そこは信じずこれまで通り公式リソース + koiwaclub で行こうと思いました。<br />
またSAPはダラダラやってしまったので、今回は2ヶ月で仕留められるように予定を組みました。<br />
※ 結果は約3ヶ月</p>

<h2>やったこと</h2>

<ul>
<li>【公式】Exam Readiness: AWS Certified DevOps Engineer – Professional</li>
<li>【公式】サンプル問題の受験・復習</li>
<li>【読書】ポケットスタディ AWS認定 デベロッパーアソシエイト</li>
<li>【問題集】koiwaclub の DOP問題集</li>
<li>【公式】模擬試験の受験・復習</li>
<li>【公式】BlackBelt Online（YouTube中心に）</li>
</ul>


<h3>【公式】Exam Readiness: AWS Certified DevOps Engineer – Professional</h3>

<p>SAPのときのおじさんではなくて残念でしたが、DOPのほうが細かく動画での説明されていました。<br />
ただ量も多いので誤訳などもちょくちょくあり頭に入りづらかった印象です。<br />
だいたいの範囲はここで把握しました。</p>

<h3>【公式】サンプル問題の受験・復習</h3>

<p>4月の中旬に最初に解いてみて3/10。<br />
おそらく今までで一番取れていないので長くなりそうだな・・・と思いました。</p>

<p>試験当日にもう一度解いてみて8/10。<br />
ちょっといけるかもと思いました。</p>

<h3>【読書】ポケットスタディ AWS認定 デベロッパーアソシエイト</h3>

<p><a href="https://jtk.hatenablog.com/entry/2021/03/29/082634">感想</a><br />
DVAのときこんなに覚えたかなというくらいには細かく載っているので、DOP対策にもなるんじゃないかと思いました。</p>

<p>3ヶ月だいたい寝る前に読んで3周。</p>

<h3>【問題集】koiwaclub の DOP問題集</h3>

<p>7問1セットの計47セットを2周。</p>

<h3>【公式】模擬試験の受験・復習</h3>

<p>koiwaを1周した5/9に受けてみる。</p>

<p>総合スコア: 55%<br />
1.0 SDLC Automation: 75%<br />
2.0 Configuration Management and Infrastructure as Code: 33%<br />
3.0 Monitoring and Logging: 66%<br />
4.0 Policies and Standards Automation: 66%<br />
5.0 Incident and Event Response: 0%<br />
6.0 High Availability, Fault Tolerance, and Disaster Recovery : 100%</p>

<p>難しくスコアもひどいものでしたが、DOPはそんなもんという記事を見ていたので平静を装いました。<br />
Incident and Event Response は CloudWatch Events あたりが主なのでその後は少し意識して勉強。</p>

<h3>【公式】BlackBelt Online（YouTube中心に）</h3>

<p>受験前日6/4に一通りみる。</p>

<ul>
<li><a href="https://www.youtube.com/watch?v=31-w23SdOAs">CodeStar &amp; CodePipeline</a></li>
<li><a href="https://www.youtube.com/watch?v=rqy_wluHDe0">CodeCommit &amp; CodeArtifact</a></li>
<li><a href="https://www.youtube.com/watch?v=Zzv1_ztf-B0">CodeBuild</a></li>
<li><a href="https://www.youtube.com/watch?v=cXa2S2kS0TU">CodeDeploy</a></li>
<li><a href="https://www.youtube.com/watch?v=Viyqh9fNBjw">CloudFormation</a></li>
<li><a href="https://www.youtube.com/watch?v=gOaZeJpb0Y4">CloudWatch</a></li>
<li><a href="https://www.youtube.com/watch?v=UXSbh4Wsp7c">Systems Manager</a></li>
<li><a href="https://www.youtube.com/watch?v=o01IOnVvRxM">EC2 Auto Scaling and AWS Auto Scaling</a></li>
<li><a href="https://d0.awsstatic.com/webinars/jp/pdf/services/20170822_AWS-BlackBelt_Deployment_on_AWS.pdf">Deployment on AWS</a></li>
</ul>


<h2>覚えたこと</h2>

<p>主に Exam Readiness や koiwaclub で頻出するものなどは公式ドキュメントなど見て復習。<br />
NRIネットコムさんの <a href="https://tech.nri-net.com/entry/aws_certified_devops_engineer_professional">AWS 認定 DevOps エンジニア – プロフェッショナル(AWS Certified DevOps Engineer – Professional)の学習方法</a> も参考にしました。</p>

<ul>
<li>AMI

<ul>
<li>事前作成のAMI</li>
<li>ゴールデンイメージ</li>
</ul>
</li>
<li>AutoScaling

<ul>
<li>AMI の起動設定</li>
<li>ライフサイクルフック</li>
</ul>
</li>
<li>Beanstalk

<ul>
<li>X-Ray</li>
<li>URLスワップ</li>
<li>デプロイと手動ロールバック</li>
</ul>
</li>
<li>API Gateway

<ul>
<li>リリース手法</li>
<li>エラーシューティング</li>
</ul>
</li>
<li>CloudFormation

<ul>
<li>テンプレート構文（Parameters, Conditions, Mappings, Outputs..）</li>
<li>DeletionPolicy</li>
<li>カスタムリソース</li>
<li>デプロイ対象（Auto Scaling Group, Lambda）</li>
<li>デプロイ手法とロールバック</li>
<li>CodePipeline を使ったデプロイ</li>
</ul>
</li>
<li>CodePipeline

<ul>
<li>CloudWatch Events との連携</li>
<li>カスタムアクション</li>
</ul>
</li>
<li>CodeCommit

<ul>
<li>IAMポリシー</li>
<li>ブランチとステージ</li>
</ul>
</li>
<li>CodeDeploy

<ul>
<li>デプロイ対象（Auto Scaling Group, Lambda）</li>
<li>デプロイ手法とロールバック</li>
<li>CodePipeline を使ったデプロイ</li>
</ul>
</li>
<li>CloudWatch

<ul>
<li>Logsのカスタムメトリクス</li>
<li>Eventsでできること</li>
</ul>
</li>
<li>Systems Manager

<ul>
<li>Automation</li>
<li>Run Command</li>
<li>Patch Manager</li>
</ul>
</li>
<li>Trusted Advisor

<ul>
<li>CloudWatch Events との統合</li>
<li>サービス制限</li>
<li>キー漏洩時の対応</li>
</ul>
</li>
<li>その他

<ul>
<li>ECS/ECR</li>
<li>Config + Lambda, GuardDuty, Inspector</li>
<li>Health Dashboard</li>
<li>Service Catalog</li>
</ul>
</li>
</ul>


<h2>本試験</h2>

<p>オンラインで受験。<br />
<a href="https://pages.awscloud.com/Global_TrainCert_Japan_Online_Proctoringja.html">2回目の再受験が無料キャンペーン</a> をしていたので、最近そこまで身が入ってなかったけど1回受けてみようと考えました。</p>

<p>2hちょっとで一通り完了してトイレ行きたくてすぐに終了。<br />
手応えは、</p>

<p>30%: 正解<br />
20%: たぶん正解<br />
40%: 微妙<br />
10%: 不正解</p>

<p>のような感じ。</p>

<p>結果スコアは845点とのこと。思ったより取れてました。<br />
分野ごとの成績がPDFに入ってなかったけどまだ処理中なのかもです。</p>

<h2>まとめ</h2>

<p>振り返ってみると4月頭から勉強していたのでそれなりの勉強量だったのですが、ここ何週間かサボってしまっていたので、合格と出たときは受かっちゃったなーという感想。これまでで一番手応えない内容でした。</p>

<p>プラクティショナー → アソシエイト → プロフェッショナルの順で6個目とれました。<br />
SAP取れたときにも感じましたが取る前にイメージしていた理解度には到底及んでいなく、勉強すればするほど分からないことも増えていきます。</p>

<p>調子乗ってSCSとか受けるとまた沼にハマるので、本当にここでAWS資格はおしまいです。<br />
3年後の更新はそのとき考えます・・・</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2021年3月 振り返り'
description: ''
publishDate: '03/31/2021 12:21:41'
---

[CONTENTS-START]
<h1>結果</h1>

<h2>ブログ</h2>

<p><strong>目標：月 8 回（週2回）更新</strong><br />
<strong>結果：月 10 回 更新</strong></p>

<h2>読書</h2>

<p><strong>目標：月 1 冊</strong><br />
<strong>結果：月 3 冊</strong></p>

<h1>反省点など</h1>

<p>満遍なくインプットできました。</p>

<h1>来月に向けて</h1>

<p>AWS資格と並行しつつフロントエンド領域もとなると難しいですがなんとかやっていきたいです。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】ポケットスタディ AWS認定 デベロッパーアソシエイト'
description: ''
publishDate: '03/29/2021 08:26:34'
---

[CONTENTS-START]
<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4798063401/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/51PGtERBRwL.jpg" class="hatena-asin-detail-image" alt="ポケットスタディ AWS認定 デベロッパーアソシエイト (アソシエイト試験ポケットスタディ)" title="ポケットスタディ AWS認定 デベロッパーアソシエイト (アソシエイト試験ポケットスタディ)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4798063401/hatena-blog-22/">ポケットスタディ AWS認定 デベロッパーアソシエイト (アソシエイト試験ポケットスタディ)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%BB%B3%B2%BC%B8%F7%CD%CE" class="keyword">山下光洋</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2021/03/09</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>DOP資格対策として、今月発売のDVA対策本を読みました。</p>

<h2>目次</h2>

<ul>
<li>SECTION1 AWS認定デベロッパーアソシエイト</li>
<li>SECTION2 展開（デプロイ）</li>
<li>SECTION3 セキュリティ</li>
<li>SECTION5 リファクタリング</li>
<li>SECTION6 モニタリングとトラブルシューティング</li>
<li>SECTION7 本試験想定問題集</li>
</ul>


<p>SECTION1は試験概要。<br />
SECTION2〜6が各カテゴリーに準じたサービスや機能の解説+章末のサンプル問題。<br />
SECTION7は50問の問題集です。</p>

<p>ボリュームとしてはかなり豊富で細かく各サービスの機能やAPIまで網羅されている印象です。<br />
章末のサンプル問題（復習用の問題）も数が豊富で、各章読み込まないと答えられないものになっているので基礎知識の習得に向いていると感じます。</p>

<h2>良かった点</h2>

<ul>
<li>DVA試験に必要と思われるサービスや解説が網羅されている</li>
<li>章末のサンプル問題で解説されていた知識の定着ができる</li>
<li>重要な機能説明には設定・構築手順がマネジメントコンソールのキャプチャ付きで解説されている</li>
<li>API名、メトリクス名、ポリシー、コードなど細かく記載されている</li>
</ul>


<h2>悪かった点</h2>

<ul>
<li>ポケットスタディシリーズ共通かもしれませんが、見出しが分かりづらい</li>
<li>キャプチャの一部が低解像度になっている</li>
</ul>


<h2>感想</h2>

<p>網羅範囲としては値段に相反してかなり広くボリュームも多く感じました。<br />
DVA→SAPの順で受験済みですが、SAPの際に知った移行の6つのRなども掲載されているので、むしろDVAの範囲にとどまっていない印象です。<br />
試験対策本ですが、開発系サービスの基礎知識の向上や概要を知りたいためのリファレンスにも使えるのではないかと思います。</p>

<p>今回に限らずですが、AWSでできることが多すぎる分どこまで勉強しても果てしないな..という感想。<br />
設定手順がキャプチャ付きで掲載されているので、CloudWatchエージェントはSystems Managerでインストールするんだなど新しい発見も多々ありました。</p>

<p>特にアーキテクト試験の設計系とデベロッパー試験の開発系で扱う範囲や覚えることの粒度みたいなものも変わるので、その頭の切り替えにはとても良い本でした。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Nuxt.js + AWS ECS Fargate その4（まとめ）'
description: ''
publishDate: '03/25/2021 16:22:23'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210321165648.png" alt="f:id:jotaki:20210321165648p:plain" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h1>GitHub</h1>

<p><a href="https://github.com/yuheijotaki/nuxt-fargate_app">https://github.com/yuheijotaki/nuxt-fargate_app</a></p>

<h1>これまでの記事</h1>

<ul>
<li><a href="https://jtk.hatenablog.com/entry/2021/03/21/165736">その1 Nuxt.jsアプリ作成〜ECRリポジトリへのプッシュ</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2021/03/22/131359">その2 ALBとECS Fargate展開</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2021/03/24/181513">その3 CI/CD環境作成</a></li>
<li>その4 まとめ（本記事）</li>
</ul>


<h1>構成</h1>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210325162129.png" alt="f:id:jotaki:20210325162129p:plain" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<ol>
<li>Nuxt.js（SSR）のコードを GitHub にプッシュするとCodePipelineが走る。</li>
<li>CodeBuild でイメージをビルド。ECRへイメージを登録</li>
<li>CodeBuild の成功を受けてタスク・サービスの更新。</li>
<li>ECS（Fargate）が ECR からイメージ取得。</li>
<li>CodeDeploy が ECS（Fargate）へデプロイ。</li>
</ol>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210325161454.png" alt="f:id:jotaki:20210325161454p:plain" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>VPC内はコンテナタスクを各サブネットに配置しALBで分散する。</p>

<h1>感想</h1>

<p>当初AWSサービスを使ってアプリを公開するところまでしてみたいなという気持ちから、 <a href="https://zenn.dev/hibriiiiidge/books/49ee4063b10cec1df1a2">Nuxt.js + Ruby on Rails + AWS Fargate の開発・デプロイチュートリアル</a> を本の内容通りに構築することを検討していました。<br />
ただ最初のRubyのDB設定のところでつまづきまくり、バックエンド構築を理解したいわけでもないしなぁ..と考え直し、今回の Nuxt.js + ECS + CodePipeline という構成でやってみる形になりました。</p>

<p>大枠の感想としては、資格勉強はあまり役には立っていないかもなというのという気持ち半分、意外と何日か触れば一通りはできるものだなという気持ち半分と言った所です。</p>

<p>実際には考慮するべき点が多くあると思っています。</p>

<ul>
<li>サービスのスケール面

<ul>
<li>ALBのターゲットグループの設定内容</li>
<li>DockerのCPU,メモリ等の設定内容</li>
</ul>
</li>
<li>アプリケーション設定

<ul>
<li>DNS設定</li>
<li>nuxt.config.js</li>
</ul>
</li>
<li>ビルド&amp;デプロイ設定

<ul>
<li>テスト</li>
<li>ステージングや本番環境などステージごとのデプロイ</li>
</ul>
</li>
<li>セキュリティ

<ul>
<li>ググりながらやってみたものの、特にタスク定義ロールなどの理解が乏しい</li>
</ul>
</li>
</ul>


<p>このようなことをやってみると、インフラエンジニアや開発エンジニアの方はこれらの考慮点なども含め構築されていると思うので、改めてすごいなということでした。<br />
特にCodeDeployの権限周りをかなりググりながら進めましたが、AWSのドキュメントで日本語訳が追いついていないものやエラー内容が引っかからないなどあり検索能力や基礎知識が足りていないなと実感もしました。</p>

<p>ただほんわりとしか分かっていなかったコンテナというそのものであったり、CodePipelineの設定などを実際にやってみて、多少は理解は進んだという感触もあるので次回また何かしらに生かしていきたいと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Nuxt.js + AWS ECS Fargate その3（CI/CD環境作成）'
description: ''
publishDate: '03/24/2021 18:15:13'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210321165648.png" alt="f:id:jotaki:20210321165648p:plain" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><a href="https://jtk.hatenablog.com/entry/2021/03/22/131359">前回</a>に続いてAWSのCodePipelineを使用してCI/CD環境を作成しようと思います。</p>

<p>アプリケーションコードのリポジトリはGitHubを使用しているので、GitHub Actionsでもできるようですが、そちらは一度触ったことがありAWSサービスの理解を深めたいので今回はAWSサービスを使用してみます。</p>

<p>ECS → CodeDeploy だけでECRリポジトリにプッシュされた際にデプロイ実行をできますが、CodePipeline を使って少し実戦的にやってみました。</p>

<p>参考にしたのは下記の記事などです。</p>

<ul>
<li><a href="https://www.seeds-std.co.jp/blog/creators/2020-05-27-153520/">AWS CodePipelineを使用してgit pushでAmazon ECSをデプロイする | SEEDS Creators' Blog | 株式会社シーズ</a></li>
<li><a href="https://www.ragate.co.jp/blog/articles/2200">Aws Code PipelineでReactjs/Nextのデプロイを自動化！ECSへ展開してみました | Ragate ブログ</a></li>
<li><a href="https://cam-inc.co.jp/p/techblog/405624087101047961">ECSのCI/CD環境をCodePipelineに変えた話 | 株式会社CAM</a></li>
<li><a href="https://qiita.com/j-sunaga/items/ae990d2cc791e4eded3f">【AWS】GithubからCodePipelineでECS/Fargateにデプロイする方法 - Qiita</a></li>
<li><a href="https://qiita.com/NaokiIshimura/items/86ec84a13a6ceb831bba">【備忘録】AWS ECS Blue / Green Deploy 実現のために学んだこと - Qiita</a></li>
<li><a href="https://pages.awscloud.com/rs/112-TZM-766/images/AWS_CICD_ECS_Handson.pdf">AWS_CICD_ECS_Handson.pdf</a></li>
</ul>


<h1>パイプラインを作成</h1>

<p>ECS > クラスター > 該当のサービスを選択 > 「デプロイメント」タブ > パイプラインを作成</p>

<pre class="code" data-lang="" data-unlink># Step1 パイプラインの設定を選択する
パイプライン名: nuxt-fargate-pipeline
サービスロール: 新しいサービスロール
ロール名: AWSCodePipelineServiceRole-ap-northeast-1-nuxt-fargate-pipeline

# Step2 ソースステージを追加する
ソースプロバイダー: GitHub（バージョン2）
接続 → 接続名: 任意のもの
リポジトリ: 該当リポジトリ
ブランチ名: master
ソースコードの変更時にパイプラインを開始する: チェック

# Step3 ビルドステージを追加する
プロバイダーを構築する: AWS CodeBuild
リージョン: アジアパシフィック（東京）

## ビルドプロジェクト
プロジェクト名: nuxt-fargate-build
オペレーティングシステム: Amazon Linux
ランタイム: Standard
イメージ: 最新のもの
イメージのバージョン: 最新のもの
環境タイプ: Linux
Docker権限付与: チェック
サービスロール: 新しいサービスロール
ロール名: codebuild-nuxt-fargate-build-service-role

## 環境変数
AWS_ACCOUNT_ID: &lt;アカウントID&gt;
AWS_DEFAULT_REGION: ap-northeast-1
REPOSITORY_NAME: nuxt-fargate_app
REPOSITORY_URI: 123456789012.dkr.ecr.ap-northeast-1.amazonaws.com
IMAGE_TAG: latest

# Step4 デプロイステージを追加する
デプロイプロバイダー: Amazon ECS（ブルー/グリーン）
リージョン: アジアパシフィック（東京）
入力アーティファクト: BuildArtifact
AWS CodeDeploy アプリケーション名: nuxt-fargate-deploy
AWS CodeDeploy デプロイグループ: nuxt-fargate-deploy-group
Amazon ECS タスク定義: BuildArtifact
AWS CodeDeploy AppSpec ファイル: BuildArtifact
入力アーティファクトを持つイメージの詳細: BuildArtifact
タスク定義のプレースホルダー文字: IMAGE1_NAME</pre>


<h1>サービスロールの設定</h1>

<p>ECRにアクセスできるようにCodeBuildのサービスロールを設定する。</p>

<p>CodeBuild > ビルドプロジェクト > 該当のプロジェクト > 「ビルドの詳細」タブ > 環境 > サービスロール<br />
のARNをクリックし、 <code>AmazonEC2ContainerRegistryPowerUser</code> ポリシーをアタッチする。</p>

<p>参考： <a href="https://qiita.com/NaokiIshimura/items/e73898244d784d7fbce7">【備忘録】CodeBuildで<code>aws ecr get-login</code>コマンド実行時にエラーが発生する - Qiita</a></p>

<h1>設定ファイルの準備</h1>

<p><a href="https://github.com/yuheijotaki/nuxt-fargate_app">GitHub</a></p>

<ul>
<li>buildspec.yml: ビルド設定ファイル</li>
<li>appspec.yaml: ECSサービスに含めるタスク定義の設定ファイル</li>
<li>task-definition.json: デプロイするタスク定義の設定ファイル</li>
</ul>


<p>ビルドしてみて、エラー参考にググってみたいにしてなんとかビルド成功しました。<br />
雰囲気はGitHub ActionsやNetlifyと同じですが、コンソール内の権限周りが悪いのか、コードの記述が分からなくてハマってしまいました。<br />
10回もしないうちにDockerのRate Limitに引っかかったので、下記の対策を行うなどを推奨します。</p>

<p>参考： <a href="https://fu3ak1.hatenablog.com/entry/2020/11/22/122241">Docker Hub の Rate Limitに引っかかったのでdocker loginで対策した - fu3ak1's tech days</a></p>

<h1>確認</h1>

<p>以上の手順でパイプライン作成。<br />
masterにプッシュしたら、ECRリポジトリにプッシュされ、ビルドしたイメージがALBにデプロイされる。<br />
次回はこれまでのまとめを兼ねて構成図等で振り返りをして終わりにしようと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Nuxt.js + AWS ECS Fargate その2（ALBとECS Fargate展開）'
description: ''
publishDate: '03/22/2021 13:13:59'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210321165648.png" alt="f:id:jotaki:20210321165648p:plain" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><a href="https://jtk.hatenablog.com/entry/2021/03/21/165736">前回</a>に引き続きAWS側の設定を行っていきます。<br />
コンテナのタスク、サービスについては改めて理解するため下記が参考になりました。<br />
<a href="https://dev.classmethod.jp/articles/developers-io-2020-connect-kaji-ecs-fargate/">基礎から応用までじっくり学ぶECS Fargateを利用したコンテナ環境構築 #Fargate | DevelopersIO</a></p>

<p>構築手順の参考にした記事は <a href="https://qiita.com/NaokiIshimura/items/bf4c21500a5f542dff9a">Amazon Fargate でコンテナを動かす - Qiita</a> になります。</p>

<h1>ALB の構築</h1>

<p>Application Load Balancer を作成。<br />
関係ないですが、ALBがEC2のメニューの中にあること、Gateway Load Balancer という新しい種類のロードバランサーがあるのを初めて知りました。</p>

<pre class="code" data-lang="" data-unlink># ロードバランサーの設定
名前: nuxt-fargate-load-balancer
スキーム: インターネット向け
リスナー: HTTP:80
VPC: デフォルトVPC
AZ: ap-northeast-1a, ap-northeast-1c のサブネット

# セキュリティグループの設定
セキュリティグループ名: nuxt-fargate-sg
タイプ: カスタムTCP
プロトコル: TCP
ポート範囲: 80
ソース: カスタム 0.0.0.0/0, ::/0

# ルーティングの設定
ターゲットグループの名前: nuxt-fargate-target-group
ターゲットの種類: IP
プロトコル: HTTP
ポート: 80</pre>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210322130752.png" alt="f:id:jotaki:20210322130752p:plain" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h1>ECS Fargate設定</h1>

<p>タスク → クラスター → サービスの順で作成。<br />
認定試験勉強でもごっちゃになるやつですが、クラメソさんの下記の説明が個人的には一番しっくりきます。</p>

<blockquote><ul>
<li>ECS クラスタ → 以下のサービスとタスクの器、かたまり</li>
<li>ECS サービス → タスク（以下）を指定し、何個起動するのか指定、ALBと関連付けするもの</li>
<li>ECS タスク → CPU/メモリの割り当て、ポート設定などDockerコンテナの起動方法を指定する設定書みたいなもの</li>
</ul>
</blockquote>

<script async class="speakerdeck-embed" data-slide="29" data-id="9d0cb46a3c384b54ade2cd6adb077efd" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>


<h2>タスク実行ロールを作成（ない場合）</h2>

<p>事前にロール <code>ecsTaskExecutionRole</code> がない場合は作成しておく。<br />
※ <a href="https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/task_execution_IAM_role.html">Amazon ECS タスク実行 IAM ロール</a> の「タスク実行 IAM ロールの作成」通りに作成する。</p>

<h2>タスク定義の作成</h2>

<p>ECS > タスク定義 > 新しいタスク定義の作成 > FARGATE を選択</p>

<pre class="code" data-lang="" data-unlink># タスクとコンテナの定義の設定
タスク定義名: nuxt-fargate-task
タスクロール: ecsTaskExecutionRole
タスクメモリ (GB): 0.5GB
タスク CPU (vCPU): 0.25vCPU

## コンテナの追加
コンテナ名: nuxt-fargate-container
イメージ: &lt;イメージURI&gt;
ポートマッピング: 80</pre>


<p>イメージURIはECRのイメージURI <code>***.dkr.ecr.ap-northeast-1.amazonaws.com/***</code> を入力</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210322130807.png" alt="f:id:jotaki:20210322130807p:plain" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>クラスターの作成</h2>

<p>ECS > クラスター > クラスターの作成 > FARGATE を選択</p>

<pre class="code" data-lang="" data-unlink># クラスターの設定
クラスター名: nuxt-fargate-cluster</pre>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210322130819.png" alt="f:id:jotaki:20210322130819p:plain" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>サービスの作成</h2>

<p>ECS > クラスター > 「サービス」タブ > 作成</p>

<pre class="code" data-lang="" data-unlink># サービスの設定
起動タイプ: FARGATE
タスク定義: nuxt-fargate-task
クラスター: nuxt-fargate-cluster
サービス名: nuxt-fargate-service
タスクの数: 2
最小ヘルス率: 50
最大率: 200

# ネットワーク構成
クラスター VPC: デフォルトVPC
サブネット: ap-northeast-1a, ap-northeast-1c
ロードバランサーの種類: ALB
ロードバランサー名: nuxt-fargate-load-balancer

## ロードバランス用のコンテナ
プロダクションリスナーポート: 80:HTTP
ターゲットグループ名: nuxt-fargate-target-group</pre>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210322130832.png" alt="f:id:jotaki:20210322130832p:plain" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h1>確認</h1>

<p>EC2 > ロードバランサー > 該当のELB選択 > DNS名<br />
<a href="http://nuxt-fargate-load-balancer-*******.ap-northeast-1.elb.amazonaws.com/">http://nuxt-fargate-load-balancer-*******.ap-northeast-1.elb.amazonaws.com/</a> にアクセスするとサイトが無事表示されました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210322131341.png" alt="f:id:jotaki:20210322131341p:plain" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>表示されない場合は、</p>

<ul>
<li>ECS > クラスター > タスク > ステータスが <code>RUNNING</code> になっている</li>
<li>EC2 > ターゲットグループ > 該当のターゲットグループ選択 > Targets > Statsが <code>healthy</code> になっている</li>
</ul>


<p>かを確認して <code>unhealthy</code> などになっていればトラブルシューティングを行う。</p>

<p>最初、ALBのターゲットの種類をインスタンスで設定してしまい、unhealthy でサイトも表示されないままになってしまいました。<br />
ALBの作成、ECSの設定を再度Qiitaの記事参考にやり直して2回目で無事表示できました。<br />
VPCやセキュリティグループも触るの試験勉強のハンズオン以来でしたが、とりあえず表示させる所までできてよかったです。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Nuxt.js + AWS ECS Fargate その1（Nuxt.jsアプリ作成〜ECRリポジトリへのプッシュ）'
description: ''
publishDate: '03/21/2021 16:57:36'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210321165648.png" alt="f:id:jotaki:20210321165648p:plain" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p><a href="https://www.ragate.co.jp/blog/articles/1947">トレンドのVuejs/NuxtをAws ECS, FargateでSSR、詳細解説します🚀</a> の記事を参考に進めてみる。</p>

<h1>ローカル環境 使用バージョン</h1>

<ul>
<li>Node.js: 12.11.0</li>
<li>AWS CLI: 2.1.31</li>
</ul>


<h1>Nuxt.js アプリの作成</h1>

<p>create nuxt-app で作成します。</p>

<pre class="code bash" data-lang="bash" data-unlink>$ yarn create nuxt-app nuxt-fargate_app
yarn create v1.13.0
create-nuxt-app v3.6.0
...</pre>


<p>設定項目は下記のようにしました。<br />
Fargateで動かすのでRendering modeはUniversalを指定。<br />
しばらく触ってないと細々変わりますね。。</p>

<pre class="code bash" data-lang="bash" data-unlink>? Project name: nuxt-fargate_app
? Programming language: JavaScript
? Package manager: Npm
? UI framework: None
? Nuxt.js modules: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)
? Linting tools: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)
? Testing framework: None
? Rendering mode: Universal (SSR / SSG)
? Deployment target: Server (Node.js hosting)
? Development tools: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)
? What is your GitHub username? yuhei jotaki
? Version control system: Git</pre>


<h1>Dockerfile を使用してイメージを作成</h1>

<p>Docker 向けに package.json の scripts を調整する。</p>

<pre class="code lang-json" data-lang="json" data-unlink>  ...
  &quot;<span class="synStatement">scripts</span>&quot;: <span class="synSpecial">{</span>
    &quot;<span class="synStatement">dev</span>&quot;: &quot;<span class="synConstant">HOST=0.0.0.0 PORT=3000 nuxt</span>&quot;,
    &quot;<span class="synStatement">build</span>&quot;: &quot;<span class="synConstant">nuxt build</span>&quot;,
    &quot;<span class="synStatement">start</span>&quot;: &quot;<span class="synConstant">HOST=0.0.0.0 PORT=3000 nuxt start</span>&quot;,
    &quot;<span class="synStatement">generate</span>&quot;: &quot;<span class="synConstant">nuxt generate</span>&quot;
  <span class="synSpecial">}</span>,
  ...
</pre>


<p>Dockerfile をプロジェクトディレクトリに作成して下記のようにする。<br />
Node.jsのバージョンは <a href="https://hub.docker.com/_/node/">公式のイメージ</a> を参考にする。</p>

<pre class="code" data-lang="" data-unlink>FROM node:12

RUN mkdir -p /var/www/nuxt-fargate_app
WORKDIR /var/www/nuxt-fargate_app
COPY ./ /var/www/nuxt-fargate_app
RUN npm run build

EXPOSE 3000

ENTRYPOINT [&#34;npm&#34;, &#34;run&#34;, &#34;start&#34;]</pre>


<p>次にDockerアプリをrunningにする。<br />
その後ビルドしてイメージが作成できているか確認。</p>

<pre class="code bash" data-lang="bash" data-unlink>$ docker build -t nuxt-fargate_app .
...
Successfully tagged nuxt-fargate_app:latest</pre>




<pre class="code bash" data-lang="bash" data-unlink>$ docker images
REPOSITORY                 TAG              IMAGE ID       CREATED          SIZE
nuxt-fargate_app           latest           XXXXX   39 seconds ago   1.03GB
...</pre>


<p>起動してみる。<br />
ここはあまり分かってないですが、 0.0.0.0:3000 でアクセスできたのでOKなのかな</p>

<pre class="code bash" data-lang="bash" data-unlink>$ docker run -d -p 3000:3000 nuxt-fargate_app
...
$ docker ps
CONTAINER ID   IMAGE              COMMAND           CREATED          STATUS          PORTS                    NAMES
61f86de41a7a   nuxt-fargate_app   &#34;npm run start&#34;   21 seconds ago   Up 19 seconds   0.0.0.0:3000-&gt;3000/tcp   amazing_yalow</pre>


<h1>ECRでリポジトリを作成してイメージをプッシュする</h1>

<p>AWS ECR > リポジトリ作成をする。<br />
今回は <code>nuxt-fargate_app</code> というリポジトリ名にしました。</p>

<p>その後コマンドで認証してイメージをプッシュする。<br />
それぞれつまづきましたが、認証は <code>get-login</code> は現在非推奨のため <code>get-login-password</code> が良いとのことで <a href="https://docs.aws.amazon.com/ja_jp/AmazonECR/latest/userguide/getting-started-cli.html">Amazon ECR での AWS CLI の使用 - Amazon ECR</a> を参考にしました。<br />
※ 後々振り返ると、ECRコンソール内 > リポジトリ > 該当リポジトリを選択 > プッシュコマンドの表示 にもコマンドが書いてありました。</p>

<pre class="code bash" data-lang="bash" data-unlink># &lt;profile-name&gt;: ~/.aws/credentials のプロファイルの名前
# &lt;app-name&gt;: nuxt-fargate_app
# &lt;aws-region-name&gt;: ap-northeast-1
# &lt;aws-account-id&gt;: アカウントID

# ユーザー切り替え
$ export AWS_DEFAULT_PROFILE=&lt;profile-name&gt;

# 認証トークンを取得し、レジストリに対して Docker クライアントを認証します。
$ aws ecr get-login-password | docker login --username AWS --password-stdin https://&lt;aws-account-id&gt;.dkr.ecr.&lt;aws-region-name&gt;.amazonaws.com

# Docker イメージを構築します。
$ docker build -t &lt;app-name&gt;:latest .

# 構築が完了したら、このリポジトリにイメージをプッシュできるように、イメージにタグを付けます。
$ docker tag &lt;app-name&gt;:latest &lt;aws-account-id&gt;.dkr.ecr.&lt;aws-region-name&gt;.amazonaws.com/&lt;app-name&gt;:latest

# 新しく作成した AWS リポジトリにこのイメージをプッシュします。
$ docker push &lt;aws-account-id&gt;.dkr.ecr.&lt;aws-region-name&gt;.amazonaws.com/&lt;app-name&gt;:latest</pre>


<p>以上でイメージをプッシュできました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210321165218.png" alt="f:id:jotaki:20210321165218p:plain" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>AWSのコンソールやCLI最近あまり触る機会がなかったですが、CLIのバージョンアップやプロファイルの切り替え等々つまづくところが多かったです。<br />
正直あまり分かってない部分も多いですが、次回以降はECSの設定になりそうですので引き続き更新できたらと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】フロントエンド開発入門 プロフェッショナルな開発ツールと設計・実装'
description: ''
publishDate: '03/18/2021 20:00:25'
---

[CONTENTS-START]
<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4798061778/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/51WuogurA3L.jpg" class="hatena-asin-detail-image" alt="フロントエンド開発入門 プロフェッショナルな開発ツールと設計・実装" title="フロントエンド開発入門 プロフェッショナルな開発ツールと設計・実装"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4798061778/hatena-blog-22/">フロントエンド開発入門 プロフェッショナルな開発ツールと設計・実装</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%B0%C2%C3%A3%20%CE%C7" class="keyword">安達 稜</a>,<a href="http://d.hatena.ne.jp/keyword/%C9%F0%C5%C4%20%CD%A1" class="keyword">武田 諭</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2020/10/09</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>目次</h2>

<ul>
<li>Part1 導入編 なぜ使うかを知る

<ul>
<li>Chapter1 フロントエンドエンジニアの歴史</li>
<li>Chapter2 フロントエンドエンジニアに求められるスキル</li>
<li>Chapter3 フロントエンドにおける一般的なツール群</li>
<li>Chapter4 開発の現場における仕事の進め方</li>
</ul>
</li>
<li>Part2 実践編 どう使うかを学ぶ

<ul>
<li>Chapter5 開発環境</li>
<li>Chapter6 設計と実装</li>
<li>Chapter7 CI/CD によって受けられるメリット</li>
</ul>
</li>
<li>Part3 応用編 より深く学ぶために知る

<ul>
<li>Chapter8 解析とモニタリング</li>
<li>Chapter9 チーム開発と Web への貢献</li>
</ul>
</li>
</ul>


<p>Part1ではフロントエンド領域においてツールの紹介を取り入れつつ、そのツールを使う意義を解説しています。<br />
Part2ではシンプルなjQueryのWebアプリをReact.js/TypeScriptへリプレイスする作業を題材に、環境構築・設計/実装・テスト・CI/CDの構築までのより実践的な内容の説明です。<br />
最後のPart3ではプロダクトにを伸長させるためのGoogle AnalyticsなどSaas解析ツールの活用、実際にチームで働くことをイメージしやすいようにスクラム開発の現場でどのような役割をフロントエンド領域において行うかなどが解説されています。</p>

<p>著者のおひとり武田さんのブログ <a href="https://tkdn.medium.com/%E3%83%95%E3%83%AD%E3%83%B3%E3%83%88%E3%82%A8%E3%83%B3%E3%83%89%E9%96%8B%E7%99%BA%E5%85%A5%E9%96%80-%E5%87%BA%E7%89%88%E3%81%AE%E3%81%8A%E7%9F%A5%E3%82%89%E3%81%9B-2642cb34d0e3">「フロントエンド開発入門」出版のお知らせ</a> でも触れられていますが、「これが今のフロントエンドの主流の技術スタックです」というような紹介や解説本ではなく</p>

<ul>
<li>昨今の移り変わりが早いフロントエンドという領域とどのように向き合うべきか</li>
<li>そのために必要となるスキルはどのようなものがあるか</li>
<li>なぜ現在主流のツール、フレームワークが求められているか</li>
</ul>


<p>を主にフォーカスした内容となっていました。</p>

<h2>ポイント</h2>

<h3>Part1 導入編 なぜ使うかを知る</h3>

<h4>Chapter1 フロントエンドエンジニアの歴史</h4>

<p>ティム・バーナーズ＝リー的なところから90〜00年代のブラウザ戦争、ブログ流行などの流れから当時のマークアップエンジニアやHTMLコーダーという職種がどのように関わりを持ち始めたかという内容。<br />
その後のJavaScriptを用いて動的なUIを提供する流れを経て2000年代後半から「フロントエンドエンジニア」という専門職が一般化し始める。</p>

<p>個人的には、2010年前後からHTML/CSS/JS（jQuery）を触ったりしていて、書かれているようなAngularJS、Backbone.jsなどSPAを実現するためのフレームワークの存在はちらっと横目で見てる程度でした。</p>

<blockquote><p>HTMLのマークアップ、CSSによるスタイリングという範疇に収まらない、より一層専門性の高い能力が求められると「フロントエンドエンジニア」という言葉がここでようやく専門職として一般化しだします。
それと同時にサーバサイドのWebエンジニアがフロントエンドに軸足を置いたり、デザイナーがマークアップを簡単なUI実装まで担当したりとフロントエンド界隈は徐々にボーダレス・るつぼ化してきます。</p></blockquote>

<p>ちょうどこのときですね。自分はデザインから入ったので「デザイナーがマークアップを簡単なUI実装まで担当したり」に近いところでこの仕事に足を踏み入れたと思っています。</p>

<p>その後Node.jsが発表、npmによって開発におけるエコシステムが急速に充実。ライブラリのバージョン管理やタスクの自動化が可能になる。<br />
同時にECMAScriptへ追加仕様提案の動きが活発化。次期バージョンES6への利用熱が高まりES6からES5への変換ツール、6to5（後のBabel）が発表され注目され始める。</p>

<p>一方でトレンドが日々移り変わるかのような世界になってしまい、海外を中心に JavaScript/Front-End Fatigue（＝フロントエンド疲れ）といった言葉が囁かれるようにもなる。</p>

<ul>
<li>HTML/CSS/JavaScriptの仕様のアップデート速度</li>
<li>支払いや認証APIをChrome（ブラウザ）が提供し、OSやデバイスと紐づく仕様提案が増加</li>
<li>プライバシー保護の動きやセキュリティ上の懸念（.userAgent文字列の凍結予定など）</li>
</ul>


<p>確かに Angular/React/Vue 以外にも当時JSフレームワークは当時雑多にあって絞れない状態だったりしたので、日本でもフロントエンドの領域広すぎ問題はあがっていた記憶があります。</p>

<p>このような経緯などがあるなかで、この書籍ではすべての情報をキャッチアップし網羅するのは難しいため、</p>

<ol>
<li>昨今の技術要素が何のために必要なのか、何を解決するのか</li>
<li>実践的な内容で技術要素を取り扱い必要なことを必要なタイミングで学ぶ</li>
</ol>


<p>ことにフォーカスした内容を以降で取り上げています。</p>

<h4>Chapter2 フロントエンドエンジニアに求められるスキル</h4>

<p>フロントエンドエンジニアでは実務でどのようなスキルが求められるかについて解説されています。</p>

<h5>想定される実務例</h5>

<blockquote><ul>
<li>意味付けと文書構造・アウトラインが情報として適切に設計されたHTMLマークアップ</li>
<li>デザイナーと連携し画面に必要なパーツの書き出し依頼を行う</li>
<li>保守性を重要視したCSSの設計およびスタイリング</li>
<li>WordPressに代表されるようなCMSの構築、テンプレート実装と運用ができる</li>
<li>任意のJavaScriptフレームワークを十分に理解し実装する</li>
<li>Node.jsと周辺のエコシステムを理解したビルドパイプラインを実装する</li>
<li>Atomic Designによるコンポーネント設計を中心に据えFigmaでデザインしJSXとCSS in JSを利用し実装する</li>
<li>コンバージョンレート向上目的のA/Bテストの設計と結果から得られる簡単な分析とUI改善施策の提案</li>
<li>SEOのためにmeta要素を最適化、SNSでの参照時にOGイメージを表示させる</li>
<li>画面キャッシュやアセットファイルのライフサイクルを考慮したCDNキャッシュ戦略とデプロイにおけるインフラ担当との協働</li>
<li>React SSRを目的としたExpressの実装</li>
<li>既存REST APIをバックエンドとしたフロントエンドに親和性のあるGraphQL APIサーバの実装</li>
<li>QA部門のテストエンジニアと協働し仕様から正常系のテスト項目のレビューを行う</li>
</ul>
</blockquote>

<h5>フロントエンドエンジニアの実務から想起されるスキル群</h5>

<blockquote><ul>
<li>HTTP</li>
<li>HTML</li>
<li>CSS</li>
<li>SEO</li>
<li>アクセシビリティ</li>
<li>レスポンシブデザイン</li>
<li>CSSボックスモデル</li>
<li>CSS設計</li>
<li>CSSメタ言語</li>
<li>JavaScript構文</li>
<li>DOM操作</li>
<li>イベントループ</li>
<li>Node.js</li>
<li>npm,Yarn</li>
<li>セキュリティ</li>
<li>JSフレームワーク</li>
<li>コンパイルモジュールバンドラー</li>
<li>リンター</li>
<li>CSS-in-JS</li>
<li>CSS Modules</li>
<li>CSSフレームワーク</li>
<li>テスト</li>
<li>型定義</li>
<li>Web Components</li>
<li>PWA</li>
<li>SSR ServerSideRendering</li>
<li>SSG StaticSiteGeneration</li>
<li>GraphQL</li>
<li>ネイティブアプリケーション</li>
<li>WebAssembly</li>
</ul>
</blockquote>

<p>羅列するととんでもない広さに見えてしまいますが、あくまでも必要なスキルを整理するための一覧。<br />
この中でネックに感じることが多い部分はJavaScript周辺の情報のキャッチアップなどが多いように感じるとのこと。</p>

<blockquote><p>現代においては「フロントエンド = JavaScriptのスキルセットが必須である」というイメージが拭いきれないと感じています。同時にフロントエンドエンジニアであると自認する開発者が必ずしもCSSやデザインについて十分な知識があるとは言いにくいのも現状です。</p></blockquote>

<p>この点は、<a href="https://css-tricks.com/the-great-divide/">The Great Divide | CSS-Tricks</a> という記事でも現在の「フロントエンドエンジニア」という言葉の意味が二分されており、その隔たりはかなり大きなものであると主張しています。</p>

<blockquote><p>関心や責務の中心がJavaScriptによって解決できることを守備範囲としている開発者と、HTML・CSS・デザインやインタラクション・アクセシビリティにスキルセットが集中した開発者では活躍できるフィールドが大きく異なります。この主張に同調する意見も多かったことから、フロントエンドという言葉に求められる要素の多様化を示唆していることは紛れもありません。昨今では前者をフロントエンドソフトウェアエンジニア・フロントエンドWebデベロッパーとし後者をUXエンジニアとすることで区別し、まったく別のキャリアが用意されていることもあります。</p></blockquote>

<p>とのことで、網羅すべき範囲が広くなってきたフロントエンドに対する理解や、二分されたイメージを開発チームがまだ持っていないという状況にある場合、まずはチームに必要なスキルセットが何であるかを明確にし、分野が違いすぎていないかを考える必要がありそうです。<br />
やみくもに特定のスキルセットに対してベッドするということは、開発者としてあまり賢い成長戦略ではないように思えるということです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210318195822.png" alt="f:id:jotaki:20210318195822p:plain" title="" class="hatena-fotolife" itemprop="image" /></span>
「<a href="https://css-tricks.com/the-great-divide/">The Great Divide | CSS-Tricks</a>」より引用</p>

<p>今もWebの成長は止まらず今後も加速するであろうなかでどうしたらいいのか、というと</p>

<blockquote><p><strong>必要なとき（求められたときに）、正しい場所から、必要な情報を、深く調べて身につける</strong></p></blockquote>

<p>何か課題を目の前にした際、いつでも実現できる状態にしておくということはフロントエンドエンジニアとして健全であるとのことで、難しそうだな。。とも思いつつ確かに負荷のかからない付き合い方としては適当なんだろうなと感じました。</p>

<p>最後に本書におけるフロントエンドエンジニア像として、</p>

<blockquote><ul>
<li>本格的なプロダクト開発チームへの参画は初めてとなる</li>
<li>ブラウザを主戦場としWebをプラットフォームにしたアプリケーション開発への興味関心がある</li>
<li>JavaScriptに関連する情報へのアンテナ感度が高い</li>
<li>デザインのオーサリングツールについては扱ったことがない</li>
<li>セマンティックなHTML構造への理解はあるものの熟知しているわけではない</li>
<li>CSSによるフルスクラッチのスタイリングや特定のCSS設計手法についての知識は乏しい</li>
</ul>
</blockquote>

<p>としています。つまり、The Great Divide の区分でいうと「フロントエンドソフトウェアエンジニア・フロントエンドWebデベロッパー」に近いフィールドを担う人というイメージをしました。</p>

<h4>Chapter3 フロントエンドにおける一般的なツール群</h4>

<p>ここでは具体的なライブラリやツールの紹介になります。またそれらが開発においてどういった課題を解決するのかといった観点が下敷きとして記載されています。</p>

<h5>Node.jsとその周辺のエコシステム</h5>

<ul>
<li>非同期型のイベント駆動モデルを採用したサーバーサイド向けのJavaScript</li>
<li>npm,Yarnなどのパッケージマネージャー</li>
<li>フロントエンドの開発環境構築を支える根幹そのもの</li>
<li>BFF（Backends For Frontends）層とブラウザとで同じ言語であるJavaScriptを扱うことも可能</li>
<li>フロントエンドを発端として発展したJavaScriptの価値のある言語の発展にはNode.jsがある</li>
</ul>


<h5>コンパイラ・モジュールバンドラー</h5>

<ul>
<li>Babel,webpack など</li>
<li>言語仕様を吸収し解釈可能な状態で展開・連結する変換器</li>
<li>Babel：下位構文へダウンコンパイルする役割。ECMAScriptの年次策定する新しい仕様決定に対応可能</li>
<li>webpack：言語仕様の一部であるモジュール機構を実装していない下位環境においてのエミュレートを担当。他にParcelやRollup.js</li>
<li>開発において変更可用性、スケーリングの担保をもたらす恩恵となる</li>
</ul>


<h5>JavaScript代替言語：TypeScript</h5>

<ul>
<li>JavaScriptに類似した言語体系を持ちつつ別の特性によって開発者に違った体験を与える、最終的にはJavaScriptにコンパイルされる言語</li>
<li>静的型付言語であり型チェックとJavaScriptへのコンパイルも担う</li>
<li>コンパイラとしての一面も</li>
<li>スクリプト実行前の未然検知が可能、型補完やエラー発見を向上などの恩恵</li>
</ul>


<h5>フレームワーク：ビューライブラリ：Vue.js,Angular,React</h5>

<ul>
<li>Vue.js：モノリシックなフレームワークと異なり、少しづつ適用可能</li>
<li>Angular：HTMLとTypeScriptでSPAを開発するフレームワーク。ファイル構成やソフトウェアパターンなど初手から学習領域が多い</li>
<li>React：UI構築のためのライブラリ。オールインワンではなくUI表現のみに関心を寄せる</li>
<li>いずれもコンポーネント指向のフレームワーク・ライブラリ。変更が容易で、すぐに代替可能であるといった「捨てやすさ」が大きな特長

<ul>
<li>フレームワークを利用することでチーム開発におけるコードベースの一貫性や保守性を持つ</li>
<li>疎結合なコンポーネントであることで技術的な変更に耐えうる、時間とともに古びたりしても変更可能な状態を保つことができる</li>
<li>スピード感のあるリリースサイクルを求められるフロントエンド開発において十分な堅牢性と持続性を発揮</li>
</ul>
</li>
</ul>


<h5>その他</h5>

<ul>
<li>状態管理のライブラリやパターン MVCの説明、Redux,Fluxの例

<ul>
<li>コンポーネント管理の煩雑さを少なくするため</li>
</ul>
</li>
<li>CSSメタ言語、CSS-in-JS

<ul>
<li>長期的な保守・運用のため</li>
</ul>
</li>
<li>静的解析ツール：Prettier,ESLint

<ul>
<li>機械的にコードスタイルを規定するため</li>
</ul>
</li>
<li>ユニットテスト：Mocha,Jest,Karma

<ul>
<li>変更可用性に耐えうる環境を作るため</li>
</ul>
</li>
</ul>


<h4>Chapter4 開発の現場における仕事の進め方</h4>

<p>主にアジャイル、スクラムの開発手法とフロントエンドエンジニアがどのように関わるかの解説。</p>

<blockquote><p>ゴールに向かって進み続けるプロダクトにおいて、変更要求を受けやすいのがフロントエンド・クライアントサイドでもあるのです。つまり、ユーザーや利用者に価値を届けるために一番近いエンジニアリングのフィールドにいるのがフロントエンドエンジニアと言ってもよいでしょう。</p></blockquote>

<p>と他のサーバーサイドエンジニアとの違いが述べられています。<br />
また一般的な開発チームの職種の紹介、そのなかでの役割については開発を前に進めるコミュニケーションハブのような責務も持つこともあるということです。</p>

<blockquote><p>開発において最新のライブラリやフレームワークや技術要素を選択することは優先度の高い事項ではありません。<strong>動くプロダクト＝アプリケーションを速いサイクルで変化に対応しながらユーザーに届けるために、必要な解決策を持っていることが重要です。</strong></p></blockquote>

<p>デザイナーともサーバーサイドともPM・ディレクター的な立ち位置の人とまんべんなく絡んでいくので、コードを書くという部分のみのテクニカルスキルだけでなく、他の頭を使ったりコミュニケーションスキルも必要ってことですね。</p>

<h3>Part2 実践編 どう使うかを学ぶ</h3>

<p>書籍のレビューサイトのjQueryのWebアプリをReact.js/TypeScriptへリプレイスする作業を題材にしてコードを交えながら解説しています。</p>

<ul>
<li>Yarn,Docker,webpackを使った環境の構築</li>
<li>jQueryからReact.js/TypeScriptリプレイス作業</li>
<li>Jestでのテスト</li>
<li>GitHub Actionsを用いたCI/CD環境構築</li>
<li>Lighthouseを用いたパフォーマンス測定・改善</li>
</ul>


<h3>Part3 応用編 より深く学ぶために知る</h3>

<p>Chapter8の解析とモニタリングでは、仮説検証やA/Bテストをプロダクトやサービスを成長させるフェーズでなぜ大事になるのかが解説されています。</p>

<h4>Chapter9 チーム開発と Web への貢献</h4>

<p>スクラム開発においてフロントエンドエンジニアがチームに効果をもたらす・メリットが得られると筆者は考えています。</p>

<blockquote><ol>
<li>短いリリースサイクルを実現しユーザーに価値を提供し続けます</li>
<li>スプリント内には決まったイベントを定義することでチームの学習を促進しメンバーが自主的に改善を試みます</li>
<li>チームやプロダクトが予期せぬ変化や不確実性の高い開発を求められる場合それに耐えうるように設計されています</li>
</ol>
</blockquote>

<p>技術的なトレンドのキャッチアップのためには、膨大な1次情報（WHATWGの規格など）のアップデートを追うのはほぼ不可能なので、ライトにキャッチアップすることをおすすめしています。</p>

<blockquote><p>何らか知る必要があるか分からないという場合、<strong>まずは知るきっかけを作っておく、いったんは情報を目に入れておく</strong>ということが良さそうです。</p></blockquote>

<h2>感想</h2>

<p>Part1を中心に感想等を書きましたが、久しぶりにフロントエンド周りの本でコードが大量に掲載されているような技術書ではない類のものを読みました。<br />
主に入門者向きの内容で、あくまでなぜそれが必要かどういう観点で使うかが主目的のためコードに関して簡易なもので記載されています。<br />
Part2以降は実践編〜応用編になるので開発者の方は読む内容になると思いますが、Part1の最初の方に関しては非エンジニアでエンジニアの考えを知りたいみたいな興味がある方にはとても良い内容だと感じました。</p>

<p>実際にフロントエンドエンジニアと働いている自分からすると、なかなか客観的にフロントエンド領域というものを捉える機会がなかったのでその点が特に勉強になりました。</p>

<p>書籍の最後で下記のように締められていました。</p>

<blockquote><p>昨今フロントエンドは移り変わりが早いと言われてきました。これからあなたがどのくらいフロントエンドという領域と向き合うかはわかりませんが、Webプラットフォームの仕様に影響を受けるブラウザが主戦場だからこそ変化のスピードも早いように感じることもあるでしょう。早いと感じるときは情報をみすぎているかもしれないと自分を疑ってください。新しい仕様を知ることや新しいライブラリを使うことはいずれも単体ではなんの価値も生んでいません。<strong>Webプラットフォームのエンドユーザーは開発者ではなくあなたが担当するアプリケーションのユーザーなのです。</strong>Webプラットフォームとエンドユーザー、開発者であるあなたの立ち位置は時間が経っても変わるものではありません。</p>

<p><strong>ユーザーの課題を解決するために、ユーザーへの価値提供のためにWebプラットフォームを使って開発を進めていくのだ・課題を解決するのだ、ということに意識的であることや楽しむことがフロントエンド開発では大切なポイントなのです。</strong></p></blockquote>

<p>「早いと感じるときは情報をみすぎているかもしれないと自分を疑ってください。」というのが今までにない視点でいいなと思いました。<br />
確かに広い範囲を細かく追うと破綻する気がしますし、目に止めとく程度でいいのかなと。<br />
今までは技術を知らなければいけないと思いすぎていた面もあるのでそれも大事な点ではあると思いますが、もう少し本質的な仕事を思い出してユーザーに寄り添って仕事をしようと思えるような本でした。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2020年に読んだ本'
description: ''
publishDate: '03/03/2021 17:46:53'
---

[CONTENTS-START]
<ul>
<li><a href="https://jtk.hatenablog.com/entry/2019/12/06/095248">2019年版</a></li>
</ul>


<h2>フロントエンド / Web</h2>

<ul>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B06XNMMC9S/hatena-blog-22/">イラスト図解式 この一冊で全部わかるWeb技術の基本</a></li>
</ul>


<h2>UI/UXデザイン</h2>

<ul>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4526077429/hatena-blog-22/">UX(ユーザー・エクスペリエンス)虎の巻-ユーザー満足度を向上する設計開発テクニック-</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B00KV84VXS/hatena-blog-22/">ユーザビリティエンジニアリング（第2版）　―ユーザエクスペリエンスのための調査、設計、評価手法―</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4297113511/hatena-blog-22/">オブジェクト指向UIデザイン──使いやすいソフトウェアの原理 (WEB+DB PRESS plusシリーズ)</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4862464769/hatena-blog-22/">ウェブタイポグラフィ─美しく効果的でレスポンシブな欧文タイポグラフィの設計</a></li>
</ul>


<h2>開発手法</h2>

<ul>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B0836CF21D/hatena-blog-22/">チーム・ジャーニー 逆境を越える、変化に強いチームをつくりあげるまで</a></li>
</ul>


<h2>AWS関連</h2>

<ul>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07VFFX6V1/hatena-blog-22/">この１冊で合格！　AWS認定ソリューションアーキテクト - アソシエイト テキスト&amp;問題集</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4865941991/hatena-blog-22/">AWS認定アソシエイト3資格対策~ソリューションアーキテクト、デベロッパー、SysOpsアドミニストレーター~</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4297113295/hatena-blog-22/">みんなのAWS 〜AWSの基本を最新アーキテクチャでまるごと理解!</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4296105442/hatena-blog-22/">Amazon Web Services 基礎からのネットワーク&amp;サーバー構築 改訂3版</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07HJZDGP6/hatena-blog-22/">Amazon Web Services 定番業務システム14パターン 設計ガイド</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4865942483/hatena-blog-22/">AWS認定ソリューションアーキテクト-プロフェッショナル ~試験特性から導き出した演習問題と詳細解説</a></li>
</ul>


<h2>自己啓発・その他</h2>

<ul>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07Y5FF3M4/hatena-blog-22/">他者と働く──「わかりあえなさ」から始める組織論 (NewsPicksパブリッシング)</a></li>
</ul>


<h2>まとめ</h2>

<p>2019年と比べると3〜4冊少なめ。<br />
SAPの試験本ばかり読んでる時期があることを考えると、思ったよりは読んでました。<br />
結構偏ってしまった印象で、Vueやフロントエンド周りのインプットが書籍ではできてないという感じですね。</p>

<p>リモートで通勤時間なくなって本を読む習慣を付けづらくあるのが難しい所ですが、時間的には前より増えているはずなのでうまく時間みつけて今年も本を読んでいきたいです。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2020年後期のWebサイト'
description: ''
publishDate: '03/03/2021 12:13:06'
---

[CONTENTS-START]
<p>2020年後期分です。</p>

<ul>
<li><a href="https://jtk.hatenablog.com/entry/2019/08/04/100739">2019年前期のWebサイト</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2019/12/09/090608">2019年後期のWebサイト</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/06/21/131848">2020年前期のWebサイト</a></li>
</ul>


<p>RSSでギャラリーサイト購読して気になったのはPocketでブックマークのなかから選んでます。<br />
今回はジャンル別で分けてみました。</p>

<p>医療系が多めになってしまいましたが、特に注目していたわけではないのでたまたま好きなサイトが多かったのかなと。<br />
テイストとしては柔らかめのものでも今までよりもがっつり柔らかい感じではなく適度なものが多めで、パリッとしたサイト（V-RESAS, ベンザブロック, ジャストシステム）も対象に入るようになりました。</p>

<p>個人的ベストは、気仙沼 男山本店のサイト。<br />
今までWebで見たこと無いトーンやレイアウトで印象が強く残りました。</p>

<h2>医療・福祉</h2>

<h4>V-RESAS | 新型コロナウイルス感染症が地域経済に与える影響の可視化</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210303120654.png" alt="f:id:jotaki:20210303120654p:plain" title="" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://v-resas.go.jp/">https://v-resas.go.jp/</a></p>

<h4>鼻水・のどの痛み・熱。症状別の風邪（かぜ）薬ベンザブロック</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210303120703.png" alt="f:id:jotaki:20210303120703p:plain" title="" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://benza.jp/">https://benza.jp/</a></p>

<h4>医療法人社団せいおう会 | 鶯谷健診センター</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210303120716.png" alt="f:id:jotaki:20210303120716p:plain" title="" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://seioukai.jp/">https://seioukai.jp/</a></p>

<h4>株式会社 日本・精神技術研究所（日精研） | 心理アセスメント・心理トレーニング</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210303120735.png" alt="f:id:jotaki:20210303120735p:plain" title="" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://www.nsgk.co.jp/">https://www.nsgk.co.jp/</a></p>

<h4>天水福祉事業会</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210303120753.png" alt="f:id:jotaki:20210303120753p:plain" title="" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://tensui.or.jp/">https://tensui.or.jp/</a></p>

<h2>コーポレート</h2>

<h4>株式会社にんべん｜鰹節やだしの製造販売なら</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210303120808.png" alt="f:id:jotaki:20210303120808p:plain" title="" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://www.ninben.co.jp/">https://www.ninben.co.jp/</a></p>

<h4>次の「あたりまえ」をつくる - ジャストシステム</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210303120828.png" alt="f:id:jotaki:20210303120828p:plain" title="" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://www.justsystems.com/jp/">https://www.justsystems.com/jp/</a></p>

<h4>TAGUCHI | タグチ工業</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210303120844.png" alt="f:id:jotaki:20210303120844p:plain" title="" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://www.taguchi.co.jp/">https://www.taguchi.co.jp/</a></p>

<h4>株式会社果実堂テクノロジー</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210303120853.png" alt="f:id:jotaki:20210303120853p:plain" title="" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://www.kajitsudotech.co.jp/">https://www.kajitsudotech.co.jp/</a></p>

<h4>気仙沼 男山本店｜蒼天伝・美禄・男山｜創業大正元年</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210303120904.png" alt="f:id:jotaki:20210303120904p:plain" title="" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://www.kesennuma.co.jp/">https://www.kesennuma.co.jp/</a></p>

<h2>メディア</h2>

<h4>SUB-ROSA</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210303120914.png" alt="f:id:jotaki:20210303120914p:plain" title="" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://sb-rs.com/">https://sb-rs.com/</a></p>

<h4>The Graphic Design Review</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210303120930.png" alt="f:id:jotaki:20210303120930p:plain" title="" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://gdr.jagda.or.jp/">https://gdr.jagda.or.jp/</a></p>

<h4>gooone（ゴーン） | 三浦・三崎の観光情報マガジン</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210303120947.png" alt="f:id:jotaki:20210303120947p:plain" title="" class="hatena-fotolife" itemprop="image" /></span>
<a href="http://gooone.help/">http://gooone.help/</a></p>

<h2>その他</h2>

<h4>ホンマタカシ監督「建築と時間と妹島和世」</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210303121007.png" alt="f:id:jotaki:20210303121007p:plain" title="" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://kazuyosejima-movie.com/">https://kazuyosejima-movie.com/</a></p>

<h4>養生ごはんのひみつ | 大阪北堀江の薬膳 天然食堂かふぅ</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20210303121024.png" alt="f:id:jotaki:20210303121024p:plain" title="" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://cafuu-shokudou.com/">https://cafuu-shokudou.com/</a></p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2021年2月 振り返り'
description: ''
publishDate: '03/02/2021 15:09:21'
---

[CONTENTS-START]
<h1>結果</h1>

<h2>ブログ</h2>

<p><strong>目標：月 8 回（週2回）更新</strong><br />
<strong>結果：月 4 回 更新</strong></p>

<h2>読書</h2>

<p><strong>目標：月 1 冊</strong><br />
<strong>結果：月 1 冊</strong></p>

<h1>反省点など</h1>

<p>振り返りすらままなりませんでしたが、ちょっと復調</p>

<h1>来月に向けて</h1>

<p>資格勉強も落ち着いて色々勉強する気持ちになれているので、まずは昨年残しになってしまったものからがんばります。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】オンスクリーン タイポグラフィ 事例と論説から考えるウェブの文字表現'
description: ''
publishDate: '03/02/2021 15:05:49'
---

[CONTENTS-START]
<p>先日、<a href="https://jtk.hatenablog.com/entry/2021/02/25/232601">オンラインの発売記念イベント</a> にも参加した「オンスクリーン タイポグラフィ」を一通り読んだのでメモしておきます。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4802512074/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/41-wP9MZkTL.jpg" class="hatena-asin-detail-image" alt="オンスクリーン タイポグラフィ 事例と論説から考えるウェブの文字表現" title="オンスクリーン タイポグラフィ 事例と論説から考えるウェブの文字表現"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4802512074/hatena-blog-22/">オンスクリーン タイポグラフィ 事例と論説から考えるウェブの文字表現</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%B0%CB%C6%A3%BE%B1%CA%BF" class="keyword">伊藤庄平</a>,<a href="http://d.hatena.ne.jp/keyword/%BA%B4%C6%A3%B9%A5%C9%A7" class="keyword">佐藤好彦</a>,<a href="http://d.hatena.ne.jp/keyword/%BC%E9%CD%A7%BA%CC%BB%D2" class="keyword">守友彩子</a>,<a href="http://d.hatena.ne.jp/keyword/%CB%F1%C5%C4%C1%F0%B0%EC" class="keyword">桝田草一</a>,<a href="http://d.hatena.ne.jp/keyword/%A5%AB%A5%EF%A5%BB%A5%BF%A5%B1%A5%D2%A5%ED" class="keyword">カワセタケヒロ</a>,<a href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%DE%A5%C0%A5%CA%A5%F2%A5%DF" class="keyword">ハマダナヲミ</a>,<a href="http://d.hatena.ne.jp/keyword/%A4%AD%A4%E0%A4%DF%A4%F3%A4%E8%A4%F3" class="keyword">きむみんよん</a>,<a href="http://d.hatena.ne.jp/keyword/%B4%D8%B8%FD%B9%C0%C7%B7" class="keyword">関口浩之</a>,<a href="http://d.hatena.ne.jp/keyword/%C0%B8%CC%C0%B5%C1%BD%A8" class="keyword">生明義秀</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2021/02/17</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>目次</h2>

<ul>
<li>01_ オンスクリーンタイポグラフィの本文 | 文・伊藤庄平</li>
<li>02_ Webで紙のようなレイアウトを実装するには | 文・佐藤好彦</li>
<li>03_ オンスクリーンタイポグラフィの夜は明けたか | 文・守友彩子</li>
<li>04_ Webアクセシビリティとタイポグラフィ[前半] | 文・桝田草一</li>
<li>05_ Webアクセシビリティとタイポグラフィ[後半] | 文・カワセタケヒロ</li>
<li>06_ プロダクトのアイデンティティを表現する文字 | 文・ハマダナヲミ</li>
<li>07_ 「読みやすさ」の不思議 | 文・きむみんよん</li>
<li>08_ 日本語Webフォントの過去、現在、未来 | 文・関口浩之</li>
<li>09_ Webタイポグラフィの変遷と現代的常識 | 文・生明義秀</li>
</ul>


<p>構成はWeb Typograpy, Accessibility, Web Font, Historical Changesの大項目からなり、上記の各10ページ前後のコラム文、それらに関する10例程度の事例を画面キャプチャ付きで掲載されています。
コラムもビジュアル多めなので文章を読む感覚はさほどなく、めくりやすい本だと感じました。</p>

<h2>ポイント</h2>

<p>気になった点などのメモです。</p>

<h3>01_ オンスクリーンタイポグラフィの本文</h3>

<ul>
<li>文字サイズはPCで16px相当が2020年現在で最も読みやすいサイズといえる</li>
<li>行帳は全角35〜45文字がひとつの目安</li>
<li>サイズ指定は相対指定で</li>
<li>書体は基本的にユーザはデフォルト書体が読みやすいのでは。しかしそこでデザイナーが思考停止するのも良しとは言えない。</li>
<li>Webフォントも日本語の場合デメリットがフォーカスされがちだが、書体開発など業界のこと考えるとそこも尊重すべき選択があって良い。</li>
<li>コントラスト的に黒は#111〜#333がベター、#000は少し強く感じる。</li>
<li>文字詰めは主要ニュースサイトで本文で <code>font-feature-settings</code> を適用しているサイトはなし。</li>
<li>各環境での最善を尽くしつつ、ユーザーの自由度を奪わないデザインを心がけるべき。</li>
</ul>


<p>事例の選定、イトイ新聞とTHE FASHION POST、Yahoo！ニュースのピックアップでらしいなあと思った。</p>

<h3>02_ Webで紙のようなレイアウトを実装するには</h3>

<ul>
<li>見出しの文字詰めを実現するには <code>font-feature-settings</code>, <code>letter-spacing</code> を使うことが代表例だが、イラレからアキ情報取って使うことも可能（<a href="https://github.com/yoshihik0/getKerning">getKerning</a>）</li>
<li>本文の約物が続いた場合の処理はアキを自動調整するフォントを使う方法がある（<a href="https://tama-san.com/yakucalt-font/">約猫</a>）</li>
<li><code>text-align: justify</code> にすると欧文の長めの単語が入ると前の行が不自然に開くときも。 そのときは <code>hyphes: auto</code> に</li>
<li>その他、行間を基準にしたグリッド設計、箱組みのためのfloatボックスの活用など</li>
</ul>


<h3>03_ オンスクリーンタイポグラフィの夜は明けたか</h3>

<p>デジタルメディアの特徴や課題として、</p>

<blockquote><p>リリース後ほぼ変わらないコンテンツを最大限に魅力的につくろうとする取り組みとは逆に、どんな内容でも見やすい状態を提供する可視・可読性のためのフォーマット設計の方を重視すべき場面も多い。</p></blockquote>

<p>とありますが、自分も最もデジタルで考えるのはその点。うまいデザイナーの定義あげるとするとその点がうまい人がWebのデザインがうまい人と思ってます。</p>

<p>また乗り越えておきたい課題として、「実装者を評価する」をあげています。</p>

<blockquote><p>デジタルメディアのエンジニアは、視覚的な完成度や意味、文書構造、情報構造などに対する興味が薄い場合がある。プログラム的素養を高めるほうが業界での年収が上がりやすい一方で、視覚的な再現はエンジニアリングを介さずとも実現できる仕組みづくりが活発になってきているため、目標とし難いのが実情なのであろう。
...
プログラムしたものを伝わる、使える形に転換できる。そんな実装者を評価し、よきパートナーとなることもクオリティ改善の一助となるであろう。</p></blockquote>

<p>こちらも深くうなずきたい部分で、デザインの再現性や汲み取りする能力をエンジニアは評価されづらいと思う。（or そもそも評価軸がない。）それはエンジニアの評価はエンジニアが行うというのも大きいように感じていて、より良いものが世の中に出回るようにデザイナーや視覚性を大事にしている人がもっとフックアップ的なことをすることも大事なのかなと思っています。</p>

<h3>04_ Webアクセシビリティとタイポグラフィ[前半]</h3>

<ul>
<li>Webのメディア特性として、特徴的な点はユーザー自身が見た目を変更できる点がある。</li>
<li>コンテンツ側はよいデフォルトを提供し、ユーザーはユーザースタイルシートなどを活用しコンテンツとユーザーが協力した形でよいタイポグラフィが実現できる。</li>
<li>WCAG2.1達成基準例

<ul>
<li>テキストは支援技術なしで200%までサイズ変更できる</li>
<li>使用している技術で意図した視覚的提示が可能である場合、文字画像ではなくテキストが使われる</li>
<li>テキストブロックブロックでは利用者が全景と背景色を選択できる。幅が80字を超えない（全角の場合は40字）</li>
</ul>
</li>
</ul>


<h3>05_ Webアクセシビリティとタイポグラフィ[後半]</h3>

<ul>
<li>文字サイズは実機で評価する</li>
<li>サービスのターゲットに合わせて適切な文字サイズを選択する</li>
<li>視野は個々人により異なる。重要な要素ほど中央寄りに集める</li>
<li>疑似ボールドは意図しない潰れの原因になるので使用しない</li>
</ul>


<h3>06_ プロダクトのアイデンティティを表現する文字</h3>

<p>Apple, Google, Uber, Dropbox, Atlassian, Facebook, Twitter, Figma, 楽天, メルカリの書体選定や使用例。<br />
確かにAppleのSan Franciscoなど自社開発でのフォントが増えるなか、TwitterはHelvetica Neueを使用していて普遍性を強調しているのが印象的です。最近、<a href="https://about.twitter.com/en/who-we-are/brand-toolkit">Chirp</a> フォントが出回っているので、そのようにサービスに組み込まれるかも楽しみです。</p>

<h3>07_ 「読みやすさ」の不思議</h3>

<ul>
<li>「読みやすさ」の指標はさまざま。道路標識と書物では異なる視点でのフォント選びが必要</li>
<li>オンスクリーンでの「読みやすさ」は「バックライトによる文字のアウトラインのぼけを考慮したフォントを選ぶこと」

<ul>
<li>ふところの広い書体</li>
<li>縦線と横線のコントラストが低い</li>
</ul>
</li>
<li>スクリーン向きのフォントの例にオンスクリーン用にリデザインされた <a href="https://fontsinuse.com/typefaces/7607/benton-sans-re">Benton Sans RE</a> などは使ってみてよいのでは</li>
<li>各UD書体、オールドスタイルでも丸明オールド、明朝で3種類のコントラストが用意されているTP明朝もオンスクリーンに適している</li>
</ul>


<h3>08_ 日本語Webフォントの過去、現在、未来</h3>

<ul>
<li>Webフォントの変遷（2009年〜）</li>
<li>日本語環境ならではの配信技術（ダイナミック・サブセッティング）</li>
<li>セルフホスティングでの配信</li>
<li>日本語Webフォントの文字詰め機能</li>
<li>Webフォントのサイズはサンセリフ体よりセリフ体のほうが基本は軽くなる。（アンカーポイントが少ないため）</li>
</ul>


<p>日本語環境におけるWebフォントの課題について、Webフォントを導入すると重くなる、は必ずしも正解ではなく、さまざまな配信技術やレンダリングの方法があるのでそれを使っていきましょうという方向性の話でした。</p>

<blockquote><p>表示が遅く感じる理由は、システムフォントが表示された後に、Webフォントの表示が開始されることに起因していることが多い。つまり、この画面がチラつく挙動が遅さを感じさせてしまうのである。</p></blockquote>

<p>確かに盲目的にWebフォントは遅いっていうイメージにとらわれている感は否めないので、きちんと切り分けして考えないとなと思いました。</p>

<h3>09_ Webタイポグラフィの変遷と現代的常識</h3>

<ul>
<li>Webの歴史とともにWebタイポグラフィはどのように変遷してきたか</li>
</ul>


<h2>感想</h2>

<p>この本に掲載されているような文字周りのCSSって、ボックスをレイアウトしたりするCSSとはまた別で、そこの対象範囲で興味を広げないと今のブラウザでできることやスタンダートなことを捉えるのがなかなか難しかったりすると思っているのですが、今回この本を通してそのあたりはインプットできた印象があります。<br />
ただもっと大枠の選定の話とか、先日のイベントの際にも感じましたがここ数年追えていない感が残っていて、たづがね角ゴシックは結構使いやすいと言われてる書体なんだなとか、そんな程度なのでもうちょっと追いついておきたいなあという焦りも持ちました。</p>

<p>オンスクリーンに絞ったタイポグラフィ系の書籍は <a href="https://jtk.hatenablog.com/entry/2020/09/21/181357">ウェブタイポグラフィ</a> もありますが、今回のオンスクリーンタイポグラフィも初学者が読むには敷居が高めな印象もあるので（基礎的な内容もあるが発展系への展開もある部分で）、もう少し大衆的な雰囲気のあるベーシック部分をカバーした書籍も今後出るともっと裾野が広がるというか興味を持ったり意識を持ちながら仕事をする人が増えるのかなと感じます。<br />
決して教科書的なこうしなさいというやり方を教える成分は弱めかなと思います。こういう考え方がありますよの提示的要素の強い本だなという印象です。</p>

<p>ともかく久しぶりに発売が楽しみな本があって、それを予約して届いて読んで、執筆陣も個性豊かでとてもお気に入りの本になりました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【イベント】Front-End Study #4「いま考えるユーザー体験とデザイン」'
description: ''
publishDate: '02/26/2021 23:03:41'
---

[CONTENTS-START]
<p>Forkwellさんのオンラインイベント<a href="https://forkwell.connpass.com/event/200765/">Front-End Study #4「いま考えるユーザー体験とデザインの世界」</a>を視聴しました。<br />
フロントエンドエンジニアがデザインとどう向き合うべきかという興味のあるテーマの中で各セッションを聞けたので、メモと感想を残しておきます。</p>

<h2>セッション</h2>

<ul>
<li>基調講演「フロントエンドエンジニアが今学ぶべきデザイン」</li>
<li>セッション1「共創するためのデザイン批評」</li>
<li>セッション2「サービス横断デザインシステムのフロントエンド開発に携わって学んだこと」</li>
</ul>


<h2>基調講演「フロントエンドエンジニアが今学ぶべきデザイン」</h2>

<p>サイバーエージェント 谷さん<br />
発表Figma： <a href="https://www.figma.com/file/a4m5ohTjU6JWZ80CGVTAMd/Front-End-Study-%234?node-id=44%3A103">https://www.figma.com/file/a4m5ohTjU6JWZ80CGVTAMd/Front-End-Study-%234?node-id=44%3A103</a></p>

<p>FLOCSSのは知ってましたが、<a href="https://www.amazon.co.jp/dp/4899772750">魅せるiPhoneサイト</a>もこの方だったんですね。昔とてもお世話になりました。<br />
スマホのリキッド実装と拡縮実装の両方どっちが正解やスタンダードが分からなくて、本読んで腑に落ちた記憶があります。</p>

<h3>フロントエンドエンジニアができること</h3>

<h4>マイクロインタラクション</h4>

<p>表現としてのエフェクトはデザイナー<br />
ただリアクションには多くの領域が含まれる（VoiceOverに対してなど）のでエンジニア側も一緒に考える必要。</p>

<h4>レイアウト</h4>

<p>ずれているのが問題というより設計された情報の意味や狙っている効果がなくなることが問題<br />
そうならないために「デザイン」をプロセスとして遡る必要がある<br />
レイアウトの意図、情報構造の設計を理解してそれに適したマークアップをする</p>

<h4>パフォーマンス</h4>

<p>Core Web Vitals（LPC/FID/CLS）<br />
CLSの向上は実装する段階ではもうどうしようもないこともある<br />
状態ごとのパターンのデザインを作る</p>

<h3>デザインへの接し方</h3>

<ul>
<li>デザインの批評・レビューをする</li>
<li>デザインの仕組みをつくる</li>
<li>UIデザインのアプローチを変える</li>
<li>デザインツールを使ってみる</li>
</ul>


<p>デザイナーとフロントエンジニアのデザインの境界はない<br />
職務ではなく役割として考える</p>

<h3>質疑応答</h3>

<p>Q.異なる職種でやってよかったこと、うまくいかなかったこと<br />
新規のタイミングからみんなでFigmaに向かいあってやるとよい<br />
デザイナーは途中経過のものは見られたくないみたいな感覚が初期はあるがそこを1回乗り越える</p>

<h3>感想</h3>

<p>レイアウトのところでピクセルパーフェクト論ではなく、伝えたいことが伝わるかが大事というところでちょっとハッとしました。<br />
自分はデザイナーの意図汲んでコーディングするの得意と思ってますが、完璧に再現できるのが大事というよりは本質的にユーザーに届くかが大事だなと思って今後はその視点でやっていこうと思いました。<br />
Figmaの使い方にちょっと触れていましたが、考えてみたらこれワイヤーとデザイン並行で同じところに描けるのでおもしろいですね。</p>

<h2>セッション1「共創するためのデザイン批評」</h2>

<p>ClassDo takanoripさん<br />
スライド： <a href="https://speakerdeck.com/takanorip/gong-chuang-surutamefalsedezainpi-ping">https://speakerdeck.com/takanorip/gong-chuang-surutamefalsedezainpi-ping</a></p>

<h3>デザイン批評の基本</h3>

<p>デザインがプロダクトの目的を達成するために適切かどうかを判断する<br />
批評には適切な方法がある</p>

<h4>デザイン批評とデザインレビューの違い</h4>

<ul>
<li>デザイン批評：デザインが目的を達成できるか判断するための分析手法</li>
<li>デザインレビュー：デザインの承認や合意形成のために行われるミーティング。</li>
</ul>


<h4>ベストプラクティス</h4>

<ul>
<li>質問で始める</li>
<li>感情のままに話さない</li>
<li>自分の意見が正しいと思い込まない</li>
<li>意見を押し付けない</li>
<li>長所について話す</li>
<li>「誰の視点から考えているか」を考える</li>
</ul>


<p>おおまかにスタンスとしてはコードレビューと同じですね</p>

<p>見た目にとらわれない = 見た目の好き嫌いを表明することは「批評」ではない<br />
エンジニアがデザインに口出しし辛い風潮があるのは見た目に意識が行っているからで、本質に焦点を当てることが必要になる</p>

<h4>デザイン批評</h4>

<ul>
<li>デザインの目的を理解する

<ul>
<li>なぜこのデザインにしたのか、これがレビューの「基準」になる</li>
</ul>
</li>
<li>使いやすさを確認する

<ul>
<li>達成したいことを迷わず達成できるか</li>
</ul>
</li>
<li>ダークパターンになっていないか</li>
</ul>


<h4>デザインレビューで考慮すべきポイント</h4>

<ul>
<li>UIの一貫性（一貫性のないデザインを鵜呑みにしない）

<ul>
<li>スタイル</li>
<li>コンポーネントの役割</li>
<li>インタラクション</li>
</ul>
</li>
<li>実装難易度

<ul>
<li>本来はデザインつくる前に確認する</li>
</ul>
</li>
<li>データとUI

<ul>
<li>データ構造とUIに矛盾がないか</li>
</ul>
</li>
</ul>


<p><a href="https://www.amazon.co.jp/dp/4802510209/">みんなではじめるデザイン批評</a> はデザイナーもエンジニアも読んだほうが良い</p>

<h3>感想</h3>

<p>どこからどこまでがデザイン批評と定義されどういうメリットがあるのか話されていたのでその点が一番勉強になりました。<br />
見た目にとらわれない、っていうのはなるほどなあと。<br />
ある程度慣れが必要とも感じますがデザイン確認するとき基本実装可否についての確認に留まってしまっていましたが、もうちょっと踏み込んでやってみようと思いました。</p>

<h2>セッション2「サービス横断デザインシステムのフロントエンド開発に携わって学んだこと」</h2>

<p>ヤフー 春野さん<br />
ヤフーのデザインシステム「Riff」の開発においての話</p>

<h3>デザインシステムを作る目的</h3>

<ul>
<li>UIデザインの品質向上

<ul>
<li>デザインの当たり前品質を担保する</li>
</ul>
</li>
<li>UIデザインの業務効率化

<ul>
<li>車輪の再開発を防ぐ</li>
</ul>
</li>
</ul>


<p>制作物としてはスタイルガイドとUIライブラリに分けられる</p>

<h3>デザインシステム制作の流れ</h3>

<ul>
<li>スタイルガイド制作グループ</li>
<li>UIデザインキット制作グループ</li>
<li><p>コーディング開発グループ
それぞれ5名程度、兼務でジョイン</p></li>
<li><p>プロダクト側へヒアリング</p></li>
<li>必要なスタイルガイド、コンポーネント洗い出し</li>
</ul>


<h3>取り入れているツール</h3>

<p>React/TypeScript/StoryBook<br />
ビジュアルのテストツールには <a href="https://github.com/reg-viz/reg-suit">reg-suit</a><br />
これはVRT（ビジュアルリグレッションテスト）というものでビジュアル面のテストが行える<br />
reg-suitは変更前と変更後のキャプチャを撮って差分を確認できる</p>

<h3>感想</h3>

<p>ビジュアルリグレッションテスト、初めて知りましたが便利そうで使ってみたいですね。<br />
デザインシステム制作チームの人員ってYahooでもだいたい兼務でということだったので結構大変そうだなと・・・<br />
最後にメインの仕事のノウハウ持ってこられるというのを聞いてメリットもあるなあと感じました。</p>

<h2>全体感想</h2>

<p>一応括りはフロントエンドの勉強会で視聴人数はそこまでなかったと思いますが、平日夜にオンラインで1000人規模で興味持たれるイベントもすごいよなあと感じました。スポンサーもついてライトなTV番組みたいです。<br />
全体としては、登壇した方々は自分と同じフロントエンドエンジニアという職種で、組織として個人としてデザインへの関わり方の熱量がちょっと違うなというところでモチベーションが高まりました。自分ももともとデザインから入った世界というのもあり、そこにもっと向き合う必要がありそうです。</p>

<p><a href="https://forkwell.connpass.com/event/205227/">次回</a>もなかなかつよつよなメンツなので参加してみたいと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【イベント】タイポグラフィを武器にする 〜文字とデザイン、WEBとUI、そしてUXのお話〜'
description: ''
publishDate: '02/25/2021 23:26:01'
---

[CONTENTS-START]
<h2>イベント概要</h2>

<p>Connpass： <a href="https://goodpatch.connpass.com/event/204447/">タイポグラフィを武器にする 〜文字とデザイン、WEBとUI、そしてUXのお話〜</a><br />
書籍『オンスクリーン タイポグラフィ 事例と論説から考えるウェブの文字表現』の発売記念イベントとして、この書籍から派生して現場で使えるTipsやあるある話などを共有する会という感じでした。</p>

<h3>トークテーマ</h3>

<ul>
<li>タイポグラフィをデザイン、実装する上で気をつけていること</li>
<li>こんなタイポグラフィはいやだ</li>
<li>アクセシビリティ向上はどのように行うのか</li>
<li>ブランディングとアクセシビリティ</li>
<li>Webならではのタイポグラフィとは</li>
</ul>


<p>など、実際の現場レベルでのよくある悩みやこれどうしている話をされていました。</p>

<p>登壇者はGoodpatch Anywhereのカワセさん、ハマダさん、SmartHRの桝田さん、編集者の宮後さん。
自分の中ではネット上での昔からの有名人の方々でした。</p>

<p>オンスクリーン タイポグラフィについては、カワセさん、ハマダさん、桝田さんなど計9名の方の論説をまとめている本です。
2/17の発売で今読んでいる最中ですが読書メモは別でまとめます。</p>

<h2>勉強になったこと</h2>

<h3>「ガイドラインを守ることが大事」ではなく、主観によって判断されがちな色の指定などの基準にこういうのを使うといいですよっていう内容</h3>

<p>桝田さんはアクセシビリティに大変詳しいエンジニアの方ですが、自己紹介の流れで書籍のコラムの内容についてこのように最初に話していて、そういう心持ちなのかとちょっと意外なところもありました。<br />
個人的な勝手なイメージですがアクセシビリティ詳しい人と詳しくない人って分断されがちで、詳しくない人（自分）は詳しい人を怖がっているところがある印象があります。<br />
それに加えて「善意のバリア」的な見方で、僕の去年読んで一番印象に残った記事にある、<a href="https://developers.freee.co.jp/entry/why-i-am-worked-on-accessibility">「アクセシビリティはさ、誰かのためにとかじゃなくて、自分のためにって思ってやるといいと思うよ」</a> 的なスタンスでのトークだったのでとても自分ごととして勉強させてもらえました。</p>

<h3>要素をちゃんと作ってからページデザイン作成</h3>

<ul>
<li>カラーパレット作る</li>
<li>フォントサイズのジャンプ率作る</li>
</ul>


<p>コンポーネント作る前にこれらをエンジニアと話して進めるだけで後々の辛さが軽減されるというは納得です。</p>

<h3>デザインカンプの一枚絵ではなくレイヤーなどのデザイン構造など中間成果物のなかを見ること</h3>

<p>どういうデザインがコーディングしやすいか、みたいな話の流れだったと思いますが、デザインで空けられているスペースが16pxなのか1文字分として空けられているのかはデザインデータ見て分かると実装もしやすいと。<br />
自分もエンジニア側なのでもちろん同感で、リストテキストのline-heightでリスト間のマージンを取っちゃうかline-heightは適正値で取ってちゃんとスペース開けるかで全然違うところかなと感じました。</p>

<p>また難しいデザインが上がってきたときにチーム全体で解決できなくフロント側だけが負荷がかかってしまうことが問題みたいな考え方も、これまでそういう取り組み方で仕事あまりしてないのでなるほどそういう考え方なんだなあと思いました。</p>

<h3>アクセシビリティ向上、「向上」は何を持って判断しているのか</h3>

<p>定量的な結果ではなく、特定の機能が特定の条件で動く<br />
例えば特定の機能をキーボードのみの操作で完了できるなど。</p>

<h2>まとめ</h2>

<p>失礼ながら書籍の宣伝的な要素が強いイベントと思ってましたが、その要素がゼロだったので楽しかったです。<br />
参加する前はデザイン的な話がメインかなと思ってましたが、聞いてみると実装のテーマや内容に関してばかり興味が惹かれたり勉強になりました。<br />
登壇のデザイナーさんの話聞いてると実装のリテラシーも高いんだなというのが印象的でした。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】UI/UXデザインの原則'
description: ''
publishDate: '02/21/2021 14:02:17'
---

[CONTENTS-START]
<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/434492620X/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/51cRu2hHFPL.jpg" class="hatena-asin-detail-image" alt="UI/UXデザインの原則" title="UI/UXデザインの原則"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/434492620X/hatena-blog-22/">UI/UXデザインの原則</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%CA%BF%C0%D0%20%C2%E7%CD%B4" class="keyword">平石 大祐</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2020/10/23</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>目次</h2>

<ul>
<li>原則1【:HOW】ユーザー心理/行動をとらえる<br />
「ユーザー心理/行動に則って考える」ことがUI/UXデザインの第一歩である</li>
<li>原則2【:HOW】どう改善するか<br />
「ユーザー真理/行動」をUI/UXデザインに落とし込む</li>
<li>原則3【:HOW】どう改善するか〈体制とプロセス〉<br />
UI/UXデザインにおける三方良しをつくる</li>
<li>原則4【:応用編】<br />
UI/UX思考でこれからのビジネスをデザインする</li>
</ul>


<p>ざっくりになりますが、<br />
原則1では、どのようにユーザー心理を捉えUXを改善していくか、例えばユーザーテストなど手法的なことの説明。<br />
原則2では、主にUI改善の例が挙げられています。<br />
原則3では、UI/UX改善を行う上でどのような組織や体制を保つことが大事かについて、<br />
原則4はまとめになります。</p>

<h2>ポイント</h2>

<h3>原則1【:HOW】ユーザー心理/行動をとらえる</h3>

<p>「ユーザー心理/行動に則って考える」ことがUI/UXデザインの第一歩である</p>

<p>新しい機能を追加するなど改善施策を打ってみても頭打ちになる、などだれしも抱える問題はなぜ起こるのか<br />
→ 多くの場合、サービス提供側の想像と現実のユーザニーズに乖離があるがそれに気づかないことが要因</p>

<blockquote><p>ユーザーのリテラシーや、ユーザーのサービスへの期待値を正しく理解し、ユーザーが自然と「自分だとこういうふうに使えそうだ」と想起できる状態をつくり上げる。それこそがUI/UXをデザインするということなのです。</p></blockquote>

<h4>WEB担当者とユーザーのニーズはすれ違う</h4>

<p>Web担当のニーズとユーザーのニーズがすれ違う原因<br />
→ "詳しくなりすぎてしまう" ことと、"考え方が偏ってしまう" ことにある</p>

<h4>定量分析だけではユーザーのニーズはつかめない</h4>

<p>定量分析と定常分析の使い分け</p>

<ul>
<li>定量的なデータ → ユーザが離脱するポイントを特定</li>
<li>定常的な分析 → 離脱する原因</li>
</ul>


<p>相互補完的な仕組みを導入することが必要</p>

<h4>ユーザー体験の時間軸をとらえる</h4>

<p>サービスの「利用前」「利用中」「利用後」にまたがる時間軸で潜在的なニーズを正しく把握するのが基本</p>

<ul>
<li>利用前：予期的UX</li>
<li>利用中：一時的UX</li>
<li>利用後：エピソード的UX</li>
<li>全体：累積的UX</li>
</ul>


<h3>原則2【:HOW】どう改善するか</h3>

<p>「ユーザー真理/行動」をUI/UXデザインに落とし込む</p>

<h4>ユーザーニーズに沿って情報を組み立てる</h4>

<blockquote><p>ユーザーのステップごとの不安や解決したいことに沿って、ゴールとなるCVまでスムーズに情報を組み立ててあげる必要があるのです。</p></blockquote>

<ul>
<li>重要事項が事前に確認できる

<ul>
<li>ユーザーが遷移前のページで不安や懸念を解消できているか</li>
</ul>
</li>
<li>CTAのワーディングをわかりやすく

<ul>
<li>具体的にボタンをクリックしたときに何が起こるかをイメージできるか</li>
</ul>
</li>
</ul>


<h4>ユーザー視点で情報をデザインする</h4>

<blockquote><p>文脈を理解せずにただ同じデザインを当てはめるのではなく、類似の機能であってもユーザー視点に立ち、大きさ・色・表記など各パーツのデザインの理由を明確に説明できるようにすることあ￥が重要です。</p></blockquote>

<h4>初期体験こそ丁寧に設計しよう</h4>

<p>サービスを初めて利用する「最初の体験」で多くの課題が出てくる傾向<br />
初期体験における情報取得は理由とセットで設計する。</p>

<h4>外で利用されることを考慮する</h4>

<p>特にスマホアプリなどの場合、白ベースの背景は避けるなど</p>

<h4>先人の知恵を借りる</h4>

<p>初めて訪れたユーザーの不安を取り除くTips</p>

<ol>
<li>CTAのワーディングを分かりやすくする</li>
<li>CTAは統一する</li>
<li>重要事項の説明を行う</li>
<li>マイクロコピーを活用する</li>
</ol>


<p>気持ち良く使い始めてもらうためのTips</p>

<ol>
<li>パーソナライズする</li>
<li>プッシュ通知の許可は承諾する価値を伝えてから表示する</li>
<li>必要なタイミングで最低限の説明を</li>
<li>最初にやるべきことを制限する</li>
<li>擬似的にAHA!体験させる</li>
</ol>


<p>使い心地が良いサービスをつくる "おもてなし" Tips</p>

<ol>
<li>待ち時間を工夫する</li>
<li>重要なページから離脱する際は、確認画面が表示される</li>
<li>検索時に候補をレコメンドする</li>
<li>最小限のページ切り替えで情報を把握させる</li>
<li>相談して決めることを考慮する</li>
</ol>


<h3>原則3【:HOW】どう改善するか〈体制とプロセス〉</h3>

<p>UI/UXデザインにおける三方良しをつくる</p>

<blockquote><p>UI/UXデザインにおける品質（良い結果が得られる状態）は「ビジネス（戦略・収益・営業）」「テクノロジー（開発・システム）」「UX（顧客視点）」の重なるところに生まれる</p></blockquote>

<p>現状は「UX」に関する人材・体制が不足</p>

<h4>ユーザーファーストの組織 / 体制が命運を握る</h4>

<blockquote><p>本来は、マーケティング部門や開発部門、運用部門も含め、社内の各部門がユーザーと向き合う機会を持つべきです。</p></blockquote>

<p>UI/UXが重要という認知が広まっているなかで、実際の取り組みに落とし込めている組織は少ない。</p>

<ul>
<li>実際に手を動かす現場の担当者レベルがUI/UXデザインの意義や具体的な手法を十分に理解できていないこと</li>
<li>意義も具体的な手法も分かっているのに、UI/UXの改善に取り組める体制になっていないこと</li>
</ul>


<p>が大きな要因の2つ。</p>

<ol>
<li>UI/UXデザイン責任者を立てる</li>
<li>リリース判断基準をつくる</li>
<li>UI/UXの評価基準を均一化する</li>
</ol>


<p>など、横串で管理するチームを設け、会社全体で品質を担保していく</p>

<h2>感想</h2>

<p>本のボリューム的には軽めで何時間かで読めます。<br />
内容は基本的なワードも注釈での説明があったり、大事なポイントを列挙している感じで初学者向けの印象で、デザイナーやWeb担当者以外にも読みやすいUI/UXの取っ掛かりになるような本でした。</p>

<p>逆にいうと深堀りはされていないので、例えばユーザテストの手法についてじっくり学びたい人は <a href="https://jtk.hatenablog.com/entry/2020/03/17/131050">ユーザビリティエンジニアリング</a>、UIついては <a href="https://jtk.hatenablog.com/entry/2019/12/02/084734">インタフェースデザインのお約束</a> のほうが特化はしています。</p>

<p>会社でもユーザーテストなどをやり始めている段階ですが、個人的には手法や細かいUI改善例というよりビジネスとしてUI/UXがなぜ必要とされるかについて把握できたところがよかったかなと感じます。<br />
単純にUXに向けての興味がここ最近薄れていたことも相まって、必要性を認識できるとやる気が湧いてきました。</p>

<p>また手法以外のところで、原則3のような体制をどのようにするかというところも興味があるので、その分野に特化している本を別で読んでみるのも面白いかなと感じました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AWS ソリューションアーキテクト プロフェッショナル 受験記（再）'
description: ''
publishDate: '02/13/2021 22:16:20'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200105065609.png" alt="f:id:jotaki:20200105065609p:plain" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>これまで・今回の結果</h2>

<ul>
<li><a href="https://jtk.hatenablog.com/entry/2019/06/12/223000">2019/6/8 CLF 合格 830点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2019/07/09/100106">2019/7/6 SAA 不合格 630点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/01/05/074534">2020/1/4 SAA 合格 771点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/02/09/193011">2020/2/9 DVA 合格 845点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/02/15/195608">2020/2/14 SOA 合格 801点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/07/26/093803">2020/7/24 SAP 不合格 730点</a></li>
<li>2020/8/8 SAP 不合格 723点</li>
<li><a href="https://jtk.hatenablog.com/entry/2020/08/24/110611">2020/8/23 SAP 不合格 730点</a> ※システム不具合により試験スコア無効</li>
<li>2021/1/3 SAP 不合格 730点 ※今回分</li>
<li>2021/2/13 SAP 合格 862点 ※今回分</li>
</ul>


<h2>受験理由・モチベーション</h2>

<p>年末年始で勉強時間取れそうだったので。<br />
と思い1/3に受けましたがもう1ヶ月やることになっちゃいました。</p>

<h2>今回分の勉強計画</h2>

<p>前回受験時にあと20点まで来ていたので、問題集（koiwaclub）をもっとやり込むことを中心に考えました。</p>

<h2>やったこと</h2>

<h3>koiwaclub の SAP問題集</h3>

<p>前回もやりましたが計5周くらいしました。<br />
<a href="https://aws.koiwaclub.com/exam/sap/">https://aws.koiwaclub.com/exam/sap/</a></p>

<h3>その他</h3>

<ul>
<li>【読書】AWS認定ソリューションアーキテクト-プロフェッショナル ~試験特性から導き出した演習問題と詳細解説</li>
<li>【公式】Exam Readiness: AWS Certified Solutions Architect – Professional</li>
<li>【公式】BlackBelt Online（YouTube中心に）</li>
<li>【公式】サンプル問題の復習</li>
<li>【公式】模擬試験の復習</li>
</ul>


<h3>特に勉強したこと（苦手分野）</h3>

<ul>
<li>オンプレとAWSの接続（BGP、パブリック/プライベートVIF、静的/動的ルート、IPv6、DX、DXGW、VPN）</li>
<li>ネットワーク周り（複数リージョン/AZでのVPC接続、VPCピアリング、中央VPC、TransitVPC、TransitGW、VPCエンドポイント）</li>
<li>Active Directoryでのアカウント管理、認証認可</li>
<li>アカウント制御やOrganization（アカウント、権限、コスト管理、SCP・一括請求、AssumeRole）</li>
<li>CloudFormation（クロススタック、マルチアカウント管理、ServiceCatalogとの組み合わせ）</li>
<li>権限の委任手順（クロスアカウントアクセス、Saasサービスなどほかアカウントに対して）</li>
<li>EC2のインスタンスタイプ</li>
<li>ログ保存（CloudWatch Logs、CloudTrail）</li>
<li>API Gateway、Lambda エラー時のトラブルシューティング</li>
<li>セキュリティ、鍵管理 KMS、CloudHSM</li>
<li>コスト管理（Badgets、Cost Explorer、コスト配分タグ）</li>
<li>静的／動的コンテンツのCloudfront振り分け（ALB/CF/EC2）</li>
</ul>


<h2>本試験</h2>

<p>今日受けた合格分に関して。<br />
解いたときの印象は、</p>

<ul>
<li>40% => 正解</li>
<li>20% => たぶん正解</li>
<li>20% => どっちか分からない</li>
<li>20% => 不明</li>
</ul>


<p>という感じ。20%くらいは初見の問題で他の80%は問題集などで見たパターンでした。</p>

<p>スコアの862点は良すぎかなと思います。<br />
これまであと20点の壁を超えられなかったのに、ここに来てこれまでのAWS試験で一番点数高いのは嬉しいような不思議な気持ちです。<br />
年末年始にSAA本から読み直してSAP本や問題集は毎日コツコツやっていって、普段AWS触らなくても地道にコツコツでやっていたのが良かったと思います。</p>

<h2>まとめ</h2>

<p>去年の2/14にアソシエイト3つ目のSOAを取ってるので、SAP取るのに1年かかった結果になってしまいました。<br />
7月くらいにギア上げて8月まで受けて年末に再度ギアをあげてという感じだったので、もっと効率性を求めないといけなかったなあと反省しています。</p>

<p>何度も受けているので今回もまたダメかなあと思いながら終了ボタンを押しましたが、合格の文字が見えたときはやればできるんだなあとちょっと感慨深くなりました。<br />
クラウド資格は次AWSのDOPかGCPのアソシエイトも受けてみようかなと考えてますが、年末から張り詰めていたので一旦それをほどきたいです。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2020年11月 振り返り'
description: ''
publishDate: '11/30/2020 21:24:28'
---

[CONTENTS-START]
<h1>結果</h1>

<h2>ブログ</h2>

<p><strong>目標：月 8 回（週2回）更新</strong><br />
<strong>結果：月 0 回 更新</strong></p>

<h2>読書</h2>

<p><strong>目標：月 1 冊</strong><br />
<strong>結果：月 0 冊</strong></p>

<h1>反省点など</h1>

<p>今月も何もできませんでした・・</p>

<h1>来月に向けて</h1>

<p>ちょっと落ち着く見通しがつきそうなのでがんばります。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2020年10月 振り返り'
description: ''
publishDate: '11/02/2020 10:37:13'
---

[CONTENTS-START]
<h1>結果</h1>

<h2>ブログ</h2>

<p><strong>目標：月 8 回（週2回）更新</strong><br />
<strong>結果：月 0 回 更新</strong></p>

<h2>読書</h2>

<p><strong>目標：月 1 冊</strong><br />
<strong>結果：月 0 冊</strong></p>

<h1>反省点など</h1>

<p>ぜんぶ反省です。</p>

<h1>来月に向けて</h1>

<p>11月も立て込みそうなので12月から本気出せるように・・・</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2020年9月 振り返り'
description: ''
publishDate: '09/30/2020 10:31:25'
---

[CONTENTS-START]
<h1>結果</h1>

<h2>ブログ</h2>

<p><strong>目標：月 8 回（週2回）更新</strong><br />
<strong>結果：月 9 回 更新</strong></p>

<h2>読書</h2>

<p><strong>目標：月 1 冊</strong><br />
<strong>結果：月 2 冊</strong></p>

<h1>反省点など</h1>

<p>Vueもさわれたし勉強会もいくつか参加できたので、久しぶりに良い内容だったかなと思います。</p>

<h1>来月に向けて</h1>

<p>そんな忙しくなければSAPの勉強も再開したいですが、その前にいろいろ今後に向けてやりたいこと整理する期間にしようかなと考えています。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【イベント】UX MILK All Night'
description: ''
publishDate: '09/22/2020 17:40:44'
---

[CONTENTS-START]
<p>9/12-13に行われた <a href="https://www.uxmilkallnight.com/">UX MILK All Night</a> を視聴したので、見たセッションの気になったことなどをメモします。<br />
アーカイブもあるのであまり詳しくしない程度にとどめたいと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200921181854.png" alt="f:id:jotaki:20200921181854p:plain" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>目次</h2>

<ul>
<li><a href="#anchor01">A1-2 : UXデザイナーが作るサービスの業務フロー設計</a></li>
<li><a href="#anchor02">A1-3.5 : 受託制作におけるデザインシステム</a></li>
<li><a href="#anchor03">A1-4 : UXデザインにおける眼と手と動きの解像度を上げる技</a></li>
<li><a href="#anchor04">A1-5 : しなくていいUX</a></li>
<li><a href="#anchor05">A1-8 : インクルーシブデザインとUX</a></li>
<li><a href="#anchor06">A2-4 : システム開発でデザイナーは何をすればいい？</a></li>
<li><a href="#anchor07">A2-7 : 複雑性と難易度の高いサービスリニューアルにおけるサービスデザイン</a></li>
<li><a href="#anchor08">A3-2 : 良いUXを実現するために、まずはチーム内にデザインを浸透させている話</a></li>
<li><a href="#anchor09">A3-10 : 1人でこっそり始めるUXデザイン</a></li>
</ul>


<p><a id="anchor01"></a></p>

<h2>A1-2 : UXデザイナーが作るサービスの業務フロー設計</h2>

<p>受託型の業務フロー設計、PoC時のUXデザイン手法について<br />
スピーカー：高橋一成さん（株式会社オロ）<br />
まとめnote：<a href="https://note.com/zooooonari/n/n4c9c69bb7e9e">UXデザイナーが作るサービスの業務フロー設計 @ UX MILK All Night</a></p>

<h4>前提</h4>

<p>UXデザインはユーザーを理解するところから始まる</p>

<h4>チャートでの設計手法</h4>

<p>システム中心の書き方の3つの手法</p>

<ul>
<li>アクティビティ図 => ユーザーのシステム上での行動を把握しやすい</li>
<li>ユースケース図 => システムでできることが把握しやすい</li>
<li>シーケンス図 => データの流れが把握しやすい</li>
</ul>


<p>今回のフローチャートはユーザーの行動が中心の書き方。</p>

<h4>UXフロー図</h4>

<ol>
<li>ステークホルダーを書く</li>
<li>それぞれの行動を書く</li>
<li>ステークホルダーが表示する画面を書く</li>
<li>機能やシステムの振る舞いを書く</li>
<li>パーツとしてならべる</li>
<li>矢印を使ってフローをつくる</li>
</ol>


<p>アクティビティ図はシステムの分岐視点になるが、UXフロー図はユーザー体験中心の視点の図ができる。<br />
ステークホルダーや関係ツール全体の行動や振る舞いを一覧化することで</p>

<ul>
<li>予算感が見える</li>
<li>フェーズが立てられる</li>
</ul>


<p>こともメリット。PoCなど全体が見えづらいプロジェクトに適している。</p>

<ul>
<li>ユーザーの行動を追いながら</li>
<li>ユーザーのタッチポイントを考えながら</li>
<li>必要な機能を確認しながら</li>
</ul>


<p>などリアルな行動を意識しながら書くと良い。</p>

<h4>プロジェクトの進め方</h4>

<p>サービス全体からアプローチ版（PoCの場合はこちらが多い）</p>

<ol>
<li>［UXフロー図］サービス全体をイメージする</li>
<li>［UXフロー図］必要なフローや機能を見つける</li>
<li>［UXフロー図］機能・画面・フローを考える</li>
<li>［ワイヤーフレーム・実装］ワイヤーフレーム・モックを作る</li>
<li>［ワイヤーフレーム・実装］機能・画面フローを調整する</li>
</ol>


<p>ユーザーの理解からアプローチ版</p>

<ol>
<li>［インタビュー・ペルソナ・エクスペリエンスマップ］ユーザーの行動を観察する</li>
<li>［インタビュー・ペルソナ・エクスペリエンスマップ］ユーザーのインサイトを見つける</li>
<li>［インタビュー・ペルソナ・エクスペリエンスマップ］ユーザーの課題を見つける</li>
<li>［ワイヤーフレーム・機能実装］サービスのアイデアを考える</li>
<li>［ワイヤーフレーム・機能実装］機能・画面・フローを考える</li>
</ol>


<h4>感想</h4>

<p>受託でPoC案件が前提の話だったのでいまいる会社に近い感じもあり熱心に聞けました。<br />
UX設計やります、っていっても1つではないアプローチの方法があってそれを実践できるようにしたいなと思いました。</p>

<p><a id="anchor02"></a></p>

<h2>A1-3.5 : 受託制作におけるデザインシステム</h2>

<p>受託制作における汎用的なデザインシステムについての知見<br />
スピーカー：石原隆志さん（GrowGroup株式会社）<br />
スライド：<a href="https://speakerdeck.com/1shiharat/design-system-for-client-work">Design system for Client Work - Speaker Deck</a></p>

<h4>デザインシステムを作った経緯</h4>

<p>事業規模拡大、理念体系の変更により時間をつくったり、共通認識となる旗が必要と感じたため。</p>

<h4>デザインシステムの導入</h4>

<p>デジタルプロダクトの目的を達成するために首尾一貫したルールで編成された、お互いに関連付けられたパターンとその実践方法。<br />
吉幾三。こういうのオンラインだと難しそうですね・・・<br />
今回は受託制作の会社の場合のため、汎用性を持たせること、どこまでの自由度があるのかなどの共有が難しかった。</p>

<p>これらの課題に対して</p>

<ul>
<li>デザインシステムに関する勉強会、ミーティングの実施</li>
<li>デザイナーのコーディングスキルの習得（Udemyなど中心に）</li>
<li>クロージングミーティングの開催</li>
<li>社内で運用システム、フロー（委員会）を構築</li>
<li>ツールの拡充</li>
<li>ドキュメントの充実化</li>
</ul>


<p>などできるだけスキルレベルに依らず使うようにするためハードルを下げる施策を行った。</p>

<h4>感想</h4>

<p>自分も2人や20人の受託Web制作会社で今まで社内ツール作るのに頓挫した光景を見る経験を何度もしているので、めちゃくちゃしっかりやっててすごいなと思いました。</p>

<p><a id="anchor03"></a></p>

<h2>A1-4 : UXデザインにおける眼と手と動きの解像度を上げる技</h2>

<p>眼と手と動きの解像度を上げる方法<br />
スピーカー：安藤幸央さん（株式会社エクサ）<br />
スライド：<a href="https://www.slideshare.net/yukio.andoh/ux-milk-all-night-2020-yukio-andoh-238473688">UX MILK All Night 2020 (Yukio Andoh)</a></p>

<h4>眼</h4>

<ul>
<li>中心視野はかなり狭い

<ul>
<li>視野の移動をなるべくさせない</li>
</ul>
</li>
<li>白黒・色反転・左右反転・補助線・比較でゲシュタルト崩壊を防ぐ</li>
</ul>


<h4>手（指）</h4>

<ul>
<li>体験の解像度を下げる（おじさんでも爪を伸ばしてみる）</li>
<li>人間は35,000/1日、選択している（2秒に1回）

<ul>
<li>選択を分解して人の体験を分析する（コーヒーと角砂糖）</li>
<li>Netflix は登録なしで見れるように</li>
</ul>
</li>
</ul>


<h4>動き</h4>

<p>なぜUIアニメーションさせるのか</p>

<ul>
<li>画面や要素が切り替わったことを知らせる</li>
<li>変化をより把握しやすいものにする</li>
<li>小さなものにも注意を促す注目をしてもらう</li>
<li>動きによって楽しみを感じてもらう</li>
<li>正しい情報構造の理解を手助けする</li>
</ul>


<p>人間は情報を順繰りに渡される方が理解しやすい</p>

<p>オブジェクトを触わってから</p>

<ul>
<li>50~100msあとにアニメーション開始</li>
<li>300~400msでUIアニメーション</li>
<li>50~100msあとにアニメーション停止</li>
</ul>


<p>すると動きを知覚しやすい</p>

<h4>感想</h4>

<p>話慣れてるなー感がすごかったです。<br />
なぜUIアニメーション必要なのか、自分は極力必要ないならしない方向に持っていってしまいますが、理論化、言語化して提示くださったので、その方法で考えていきたいと思いました。</p>

<p><a id="anchor04"></a></p>

<h2>A1-5 : しなくていいUX</h2>

<p>スマートロックのUXについて<br />
スピーカー：神谷郁さん（Qrio株式会社）<br />
スライド：<a href="https://speakerdeck.com/ikukamiya/sinakuteiiux">しなくていいUX - Speaker Deck</a></p>

<h4>しなくていいUXとは？</h4>

<ul>
<li>ユーザーが抱えている負の体験を「しなくていい」</li>
<li>ユーザーが製品を使う上で余計な体験を「しなくていい」</li>
</ul>


<p>「ユーザーが抱えている負の体験を」「これまでよりもスマートな体験で」解決するアプローチ => 課題解決のアプローチと近い<br />
Amazon、Uber、サマリーポケットの例</p>

<h4>Qrio LockのUXデザイン</h4>

<p>ユーザーが抱えている負の体験を「しなくていい」<br />
=> 本来したいことに時間を使える<br />
=> 家を出たらカギが閉まって家に帰ってきたらカギが開いてほしい</p>

<p>出かける前 / 出かける時 / 外出中 / 帰宅した時 / 在宅中 のステージごとに課題・不便を抽出</p>

<p>ユーザーが製品を使う上で余計な体験を「しなくていい」<br />
=> 余計な階層を辿らなくていい<br />
=> 新しい技術を覚えなくていい<br />
=> セットアップに時間をかけなくていい</p>

<p>セットアップに対して「自分でもできる」感を訴求<br />
・貼り付けるだけで使える訴求<br />
・既存設備に取り付けられる訴求</p>

<h4>感想</h4>

<p>先ほどの解像度のセッションもですが、不自由・負の部分の洗い出しを行ってから設計するということで、ハードウェア・ソフトウェア関係ないのかなと感じました。<br />
カギをかけない人はいない、って言っていてビクッとしました。</p>

<p><a id="anchor05"></a></p>

<h2>A1-8 : インクルーシブデザインとUX</h2>

<p>インクルーシブデザインでできることについて<br />
スピーカー：佐野実生さん（株式会社コンセント）</p>

<h4>インクルーシブデザインとは</h4>

<ul>
<li>インクルーシブデザイン => デザインプロセスに多様な人を巻き込む <code>手法</code></li>
<li>ユニバーサルデザイン => すべての人が利用できるデザインである <code>状態</code></li>
<li>アクセシビリティ => すべての人がアクセスできる <code>状態</code></li>
</ul>


<p><code>多様な人</code> は特定の誰かではなく、みんなのことを指す。<br />
極端ユーザーからの顕在ニーズを抽出すして未来の当たり前をつくること。</p>

<p>例）未来の当たり前</p>

<ul>
<li>メール</li>
<li>iPhone</li>
<li>Kindle</li>
<li>スマートスピーカー</li>
</ul>


<p>特定の環境や制限のある状態は誰にでも当たり前にあり得る。</p>

<h4>インクルーシブデザインチームの取り組み&amp;実体験</h4>

<p>どうすれば伝わるだろう？という問いかけを意識する</p>

<ul>
<li>画面に頼らない説明をする</li>
<li>コピペ最高</li>
<li>字幕はあるに越したことはない</li>
</ul>


<h4>感想</h4>

<p>画面共有のココ問題、自分もリモートになって感じました。<br />
UDトーク、噛んじゃいけないプレッシャーもありそうですがめっちゃよかったです。<br />
本当に言っている通りで倍速で追いやすいですし、自分にとっては一番良いインクルーシブデザインの例でした。</p>

<p><a id="anchor06"></a></p>

<h2>A2-4 : システム開発でデザイナーは何をすればいい？</h2>

<p>システム開発の要件定義・設計フェーズにおいてデザイン思考をどのように取り入れてるか<br />
スピーカー：高見祐介さん（株式会社電通国際情報サービス）<br />
スライド：<a href="https://www.slideshare.net/aghome/uxmilkallnight">UXMILKallnight_システム開発でデザイナーは何をすればいい？</a></p>

<h4>不確実性を下げる</h4>

<p>要求定義・要件定義・基本設計・詳細設計で2つの思考</p>

<ul>
<li>システム思考（全体・抽象化志向） => 物事を全体的&amp;体系的にとらえ、多くの視点から構造化し可視化する</li>
<li>デザイン思考（部分・具体化志向） => 完成的なアプローチで観察、発想、試作を何度も繰り返し共創する</li>
</ul>


<h4>フェーズ別のアプローチ</h4>

<ul>
<li>要求定義 => ペルソナ・カスタマージャーニーマップマップなど仮説</li>
<li>要件定義 => UI設計書をつくる（デザイナーが）</li>
<li>設計 => 対象ユーザの決定とユーザビリティテスト</li>
</ul>


<p>実施したアクションの合意形成（クライアントと伴走することが大事）</p>

<ol>
<li>画面イメージを検討し、該当業務プロセスで必要とされる機能を洗い出す</li>
<li>早い段階からUI画面のレイアウトと仕様項目のイメージをつかむ</li>
<li>画面遷移と発生イベントを優先的に確認する</li>
</ol>


<h4>デザイナーががんばること</h4>

<ul>
<li>言語化</li>
<li>共創</li>
<li>合意形成</li>
</ul>


<p>要求・要件定義フェーズから参画しましょう</p>

<h4>感想</h4>

<p>開発会社の方なので他の方とはちょっと毛並みが違って面白かったです。<br />
「正しいものを正しく作る」まわりの話をデザイナーさんが意識しているとこのような解釈方法になるんだという新しい発見がありました。</p>

<p><a id="anchor07"></a></p>

<h2>A2-7 : 複雑性と難易度の高いサービスリニューアルにおけるサービスデザイン</h2>

<p><a href="https://cultibase.jp/">CULTIBASE</a> のサービスデザインについて<br />
スピーカー：瀧知惠美さん（株式会社ミミクリデザイン）<br />
スライド：<a href="https://speakerdeck.com/chiemitaki/fu-za-xing-tonan-yi-du-falsegao-isabisuriniyuaruniokerusabisudezain">複雑性と難易度の高いサービスリニューアルにおけるサービスデザイン - Speaker Deck</a></p>

<h4>サービスデザインの特徴的なアプローチ</h4>

<p><a href="https://www.amazon.co.jp/dp/4802511248">This is Service Design Doing サービスデザインの実践</a> より</p>

<ul>
<li>人間中心

<ul>
<li>関わる人の体験を考慮する</li>
</ul>
</li>
<li>共働的であること

<ul>
<li>関係者が積極的に関与する</li>
</ul>
</li>
<li>反復的であること

<ul>
<li>プロセスは探索・改善・実験の繰り返し</li>
</ul>
</li>
<li>連続的であること

<ul>
<li>サービスを行動の連続として捉える</li>
</ul>
</li>
<li>リアルであること

<ul>
<li>現実世界でリアルに調査、実験する</li>
</ul>
</li>
<li>ホリスティック（全体的）な視点

<ul>
<li>サービスと企業全体まで含めた視野をもつ</li>
</ul>
</li>
</ul>


<p>利害関係者を巻き込んだ「共創」を大事にしたい<br />
=> 「同感的にかかわり」ではなく「共感的かかわり」（1人称視点+2人称視点）</p>

<h4>サービスデザインで大事にしていること</h4>

<ul>
<li>「ユーザーにとっての理想」と「自分たちが目指す理想」を徐々に折り合いをつけていく</li>
<li>1人称視点でと3人称視点でこれまで培われたサービスの特色を大事にする</li>
<li>既存ユーザ・新規会員・社内メンバーとのコミュニケーション</li>
</ul>


<h4>サービスデザイン（リニューアル）の難しさと取り組み方</h4>

<p>リニューアルが失敗する要因 => 一新したことで既存の価値が損なわれることが一般的<br />
なぜそうなりやすいかというと、既存・新規の2つのユーザーに考慮し、既存・新規の2つのサービスを動かさないといけないから</p>

<ul>
<li>2つのユーザーへの対応方法

<ul>
<li>既存ユーザーと新規ユーザー両者にとって快適なあり方の探求</li>
<li>既存ユーザー＋新規ユーザー2人のペルソナを作成</li>
</ul>
</li>
<li>2つのサービスへの対応方法

<ul>
<li>リニューアル前とリニューアル後のスムーズな接続の設計</li>
<li>リニューアル後の世界観へ徐々に移行させていく</li>
</ul>
</li>
</ul>


<p>一新する（renewal）ではなく、洗練させる（refine）。</p>

<h4>感想</h4>

<p>サービスという範囲がわりと広いものだと思っているのですが、リニューアルの話は一般的なWebサイトでも通じることがあるかなと思いました。（要求・要件にもよりますが）</p>

<p><a id="anchor08"></a></p>

<h2>A3-2 : 良いUXを実現するために、まずはチーム内にデザインを浸透させている話</h2>

<p>Qiitaなどを提供するIncrementsでUXデザインを浸透させている話<br />
スピーカー：綿貫佳祐さん（Increments株式会社）<br />
note：<a href="https://note.com/xrxoxcxox/n/nade227698f67">UX MILK ALL Night - 良いUXを実現するために、まずはチーム内にデザインを浸透させている話｜綿貫 佳祐 / Ateam, Increments｜note</a></p>

<h4>なぜ「チーム内」か</h4>

<ul>
<li>優れたUXデザイナーはチームに「UXと向き合う文化」を導入している</li>
<li>デザインは「デザイナーだけでやるもの」ではないと思っている</li>
<li>組織にこれまであまりデザイナーがいなかった</li>
</ul>


<h4>取り組み</h4>

<p>デザインスクラムというエンジニアがデザインの勉強する取り組みを実施</p>

<ul>
<li>サービスの立ち上げの調査や企画</li>
<li>Figmaを使って自分でUI作成</li>
</ul>


<p>良い変化</p>

<ul>
<li>デザイナーの考えが分かるようになった</li>
<li>一連の流れが理解できるようになった</li>
<li>UIにまで踏み込んだので制作する際の勘所が良くなった</li>
</ul>


<p>苦労したこと</p>

<ul>
<li>実務ですぐに何か成果が出るかというと、出ない</li>
</ul>


<h4>感想</h4>

<p>スライドがめちゃめちゃ見やすかったです。<br />
QiitaのUIも段々良くなってきていますが、もっとよくなればいいなあと思います。</p>

<p><a id="anchor09"></a></p>

<h2>A3-10 : 1人でこっそり始めるUXデザイン</h2>

<p>UXデザインを身近な所からはじめてみましょう、というお話<br />
スピーカー：鈴木毅さん（株式会社メンバーズ）</p>

<h4>何から始めればいい？</h4>

<p>ユーザー調査 => ユーザビリティ調査</p>

<ul>
<li>インパクトが大きい</li>
<li>テクニカルスキルがなくてもできる</li>
<li>制作者は始めやすい</li>
</ul>


<h4>具体的な始め方</h4>

<ul>
<li>準備

<ul>
<li>協力者を探そう</li>
</ul>
</li>
<li>実査

<ul>
<li>イントロ</li>
<li>事前インタビュー</li>
<li>タスク実施</li>
<li>事後インタビュー</li>
</ul>
</li>
<li>分析

<ul>
<li>有効さ・効率・満足度</li>
</ul>
</li>
<li>共有

<ul>
<li>チームメンバー・ステークホルダーに共有</li>
</ul>
</li>
</ul>


<h4>感想</h4>

<p>一人ではじめる、なのでスモールスタートで参考書や書籍に書いてあることは全部やろうとしないでいいんじゃないかと言っていてなるほどなと思いました。<br />
確かにUXの書籍に書いてある内容を実践しようとするには、仰々しい部分もあるかなと思うので・・・</p>

<h2>全体の感想</h2>

<p>自分はエンジニアで登壇されている方はデザイナーの方が多いと思いますが、そういう職種の垣根を超えて仕事をしているのだなという発見と刺激を受けました。<br />
「共創」「伴走」や「負の体験を取り除く」「不自由から学ぶ」のような近しいキーワードもセッション間で見受けられ、デザインする対象がハード/ソフトに関わらず、制作の考え方が勉強になるイベントでした。</p>

<p>ゆっくり見たいもの見たい派なのと、朝型なので今回アーカイブ形式を購入してみましたが、セッション内容的にとても満足でした。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】ウェブタイポグラフィ - 美しく効果的でレスポンシブな欧文タイポグラフィの設計'
description: ''
publishDate: '09/21/2020 18:13:57'
---

[CONTENTS-START]
<p>前回の <a href="https://jtk.hatenablog.com/entry/2020/09/09/050000">オブジェクト指向UIデザイン</a> に続いて、同じ時期に話題になっていたウェブタイポグラフィを読みました。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4862464769/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/41f6Eol5d7L._SL160_.jpg" class="hatena-asin-detail-image" alt="ウェブタイポグラフィ─美しく効果的でレスポンシブな欧文タイポグラフィの設計" title="ウェブタイポグラフィ─美しく効果的でレスポンシブな欧文タイポグラフィの設計"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4862464769/hatena-blog-22/">ウェブタイポグラフィ─美しく効果的でレスポンシブな欧文タイポグラフィの設計</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%C1%A5%E3%A1%BC%A5%C9%A1%A6%A5%E9%A5%BF%A1%BC" class="keyword">リチャード・ラター</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2020/06/29</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>目次</h2>

<ul>
<li>はじめに：わたしたちは皆タイポグラファ</li>
<li>1章:読まれるための組版</li>
<li>2章:タイポグラフィのディテール</li>
<li>3章:フォントの選択と使用</li>
<li>おわりに</li>
</ul>


<p>章立てはシンプルですが各章でボリュームあります。<br />
対象としてはIAやデザイナー、エンジニアということで、HTMLやCSSに関してはある程度の基礎が分かっていると楽しく読み進められるかなと感じるレベルかなと思います。</p>

<h2>ポイント</h2>

<h3>はじめに</h3>

<blockquote><p>ウェブですばらしいのは、さまざまな形を取れること、そして読み手がニーズに合わせてそれを形づくれることです。これは弱みではなく強みであり、バグではなく機能です。</p>

<p>ウェブデザイナーには柔軟性が求められるのです。ウェブデザインは読み手の緩急王に順応するものであるべきで、読み手がニーズに合わせてデザインを調整することが不可欠です。</p></blockquote>

<p>これは特にタイポグラフィに限った話ではなくウェブのプレゼンテーション全体の話だと思うのですが、自分もこういう考え方で良い妥協点を見つけれる人がウェブのデザインがうまい人かなと思っています。</p>

<h3>1章:読まれるための組版</h3>

<h4>読むということ</h4>

<p><a href="https://jtk.hatenablog.com/entry/2019/08/05/102608">インタフェースデザインの心理学</a> にもあったサッカードなどの話。<br />
ただそれよりも詳しい内容 中心視では一度に4、5文字しか読めないが脳はすべてのテキストに焦点が合っている。</p>

<h4>フォントサイズの単位</h4>

<p>主に <code>em</code> <code>rem</code> <code>ch</code> <code>px</code> がある。</p>

<blockquote><p>ただし基本的には、ページと一緒に要素を拡大縮小したい場合は rem を使用し（グローバルなサイズ設定）、コンポーネント内で拡大縮小したい場合は em を使用します（ローカルサイズ設定）。</p></blockquote>

<h4>段落のデザイン</h4>

<p>可読性のバランスを支えるのは以下の3つ。</p>

<ul>
<li>カラム幅（行の長さ）</li>
<li>文字サイズ</li>
<li>行間</li>
</ul>


<h5>カラム幅</h5>

<p>一般的な印刷物は1行45〜75文字で設定されている。<br />
画面で読むには行が長め（最大100文字）でも悪影響は出ない。ただし読み手は短めの行を好む。<br />
スマホは1行で42文字がおおむねちょうどよい。<br />
（和文の場合はこれらの文字数の半分強を目安にする）</p>

<h5>文字サイズ</h5>

<p>段落にはデフォルトの文字サイズを使用する。<br />
各デバイスメーカーは適切な初期サイズとして16pxを採用。<br />
アクセント付きの文字をベースにデザインしたフォントはxハイトが低いので、同じ16pxでも他のフォントに比べて小さめになる場合も。</p>

<h5>行間</h5>

<p>行の高さは文字サイズとカラム幅に合わせる。<br />
<code>line-height:</code> は単位無しで指定する（自分は単位無し= <code>em</code> で指定だと勘違いしていました）<br />
フォントによって調整が必要だが1.4を設定するところからスタートする。（和文は1.7程度から）</p>

<p>快適な行間を設定するにはカラーのの均一化とカラーに対して心地よい黒みの量にすることを目指す。</p>

<ul>
<li>フォントのストロークが太い => カラーが濃くなりがち => 行間をやや広げて重さを減らす</li>
<li>幅が広く隙間がある、xハイトが小さい => カラーは薄くなりがち => 行間をやや狭めて重みをもたす</li>
</ul>


<h4>レスポンシブな段落</h4>

<p>目からテキストまでの距離と適正フォントサイズ<br />
<a href="https://sizecalc.com/">Size Calculator</a></p>

<ul>
<li>本 => 35cm</li>
<li>ノートPCやタブレット => 45cm => 18〜19px</li>
<li>デスクトップ => 最大60cm => 22px</li>
<li>スマートフォン => 30cmかそれ以下 => 16px</li>
</ul>


<p>とはいえテキストは過度に大きすぎても読みにくくなるのでプロトタイプをなるべく作りましょう/プロトタイプのコンテンツもできるだけ実際のデータ（に近いもの）をいれた上で行いましょう</p>

<h3>2章:タイポグラフィのディテール</h3>

<h4>記号、符号、アクセント</h4>

<ul>
<li>さまざまなスペース

<ul>
<li>ノーブレーク <code>&amp;nbsp;</code> /ヘア <code>&amp;hairsp;</code> /シンスペース <code>&amp;#8239;</code> がある</li>
</ul>
</li>
<li>アクセント記号を勝手に消さない

<ul>
<li>特に人の名前は礼儀を欠くことになる</li>
</ul>
</li>
<li>適切な約物を使用する

<ul>
<li>ダッシュの代わりにハイフンを使用しない

<ul>
<li>enダッシュ <code>&amp;ndash;</code> と emダッシュ <code>&amp;mdash;</code></li>
<li>正しいマイナスは <code>&amp;minus;</code></li>
</ul>
</li>
</ul>
</li>
<li>その他

<ul>
<li>エリプシスは3つのピリオドではなく <code>&amp;hellip;</code></li>
<li>乗算記号はアルファベットの <code>x</code> ではなく <code>&amp;times;</code></li>
</ul>
</li>
</ul>


<h4>階層とスケール</h4>

<p>タイプスケール（あらかじめ定義された文字サイズのセット）を意識する。選択肢が制限されるため、組版に規律と一貫性をもたらすことができる。</p>

<ol>
<li>レファレンス（小） => 注釈など</li>
<li>リーディング（中） => 本文</li>
<li>ディスプレイ（大） => 見出しなど</li>
</ol>


<p>最も小さいサイズを先に決めてから大きいサイズを選ぶ。<br />
<a href="https://www.modularscale.com/">Modularscale</a> や <a href="http://www.simplescale.online/">Simple Scale</a> を使うとかんたんに試せる</p>

<p>デフォルトの文字サイズの場合、スマートフォンでは問題ないが、PCなど大きな画面ではコントラストとインパクトが減少してしまう<br />
この場合、別のスケールセットをつくるのではなく、メディアクエリを使用して端末サイズをemで分岐してあげる</p>

<h4>意味とセマンティクス</h4>

<h5>見出し</h5>

<p>見出しの強調はスペーシングだけでそれなりにうまくできるはず。足りない場合にスタイルやウェイトの違いをもたす<br />
CSSではh1〜h6までスタイルを指定する。デザインにない場合（h5やh6）にもh4と同じスタイルを当てておく。<br />
レディング（行間）は狭くする</p>

<h5>テキストまわり</h5>

<ul>
<li>はじまりを明確にする

<ul>
<li>空白スペースやドロップキャップ</li>
</ul>
</li>
<li>リードはリードらしく大きな文字にしたりする</li>
<li>リスト項目が少なく数行だけの場合は、項目感のスペーシングを防ぐ</li>
<li>アンダーラインでは強調しない

<ul>
<li>リンクと慣習上リンクとみなされるため</li>
</ul>
</li>
<li>リンクは明確かつ控えめにする

<ul>
<li>アンダーラインを第一選択肢に</li>
<li>アンダーラインなしの場合は周囲とのコントラスト比を3:1にする（かなり明らかにする必要性）</li>
</ul>
</li>
</ul>


<h4>テーブル</h4>

<p>p.144 に実際のサンプルがあるが、たしかに見やすく感じる</p>

<ul>
<li>テーブルは引き伸ばさない</li>
<li>装飾や色付けは最小限に留める</li>
<li>テキストは左揃え、数字は右揃え、見出しはデータに揃える</li>
<li>余白を利用してグループ化と分離を行う</li>
<li>数値にテーブル用ライニング数字と一貫した精度を適用し、繰り返す（$マークなど）を省略する</li>
</ul>


<h4>トラッキングとカーニング</h4>

<ul>
<li>レタースペーシングは慎重かつ例外的に

<ul>
<li>特別に理由がない限りは小文字をレタースペーシングしない

<ul>
<li>読み手が単語として把握するのが難しくなる</li>
</ul>
</li>
<li>大文字や数字が連続する場合はレタースペーシングする</li>
<li>大きいボールドの幅広フォントは軽く詰める</li>
<li>字間を広げる場合は合字を無効に</li>
</ul>
</li>
</ul>


<h4>見出しとインパクト</h4>

<p>タイポグラフィの2つの役割</p>

<ul>
<li>小説 => 没頭させること => 読む</li>
<li>広告看板 => 割り込むこと => 見る</li>
</ul>


<p>ディスプレイテキストはまず見られてから読まれるテキスト</p>

<h4>バーティカルリズムを適用する</h4>

<p>参考： <a href="https://postd.cc/why-vertical-rhythms/">なぜタイポグラフィにおいてVertical Rhythm（バーティカルリズム）は重要な手法なのか？ | POSTD</a></p>

<blockquote><p>ページのバーティカルリズムは、本文の行の高さを指定した時点で設定されます。本文テキストを16px、行の高さを21pxとした場合、縦方向のスペースの基本単位は21pxになります。ページのバーティカルリズムを持たせるには、マージンやほかのテキストの行の高さなどを含むすべての縦方向のスペーシングを21の倍数にしてください。</p></blockquote>

<h4>配置と構成</h4>

<p>モバイルファーストの哲学を採用する<br />
画面が小さいので必然的に優先順位と階層の扱いが大事になる</p>

<p>メインのテキストブロックをななめ読みできるようにする</p>

<blockquote><ol>
<li>全体的な読む体験は最初のななめ読みで決まるので、可能な限りひと目で注意を引き込むようにする</li>
<li>小見出しは明確に識別でき、理解しやすいものにする</li>
<li>左側の端を明確にすることで、ページを下方に進む際の視覚的な手すりを読み手に提供する</li>
</ol>
</blockquote>

<h3>3章:フォントの選択と使用</h3>

<h4>フォントが画面にレンダリングされる仕組み</h4>

<blockquote><p>画面はピクセルと呼ばれる極めて小さい光の点の面滅を放射します。</p>

<p>ラップトップやデスクトップの多くは、約140ppiの画面解像度を備えています。アップルのRetinaディスプレイなどの高解像度画面でも400ppi以下です。一方のプリンターは、比較的安価なレーザープリンターでも600dpiの解像度があり、プロ仕様のデジタルプリンターではx2,438dpiもあります。</p>

<p>各オペレーティングシステムにはテキストレンダリングエンジンが備わっていて（複数備えていることもあります）、それぞれのウェブブラウザがどのレンダリングエンジンを使用するかをコントロールしています。</p></blockquote>

<p>→ つまり同じOSでもブラウザによってテキストの見た目が大きく異る可能性がある。</p>

<p>フォントはベクターでデザインされラスタライズされて表示される。ラスタライズされるときにエイリアス/グレースケールスムージング/サブピクセルアンチエイリアスのアンチエイリアス処理がある。<br />
ただこのそれぞれの処理には何らかの欠点があったり、向いてない端末が出てきてしまう。<br />
そのときに使うのがヒンティング。<br />
参考） <a href="https://www.jfpi.or.jp/webyogo/index.php?term=1995">ヒンティング - 印刷用語集</a><br />
Verdana、Geogia、Arialなどの主要なウェブ用のフォントはすべてのサイズで可読性が高くなるようにヒンティングの調整がされている。</p>

<ul>
<li>ヒンティングを使用するのはWindowsのみ</li>
<li>携帯端末（iOSやAndroidデバイス）はサブピクセルアンチエイリアスではなくグレースケールスムージングが使用される</li>
</ul>


<p>マイクロソフトは正確さよりも鮮明さを優先させるというスタンス（へぇ〜となりました）</p>

<blockquote><p>ウェブデザイン全般に言えることですが、デバイス間ですべてが同じようにレンダリングされることを期待してはいけません。自分の選択をベースに、何かがただ違って見えるだけなのか、または質が低下しているのかを評価します。</p></blockquote>

<h4>実際的及び実用的考慮事項</h4>

<ul>
<li>すぐにフォントを選択しない

<ul>
<li>どのフォントを使用するかは、特定の要件、文脈、成約、信頼性、そして最後は好みで決まる。

<ul>
<li>美的判断より実用的な要件を先に考慮する。</li>
</ul>
</li>
</ul>
</li>
<li>ウェブサイトの性質をよく理解する

<ul>
<li>今後複雑な機能を要求されるか</li>
<li>読み手を没頭させるのか、流し読みで十分なのか</li>
</ul>
</li>
<li>必要な文字が揃っている書体を選択する

<ul>
<li>アクセント、約物が用意されているか</li>
</ul>
</li>
<li>必要なスタイルが書体に備わっているか</li>
<li>フォントのパフォーマンスを考慮する

<ul>
<li>レンダリング</li>
<li>ファイルサイズ</li>
</ul>
</li>
<li>ブランド要件に対して現実的に対応する</li>
</ul>


<h4>本文書体の決定</h4>

<ul>
<li>読み手とテキスト感の摩擦を取り除く

<ul>
<li>堅牢な書体の選択

<ul>
<li>高コントラスト高コントラストと独特のスタイルは本文を読みにくくする</li>
</ul>
</li>
<li>アクティブなテクスチャとむらのないカラーでスムーズに読めるようにする

<ul>
<li>読み手が長い朗読の聞き手だとすると、好奇心をそそりながらも、うんざりさせない程度に声に変化をつけた朗読（この朗読者の声のバリエーション = 書体のテクスチャ = 書体のコントラスト、フロー、サイズ）</li>
<li>Museo Sans と FS Emeric の例。わかりやすかった。</li>
</ul>
</li>
<li>テキストに沿った書体を選ぶ

<ul>
<li>文章の特徴をつかみ、テキストが醸し出す雰囲気をうまく表す言葉と考え、その感じやムードをデザインに取り込む必要がある</li>
</ul>
</li>
<li>自分の好みを信じる（！）</li>
</ul>
</li>
</ul>


<h4>ディスプレイテキストの書体を選ぶ</h4>

<ul>
<li>かしこまらず、押しつけず、ありふれたものにせず

<ul>
<li>書体を通じて感覚に働きかける

<ul>
<li>ディスプレイテキストは「読む」前に「見る」</li>
<li>信頼性やトーン、コンテンツに対する先入観を刺激する</li>
<li>モフモフの子猫が大好き</li>
</ul>
</li>
<li>さまざまなディスプレイ書体を試す

<ul>
<li>働き者、個性派。柔軟性よりも個性を重視する</li>
</ul>
</li>
<li>ディスプレイテキストにディスプレイスタイルを使用する</li>
</ul>
</li>
</ul>


<h4>ウェブフォントを使用する</h4>

<p>ペイロードとレンダリングタイミングの2点を最適化する必要がある。</p>

<ul>
<li>WOFF は TTFとOTFのラッパー。WOFF2は圧縮最適化した新しいフォーマットだがすべての環境でサポートされていないのでフォールバックを用意する。</li>
<li>@font-face でWebフォント指定していても、フォントは必要なときのみ（該当するセレクタが存在するときのみ）ダウンロードされる。</li>
<li>ペイロードの軽減

<ul>
<li>使用するフォント数の制限（特にアジア圏のフォント）</li>
<li>必ずWOFF2オプションを提供（平均30%の節約）</li>
</ul>
</li>
<li>ページのレンダリングタイミングを最適化する

<ul>
<li>FOIT = flash of invisible text = 見えないテキストによるちらつき</li>
<li>FOUT = flash of unstyled text = スタイリング前のテキストによるちらつき</li>
<li><code>font-display:</code> を使用してブラウザの振る舞いを調整</li>
</ul>
</li>
<li>重要なフォントはプリロードする</li>
<li>フォントイベントでウェブフォント戦略を微調整する

<ul>
<li><a href="https://www.w3.org/TR/css-font-loading-3/">Font Loading API</a></li>
</ul>
</li>
</ul>


<h2>感想</h2>

<p>ウェブのタイポグラフィでも、古いときから使われている技術やルールをかなり大事にするべきなのだなと感じた。ウェブはウェブなので、、が通じるとこがもっと多いと思ってました。<br />
自分の悪い癖だと思うのですが、文字をひとつのデザインや見せ方として捉えている部分があって、そういう手癖でやっていたこと（本文でわりとレタースペーシング入れる、テーブルの横幅100%など）は見づらいよと書かれており反省しました。。</p>

<p>最初に入った会社で朗文堂通ってたタイポグラフィ詳しい方にWebだけではなく文字周りの知識をある程度は教えて頂いたのですが、最近は特にデザインもする機会もなく忘れかけていた分野だったので若干なつかしさを覚えました。<br />
結構この分野って知識の他に日々文字を眺める機会が誰でもあると思うのですが、それを見てどう感じてということの繰り返しで身につける系のスキルかなとも思っていて、文字詰めとかも最初はなんとなくでやっていたけど、やっていくにつれて覚えていけた感があります。<br />
本書で触れている行間の設定なども結局デザイナーの目がものをいう部分も多々にあるんだなと思いつつ、カラーなどの概念を知らないでなんとなくいい感じを脱するためには学んだほうが良い知識が揃っていました。</p>

<p>イギリスの <a href="https://twitter.com/clagnut">リチャード・ラターさん</a> が著者で、監訳は <a href="https://twitter.com/terkel">鈴木丈さん</a> が行っていますが、日本語の場合はうんぬんかんぬんも補足しないといけないこともあるのでタイポグラフィ関係の翻訳めちゃ大変そうだな・・・と思いました。</p>

<p>この本に関してではないですが、やっぱり和文で扱い方が全く異なることもあると思うので、そこにフォーカスした本も読んでみたいなと思いました。<br />
ただ ウェブ × タイポグラフィ でも割と狭い世界な印象なのでなかなか難しいのかなとも思います。</p>

<h2>ほか参考</h2>

<ul>
<li><a href="https://terkel.jp/archives/2020/06/to-be-read/">読まれるために――『ウェブタイポグラフィ』 — terkel.jp</a></li>
<li><a href="https://ia.net/ja/topics/the-web-is-all-about-typography-period">ウェブデザインの95％はタイポグラフィ – iA</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Nuxt.js・楽天市場APIでWebアプリをつくる'
description: ''
publishDate: '09/16/2020 09:16:55'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190924093802.png" width="240" height="240" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<p>Nuxt.jsと楽天市場APIでWebアプリを作成しました。</p>

<ul>
<li><a href="https://github.com/yuheijotaki/nuxt-rakuten-api">GitHub</a></li>
<li><a href="https://yuheijotaki.github.io/nuxt-rakuten-api/">GitHub Pages</a></li>
</ul>


<h2 id="構成">構成</h2>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200916091603.png" width="1200" height="527" loading="lazy" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h3 id="API">API</h3>

<p>今回は特にAPIにこだわりなかったので使いやすそうな <a href="https://webservice.rakuten.co.jp/api/ichibaitemsearch/">楽天市場API</a> を使いました。<br />
Amazonの商品APIは登録や制限の縛りがきつそうで、<a href="https://jtk.hatenablog.com/entry/2020/09/06/154224">e-Stat API</a> は種類が多すぎるのと、統計をグラフ等で可視化するために時間かかりそうで手軽に使えるAPIにしました。</p>

<h3 id="フロント開発">フロント開発</h3>

<p>Nuxt.js の SPA で開発。<br />
Vuexをはじめて使ったのですが、今までバケツリレー的なことをしていたのでこれ使いこなせるとかなり便利ですね。<br />
ただgetter/setterの概念などまだまだ理解できていないところもあるのでもっと使いこなせるようにしたいです。</p>

<h3 id="CICD">CI/CD</h3>

<p>どこまでがCI/CDの範囲かは微妙ですが、GitHub Actions を使ってGitHubリポジトリのマスターブランチにプッシュしたら自動でビルドしてGitHub Pagesへデプロイするようにしました。<br />
GitHub Actionsいまいち分かっていなかったのですが、色々モジュールが用意されていてどれを使うか選択して、オプションやパラメータをyamlで設定するような流れなのですね。<br />
モジュールは公式のものもMarket Place的にサードパーティや個人製のものもあるって感じで、確かにGitHubをリポジトリとするプロジェクトの場合は広がりがあるなあという印象でした。</p>

<p>ただホスティングする場所にこだわりなければ、ちょっと複雑すぎる印象もあるのでNetlifyなどの方が手軽にはできるかなと思います。</p>

<h2 id="感想">感想</h2>

<p>久しぶりにNuxt.jsを触ることになってしまったのですが、今回Nuxtで詰まったというよりGitHub Actionsの設定周りで時間を費やしてしまったのでごりごり開発できた感はありませんでした。</p>

<p>例えば、リロード時に検索条件をlocalStorageに保存する、詳細ページからも検索できるようにするなどのもう少し細かいところを詰めたかったですが、次回以降も勉強でNuxt触ると思うのでだんだんできるようになっていければと思います。</p>

<h2 id="関連ブログ">関連ブログ</h2>

<ul>
<li><a href="https://jtk.hatenablog.com/entry/2020/09/10/122535">Vue.js Tips： Vuex で Action への複数パラメータ渡し / <code>v-on:</code> で複数のメソッド呼び出し - Chuck the Casual Web Surfer</a></li>
</ul>


<h2 id="参考記事">参考記事</h2>

<h3 id="Nuxtjs">Nuxt.js</h3>

<ul>
<li><a href="https://qiita.com/mgr/items/f2193fd21765be1d34c2">Nuxt.jsでaxiosを使ってサクッと小さなアプリを作る - Qiita</a></li>
</ul>


<h3 id="Github-Actions--Github-Pages">Github Actions / Github Pages</h3>

<ul>
<li><a href="https://qiita.com/Ancient_Scapes/items/fe18bae043e4d35f1e39">Nuxt.jsで作成したサイトをGithub Pagesに公開する (Github Actionsによるデプロイ自動化あり) - Qiita</a></li>
<li><a href="https://qiita.com/peaceiris/items/154fc3f9bccf9e4eb137">Vue Nuxt アプリを GitHub Actions で GitHub Pages にデプロイ - Qiita</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Nuxt.js のサイトを GitHub Actions を使って GitHub Pages へ自動デプロイする'
description: ''
publishDate: '09/14/2020 17:40:48'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190315114020.png" alt="f:id:jotaki:20190315114020p:plain" title="f:id:jotaki:20190315114020p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>結構詰まってしまったのでメモ</p>

<p>概要や大枠はこちら<br />
<a href="https://qiita.com/peaceiris/items/d401f2e5724fdcb0759d">GitHub Actions による GitHub Pages への自動デプロイ - Qiita</a></p>

<p>Nuxtの場合はこちら<br />
<a href="https://qiita.com/peaceiris/items/154fc3f9bccf9e4eb137">Vue Nuxt アプリを GitHub Actions で GitHub Pages にデプロイ - Qiita</a></p>

<h2>やりたいこと</h2>

<ul>
<li>Vue CLIで作成したNuxtアプリ（SPAモード）をGitHub Pagesで公開したい。</li>
<li>/dist ファイルをリポジトリにプッシュしてホスティングするのではなく GitHub Actions を使用してmasterブランチのファイルから静的ファイルを自動生成したい。</li>
</ul>


<h2>ざっくり流れ</h2>

<ul>
<li>nuxt.config.js でルーティング設定</li>
<li>.envファイルの設定</li>
<li>ACTIONS_DEPLOY_KEY の設定</li>
<li>generate, deploy設定 を /.github/main.yml に記述（ブラウザのGitHub Actionsから作成）</li>
</ul>


<p>main.yml に関しては最初に貼ったQiitaの記事をほぼコピペしましたが、細かい所で突っかかりました。</p>

<h3>つまったその1 envファイルの読み込み</h3>

<p><a href="https://www.npmjs.com/package/dotenv">dotenv</a> を使用</p>

<p>.env</p>

<pre class="code" data-lang="" data-unlink>APPLICATION_ID=XXXXXXXXXXXXXXXXX</pre>


<p>nuxt.config.js</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>require(<span class="synConstant">'dotenv'</span>).config();
<span class="synStatement">const</span> <span class="synIdentifier">{</span>APPLICATION_ID<span class="synIdentifier">}</span> = process.env;

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  <span class="synComment">// ...</span>
  env: <span class="synIdentifier">{</span>
    APPLICATION_ID
  <span class="synIdentifier">}</span>,
  ...
<span class="synIdentifier">}</span>
</pre>


<p>ここまでは <a href="https://qiita.com/taichi0514/items/3939af222dee21a44413">Nuxt.jsで.envファイルを扱う@nuxtjs/dotenv - Qiita</a> の通り</p>

<p>GitHub Pages でこの環境変数を使うには、<br />
GitHubのリポジトリページ > Settings > Secrets の <code>New secret</code> から .env と同内容のNameとValueを設定する。</p>

<p>その後、 main.yml のgenerateタスク時にそのSecretsを参照するように指定する</p>

<pre class="code lang-yaml" data-lang="yaml" data-unlink><span class="synIdentifier">jobs</span><span class="synSpecial">:</span>
  <span class="synIdentifier">build-deploy</span><span class="synSpecial">:</span>
   <span class="synComment"> # ...</span>
    <span class="synStatement">- </span><span class="synIdentifier">run</span><span class="synSpecial">:</span> npm run generate
      <span class="synIdentifier">env</span><span class="synSpecial">:</span>
        <span class="synIdentifier">APPLICATION_ID</span><span class="synSpecial">:</span> ${{ secrets.APPLICATION_ID }}
   <span class="synComment"> # ...</span>
</pre>


<h3>つまったその2 ACTIONS_DEPLOY_KEY 設定</h3>

<p>秘密鍵、公開鍵の生成<br />
ターミナルで</p>

<pre class="code bash" data-lang="bash" data-unlink>ssh-keygen -t rsa -b 4096 -C &#34;$(git config user.email)&#34; -f gh-pages -N &#34;&#34;</pre>


<p>リポジトリに公開鍵を設定<br />
GitHubのリポジトリページ > Settings > Deploy keys の <code>Add Deploy Key</code> から生成した公開鍵を（gh-pages.pub）を登録。<br />
Title は <code>ACTIONS_DEPLOY_KEY</code><br />
Key は gh-pages.pub の中身のコピペ<br />
<code>Allow write access</code> にチェック（しないとデプロイ時にパーミッション許可してと怒られる）</p>

<p>リポジトリに秘密鍵を設定<br />
GitHubのリポジトリページ > Settings > Secrets の <code>New secret</code> から生成した秘密鍵を（gh-pages）を登録。<br />
Name は <code>ACTIONS_DEPLOY_KEY</code><br />
Value は gh-pages の中身のコピペ</p>

<p>これで main.yml のデプロイ設定が動作した</p>

<pre class="code lang-yaml" data-lang="yaml" data-unlink><span class="synIdentifier">jobs</span><span class="synSpecial">:</span>
  <span class="synIdentifier">build-deploy</span><span class="synSpecial">:</span>
   <span class="synComment"> # ...</span>
    <span class="synStatement">- </span><span class="synIdentifier">name</span><span class="synSpecial">:</span> Deploy
      <span class="synIdentifier">uses</span><span class="synSpecial">:</span> peaceiris/actions-gh-pages@v2.5.0
      <span class="synIdentifier">env</span><span class="synSpecial">:</span>
        <span class="synIdentifier">ACTIONS_DEPLOY_KEY</span><span class="synSpecial">:</span> ${{ secrets.ACTIONS_DEPLOY_KEY }}
        <span class="synIdentifier">PUBLISH_BRANCH</span><span class="synSpecial">:</span> gh-pages
        <span class="synIdentifier">PUBLISH_DIR</span><span class="synSpecial">:</span> ./dist
   <span class="synComment"> # ...</span>
</pre>


<p>GitHub Pages の設定（GitHubのリポジトリページ > Settings内）はSourceの<br />
Branch は <code>gh-pages</code><br />
ディレクトリ はルート<br />
に設定すると変にnuxt.config.jsいじっていなければgh-pagesブランチではルート階層にdistファイルを生成してくれる。</p>

<h2>成果物</h2>

<ul>
<li><a href="https://github.com/yuheijotaki/nuxt-rakuten-api/blob/master/.github/workflows/main.yml">main.yml</a></li>
<li><a href="https://yuheijotaki.github.io/nuxt-rakuten-api/">GitHub Pages</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js Tips： Vuex で Action への複数パラメータ渡し /  `v-on:` で複数のメソッド呼び出し'
description: ''
publishDate: '09/10/2020 12:25:35'
---

[CONTENTS-START]
<p>過去記事では制作過程の記事の中に紛れ込ませていましたが、検索しづらいので Vue.js Tips としてまとめていきたいと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h1>Vuex で Action にパラメータを複数を渡す</h1>

<p>パラメータを1つ渡すときは</p>

<p>.vue</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">this</span>.$store.dispatch(<span class="synConstant">'items/getItems'</span>, <span class="synIdentifier">this</span>.data01)
</pre>


<p>store.js</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// ...</span>
<span class="synStatement">export</span> <span class="synStatement">const</span> actions = <span class="synIdentifier">{</span>
  async getItems(<span class="synIdentifier">{</span> commit <span class="synIdentifier">}</span>, hoge) <span class="synIdentifier">{</span>
    <span class="synComment">// ...</span>
    <span class="synStatement">const</span> variable01 = hoge
    <span class="synComment">// ...</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
<span class="synComment">// ...</span>
</pre>


<p>のように書きますが複数の引数を渡す場合、第3引数が使えないので</p>

<p>.vue</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//...</span>
data() <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    data01: <span class="synConstant">'データ01'</span>,
    data02: <span class="synConstant">'データ02'</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>,
methods: <span class="synIdentifier">{</span>
  ...mapActions(<span class="synIdentifier">{</span>
    getItems() <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.$store.dispatch(<span class="synConstant">'items/getItems'</span>, <span class="synIdentifier">{</span>
        hoge: <span class="synIdentifier">this</span>.data01,
        fuga: <span class="synIdentifier">this</span>.data02
      <span class="synIdentifier">}</span>)
    <span class="synIdentifier">}</span>,
  <span class="synIdentifier">}</span>)
<span class="synIdentifier">}</span>
<span class="synComment">//...</span>
</pre>


<p>store.js</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// ...</span>
<span class="synStatement">export</span> <span class="synStatement">const</span> actions = <span class="synIdentifier">{</span>
  async getItems(<span class="synIdentifier">{</span> commit <span class="synIdentifier">}</span>, <span class="synIdentifier">{</span> hoge, fuga <span class="synIdentifier">}</span>) <span class="synIdentifier">{</span>
    <span class="synComment">// ...</span>
    <span class="synStatement">const</span> variable01 = hoge
    <span class="synStatement">const</span> variable02 = fuga
    <span class="synComment">// ...</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
<span class="synComment">// ...</span>
</pre>


<p>参考： <a href="https://mseeeen.msen.jp/deal-with-multiple-arguments-with-action-or-mutation-in-vuex/">Vuex で Action, Mutation に第3引数を渡したくなったら</a></p>

<h1><code>v-on:</code> で複数のメソッドを呼び出し</h1>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>input(
  @click=<span class="synConstant">&quot;getItems(); toggleCheck();&quot;</span>
  type=<span class="synConstant">&quot;checkbox&quot;</span>
)
<span class="synComment">// ...</span>
  methods: <span class="synIdentifier">{</span>
    getItems() <span class="synIdentifier">{</span>
      <span class="synComment">// ...</span>
    <span class="synIdentifier">}</span>,
    toggleCheck() <span class="synIdentifier">{</span>
      <span class="synComment">// ...</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
</pre>


<p>参考： <a href="https://qiita.com/_Keitaro_/items/375c5274bebf367f24e0">【Vue】v-onで複数の関数を呼び出す方法 - Qiita</a></p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】オブジェクト指向UIデザイン ─ 使いやすいソフトウェアの原理'
description: ''
publishDate: '09/09/2020 05:00:00'
---

[CONTENTS-START]
<p>UI/UX系の知識を身につけるということで、少し前に発売して話題にもなった「オブジェクト指向UIデザイン」を読みました。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4297113511/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/41ncKIL-yRL._SL160_.jpg" class="hatena-asin-detail-image" alt="オブジェクト指向UIデザイン──使いやすいソフトウェアの原理 (WEB+DB PRESS plusシリーズ)" title="オブジェクト指向UIデザイン──使いやすいソフトウェアの原理 (WEB+DB PRESS plusシリーズ)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4297113511/hatena-blog-22/">オブジェクト指向UIデザイン──使いやすいソフトウェアの原理 (WEB+DB PRESS plusシリーズ)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%A5%BD%A5%B7%A5%AA%A5%E1%A5%C7%A5%A3%A5%A2%B3%F4%BC%B0%B2%F1%BC%D2" class="keyword">ソシオメディア株式会社</a>,<a href="http://d.hatena.ne.jp/keyword/%BE%E5%CC%EE%20%B3%D8" class="keyword">上野 学</a>,<a href="http://d.hatena.ne.jp/keyword/%C6%A3%B0%E6%20%B9%AC%C2%BF" class="keyword">藤井 幸多</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2020/06/05</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>UIまわりの本ですが、こういうボタンはどういう見た目にしよう、のようなスタイル的な話ではなくソフトウェアの設計が主題です。</p>

<p>タイトルに入っている「オブジェクト指向UI（OOUI）」について、特にスマホアプリを普段扱っている人にとってはおそらく慣れた（普段から意識している）指向なのかなと思います。<br />
ただ実際にソフトウェアを設計する際の方法論や実例を学ぶことなく「なんとなく」決めていることが多いと感じています。（自身はそうでした）<br />
この本にはその方法論や実例が多く説明されていたので、気に留めておこうというポイントを中心にメモしておきたいと思います。</p>

<h2>目次</h2>

<ul>
<li>1 オブジェクト指向UIとは何か</li>
<li>2 オブジェクト指向UIの設計プロセス</li>
<li>3 オブジェクト指向UI設計の実践</li>
<li>4 ワークアウト：基礎編</li>
<li>5 ワークアウト：応用編</li>
<li>6 オブジェクト指向UIのフィロソフィー</li>
</ul>


<p>使いやすい or 使いづらいと感じる画面（UI）にはどんな特長があるのか、なかなか論理的・客観的に説明するのは難しいですが、技術評論社の記事 <a href="https://gihyo.jp/book/pickup/2020/0034">動詞ではなく名詞を起点に画面を構成する ～OOUIでソフトウェアを使いやすく～</a> にも書かれている通り、下記の考え方で設計することであらゆるソフトウェアの構成が整理され使いやすくなります。</p>

<blockquote><p>タスクではなくオブジェクトを起点に画面を構成する。もっと一般的な言葉を使うと，「動詞（やること）」ではなく，「名詞（もの）」を起点に画面を構成する。たとえば「本を買う」であれば，「買う」ではなく「本」を起点にする。これだけのことです。ごくシンプルですよね。</p></blockquote>

<p>4章の実践では、こういう要件があるものはどのような考えで作るのかが説明されていますが、本を通してメインで説明されている核は上記です。<br />
5章のワークアウト基礎編では何個かお題があり、これまで説明された内容で自身でアプリケーションデザインをしてみて答え合わせしましょう、という内容です。<br />
6章のワークアウト応用編では既存のタスク指向のアプリケーションをどのように改善すると良いUI（OOUI）になるかを考える設問と答えが掲載されています。</p>

<p>ソシオメディアさんというUI分野で古くから有名な会社に所属する方が書いており、さまざまなプロジェクトを通して得たノウハウが詰まっているように感じました。</p>

<h2>ポイント</h2>

<h3>なぜオブジェクト指向UIなのか（はじめに）</h3>

<p>ユーザーインターフェースという言葉は「コンピューター画面」などにとどまらず、使う人とその対象をつなぐものすべて。</p>

<blockquote><p>そもそも扱うべき対象 = オブジェクトが「在る」という前提そのものが、UIの概念なのです。UIははじめから存在論的であり、オブジェクト指向なのです。</p></blockquote>

<h3>オブジェクト指向UIとは（p.9）</h3>

<blockquote><p>オブジェクト指向UIとは、オブジェクトを手掛かりに操作設計されたUIのことです。</p>

<p>オブジェクトとは、アプリケーションが扱う情報　オブジェクトのことであり、ユーザーが操作するときの対象物のことです。</p></blockquote>

<p>例えば蔵書アプリの場合、最初に表示される画面で</p>

<ul>
<li>「登録する」「確認する」・・・などユーザが行うタスクを始点とするのではなく（動詞 → 名詞）、</li>
<li>本の一覧表示でその中のひとつを選択すると編集作業や詳細ページでの確認ができるような、対象物が始点となるソフトウェア（名詞 → 動詞）</li>
</ul>


<p>がオブジェクト指向となる。</p>

<h3>オブジェクト指向UIの原則（p.11）</h3>

<blockquote><ul>
<li>オブジェクトを知覚でき直接的に働きかけられる</li>
<li>オブジェクトは自身の性質と状態を体現する</li>
<li>オブジェクト選択 → アクション選択の操作順序</li>
<li>すべてのオブジェクトが互いに協調しながらUIを構成する</li>
</ul>
</blockquote>

<h3>タスク指向UIとは（p.17）</h3>

<p>CLIのように、動詞を起点として設計された操作モデル。動詞 = やることを指向しているという意味<br />
タスク指向の例としてATMや券売機、自動販売機など。</p>

<h3>UIがタスク指向になってしまう背景（p.29）</h3>

<blockquote><p>UXへの注目の高まりによって、ユーザーの体験価値の向上がUIデザインのひとつの重要なゴールとして認識されてきていることも関係しているのではないでしょうか。</p>

<p>体験をデザインするということが、ユーザーの利用手続きをデザインするという意味で捉えられることが多いのです。</p></blockquote>

<h3>オブジェクト指向UIの設計プロセス ソフトウェアデザインのレイヤー（p.42）</h3>

<p>モデル、インタラクション、プレゼンテーションのレイヤーに分けることができる。</p>

<ul>
<li>モデル

<ul>
<li>ユーザーの関心対象の模式

<ul>
<li>ユーザーの特性、業務の形態、情報の書式、要求事項の種類と関係性などをもとに、システムが扱うオブジェクトの構成をモデリングする</li>
</ul>
</li>
</ul>
</li>
<li>インタラクション

<ul>
<li>構造と機能（フィール）

<ul>
<li>構造と機能に関する層。モデルとプレゼンテーションをつなぐためのメカニズム。CRUD（作成、閲覧、更新、削除）などが含まれる。</li>
</ul>
</li>
</ul>
</li>
<li>プレゼンテーション

<ul>
<li>スタイルやレイアウト（ルック）

<ul>
<li>表層。オブジェクトを表象するグラフィックの形や色、画面レイアウトなど。</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>オブジェクト指向UI設計の基本ステップ（p.51）</h3>

<p>ステップ1,2,3はどこからはじめてもOK、行きつ戻りつ進めていく。</p>

<ul>
<li>ステップ1. オブジェクトの抽出（モデルレイヤー）</li>
<li>ステップ2. ビューとナビゲーションの検討（インタラクションレイヤー）</li>
<li>ステップ3. レイアウトパターンの適用（プレゼンテーションレイヤー）</li>
</ul>


<p>下記の各ステップ例は学校名簿アプリケーションを想定</p>

<h4>ステップ1. オブジェクトの抽出（モデルレイヤー）</h4>

<ul>
<li>タスクのサンプルを何個か挙げる

<ul>
<li>「ある生徒が所属している部活を確認する」、「3年C組のある生徒の成績を確認する」など</li>
</ul>
</li>
<li>名詞を抽出する

<ul>
<li>「ある生徒」「部活」、「3年C組」「ある生徒」「成績」など</li>
</ul>
</li>
<li>名詞とそれらの関係を抽出する

<ul>
<li>「ある生徒」-「部活」、「3年C組」-「生徒」-「成績」など</li>
</ul>
</li>
<li>名詞を汎化し、粒度を揃える

<ul>
<li>「生徒」-「部」、「組」-「生徒」-「成績」など</li>
</ul>
</li>
<li>名詞の関係性をつなげ、オブジェクトを特定する

<ul>
<li>「成績」-「生徒」-「部」など</li>
</ul>
</li>
<li>オブジェクトの中で「メインオブジェクト」となるものを特定する

<ul>
<li>「生徒」など、ユーザーの関心領域に置いて主要なものは何か？を考える</li>
</ul>
</li>
<li>メインオブジェクトに負づいするオブジェクトをプロパティとする

<ul>
<li>「生徒」の場合、氏名/成績 など</li>
</ul>
</li>
<li>タスクからアクションを見つける

<ul>
<li>タスクとは最初に挙げたもの。「新規」「削除」など。「確認」は詳細ビューで表示されるので特記しない。</li>
</ul>
</li>
</ul>


<h4>ステップ2. ビューとナビゲーションの検討（インタラクションレイヤー）</h4>

<ul>
<li>基本のビュー形式

<ul>
<li>コレクション（一覧）とシングル（詳細）の2通り。</li>
<li>メインオブジェクトにコレクションとシングルのビューを与える</li>
</ul>
</li>
<li>コレクションビューとシングルビューの呼び出し関係を検討する

<ul>
<li>互いに参照可能性のあるビューを矢印でつなぐ</li>
</ul>
</li>
<li>メインオブジェクトの中からルートナビゲーションを選定する

<ul>
<li>メインオブジェクトで優先度の高いもの、ユーザがアプリケーションを使用する際に最初に思い浮かべるオブジェクトを選定する。</li>
<li>動詞ではなくオブジェクト名を用いる（語尾に「管理」などを用いない）</li>
<li>ルートナビゲーションを選択すると、そのオブジェクトのコレクションが表示される</li>
</ul>
</li>
</ul>


<h4>ステップ3. レイアウトパターンの適用（プレゼンテーションレイヤー）</h4>

<p>特にこれは書籍の図解のほうが分かりやすいです。<br />
（参考）ソシオメディアさんWebの <a href="https://www.sociomedia.co.jp/category/uidesignpatterns">UIデザインパターン</a></p>

<ul>
<li>ルートナビゲーションの配置パターン

<ul>
<li>下固定 / 開閉式</li>
</ul>
</li>
<li>ビューの配置パターン

<ul>
<li>単一メインオブジェクト / 複数メインオブジェクト</li>
<li>ドリルダウンの方向性（上→下、左→右、同ページなど）の決定</li>
</ul>
</li>
<li>コレクションビューの表示パターン

<ul>
<li>コレクションの性質や用途に合わせて表示形式を決定

<ul>
<li>1項目1行の1次元リスト / 1項目複数行の1次元リスト / 1項目複数行の1次元リスト（高さ可変） / サムネールのグリッド/ マッピング</li>
</ul>
</li>
<li>フィルタリングのパターンとしては下記がある

<ul>
<li>キーワード検索 / グループ / AND条件 / クエリビルダー / ソート</li>
</ul>
</li>
</ul>
</li>
<li>シングルビューの表示パターン

<ul>
<li>他のオブジェクトのコレクションの一部を表示する</li>
<li>他のオブジェクトのコレクションを強調する</li>
<li>他のオブジェクトのコレクションだけを表示する</li>
</ul>
</li>
<li>シングルビューの性質や用途に合わせて表示形式を決定する</li>
<li>アクションの性質や用途に合わせて表示形式を決定する

<ul>
<li>作成

<ul>
<li>ブランク / パラメータ / プレースホルダー / セーブアズ / テンプレート / マスター / ワンタイムモード / ガッツ

<ul>
<li>印象に残ったので、ガッツパターンとは図形作成時などにオブジェクトを選択するとすぐにアイテムが作成されるもの。Keynoteの四角形作成など。「操作をモードレスにするためにガッツをみせた仕様」</li>
</ul>
</li>
</ul>
</li>
<li>削除

<ul>
<li>モーダルコンファーム / アンドゥアブル / モードレスコンファーム</li>
</ul>
</li>
<li>更新

<ul>
<li>モーダルエディット / モードレスエディット</li>
</ul>
</li>
</ul>
</li>
<li>ビジュアルデザイン

<ul>
<li>やっとこさUIのグラフィックに着手します</li>
</ul>
</li>
</ul>


<h3>オブジェクト指向とは（おわりに）</h3>

<blockquote><p>オブジェクト指向UIは、単にナビゲーションのラベルを「名詞」にしたり、操作順序を「対象選択 → アクション選択」にするといった表現上のスタイルのことではなく、ユーザーの前に対象の理念をストレートに表象するということです。ユーザーに手順を指示するのではなく、目当てそのものを差し出す態度なのです。</p></blockquote>

<p>とあるように、決まりきった手順で操作するのではなくユーザーが自由にUIを触れる感覚を持たせるようにする。</p>

<h2>良かった点</h2>

<ul>
<li>図やイラストが分かりやすい</li>
<li>基本的な思想や設計方法の説明〜ワークアウトまで網羅している</li>
<li>章構成もよい感じ。6章のフィロソフィーがはじめの方に来てたら心折れそうな気がするので</li>
<li>補足も適切</li>
</ul>


<p>中身の話でないですが、レイアウトはきれいだったのですが文字が小さいところが残念ポイントでした。</p>

<h2>まとめ・感想</h2>

<p>なかなか会社のプロジェクトでこのレベルの設計面から携わる（口が出せる）機会はないのですが、設計する人 / デザイナー / エンジニアみんながこの思想や設計方法を理解していると、かなりスムーズに機能を絞れたり開発が進むような気がします。<br />
読む前は正直ちょっと胡散臭い感じがしていましたが、ふだん触っているアプリ（Spotify や Uber Eats）もオブジェクト指向UIですし、その仕組みや設計の方法を学べたのでとてもよい機会になりました。</p>

<p>本で出される例に関して、例えばメールアプリ、メモ帳アプリ、アドレス管理アプリなどがありますが、どれも Apple の純正アプリと画面構成が同じでオブジェクト指向UIになっています。<br />
HIGなどにも書かれているとは思いますが、Appleも社内で設計する際に同じような手法なのかなと感じました。</p>

<p>これから使うアプリやサービスを見るときもこの本で学んだ視点で見ることができるかなと思います。</p>

<h2>ほか参考</h2>

<ul>
<li><a href="https://medium.com/mixi-developers/ooui-apply-object-oriented-to-design-2adecccbac08">【OOUI】デザインにオブジェクト指向を適用する【#ooc_2020】 | by ロクネム | mixi developers | Medium</a></li>
<li><a href="https://note.com/usagimaruma/n/nee69529402f6">OOUI・オブジェクトベースなUIデザインに取り組むための心構え｜usagimaru｜note</a></li>
<li><a href="https://yuyakinoshita.com/blog/2020/07/16/ooui-report/">オブジェクト指向UIデザインのセミナー「OOUI解説+質問に答えます」受講レポートと感想 | Blog | Yuya Kinoshita</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Yarn のインストール（MacOS Catalina）'
description: ''
publishDate: '09/07/2020 09:17:38'
---

[CONTENTS-START]
<p>MacOS Catalina でやります。</p>

<pre class="code bash" data-lang="bash" data-unlink>$ brew install yarn</pre>


<p>homebrewでインストールしてみると</p>

<pre class="code bash" data-lang="bash" data-unlink>The following directories are not writable by your user:
/usr/local/share/man/man3
/usr/local/share/man/man5
/usr/local/share/man/man7

You should change the ownership of these directories to your user.
  sudo chown -R $(whoami) /usr/local/share/man/man3 /usr/local/share/man/man5 /usr/local/share/man/man7

And make sure that your user has write permission.
  chmod u+w /usr/local/share/man/man3 /usr/local/share/man/man5 /usr/local/share/man/man7</pre>


<p>と権限エラーがでるのでパーミッション変更してあげる</p>

<pre class="code bash" data-lang="bash" data-unlink>$ sudo chown -R $(whoami) /usr/local/share/man/man3 /usr/local/share/man/man5 /usr/local/share/man/man7
$ chmod u+w /usr/local/share/man/man3 /usr/local/share/man/man5 /usr/local/share/man/man7</pre>


<p>もう一度</p>

<pre class="code bash" data-lang="bash" data-unlink>$ brew install yarn</pre>


<p>とするとインストールは済むがエラーが出る</p>

<pre class="code bash" data-lang="bash" data-unlink>Error: An exception occurred within a child process:
  CompilerSelectionError: yarn cannot be built with any available compilers.
Install GNU&#39;s GCC:
  brew install gcc</pre>


<p>gcc というのをインストールしてねと出るので</p>

<pre class="code bash" data-lang="bash" data-unlink>brew install gcc</pre>


<p>をすると</p>

<pre class="code bash" data-lang="bash" data-unlink>$ yarn -v
1.22.5</pre>


<p>と出るのでインストール完了</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'e-Stat API'
description: ''
publishDate: '09/06/2020 15:42:24'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200906153656.jpg" alt="f:id:jotaki:20200906153656j:plain" title="f:id:jotaki:20200906153656j:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>調べごとのメモです。</p>

<h2>e-Stat とは？</h2>

<p>政府統計の総合窓口。<br />
e-Stat APIでは統計データを機械判読可能な形式で取得できるAPI機能を提供している。</p>

<ul>
<li><a href="https://www.e-stat.go.jp/api/api-dev/app-sample">開発サンプル</a></li>
<li><a href="https://www.e-stat.go.jp/api/api-dev/case">開発事例</a></li>
</ul>


<h2>e-Stat のユーザー登録</h2>

<p>e-Stat APIのサイトにアクセス<br />
<a href="https://www.e-stat.go.jp/api/">https://www.e-stat.go.jp/api/</a><br />
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200906154124.png" alt="f:id:jotaki:20200906154124p:plain" title="f:id:jotaki:20200906154124p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>「ユーザ登録」でメールアドレスを仮登録<br />
<a href="https://www.e-stat.go.jp/mypage/user/preregister">https://www.e-stat.go.jp/mypage/user/preregister</a><br />
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200906153610.png" alt="f:id:jotaki:20200906153610p:plain" title="f:id:jotaki:20200906153610p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>メールに送られる本登録ページで「利用する機能」は全部にチェックを付けてパスワード設定し本登録<br />
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200906153618.png" alt="f:id:jotaki:20200906153618p:plain" title="f:id:jotaki:20200906153618p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>ログインして登録作業完了<br />
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200906154154.png" alt="f:id:jotaki:20200906154154p:plain" title="f:id:jotaki:20200906154154p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>アプリケーションIDの発行</h2>

<p>API呼び出しに必要なアプリケーションIDを発行する<br />
トップ > マイページ表示 > API機能（アプリケーションID発行） から発行<br />
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200906153636.png" alt="f:id:jotaki:20200906153636p:plain" title="f:id:jotaki:20200906153636p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>実際のデータはどんなものか</h2>

<p>一覧から調べてみる<br />
<a href="https://www.e-stat.go.jp/stat-search/database?page=1">https://www.e-stat.go.jp/stat-search/database?page=1</a><br />
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200906154211.png" alt="f:id:jotaki:20200906154211p:plain" title="f:id:jotaki:20200906154211p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>例えば「企業のワーク・ライフ・バランスに関する調査」を選択すると、そのテーマで177件の切り口（API）がある<br />
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200906153656.png" alt="f:id:jotaki:20200906153656p:plain" title="f:id:jotaki:20200906153656p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>その中から「正社員の残業時間」を選択してみると、統計を行った時期や担当、回答企業数などが出てくる<br />
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200906153705.png" alt="f:id:jotaki:20200906153705p:plain" title="f:id:jotaki:20200906153705p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>「API」をクリックするとAPI URLが表示される<br />
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200906153720.png" alt="f:id:jotaki:20200906153720p:plain" title="f:id:jotaki:20200906153720p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>「DB」をクリックすると表組みやグラフでデータが表示される<br />
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200906153728.png" alt="f:id:jotaki:20200906153728p:plain" title="f:id:jotaki:20200906153728p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>参考記事<br />
<a href="https://qiita.com/mima_ita/items/44f358dc1bc4000d365d">政府統計の総合窓口(e-Stat)のAPIを使ってみよう</a></p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【イベント】のぞき見企画！mofmof×Goodpatch Anywhere合同勉強会'
description: ''
publishDate: '09/01/2020 09:00:00'
---

[CONTENTS-START]
<p>先日、<a href="https://goodpatch.connpass.com/event/184882/">のぞき見企画！mofmof×Goodpatch Anywhere合同勉強会</a> を視聴して特に気になったところをメモに残しておきます。</p>

<h2>タイムテーブル</h2>

<table>
<thead>
<tr>
<th>timed</th>
<th>session</th>
</tr>
</thead>
<tbody>
<tr>
<td>19:00</td>
<td>イベント開始</td>
</tr>
<tr>
<td>19:05</td>
<td>株式会社mofmof発表</td>
</tr>
<tr>
<td>19:35</td>
<td>Goodpatch Anywhere発表</td>
</tr>
<tr>
<td>20:05</td>
<td>質疑応答・ディスカッション</td>
</tr>
<tr>
<td>20:30</td>
<td>終了</td>
</tr>
</tbody>
</table>


<h2>発表内容</h2>

<p>質疑応答・ディスカッションの内容も含めたものになります。</p>

<h3>株式会社mofmof発表</h3>

<p>岩井 寿樹さん（株式会社mofmof テックリード）<br />
月額制受託開発の mofmof でテックリードの役職に就いている方。<br />
ご本人は技術力ごりごりに出してリードするほうではないと仰っていた。</p>

<p>仮説検証は事前にクライアント側で済ませている場合が多く、その後に実際にサービスを開発・グロースさせる段階でのお手伝いが多い。<br />
そのなかでいかに方向性を絞って主に開発面でどういう視点で案件を進めているか、という話が中心。</p>

<p>基本的にはアジャイル（スクラム）</p>

<ul>
<li>MVPの開発手順</li>
<li>インセプションデッキ、エレベーターピッチ/トレードオフスライダーの作り方</li>
</ul>


<p><a href="https://jtk.hatenablog.com/entry/2019/09/30/103858">カイゼン・ジャーニー</a> や <a href="https://jtk.hatenablog.com/entry/2019/09/15/155334">正しいものを正しくつくる</a>の話に近かったと思います。</p>

<p>プロジェクト管理は <a href="https://www.pivotaltracker.com/">Pivotal Tracker</a>、簡単にバックエンドのプロトタイプ作るなら <a href="https://hasura.io/">Hasura</a> がよい。</p>

<h3>Goodpatch Anywhere発表</h3>

<p>大堀 祐一さん（Goodpatch Anywhere サービスデザイナー） と質疑応答はGoodpatch Anywhereの皆さん</p>

<p>mofmofさんに比べて、クライアントの事前の検証などがない状態からすすめることが多い。</p>

<p>戦略 → 要件 → 構造 → 骨格 → 表層<br />
<a href="https://jtk.hatenablog.com/entry/2020/01/10/094052">UX 虎の巻</a> を読んだときに調べたギャレット氏の5階層モデルに近い話。<br />
Goodpatchさんの解釈は <a href="https://goodpatch.com/blog/how-to-design-the-elements-of-ux/">UXの5段階モデルにおける各段階での具体的なデザイン手法とは？</a> に書かれており、この中で「戦略」と「要件」がクライアントからの要求になる。<br />
「戦略」と「要件」はふつう「ビジネス要求」と「技術的制約」の重ねた部分を考えるが、それに加えて「ユーザー視点」の切り口を加えるのを大事にしている。</p>

<p>MVPを作る段階で何をするのが正しいか？</p>

<ul>
<li>インタビュー</li>
<li>SNSで情報発信</li>
<li>noteで情報発信</li>
<li>ワイヤー作成</li>
<li>プロトタイプ作成</li>
<li>WordPressでさくっとつくる</li>
</ul>


<p>のうち、すぐできることはやるスタンスで「WordPressでさくっとつくる」以外を行うのが正解ではないか。</p>

<p>ユーザーテストはどこから始めたらよいか？<br />
同じ会社でもプロジェクト知らない人とか気軽に聞いてみる</p>

<p>Webサイトのノーコードサービスは <a href="https://webflow.com/">Webflow</a> や <a href="https://jp.strikingly.com/">Strikingly</a> を使ったが <a href="https://studio.design/ja">STUDIO</a> が一番細かいところも手が届くし使いやすい。</p>

<h2>まとめ</h2>

<p>聞きながらにメモしたものなのでところどころ正確ではないかもしれません。<br />
自分の所属する会社でもUXに力を入れていこうとしていますが、取っ掛かりをどっから作っていいのか試行錯誤しているので、実際に行われている話を聞けてよかったです。<br />
本でしか読んだことのない話を実際に聞けてさらに興味を持つことができたかと感じます。<br />
時間の制約もあるので難しかったと思いますが、実際の案件の話しも聞きたいなと思いました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2020年8月 振り返り'
description: ''
publishDate: '08/31/2020 07:55:39'
---

[CONTENTS-START]
<h1>結果</h1>

<h2>ブログ</h2>

<p><strong>目標：月 8 回（週2回）更新</strong><br />
<strong>結果：月 3 回 更新</strong></p>

<h2>読書</h2>

<p><strong>目標：月 1 冊</strong><br />
<strong>結果：月 0 冊</strong></p>

<h1>反省点など</h1>

<p>SAPに受からなかったのが痛かったです。</p>

<h1>来月に向けて</h1>

<p>久しぶりにNuxtでアプリ1つ作る予定です。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'YouTube APIで複数動画'
description: ''
publishDate: '08/30/2020 16:37:31'
---

[CONTENTS-START]
<p>ちょこっとやったやつのメモ</p>

<p>HTML</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;js-player-start&quot;</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-movie=</span><span class="synConstant">&quot;0&quot;</span><span class="synIdentifier">&gt;</span>再生<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;js-player-stop&quot;</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-movie=</span><span class="synConstant">&quot;0&quot;</span><span class="synIdentifier">&gt;</span>停止<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;player_0&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;js-player-start&quot;</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-movie=</span><span class="synConstant">&quot;1&quot;</span><span class="synIdentifier">&gt;</span>再生<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;js-player-stop&quot;</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-movie=</span><span class="synConstant">&quot;1&quot;</span><span class="synIdentifier">&gt;</span>停止<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;player_1&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>JavaScript（jQuery）</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> tag = <span class="synStatement">document</span>.createElement(<span class="synConstant">'script'</span>)
tag.src = <span class="synConstant">&quot;//www.youtube.com/iframe_api&quot;</span>
<span class="synIdentifier">var</span> firstScriptTag = <span class="synStatement">document</span>.getElementsByTagName(<span class="synConstant">'script'</span>)<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>
firstScriptTag.parentNode.insertBefore(tag, firstScriptTag)

<span class="synComment">// make player array</span>
<span class="synIdentifier">var</span> players = <span class="synStatement">new</span> <span class="synType">Array</span>()

<span class="synIdentifier">function</span> onYouTubeIframeAPIReady() <span class="synIdentifier">{</span>
  players<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span> = <span class="synStatement">new</span> YT.Player(<span class="synConstant">'player_0'</span>, <span class="synIdentifier">{</span>
    height: <span class="synConstant">'100%'</span>,
    width: <span class="synConstant">'100%'</span>,
    videoId: <span class="synConstant">'IqKz0SfHaqI'</span>
  <span class="synIdentifier">}</span>)
  players<span class="synIdentifier">[</span>1<span class="synIdentifier">]</span> = <span class="synStatement">new</span> YT.Player(<span class="synConstant">'player_1'</span>, <span class="synIdentifier">{</span>
    height: <span class="synConstant">'100%'</span>,
    width: <span class="synConstant">'100%'</span>,
    videoId: <span class="synConstant">'-bNMq1Nxn5o'</span>
  <span class="synIdentifier">}</span>)
<span class="synIdentifier">}</span>

$(<span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
  <span class="synComment">// 再生</span>
  $(<span class="synConstant">'.js-player-start'</span>).on(<span class="synConstant">'click'</span>, <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
    <span class="synStatement">const</span> target = $(<span class="synIdentifier">this</span>).attr(<span class="synConstant">'data-movie'</span>)
    players<span class="synIdentifier">[</span>target<span class="synIdentifier">]</span>.playVideo()
  <span class="synIdentifier">}</span>)
  <span class="synComment">// 停止</span>
  $(<span class="synConstant">'.js-player-stop'</span>).on(<span class="synConstant">'click'</span>, <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
    <span class="synStatement">const</span> target = $(<span class="synIdentifier">this</span>).attr(<span class="synConstant">'data-movie'</span>)
    players<span class="synIdentifier">[</span>target<span class="synIdentifier">]</span>.stopVideo()
  <span class="synIdentifier">}</span>)
<span class="synIdentifier">}</span>)
</pre>


<p>横幅をレスポンシブにするには、</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  ...
    height: <span class="synConstant">'100%'</span>,
    width: <span class="synConstant">'100%'</span>,
  ...
</pre>


<p>とすればよい</p>

<p>YouTube Data API の概要<br />
<a href="https://developers.google.com/youtube/v3/getting-started?hl=ja">https://developers.google.com/youtube/v3/getting-started?hl=ja</a></p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AWS ソリューションアーキテクト プロフェッショナル 受験記（再・再々）'
description: ''
publishDate: '08/24/2020 11:06:11'
---

[CONTENTS-START]
<p><strong>不合格の記録なのでほぼ参考になりません。ごめんなさい。</strong></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200105065609.png" alt="f:id:jotaki:20200105065609p:plain" title="" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>これまで・今回の結果</h2>

<ul>
<li><a href="https://jtk.hatenablog.com/entry/2019/06/12/223000">2019/6/8 CLF 合格 830点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2019/07/09/100106">2019/7/6 SAA 不合格 630点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/01/05/074534">2020/1/4 SAA 合格 771点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/02/09/193011">2020/2/9 DVA 合格 845点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/02/15/195608">2020/2/14 SOA 合格 801点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/07/26/093803">2020/7/24 SAP 不合格 730点</a></li>
<li>2020/8/8 SAP 不合格 723点 ※今回分</li>
<li>2020/8/23 SAP 不合格 730点 ※今回分 システム不具合により試験スコア無効</li>
</ul>


<h2>受験理由・モチベーション</h2>

<p>7月に受けて730点（合格スコア750点）だったので、これはいまのうちにやっておかないと一生できなそうと焦りを感じたため。</p>

<h2>結果</h2>

<p>結果から言うと、2週間ごとに2回受けましたがダメでした (´・ω・｀)<br />
723点・730点ということで、もうひと押しが足りないようです。</p>

<h2>今回分の勉強計画</h2>

<p>1回目の試験で基礎的なことや使う教材の選定はそんなに間違ってなかったかなという感じがしたので、問題集を解くのは同じでしっかり解説や出てくる用語を漏れなく理解しようと心がけました。</p>

<h2>やったこと</h2>

<h3>koiwaclub の SAP問題集</h3>

<p>前から気になっていながら使ったことなかったkoiwaclubに手を出してしまいました。<br />
<a href="https://aws.koiwaclub.com/exam/sap/">https://aws.koiwaclub.com/exam/sap/</a><br />
SAPはサンプル問題が7問ありますが、それ以外は有料会員登録が必要なので少し悩みましたが、合格体験記見ても評判良さそうですしここでケチってまた落ちるのも嫌なのでお金で解決しようとしました。</p>

<p>ボリュームは7問x50セットなので計350問。3回目の試験までに2周。<br />
問題の難易度も本番に近く、解説もUdemyのよりきちんとしていると思います。</p>

<p>ただ結構クセのある設問や回答が多く試験前に以前よりも分からないこと多くなっちゃったなという感覚になってしまいました。<br />
基礎力ないのが原因と思いますが、これで勉強完了せずに最後に公式の模試やサンプル問題やっておくのがいいかなと思います。</p>

<h3>その他</h3>

<p>その他は1回目のときと同じもの。<br />
全部2回は通しでやっているので3・4回目ということになりますが、いろんな教材で問題やっているのと設問も長いので答えを覚えるぐらいの記憶はついていないのでそれはそれでよかったと思います。</p>

<ul>
<li>【読書】AWS認定ソリューションアーキテクト-プロフェッショナル ~試験特性から導き出した演習問題と詳細解説</li>
<li>【公式】Exam Readiness: AWS Certified Solutions Architect – Professional</li>
<li>【公式】サンプル問題の復習</li>
<li>【公式】模擬試験の復習</li>
</ul>


<h2>足りなかったこと</h2>

<p>信じられないような本当の話ですが、3回ともスコアが同じくらいで、スコアレポートに出るセクションごとの評価も同じでした。</p>

<p>再学習の必要あり</p>

<ul>
<li>分野 1.組織の複雑さに対応する設計</li>
<li>分野 4.コスト管理</li>
</ul>


<p>ともに全体に占める割合が低いセクションですが、ここのあと20点（2問程度？）落としてるのが合否を分けてるのかなと分析しています。</p>

<p>ただ複合的にサービス組み合わせるので、なかなか勉強しづらいのですよね・・・<br />
SAP本やExam Readinessでもこの2分野は繰り返しやりましたが、これがコスト分野なのか？っていうものもあり、なかなか特定サービスの理解だけでは難しいところがありました。</p>

<p>ただ今でもぼんやりしか分かってないことはありまして、</p>

<ul>
<li>ネットワークやオンプレ系の知識全般（BGP、パブリック/プライベートVIF、静的/動的ルート、IPv6）</li>
<li>複数リージョン or AZでのVPCや +オンプレ環境での通信制御系（DX、DXGW、VPN、VPCピアリング、TransitVPC、TransitGW、VPCエンドポイント...）</li>
<li>Organization でのアカウント/権限/コスト管理（SCP・一括請求）</li>
<li>Organization と Cfn を組み合わせたアカウント管理</li>
<li>権限の委任手順（クロスアカウントアクセス、Saasサービスなどほかアカウントに対して）</li>
<li>Cfn のマルチアカウントでのスタック運用（クロススタック参照、ServiceCatalogとの組み合わせ）</li>
<li>EC2のインスタンスタイプ</li>
</ul>


<p>あたりでしょうか。<br />
アカウント管理は「◯◯◯アカウント」が設問に何個も出てきて訳分かんない・・・みたいになっちゃうときがあります。<br />
EC2のインスタンスタイプについては、それぞれの特性は分かっているものの、実際にユースケースでどれを選ぶと聞かれてかなり悩むので理解度が足りてないのかなと思っています。</p>

<h2>新しめのサービスも覚えた</h2>

<p>不合格な自分が言うのもなんですが、よく合格記で◯◯◯は出題されなかったみたいなことが書かれていますが、あまり真に受けずに新しめのサービス含めて覚えれるのは覚えたほうがいいんじゃないかと思います。<br />
そういう意味ではUdemyやkoiwaclubで出てくるサービスはいい感じで網羅できている気がします。</p>

<p>自分が試験対策のなかで概要程度は身につけたもの</p>

<ul>
<li>AWS Service Catalog</li>
<li>Amazon Macie</li>
<li>Amazon Transcribe</li>
<li>Amazon Connect</li>
<li>Amazon Rekognition</li>
<li>Amazon WorkDocs</li>
<li>Amazon AppStream</li>
<li>Amazon Mechanical Turk</li>
<li>Amazon DocumentDB（MongoDB互換）</li>
<li>Cassandra（NoSQL）</li>
<li>Code系（CodePipeline/CodeBuild/CodeDeploy）</li>
</ul>


<h2>オンライン試験</h2>

<p>最後の1回はオンラインで受験しました。（ピアソンVue）</p>

<p>自分の場合システムテストはうまくいったのですが、試験が開始されたときの画面切り替え直後（規約などが表示される画面）でチャットの文字を打つたびにローディングが走り次の画面へ遷移できない問題が起こってしまいました。<br />
1度リスタートしますねと試験管にメッセージをもらい画面を閉じられましたが、その後しらばく待ってましたがちょっと待ってね画面で進行せず・・・<br />
一度画面を閉じて何度かonVueアプリを立ち上げてやっと試験が始められました。<br />
※ちなみにチャット機能と自分のPCが合わないみたいでインプット挙動するたびに重くなる現象は解決させてなかったっぽくできるだけチャットせずに過ごしました。</p>

<p>試験終わってから気づきましたが、1時間半くらいこれで遅れてしまってました。<br />
まあこういうものと割り切って試験はやって、1通りを40分残しでフラグの問題見直しできたので、なかなか集中はできた気がします。<br />
あまり推奨はされないと思うのですが、自宅だと問題文や回答を小声でも読むことができるので自分の場合は頭に入りやすい気がしてよかったです。</p>

<p><strong>8/27追記</strong><br />
上記の不具合？の件で、試行錯誤していた1時間30分の間にサポートに連絡していたのですが、本日連絡が来て8/23の試験スコアは無効になりました。<br />
それと同時に試験のバウチャーを配布いただきました。</p>

<p>明確な理由は書いていなかったのでおそらくなのですが、システムチェックはOKになるなど受験者側での瑕疵ではないのと、その後に受けた試験結果が不合格だからかなと思っています。</p>

<h2>まとめ</h2>

<p>というわけで点数的にはもうちょっととはいえ3回目の今回でわりと心が折れました。。。（毎回折れてはいます）<br />
今のやり方だとあと10回続けて受ければどこかで受かるような気もしますが、それなりに毎回試験対策はしているのでそこまでのエネルギーは湧かず<br />
アソシエイトレベルに比べてもより色々なサービスや考え方も知れたので、その点は後悔ありませんがやっぱり結果が付いてこないと達成感がないので残念です。</p>

<p>というわけで不合格のままですがSAPは放置しようかと思っています。<br />
AWSだけに専念できる年末年始など長期休暇があればまたやってみるかもしれません。</p>

<p>4月くらいからAWSの勉強しかやってなかったので、9月からフロントエンドまわり頑張りたいと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2020年7月 振り返り'
description: ''
publishDate: '08/06/2020 18:52:06'
---

[CONTENTS-START]
<h1>結果</h1>

<h2>ブログ</h2>

<p><strong>目標：月 8 回（週2回）更新</strong><br />
<strong>結果：月 3 回 更新</strong></p>

<h2>読書</h2>

<p><strong>目標：月 1 冊</strong><br />
<strong>結果：月 1 冊</strong></p>

<h1>反省点など</h1>

<p>がっつりAWSの試験勉強だったので更新できず・・・</p>

<h1>来月に向けて</h1>

<p>8月再チャレンジ予定なのでそれが終わったらまたどんどん更新できるようにしたいです。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AWS ソリューションアーキテクト プロフェッショナル 受験記'
description: ''
publishDate: '07/26/2020 09:38:03'
---

[CONTENTS-START]
<p><strong>不合格の記録なのでほぼ参考になりません。ごめんなさい。</strong><br />
<strong>プロフェッショナルの壁は高かったです(´・ω・｀)</strong></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200105065609.png" alt="f:id:jotaki:20200105065609p:plain" title="f:id:jotaki:20200105065609p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>これまで・今回の結果</h2>

<ul>
<li><a href="https://jtk.hatenablog.com/entry/2019/06/12/223000">2019年6月 CLF 合格 830点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2019/07/09/100106">2019年7月 SAA 不合格 630点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/01/05/074534">2020年1月 SAA 合格 771点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/02/09/193011">2020年2月 DVA 合格 845点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/02/15/195608">2020年2月 SOA 合格 801点</a></li>
<li>2020年7月 SAP 不合格 730点 ※今回</li>
</ul>


<h2>受験理由・モチベーション</h2>

<p>2月にアソシエイト3つ目を取った際に今年はもういいかなと思っていたのですが、</p>

<ul>
<li>在宅勤務になり時間があるので</li>
<li>会社から取得手当が出るかもしれないので</li>
<li>オンラインでも受けれるので（結局会場に行きましたが）</li>
</ul>


<p>ということで4月から本読んだり軽く勉強しはじめてました。<br />
本格的に始めたのは6月の最後くらいで、いつものようにそこから模試などをやりました。</p>

<h2>今回の勉強計画</h2>

<p>手法的には基本的にアソシエイトと同じで</p>

<ul>
<li>公式のサンプル、模試をしっかり復習</li>
<li>そこで出題されるサービスのBlack Beltは必ず見る</li>
<li>模試はUdemyでやって問題の長さに慣れる</li>
</ul>


<p>巷で言われるSAPは難易度めっちゃ高いの印象が強いので、1回落ちるのはしょうがないのスタンスでいきたいと思います。</p>

<h2>やったこと</h2>

<h3>試験ガイドや体験記読む</h3>

<p>まずはいつも通り情報収集から。できるだけ最近のをピックアップ。<br />
この時間くらいしか気楽なときはないので楽しむ・・・<br />
読んだ体験記</p>

<ul>
<li><a href="https://qiita.com/kkino1985/items/7ad6bcdde44a2b4e4916">AWSソリューションアーキテクトプロフェッショナル資格（SAP）に合格しました - Qiita</a></li>
<li><a href="https://qiita.com/tomoki-koike/items/8b1c2d940972ab5d4200">AWS Certified Solutions Architect – Professional合格した！やほーーーん！ - Qiita</a></li>
<li><a href="https://qiita.com/jusotech10/items/8bcf8def8b10b5ac118f">AWS Solution Architect Professional合格レポート - Qiita</a></li>
<li><a href="https://qiita.com/kazgrape/items/3711801dc5d8bba1f158">AWS Solution Architect Professionalを取得した話[2019年度版] - Qiita</a></li>
<li><a href="https://qiita.com/Uryy/items/d6a13cc65cc00839552e">【合格】AWS認定ソリューションアーキテクトプロフェッショナル(AWS-SAP)受験体験記（2019/12） - Qiita</a></li>
<li><a href="https://qiita.com/Regryp/items/0645fb976655262e9229">AWS認定ソリューションアーキテクトプロフェッショナルに一発で合格したので勉強方法を書いておく - Qiita</a></li>
<li><a href="https://qiita.com/gomasa/items/6ce860a2e11a620c92ae">【AWS認定試験】６試験（CLF・SAA・SAP・SOA・DVA・DOP）合格までの道のりと勉強方法について - Qiita</a></li>
</ul>


<h3>【公式】AWS Innovate オンラインカンファレンスの試験対策動画</h3>

<p>AWS Innovate の登録をしてちょうど期間中に配信されていたので全4回みました。アソシエイトレベルとの違いの説明など勉強はじめの導入にちょうどよいレベル感でした。だいたい2時間。<br />
ですが、、このあとみた英語が原典になっており、おじさんの説明うまく範囲も広いのではじめからそちらを見たほうがよいと思います。</p>

<h3>【公式】Exam Readiness: AWS Certified Solutions Architect – Professional</h3>

<p>公式のSAP試験準備動画<br />
先ほどのInnovateオンラインの海外講師版（日本語翻訳あり）でこちらが元となっているレクチャーみたいです。<br />
技術的な説明はほとんどなく、試験範囲の各パートをサンプル問題を通して学んでいく内容です。<br />
だいた全部で4時間くらい。</p>

<p>解法についても最初に解説されましたが、</p>

<ul>
<li>複数回答式には部分点はない</li>
<li>リリース半年以内のサービスは問題に含まれない</li>
</ul>


<p>という結構大事そうなポイントもここではじめて知りました。<br />
アソシエイトの各レベルもあったので当時見ておけばよかったなと思いました。<br />
試験前日にも復習。</p>

<h3>【公式】サンプル問題</h3>

<p>6月末（6/22）の本格的に試験対策始める際にやってみました。<br />
4月くらいには日本語なかった気がしますが、今は日本語で10問あります。<br />
<a href="https://d1.awsstatic.com/ja_JP/training-and-certification/docs-sa-pro/AWS-Certified-Solutions-Architect-Professional_Sample-Questions.pdf">サンプル問題</a></p>

<p>10問中5問正解。50%ですね。<br />
まあ最初はこんなもんですよと自分に言い聞かせました・・・</p>

<h3>【公式】模擬試験</h3>

<p>現実を知ろう・・・と思ってサンプル問題の次に受ける。（6/23）</p>

<pre class="code" data-lang="" data-unlink>総合スコア: 70%

トピックレベルスコア:
1.0  Design for Organizational Complexity: 50%
2.0  Design for New Solutions: 60%
3.0  Migration Planning: 25%
4.0  Cost Control: 100%
5.0  Continuous Improvement for Existing Solutions: 100%</pre>


<p>なんかいっつも70%な気がします。<br />
スコアだけ見ると悪くはないのですがやっぱりむずいなと・・・<br />
復習してみても確証あったの6割くらいですかね。<br />
問題文は模試だからか短めの印象でしたが、確証持って答えられたのはほぼなし。半分くらいは勘でした。<br />
ネットワーク、マイグレーション、アカウント関連もっと深くまで理解しないときついと思いました。</p>

<h3>【Udemy】AWS 認定ソリューションアーキテクト プロフェッショナル模擬試験問題集（全5回分375問）</h3>

<p>SAAとDVAのときと同様でUdemyの日本語模試をやりました。<br />
本試験と同じく75問180分x5セットなのでかなりボリュームあります。<br />
問題やって復習してなので1セットにつき3h x 3日のペースでやりました。<br />
出題サービスを知るとか、復習して知識つける目的が第一ではあるのですが、個人的にどんな難しくても心が折れなくするようにする訓練的な意味合いが強いです。<br />
一度SAA落ちたことがありますが、知識不足もありましたが試験途中からやる気なくなったということもあったのでそれだけは避けたいと思ってやってみました。</p>

<p>結果は、</p>

<ul>
<li>6/25 ① 37%正解 (28/75)</li>
<li>6/28 ② 40%正解 (30/75)</li>
<li>7/3 ③ 42%正解 (32/75)</li>
<li>7/5 ④ 40%正解 (30/75)</li>
<li>7/7 ⑤ 34%正解 (26/75)</li>
</ul>


<p>とそんなこと言いながらかなり心がぼろぼろの結果に・・・<br />
一応復習もやったのですが、最後が一番悪いという謎の結果に・・・<br />
ただ時間配分に慣れることもできたりしてよかったです。</p>

<h3>【公式】Black Belt よむ &amp; みる</h3>

<p>アソシエイトと同様にBlack Belt各種<br />
<a href="https://aws.amazon.com/jp/aws-jp-introduction/aws-jp-webinar-service-cut/">https://aws.amazon.com/jp/aws-jp-introduction/aws-jp-webinar-service-cut/</a></p>

<p>シートで管理して覚える必要のある項目はまとめておき、試験前にもチェック。</p>

<p><strong>動画</strong></p>

<ul>
<li>7/13 <a href="https://www.youtube.com/watch?v=aHEVvsk6pkI">VPC</a></li>
<li>7/14 <a href="https://www.youtube.com/watch?v=4laAoK-zXko">ELB</a>, <a href="https://www.youtube.com/watch?v=mmRKzzOvJJY">CloudFront</a></li>
<li>7/15 <a href="https://www.youtube.com/watch?v=P5zX4DdlYOE">EC2</a>, <a href="https://www.youtube.com/watch?v=oFG5kMZjKtc">S3</a>, <a href="https://www.youtube.com/watch?v=ffND-tX1Qxs">EBS</a>, <a href="https://www.youtube.com/watch?v=IEQ1ZM93DMo">オンプレミスとAWS間の冗長化接続</a></li>
<li>7/16 <a href="https://www.youtube.com/watch?v=nDme-ET-_EY">RDS</a></li>
<li>7/17 <a href="https://www.youtube.com/watch?v=VerVNchaqVY">Aurora MySQL</a></li>
<li>7/20 <a href="https://www.youtube.com/watch?v=avfc0gQ7X0A">SQS</a>, <a href="https://www.youtube.com/watch?v=K7F5yTThynw">IAM Part1</a>, <a href="https://www.youtube.com/watch?v=qrZKKF6V6Dc">IAM Part2</a>, <a href="https://www.youtube.com/watch?v=4KbCJAjiA3A">WAF</a></li>
<li>7/21 <a href="https://www.youtube.com/watch?v=4F5rSxzu0U4">KMS</a>, <a href="https://www.youtube.com/watch?v=HU47ZAM3mtw">CloudFormation</a>, <a href="https://www.youtube.com/watch?v=gOaZeJpb0Y4">CloudWatch</a>, <a href="https://www.youtube.com/watch?v=UXSbh4Wsp7c">Systems Manager</a>, <a href="https://www.youtube.com/watch?v=vnqX0gMj6jw">Config</a></li>
<li>7/22 <a href="https://www.youtube.com/watch?v=few0XD7gPgQ">Direct Connect</a>, <a href="https://www.youtube.com/watch?v=3bohQetK2OE">ECS</a>, <a href="https://www.youtube.com/watch?v=o01IOnVvRxM">Auto Scaling</a>, <a href="https://pages.awscloud.com/event_JAPAN_DB-migration_ondemand.html">DB移行</a></li>
<li>7/23 <a href="https://www.youtube.com/watch?v=Yhe2jYzFmfs">Transit Gateway</a>, <a href="https://www.youtube.com/watch?v=EpEETIox03s">API Gateway</a>, <a href="https://www.youtube.com/watch?v=QvPgjEwgiew">Lambda</a>, <a href="https://www.youtube.com/watch?v=rwwOoFBq2AU">Fargate</a>, <a href="https://www.youtube.com/watch?v=bPCjOG_jQlc">SNS</a>, <a href="https://www.youtube.com/watch?v=Yx7Q6peW5u0">Cost Explorer</a></li>
</ul>


<p><strong>スライド</strong></p>

<ul>
<li>7/23 <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-tech-2016-amazon-route-53">Route 53</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-2017-aws-storage-gateway">Storage Gateway</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/20170614-aws-blackbeltsnowball">Snowball</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/20170809-black-belt-dynamodb">DynamoDB</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-2017-amazon-elasticache-84060910">ElastiCache</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-tech-2015-aws-directory-service">Directory Service</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/20180214-aws-blackbeltorganizations">Organizations</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-2017-aws-shield">Shield</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-2016-aws-cloudtrail-aws-config">CloudTrail &amp; Config</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-2017-aws-opsworks">OpsWorks</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-2017-amazon-kinesis">Kinesis</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-awsdisaster-recovery">DR</a></li>
</ul>


<h3>【読書】いろいろ</h3>

<p>試験対策特化でないものもありますが、4月〜の勉強期間中に読んだAWS関連の本。</p>

<h5>AWS認定資格試験テキスト AWS認定 ソリューションアーキテクト-アソシエイト</h5>

<p>アソシエイト受けるときに読みまくったので7、8週目くらいになりますが、まだまだ細かいところ見てると新しい発見もありました。</p>

<h5>みんなのAWS 〜AWSの基本を最新アーキテクチャでまるごと理解！</h5>

<p>ちょうど本が出たタイミングで読んでみました。試験本以外は始めて読みましたがよかったです。<br />
・<a href="https://jtk.hatenablog.com/entry/2020/05/06/150952">読書メモ</a></p>

<h5>Amazon Web Services 基礎からのネットワーク＆サーバー構築 改訂3版</h5>

<p>思っていたよりも基礎的なことが多くハンズオンなので知識が身についた感じがありました。<br />
・<a href="https://jtk.hatenablog.com/entry/2020/06/03/185038">読書メモ</a></p>

<h5>Amazon Web Services 定番業務システム14パターン 設計ガイド</h5>

<p>いまとなると内容を明確に思い出せないのですが、各構成で使っているサービスとかが染み付いたような気がします。<br />
・<a href="https://jtk.hatenablog.com/entry/2020/06/24/082427">読書メモ</a></p>

<h5>AWS認定ソリューションアーキテクト-プロフェッショナル ~試験特性から導き出した演習問題と詳細解説</h5>

<p>こちらもちょうどいいときに発売した試験対策本。<br />
・<a href="https://jtk.hatenablog.com/entry/2020/07/19/192201">読書メモ</a></p>

<p>付属の模試を試験前の週末に行い44/75（約58%）<br />
この段階でも結構むずかしいなぁという感じがしました。<br />
模試以外のところは2周する。</p>

<h2>本試験</h2>

<p>オンラインで受けようかとも思いましたが、外部ディスプレイあると突っ込まれるなどの情報もあり面倒そうなので、会場いつもところは近いので会場で受けることにしました。（7/24）</p>

<h5>結果</h5>

<p>730点、SAPは合格点が750点なので惜しかった・・・<br />
<code>組織の複雑さに対応する設計</code> と <code>コスト管理</code> の狭い範囲の分野が再学習の必要ありでした。<br />
24日夕方に受けて26日朝にスコア返ってきました。</p>

<h5>時間配分</h5>

<p>時間配分予定は、60分で25問x3セット、1セット終わって時間余ったらちょい休憩。<br />
1セット目は比較的スムーズに進んで15分あまりくらい。<br />
2セット目の40問目くらいから頭が回らなくなってくる。トータル10分あまりくらい（このセットは押し）<br />
3セット目終えたら残り5分くらい・・・見直しはほぼできず（する気力もなかったけど）終了。</p>

<p>問題数や時間にも慣れたつもりで臨みましたが、実際にやってみると想像以上にキツかったです。<br />
キツイっていうのも分かってたんですけど、なんか読んでても頭に入ってこないぼんやりした感じになっちゃいました。<br />
前半の問題、解答絞れるものも多かったのですが後半は多分ボロボロですね。</p>

<h5>難易度など</h5>

<p>出題範囲は概ね想定したとおりでした。<br />
手順とか細かいところまで出るものもので、あるサービスのある機能は何だけじゃなく、その機能を有効化するためにはどう設定するかとかまで分かってないと難しいものもあった気がします。<br />
正直ビビりすぎてもいたので、問題文の長さもそこそこだと感じましたし、めちゃむずとは感じませんでした。（なら受かれと・・・）</p>

<h2>まとめ</h2>

<p>最初サンプル問題をやった時は難しいなーと感じ、今まで取った4つともそう感じていたのでなんとかなるかなと思っていましたがなんともなりませんでした。</p>

<h5>敗因</h5>

<p>今回の敗因として一番大きいのは形式ばかりにこだわりすぎたところかなと。<br />
事前に計画立てるのはいいにしても例えばUdemyは5回全部やるとか、本は2周するとか、そういうのが目的になってしまって、肝心なサービスや機能を理解するという所にフォーカスできていなかった感があります。<br />
Udemyの模試は本番と同じで75問ありますがそれぶっ続けで解いて、その後解説読むと最初の問題文とかもう忘れちゃってることも多いので10問区切りでやったほうが効率も理解度もあがるかなとか。<br />
本をいくら読んでも意識的に試験で問われそうだと思いながら読まないことには頭に入らないなということもありました。</p>

<p>技術的なところはインフラやネットワークの基礎があんまり分かってないので、もちろんそこも減点ポイント。<br />
ワードだけ並べるとBGP,DHCP,IDS/IPS,ジャンボフレーム,CDC,RAID... など使ってみたわけでもないので、こんな感じかな感のままで理解しているような気がします。</p>

<p>あとはメンタル面としてどうしてもアソシエイト受けたときより受かったらラッキーという気持ちもあり気を抜いてやってた部分もあります。<br />
もちろんアソシエイトレベルでは扱わなかったAWSサービスの細かいところまで学習できている感じとかあったのでダメな所ばかりではないのですが。</p>

<h5>これから</h5>

<p>というわけで、次へのモチベーションはいまのところ湧く気配がしていませんが、あと20点と考えると諦めづらいなと・・・<br />
いつかの自分のためへの記録でした。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】AWS認定ソリューションアーキテクト-プロフェッショナル ~試験特性から導き出した演習問題と詳細解説'
description: ''
publishDate: '07/19/2020 19:22:01'
---

[CONTENTS-START]
<p>SAP試験対策用で読みました。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4865942483/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/518nNKAj1ML._SL160_.jpg" class="hatena-asin-detail-image" alt="AWS認定ソリューションアーキテクト-プロフェッショナル ~試験特性から導き出した演習問題と詳細解説" title="AWS認定ソリューションアーキテクト-プロフェッショナル ~試験特性から導き出した演習問題と詳細解説"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4865942483/hatena-blog-22/">AWS認定ソリューションアーキテクト-プロフェッショナル ~試験特性から導き出した演習問題と詳細解説</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%CA%BF%BB%B3%20%B5%A3" class="keyword">平山 毅</a>,<a href="http://d.hatena.ne.jp/keyword/%B2%AC%20%C3%D2%CC%E9" class="keyword">岡 智也</a>,<a href="http://d.hatena.ne.jp/keyword/%BF%B7%C2%BC%20%BD%D3%B2%F0" class="keyword">新村 俊介</a>,<a href="http://d.hatena.ne.jp/keyword/%B2%AC%BA%EA%20%CC%F7%B9%C0" class="keyword">岡崎 靖浩</a>,<a href="http://d.hatena.ne.jp/keyword/%C3%D3%C5%C4%20%C2%E7" class="keyword">池田 大</a>,<a href="http://d.hatena.ne.jp/keyword/%DF%B7%C5%C4%20%C2%F3%CC%E9" class="keyword">澤田 拓也</a>,<a href="http://d.hatena.ne.jp/keyword/%C4%C5%BB%B3%20%B9%B8%B0%EC" class="keyword">津山 晃一</a>,<a href="http://d.hatena.ne.jp/keyword/%C4%BB%C3%AB%C9%F4%20%BE%BC%B4%B2" class="keyword">鳥谷部 昭寛</a>,<a href="http://d.hatena.ne.jp/keyword/%C1%E1%C0%EE%20%B0%A6" class="keyword">早川 愛</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2020/06/27</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>目次</h2>

<ul>
<li>第1章 AWS認定ソリューションアーキテクト－プロフェッショナル試験の概要と特徴</li>
<li>第2章 各種サービスの概要</li>
<li>第3章 試験で問われるシナリオの特性</li>
<li>第4章 「組織の複雑さに対応する設計」分野におけるケース問題</li>
<li>第5章 「新しいソリューションの設計」分野におけるケース問題</li>
<li>第6章 「移行の計画」分野におけるケース問題</li>
<li>第7章 「コスト管理」分野におけるケース問題</li>
<li>第8章 「既存のソリューションの継続的な改善」分野におけるケース問題</li>
<li>第9章 模擬試験</li>
</ul>


<p>2章で出題範囲の各サービスの概要（本当に概要だけ）<br />
3章で出題範囲のなかでサービスを組み合わせたシナリオ概要<br />
4〜8章は各分野の例題それぞれ10〜20問くらい+解説<br />
模擬試験は本試験と同様に75問です。</p>

<p>4〜8章の例題は選択肢に違いも大きいので、公式サンプル問題や模試よりも難易度低めかなという印象でした。</p>

<p>最後の模試もUdemyの日本語模試よりは難易度低めに感じました。</p>

<h2>良かった点</h2>

<ul>
<li>4〜8章の例題に関して、Aが正解だけどB,C,Dは構成図的にはこうなるからですよという不正解の説明も分かりやすい。</li>
<li>全体的に図が分かりやすい。特にSCPとIAMポリシーの図など。サービスアイコンって変にないほうが良いのかなと思いました。</li>
</ul>


<h2>まとめ・感想</h2>

<p>出題範囲的な扱っている範囲は本試験受けてないので良いのか判断つきませんが、本の内容としては全体的な構成も細かい説明も分かりやすかったです。<br />
同シリーズのアソシエイト3資格本が個人的にしっくりこなかったので、あまり期待してなかったのですが、Amazonでのレビューも評判いまのところはいいので結構売れそうな気がします。<br />
試験範囲が広く、この本読めばOKというものでは全然ないですが、SAAからSAPへ通常のステップを踏んでる人にはいい内容かなと思いました。</p>

<p>本試験の結果はどうなるか分かりませんが、読んでおいて良かったなと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2020年6月 振り返り'
description: ''
publishDate: '07/01/2020 09:34:46'
---

[CONTENTS-START]
<h1>結果</h1>

<h2>ブログ</h2>

<p><strong>目標：月 8 回（週2回）更新</strong><br />
<strong>結果：月 6 回 更新</strong></p>

<h2>読書</h2>

<p><strong>目標：月 1 冊</strong><br />
<strong>結果：月 2 冊</strong></p>

<h1>反省点など</h1>

<p>ブログ月8回更新には届かなかったですが、だんだんとリズム取り戻せてる気がします。<br />
仕事で調べものするときとか、外向きにできるものはするなど習慣づけていきたいと思います。</p>

<h1>来月に向けて</h1>

<p>試験勉強しているのでまた7月はペース落ちるかもですががんばります。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】Amazon Web Services 定番業務システム14パターン 設計ガイド'
description: ''
publishDate: '06/24/2020 08:24:27'
---

[CONTENTS-START]
<p><a href="https://jtk.hatenablog.com/entry/2020/06/03/185038">前回</a> に引き続き、日経BPのAWS本です。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4822292509/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/515kSh2RKFL._SL160_.jpg" class="hatena-asin-detail-image" alt="Amazon Web Services 定番業務システム14パターン 設計ガイド" title="Amazon Web Services 定番業務システム14パターン 設計ガイド"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4822292509/hatena-blog-22/">Amazon Web Services 定番業務システム14パターン 設計ガイド</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%C0%EE%BE%E5%20%CC%C0%B5%D7" class="keyword">川上 明久</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/09/28</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>目次</h2>

<p>［基本編］</p>

<ul>
<li>1章 Webシステム</li>
<li>2章 ストレージシステム</li>
<li>3章 データ分析システム</li>
</ul>


<p>［応用編］</p>

<ul>
<li>4章 アプリケーションの高速開発</li>
<li>5章 クラウドネイティブ</li>
<li>6章 ハイブリッドクラウド</li>
</ul>


<p>各章1〜4個、計14パターンのサービス構成、設計についての考え方について書かれています。<br />
1パターンだいたい15ページ前後で15〜30分くらいで読めるので細切れにでも読める感じ。</p>

<p>細かい設定値の話はなく、サービスの選定〜どういった機能を使うかを説明されています。<br />
サービス自体についての説明、各パターンでの構成図についても触れているのである程度の初心者の人にも分かりやすい内容かなと思いました。</p>

<h2>良かった点</h2>

<ul>
<li>構築パターンがたくさんのってる</li>
</ul>


<p>AWSのサイトの事例にもなんとなく使っているサービスやどういう考えで使ったかみたいなことは書かれていますが、クライアント視点の話ではあるので、開発者目線で書かれている内容となるとやっぱりこういう本になりますね。<br />
本の構成やパターンの幅も、最初はベーシックなシンプル構成からだんだん複雑にはなっていきますが、サービスの概要が事前に分かっているとこれこういうときに使うのかあーみたいな発見がたくさんありました。</p>

<ul>
<li>実際の案件でのサービスの利用のされ方がイメージしやすい</li>
</ul>


<p>個人的にはファイルサーバー（パターン6）の特にEFSが実際の利用イメージが湧いてなかったので、そのパターンが一番身になった学習でした。<br />
試験対策ばかりしていると文字面ばかり追いがちなので、前提としてどのような思想や考えがあって、構成とサービス間の連携をどのようにするかみたいなインフラエンジニアの頭の中身を覗けているようで楽しかったです。</p>

<h2>惜しい点</h2>

<ul>
<li>少し内容が古い</li>
</ul>


<p>書籍なのでしょうがないのですが、2018年10月の本なので2年もすれば結構サービスや機能の移り変わりもあるよなあという感じの内容かなと。<br />
アイコンも古いバージョンなのでなつかしみがあります。<br />
Lambdaの実行時間など設定上限やコストが古いくらいで基本の基本のところは変わっていないと思うので、めちゃ気になったという点でもなかったですが。</p>

<p>あとシステム構成に関しての本なので、この本に書いてほしいという内容ではないのですが、<br />
アカウント管理についての考え方みたいなこともこのアプローチの仕方で書かれているものを読んでみたいなと思いました。</p>

<h2>まとめ・感想</h2>

<p>資格のレベルでいうとSAA〜SAPの間くらいかなと思います。今の自分の知識でちょうどいい感じでした。<br />
ただ実際に手を動かしてみてるわけでもないので、これで構築できるかはまた別の話な感触です。</p>

<p>ここ最近の2冊でぼんやりとしていたインフラエンジニアの仕事や考えていることが分かっている気がしています。<br />
次は <a href="https://www.amazon.co.jp/dp/4865942483/">資格本</a> 注文しているので読んでみようかなとおもっています。SAPの模擬試験などの試験勉強的なことがまったく進んでおらず、そろそろエンジンかけないとなあと思っております。
（ <a href="https://www.amazon.co.jp/dp/4839970947/">Security Specialty 対策本</a> もこんどでるみたいですね・・ ）</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '最近のエディタまわりの環境'
description: ''
publishDate: '06/22/2020 14:57:51'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200622145546.png" alt="f:id:jotaki:20200622145546p:plain" title="f:id:jotaki:20200622145546p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>社内勉強ネタですが、まとめのために書いてみようと思います。<br />
自分の設定なので良し悪しあると思います。<br />
基本的には下記の記事が設定や選定のベースになってます。</p>

<ul>
<li><a href="https://jtk.hatenablog.com/entry/2018/12/07/000000">Visual Studio Code の初期設定など</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2018/12/31/001124">Sublime Text の独自スニペットを Visual Studio Code に移行</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2019/04/26/203000_2">【VS Code】 ワークスペース <code>.code-workspace</code> を使おう</a></li>
</ul>


<hr />

<h1>目次</h1>

<ul>
<li>VS Codeのワークスペース</li>
<li>VS Codeのプラグイン</li>
<li>VS Codeのユーザースニペット</li>
<li>Dashでのスニペット管理</li>
<li>本当はやりたいこと</li>
</ul>


<hr />

<h1>VS Codeのワークスペース</h1>

<p>VS Code 上でプロジェクト単位で作業を分割できる？機能です。</p>

<ul>
<li>都度都度「フォルダを開く」からフォルダを選択しないで済む（他の案件の切り替えが多少しやすい）</li>
<li>ファイルや単語の検索は自動的にプロジェクト配下にデフォルトでフィルターされる</li>
<li>拡張機能をワークスペースごとにインストール/アンインストールできる（状態も保存される）</li>
<li>Gitで .code-workspace を管理すれば、複数人で環境を共有できる（プラグインなどできないかも？）</li>
</ul>


<p>設定方法： <a href="https://kukka.me/vsc-workspace/">【VisualStudioCode】ワークスペースとは？</a></p>

<p>{画面共有}</p>

<hr />

<h1>VS Codeのプラグイン</h1>

<pre class="code bash---" data-lang="bash---" data-unlink># codeコマンドで一覧表示---
# https://qiita.com/koshilife/items/3ed4b1c28de233f39ebb
$ code --list-extensions | xargs -L 1 echo code --install-extension</pre>


<h4>言語拡張やスニペット</h4>

<p>これはバッティングするものもあるので、テンプレートエンジンなどは常時有効化はしない。</p>

<h5>HTML &amp; HTML テンプレートエンジン</h5>

<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ecmel.vscode-html-css">HTML CSS Support</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=Syler.sass-indented">Sass</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=DigitalBrainstem.javascript-ejs-support">EJS language support</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=TaodongWu.ejs-snippets">ejs Snippets</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=ronnidc.nunjucks">Nunjucks</a></li>
</ul>


<h5>JavaScript &amp; JSフレームワーク</h5>

<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets">JavaScript (ES6) code snippets</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=hollowtree.vue-snippets">Vue 2 Snippets</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=octref.vetur">Vetur</a></li>
</ul>


<h5>PHP &amp; WordPress</h5>

<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=bmewburn.vscode-intelephense-client">PHP Intelephense</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=tungvn.wordpress-snippet">WordPress Snippet</a></li>
</ul>


<p>あんまり実際に入れてていいことないのかも？<br />
補完候補でても無視することもしばしば。</p>

<h4>フォーマッター（コード整形）やスペースの表示</h4>

<p>これもGulp Taskでやっている場合がほとんどなので常時有効化はしない。</p>

<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier - Code formatter</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=lonefy.vscode-JS-CSS-HTML-formatter">JS-CSS-HTML Formatter</a></li>
<li>☆<a href="https://marketplace.visualstudio.com/items?itemName=mosapride.zenkaku">zenkaku</a></li>
<li>☆<a href="https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces">Trailing Spaces</a></li>
</ul>


<p>zenkaku は全角スペース、Trailing Spaces は半角スペース可視化用。</p>

<h4>タグ・属性・値などの入力補完</h4>

<ul>
<li><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense">Path Intellisense</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer">Bracket Pair Colorizer</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">Auto Close Tag</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag">Auto Rename Tag</a></li>
<li>☆<a href="https://marketplace.visualstudio.com/items?itemName=tomoki1207.vscode-input-sequence">vscode-input-sequence</a></li>
</ul>


<p>Auto Close Tag は勝手に閉じタグ補完。<br />
Auto Rename Tag は勝手に閉じタグ（開始タグ）も変更。<br />
vscode-input-sequence は連番入力の補完機能です。</p>

<h4>その他</h4>

<p><a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-ja">Japanese Language Pack for Visual Studio Code</a><br />
日本語訳パッケージ</p>

<p><a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare">Live Share</a><br />
ペアプログラミングなどに使えそう（実際に使ったことはない）</p>

<p><a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">Live Server</a><br />
ローカルサーバーを編集しているディレクトリをルートとして立ち上げ&amp;ライブリロード。
GulpやSassを使わないけど、絶対パスで書かれているファイルプレビューみたいなことに便利（ほぼ機会ないけど）</p>

<p><a href="https://marketplace.visualstudio.com/items?itemName=ryu1kn.partial-diff">Partial Diff</a><br />
差分表示。<a href="https://difff.jp/">difff《ﾃﾞｭﾌﾌ》</a> もよく使いますが。</p>

<p><a href="https://marketplace.visualstudio.com/items?itemName=zeplin.zeplin">Zeplin</a><br />
Zeplinと連携。最近のですが、単純にエディタの左カラムにZeplinのアートボードリンクが増えるだけだった。</p>

<p>ほかに便利なものなどありましたら教えて下さい。</p>

<p>{画面共有}</p>

<hr />

<h1>VS Codeのユーザースニペット</h1>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200622145713.png" alt="f:id:jotaki:20200622145713p:plain" title="f:id:jotaki:20200622145713p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>ユーザースニペット機能を使っています。（メンテナンスあんまりできていませんが・・・）</p>

<p>例えば、</p>

<ul>
<li>.scss の <code>inc</code> （ <code>@include</code> の補完）</li>
<li>.php の <code>postmeta</code> （投稿情報取得の補完）</li>
</ul>


<p>など。</p>

<p>疑似要素や背景画像周りは mixin などにしたほうがいい場合のほうが多いので最近はあまり使っていないです。<br />
設定方法： <a href="https://qiita.com/xx2xyyy/items/fd333368db548167f15a">VsCodeのスニペットのススメ - Qiita</a></p>

<p>{画面共有}</p>

<hr />

<h1>Dashでのスニペット管理</h1>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200622145727.png" alt="f:id:jotaki:20200622145727p:plain" title="f:id:jotaki:20200622145727p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p><a href="https://kapeli.com/dash">Dash</a> アプリでもスニペット管理しています。<br />
こちらも本来はコード貼り付け用のツールですが、どちらかというとよく使うコードのメモ帳感覚で使っています。</p>

<p>HTML/CSS/JS/PHP（WordPress）、よく使うコマンド（SSH接続、IP確認）など。</p>

<p>{画面共有}</p>

<hr />

<h1>本当はやりたいこと</h1>

<h4>Finderで一括でプロジェクトセットを開きたい</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200622145744.png" alt="f:id:jotaki:20200622145744p:plain" title="f:id:jotaki:20200622145744p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>VS Codeのフォルダ機能をあまり使わずイチイチFinder見てる派なのですが、これを一気に開けたら便利かなと。<br />
プロジェクトセットと言っているのは、htmlやscssやimg、jsフォルダごとにタブで開いている状態です。</p>

<p>{画面共有}</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2020年前期のWebサイト'
description: ''
publishDate: '06/21/2020 13:18:48'
---

[CONTENTS-START]
<p>2020年前期分です。</p>

<ul>
<li><a href="https://jtk.hatenablog.com/entry/2019/08/04/100739">2019年前期のWebサイト</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2019/12/09/090608">2019年後期のWebサイト</a></li>
</ul>


<p>RSSでギャラリーサイト購読して気になったのはPocketでブックマークのなかから選んでます。<br />
まとめて見る機会はあまりないのですが、並べてみると結構偏ってたので趣向別で分けてみました。</p>

<p>イラストや手書き文字、きれいなメインビジュアル（映像）に偏ってます。<br />
どれもクオリティ高くお金もかかってんだろうなーって感じがします。<br />
VueやNuxtもこのようなWebサイトで使われる機会も増えてる感じですね。</p>

<h2>イラスト</h2>

<h4>ウェルナビ | 日清製粉グループ</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200621131401.png" alt="f:id:jotaki:20200621131401p:plain" title="f:id:jotaki:20200621131401p:plain" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://www.nisshin.com/welnavi/">https://www.nisshin.com/welnavi/</a></p>

<h4>株式会社Roots</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200621131413.png" alt="f:id:jotaki:20200621131413p:plain" title="f:id:jotaki:20200621131413p:plain" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://rts.tokyo/">https://rts.tokyo/</a></p>

<h4>丸の内インフラストラクチャー株式会社</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200621131425.png" alt="f:id:jotaki:20200621131425p:plain" title="f:id:jotaki:20200621131425p:plain" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://www.marunouchi-infra.co.jp/">https://www.marunouchi-infra.co.jp/</a></p>

<h4>醸す 造る 播磨</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200621131439.png" alt="f:id:jotaki:20200621131439p:plain" title="f:id:jotaki:20200621131439p:plain" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://harimacountry.com/">https://harimacountry.com/</a></p>

<h4>シェフのおいしいつながり | 一般社団法人 自然と自然派</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200621131459.png" alt="f:id:jotaki:20200621131459p:plain" title="f:id:jotaki:20200621131459p:plain" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://oic-nagoya.com/">https://oic-nagoya.com/</a></p>

<h2>ビジュアル</h2>

<h4>The Okura Tokyo ウエディング</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200621131509.png" alt="f:id:jotaki:20200621131509p:plain" title="f:id:jotaki:20200621131509p:plain" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://theokuratokyo.jp/wedding/">https://theokuratokyo.jp/wedding/</a></p>

<h4>採用情報｜山﨑建設工業株式会社｜人と生きる建物をつくる建設企業</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200621131521.png" alt="f:id:jotaki:20200621131521p:plain" title="f:id:jotaki:20200621131521p:plain" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://www.yamazaki-kk.jp/recruit/">https://www.yamazaki-kk.jp/recruit/</a></p>

<h4>【公式】瀬の本高原ホテル</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200621131539.png" alt="f:id:jotaki:20200621131539p:plain" title="f:id:jotaki:20200621131539p:plain" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://hotel.senomoto.com/">https://hotel.senomoto.com/</a></p>

<h4>いろは保育園｜熊本市中央区水前寺の企業主導型保育園</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200621131557.png" alt="f:id:jotaki:20200621131557p:plain" title="f:id:jotaki:20200621131557p:plain" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://iroha-hoikuen.jp/">https://iroha-hoikuen.jp/</a></p>

<h2>その他</h2>

<h4>Corentin Bernadou</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200621131618.png" alt="f:id:jotaki:20200621131618p:plain" title="f:id:jotaki:20200621131618p:plain" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://www.corentinbernadou.co/">https://www.corentinbernadou.co/</a></p>

<h4>Diesel Wynwood ⏤ Condominium</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200621131634.png" alt="f:id:jotaki:20200621131634p:plain" title="f:id:jotaki:20200621131634p:plain" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://dieselwynwood.miami/">https://dieselwynwood.miami/</a></p>

<h4>TRANS BOOKS DOWNLOADs | TRANS BOOKS</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200621131646.png" alt="f:id:jotaki:20200621131646p:plain" title="f:id:jotaki:20200621131646p:plain" class="hatena-fotolife" itemprop="image" /></span>
<a href="https://transbooks.center/downloads/">https://transbooks.center/downloads/</a></p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Nuxt.jsのWebアプリをFirebase(Cloud Functions/Firebase Hosting)でSSRする'
description: ''
publishDate: '06/20/2020 20:01:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200620195129.png" alt="f:id:jotaki:20200620195129p:plain" title="f:id:jotaki:20200620195129p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>URL: <a href="https://nuxt-firebase-demo-1355e.web.app/">https://nuxt-firebase-demo-1355e.web.app/</a><br />
GitHub: <a href="https://github.com/yuheijotaki/nuxt-firebase">https://github.com/yuheijotaki/nuxt-firebase</a></p>

<p>SSRなのでFirebaseの Cloud Functions と Firebase Hosting を使います。</p>

<p>AWSでいうと<br />
Cloud Functions は Lambda、<br />
Firebase Hosting は S3<br />
という扱いですかね。</p>

<p>色々な記事見たのですが、手順としては
<a href="https://qiita.com/hirose504@github/items/dcd156632ad07241fb8e">firebase functionsでnuxt.js v2.11.0をSSR - Qiita</a> が比較的新しくこの通りでできました。</p>

<p>他にもこの手の記事はたくさんありますが、<br />
Nuxtのビルドフォルダなどディレクトリ構成がごっちゃになったり、そもそもSPAのものだったり、人によってWebアプリ作成とFirebaseの設定順が違ったりするので、とりあえず1記事でデプロイまでできる状態に持っていってから調整するところ調整したほうがいいかなと思います。</p>

<p>下記おおまかな手順です。</p>

<h5>事前準備</h5>

<p>リポジトリ作成。nodenvなどでnodeのバージョンは10系に合わせる。<br />
functions側（Cloud Functions）のNode.jsでローカルと同じように動かないと詰まることになるので、今の所10系が安定していそう。</p>

<h5>create-nuxt-app</h5>

<p>Nuxtアプリを作ります。<br />
starter-template だとうまくFirebase連携がうまくいかなかったという記事もあったのでcreate-nuxt-appがおすすめ。<br />
モジュールとかリンターは好きなようにしてOK。<br />
後でも変更可ですが Choose rendering mode Universal は SSR で。<br />
作ったら nuxt.config.js の <code>buildDir</code> を <code>functions/nuxt</code> にしておく。</p>

<h5>Firebaseプロジェクト作成</h5>

<p>コンソールから「プロジェクトを作成」 <a href="https://console.firebase.google.com/?hl=ja">https://console.firebase.google.com/?hl=ja</a><br />
アナリティクスはとりあえず無効にしておく。<br />
Authentication や Database などいろいろ入ってますが使うのは Hosting と Functions。</p>

<h5>firebase init</h5>

<p>ここからはCLIインストールして操作<br />
<a href="https://firebase.google.com/docs/cli?hl=ja">https://firebase.google.com/docs/cli?hl=ja</a></p>

<p>Mac npm だとうまくいかず curl でインストールした</p>

<pre class="code bash" data-lang="bash" data-unlink>$ curl -sL https://firebase.tools | bash</pre>


<p>ログイン</p>

<pre class="code bash" data-lang="bash" data-unlink>$ firebase login

# ブラウザで認証後
Success! Logged in as XXXXX@gmail.com</pre>


<p>ブラウザでFirebaseとの紐付け後にCLIのログインが確認される。<br />
プロジェクトリストの表示</p>

<pre class="code bash" data-lang="bash" data-unlink>$ firebase projects:list
# さきほど作ったプロジェクト名が表示されればOK</pre>


<p>プロジェクトのFirebase初期化</p>

<pre class="code bash" data-lang="bash" data-unlink>$ firebase init

# Which Firebase CLI features は 2つ選択
◉ Functions: Configure and deploy Cloud Functions
◉ Hosting: Configure and deploy Firebase Hosting sites

# さきほど作ったプロジェクトを選択
? Please select an option: Use an existing project
? Select a default Firebase project for this directory: nuxt-firebase-demo-1355e
 (nuxt-firebase-demo)
i  Using project nuxt-firebase-demo-1355e (nuxt-firebase-demo)</pre>


<h5>functions 設定</h5>

<p>・firebase.json<br />
rewrites function を <code>nuxtApp</code> に</p>

<p>・functions/package.json<br />
node のエンジンを 8 → 10 に<br />
axios と dotenv のモジュール追加</p>

<p>・functions/index.js<br />
Express つかってSSRするように設定。ここはコピペしました。</p>

<h5>デプロイ</h5>

<pre class="code bash" data-lang="bash" data-unlink># ビルド
$ npm run build

# ローカルでデプロイ内容確認
$ firebase serve
http://localhost:5000/ で確認

# デプロイ
$ firebase deploy</pre>


<h3>感想</h3>

<p>Firebaseの認証詰まったり、Cloud Functions 思ったよりハマりポイントたくさんありましたが一応SSRできるっていうのを試せてみたので良かったです。
サーバレスってこういうことなんだっていうのはやっぱり触ってみるとわかりやすいです。
もう少しルーティングとかうまくいくか検証しないと案件とかでは怖いですが</p>

<h3>ほか参考</h3>

<ul>
<li><a href="https://agelog.hateblo.jp/entry/2019/11/25/001401">Nuxt.jsで作ったSSRなwebサービスをfirebaseにデプロイする - 揚げログ</a></li>
<li><a href="https://inside.dmm.com/entry/2018/04/10/nuxt-firebase">Nuxt.jsとFirebaseでSPA×SSR×PWA×サーバーレスを実現する - DMM inside</a></li>
<li><a href="https://qiita.com/sychocola1/items/c3f329da3a14c85c3a73">SSRで作ったNuxtアプリをFirebase hostingで動的にデプロイする。 - Qiita</a></li>
<li><a href="https://medium.com/@kazuyafujimori/firebase%E3%81%A7spa%E3%81%AEssr%E7%92%B0%E5%A2%83%E3%82%92%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AC%E3%82%B9%E3%81%AB%E6%A7%8B%E7%AF%89%E3%81%99%E3%82%8B-fdfe8fe00335">FirebaseでSPAのSSR環境をサーバーレスに構築する - Kazuya Fujimori - Medium</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Shifter Headless をさわってみる'
description: ''
publishDate: '06/10/2020 13:41:21'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191122165357.png" alt="f:id:jotaki:20191122165357p:plain" title="f:id:jotaki:20191122165357p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>Shifter Headless とは</h2>

<p>これまでのShifter = WPの静的書き出しは、「Shifter Static」と呼ばれ、今回新しくWP（REST API）をHeadlessCMSとして使うのを「Shifter Headless」と呼ぶようです。<br />
前回のShifter（Static）の記事：<a href="https://jtk.hatenablog.com/entry/2019/11/24/124457">https://jtk.hatenablog.com/entry/2019/11/24/124457</a></p>

<h2>料金</h2>

<p>データ転送</p>

<ul>
<li>1000GB => $900/月</li>
<li>100GB => $72/月</li>
<li>10GB => $48/月</li>
</ul>


<p>アカウント初回登録後1週間は無料プランあり</p>

<h2>手順</h2>

<p>会社の技術調査も兼ねて無料枠で使ってみました</p>

<p>Shifterへログインして「Headless」を選択後、サイト名を入力。<br />
2〜3分でWordPressこみこみのサーバーが立ち上がりました。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200610133317.png" alt="f:id:jotaki:20200610133317p:plain" title="f:id:jotaki:20200610133317p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>WordPress管理画面は Shifter Dashboard に書いてある情報を入力。（ユーザー名は <code>admin</code> ）<br />
最初は英語版ですが、いつものWordPress管理画面です。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200610133334.png" alt="f:id:jotaki:20200610133334p:plain" title="f:id:jotaki:20200610133334p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>WordPressの管理画面URLから <code>/wp-admin/</code> を取ったURLでは Headless用のテーマが適用されています。<br />
もちろんnoindexがはいっています。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200610133326.png" alt="f:id:jotaki:20200610133326p:plain" title="f:id:jotaki:20200610133326p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>プラグインも互換性があるものは最初から入っている。<br />
けど、プラグインの新規追加はできない。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200610133342.png" alt="f:id:jotaki:20200610133342p:plain" title="f:id:jotaki:20200610133342p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>RESTだけでなくGraphQL配信もできそう。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200610133348.png" alt="f:id:jotaki:20200610133348p:plain" title="f:id:jotaki:20200610133348p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>ユーザーも作成可能。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200610133353.png" alt="f:id:jotaki:20200610133353p:plain" title="f:id:jotaki:20200610133353p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>サイトURL+ <code>/wp-json/</code> を付与するとAPIができてることを確認
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200610133400.png" alt="f:id:jotaki:20200610133400p:plain" title="f:id:jotaki:20200610133400p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>Shifter DashboardからWordPressサーバーをストップしても、WPやAPIのURLは変わりませんでした。
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200610133404.png" alt="f:id:jotaki:20200610133404p:plain" title="f:id:jotaki:20200610133404p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>フロントエンドのスターターはGitHubにおいてあります
<a href="https://github.com/smartcatdev/WordPress-REST-API-Sample-App">https://github.com/smartcatdev/WordPress-REST-API-Sample-App</a></p>

<h2>感想</h2>

<h3>プラグインの新規追加ができない点</h3>

<p>これはデフォルトで入っているプラグインでしかWPの拡張ができないので、WordPressのコンテンツ管理周りでできることとしては下記が中心になるかなと思います。</p>

<ul>
<li>カスタム投稿タイプの作成（Custom Post Type UI）</li>
<li>カスタムフィールド作成（Advanced Custom Fields）</li>
<li>クラシックエディターの有効化（Classic Editor）</li>
<li>テーブル入力まわりの強化（TablePress）</li>
<li>投稿順序の並び替え（Intuitive Custom Post Order）</li>
<li>ページリダイレクト管理（Redirection）</li>
<li>ユーザー権限のカスタマイズ（User Role Editor）</li>
<li>コンテンツ移行（All-in-One WP Migration）</li>
</ul>


<p>主要な機能は最低限カバーされている感がありますが、2つ懸念があります。</p>

<h4>1.プラグインに依存していたサイトの移行が難しそう</h4>

<p>旧サイトからの移行の場合、そちらで使用していたプラグインの機能は再現難しそう（Staticでも同じでしたが）なので、その点機能やコードの改修が出てくるかなと思います。<br />
例えばWP-PageNaviの機能をフロントでやろうとすると結構大変な予感がしています。<br />
小規模であまりテーマもいじってないですよーなサイトならやりやすそうです。</p>

<h4>2.細かいところに手が届かない場合も</h4>

<p>2つめはふだんのWordPress案件でよく使っているプラグインも使えないので、WordPress開発もできるしって理由が第一でこれを使うと大変なことにはなりそう。<br />
functions.phpを触ることもできないので、ちょっとコード書いて管理画面の使い勝手よくするみたいなことも難しい。まぁフロントエンド向けなのでそうなのですが。<br />
Headless CMSなので配信側で使うものという捉え方が必要で、残りはフロントでコネたりフォームはSaaS使うとかそういう選定はWordPress外でまた必要になる。</p>

<p>ちなみに自分がいつもいれるプラグインでないのは、</p>

<ul>
<li>Duplicate Post</li>
<li>All in One SEO Pack</li>
<li>Admin Menu Editor</li>
</ul>


<p>あたりで、がっつり管理画面側の最適化だったので、わりとどうにかしやすい方だと思います。</p>

<h3>セキュリティ面（WPのサーバー・APIアクセス）やサーバーの安定性が不透明</h3>

<p>WAFをいれているってことなのですが、管理画面のIP制限ができなそうだったり、APIもURL叩けば表示されるので、そのあたり厳密な案件は難しいかもしれないです。<br />
あとはmicroCMSとかも同じですがサーバどれだけ落ちる可能性があるのかとか、そのあたりも許容できる案件とか使い方になってくるかなと思いました。</p>

<h2>まとめ</h2>

<p>WordPress開発を多めにやってきた人間からすると、プラグインの使用限度がネックになってしまうなと思います。<br />
ただWordPressサーバーの構築や管理もいらないし、そのあたりのやりたいことと手間暇との天秤かける感じになるかなと。</p>

<p>WordPressのCMSの管理画面って長い時間かけて5.xまで来ているので、そうそうに他のCMSで更新が完璧にしやすいのは出てこない気がしますし、そこもShifter Headless使う理由になりますね。<br />
グーテンベルクに慣れている人はどれだけいるかわかりませんが、今まで触ったことがある母数も相当多いでしょうし</p>

<ul>
<li>機能要件固まっていて、WPでめちゃめちゃ難しいことしない</li>
<li>セキュリティ要件もそこまで厳しくない</li>
<li>更新する人がWordPress管理画面に慣れている</li>
<li>開発側もモダンにやりたい（NuxtやGatsby）</li>
</ul>


<p>このような案件だと使うメリット多いと感じました。</p>

<h2>参考リンク</h2>

<ul>
<li><a href="https://support.getshifter.io/en/articles/3870662-introducing-shifter-headless">Introducing Shifter Headless</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】Amazon Web Services 基礎からのネットワーク＆サーバー構築 改訂3版'
description: ''
publishDate: '06/03/2020 18:50:38'
---

[CONTENTS-START]
<p>AWS含むクラウドでの個人的な苦手領域がネットワークとセキュリティ関連なのですが、その点をうまく補完できそうな本を読んでみようと思いました。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4296105442/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/51Fl-rIvlFL._SL160_.jpg" class="hatena-asin-detail-image" alt="Amazon Web Services 基礎からのネットワーク&amp;サーバー構築 改訂3版" title="Amazon Web Services 基礎からのネットワーク&amp;サーバー構築 改訂3版"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4296105442/hatena-blog-22/">Amazon Web Services 基礎からのネットワーク&amp;サーバー構築 改訂3版</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%C2%E7%DF%B7%20%CA%B8%B9%A7" class="keyword">大澤 文孝</a>,<a href="http://d.hatena.ne.jp/keyword/%B6%CC%C0%EE%20%B7%FB" class="keyword">玉川 憲</a>,<a href="http://d.hatena.ne.jp/keyword/%CA%D2%BB%B3%20%B6%C7%CD%BA" class="keyword">片山 暁雄</a>,<a href="http://d.hatena.ne.jp/keyword/%BA%A3%B0%E6%20%CD%BA%C2%C0" class="keyword">今井 雄太</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2020/02/06</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>目次</h2>

<ul>
<li>1章 システム構築をインフラから始めるには</li>
<li>2章 ネットワークを構築する</li>
<li>3章 サーバーを構築する</li>
<li>4章 Webサーバーソフトをインストールする</li>
<li>5章 HTTPの動きを確認する</li>
<li>6章 プライベートサブネットを構築する</li>
<li>7章 NATを構築する</li>
<li>8章 DBを用いたブログシステムの構築</li>
<li>9章 TCP/IPによる通信の仕組みを理解する</li>
</ul>


<p>実際の本番環境などではインフラエンジニアに任せるにしても、アプリケーション開発者もインフラ（ネットワークやサーバー）構築について理解があったほうがトラブルシューティングなどもしやすいしいいよね、みたいなスタンスで書かれています。</p>

<p>1章は概要説明で、2章からハンズオンで単一AZ構成のWordPressサイト（EC2のWebサーバー層 + DB層）を作っていきます。</p>

<p>Webサーバは一般的な方法と思いますが、DB層はプライベートサブネットにMariaDBインストールしてNAT経由でゲートウェイ設定する。<br />
最後までインストールやってみて、動作確認して、請求怖いのですぐに環境削除しました。</p>

<h2>良かった点</h2>

<ul>
<li>初心者向けでAWSサービス以前に、例えばIPアドレスとは？などそもそもの基本についての説明がある。</li>
<li>AWSのサービスをベースにネットワークについての知識がつけることができる。</li>
<li>ハンズオンを通して実際の構築を最小限の構成で通して学べる。</li>
<li>本のボリューム（価格含め）に対して、ハンズオン通してできあがる成果物の規模は小さめではあるものの、ハンズオンに沿った内容以外にも通例・慣習などの考え方についても説明があるので実戦をより想定しやすい。</li>
</ul>


<h2>まとめ・感想</h2>

<p>自分はフロントエンドのエンジニアなのですが、所属する会社はメインの事業でクラウドのインフラ構築・運用をしていて、他の人が何やってんだろっていうのを今までの本の中では一番具体的に学べた（想像できた）本かなと思います。<br />
サーバーにApache入れるとか（UdemyのSAA対策のハンズオンでもやりましたが）そもそものどうやって動いているの？っていう疑問が結構晴れました。</p>

<p>9章のTCP/IPなど通信の仕組み的なところはまだまだはてななところありますが、前に比べて随分用語の苦手意識がなくなっているように思えました。</p>

<p>SAPの試験対策も含めているのですが、もう少し包括的にAWSを知ってみたいとさらに思えるようになりました。やっぱり試験勉強よりはこういう感じで知識つけたほうが本質的には理解が進むような気がしました。</p>

<h2>おまけ</h2>

<p>次回も引き続き <a href="https://www.amazon.co.jp/dp/4822292509/">定番業務システム14パターン 設計ガイド</a> を買ったので読んでみたいと思います。パラパラ見てるだけだとSAP対策にもよさそう。</p>

<p><a href="https://www.amazon.co.jp/dp/4865942483/">SAP試験の対策本</a> も今度出るみたいなのでそれも読んでみたいですね。（アソシエイト3資格対策のシリーズなので質がよいかわかりませんが..）</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2020年5月 振り返り'
description: ''
publishDate: '05/31/2020 19:34:00'
---

[CONTENTS-START]
<h1>結果</h1>

<h2>ブログ</h2>

<p><strong>目標：月 8 回（週2回）更新</strong><br />
<strong>結果：月 2 回 更新</strong></p>

<h2>読書</h2>

<p><strong>目標：月 1 冊</strong><br />
<strong>結果：月 1 冊</strong></p>

<h1>反省点など</h1>

<p>この歳になって料理作るとか掃除するとか生活をしっかりしはじめてしまって、なかなかスキルアップに気が回りません。<br />
2月までの勢いが自分のペースでは異常だったのですが、どこかで切り替えしないとなあと感じています。</p>

<h1>来月に向けて</h1>

<p>引っ越しなど色々終わらせてすっきりした状態になっていればいいなと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】みんなのAWS 〜AWSの基本を最新アーキテクチャでまるごと理解！'
description: ''
publishDate: '05/06/2020 15:09:52'
---

[CONTENTS-START]
<p>ゴールデンウィークだけど外出もできないのでだらだら1冊だけ読みました。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4297113295/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/51xgJBghlOL._SL160_.jpg" class="hatena-asin-detail-image" alt="みんなのAWS　〜AWSの基本を最新アーキテクチャでまるごと理解！" title="みんなのAWS　〜AWSの基本を最新アーキテクチャでまるごと理解！"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4297113295/hatena-blog-22/">みんなのAWS　〜AWSの基本を最新アーキテクチャでまるごと理解！</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%B5%C6%C3%D3%20%BD%A4%BC%A3" class="keyword">菊池 修治</a>,<a href="http://d.hatena.ne.jp/keyword/%B2%C3%C6%A3%20%CE%CA" class="keyword">加藤 諒</a>,<a href="http://d.hatena.ne.jp/keyword/%BE%EB%B4%DF%20%C4%BE%B4%F5" class="keyword">城岸 直希</a>,<a href="http://d.hatena.ne.jp/keyword/%B9%C3%CC%DA%20%CD%CE%B2%F0" class="keyword">甲木 洋介</a>,<a href="http://d.hatena.ne.jp/keyword/%DF%C0%C5%C4%20%B9%A7%BC%A3" class="keyword">濱田 孝治</a>,<a href="http://d.hatena.ne.jp/keyword/%C6%A3%B0%E6%20%B8%B5%B5%AE" class="keyword">藤井 元貴</a>,<a href="http://d.hatena.ne.jp/keyword/%C5%CF%CA%D5%20%C0%BB%B9%E4" class="keyword">渡辺 聖剛</a>,<a href="http://d.hatena.ne.jp/keyword/%B1%B1%C5%C4%20%B2%C2%CD%B4" class="keyword">臼田 佳祐</a>,<a href="http://d.hatena.ne.jp/keyword/%B9%BE%B8%FD%20%B2%C2%B5%AD" class="keyword">江口 佳記</a>,<a href="http://d.hatena.ne.jp/keyword/%C0%E9%CD%D5%20%BD%DF" class="keyword">千葉 淳</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2020/04/17</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>目次</h2>

<ul>
<li>第1章 AWSの基礎知識</li>
<li>第2章 AWSで作るWebサービス</li>
<li>第3章 サーバーレスプラットフォームで作る モバイル向けアプリケーション</li>
<li>第4章 AWSで作るデータの収集・可視化基盤</li>
</ul>


<p>ざっくりですが、第1章はAWSというよりクラウド（インフラ）の歴史から責任共有モデル、Well-Architectedフレームワークについて、IAMのアカウント管理やCloudWatchのモニタリングに関して触れています。<br />
第2章でネットワーク、コンテナ、CI/CD環境...といったカテゴリー別にAWSサービスの紹介。<br />
第3、4章でサーバーレスアプリ、データ収集基盤を実際に構築するハンズオン形式の解説となっています。</p>

<h2>良かった点</h2>

<p>ポイント・概要的なことはまとめるとキリないので良かった点だけ。</p>

<h4>実際の構築に近い視点でAWSサービスを理解できる</h4>

<p>これまで認定試験のAWS勉強だけだったので表層的な知識習得だったと思うのですが、この本では</p>

<ul>
<li>どのような考えでアーキテクチャを設計するのか</li>
<li>運用やセキュリティ目線ではどのようなことを考える必要があるのか</li>
</ul>


<p>等、実際の案件に近そうな感じでシミュレーションができ理解が深まったように思います。</p>

<p>たぶん、他のAWS本でも同じ方向性の内容だとは思うのですが、特に良かったのはタイトルに「みんなの」って書いている通り、初学者の人にとっても学びやすい内容だったことです。<br />
例えば、第2章でコンテナの説明を扱っていますが、ECRやECS、EKSの説明の前にそもそもコンテナとはなにか、向いているケースはどのようなケースかみたいな話が丁寧に説明されています。<br />
解説されていることのほとんどは何となくは知っていたけれど、背景的な話や実際の構築に近い話が出てくるのでこれまでの本とは違う観点でAWSやそのサービスを見れるようになったかなと思います。</p>

<h4>コンソールのキャプチャが多い</h4>

<p>3、4章のハンズオンの中でキャプチャ多用されているので、実際にいじってなくても本の中だけで完結できるのはよかったです。寝る前とかに読めるので。</p>

<h4>情報が新しい</h4>

<p>試験本は若干古い情報が載ってたりするのですがこの本は新しいので、この比較表は内容古そうだからググって調べなきゃな的なバイアス抜けれるだけでだいぶ読むの楽だった感じがします。特にS3のストレージクラスなど。</p>

<h2>まとめ・感想</h2>

<p>もっとAWSのこと試験対策だけじゃなくで理解しようというふうに思いました。<br />
1年ほど前からプラクティショナーの勉強始めて、そう思えるまでに時間かかってしまいましたが他の本なども読んでみたいと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2020年4月 振り返り'
description: ''
publishDate: '05/04/2020 15:56:21'
---

[CONTENTS-START]
<h1>結果</h1>

<h2>ブログ</h2>

<p><strong>目標：月 8 回（週2回）更新</strong><br />
<strong>結果：月 2 回 更新</strong></p>

<h2>読書</h2>

<p><strong>目標：月 1 冊</strong><br />
<strong>結果：月 2 冊</strong></p>

<h1>反省点など</h1>

<p>なんででしょう。あれだけ欲しいと思っていた時間がすぐそこにたくさんできたはずですが、インプットもアウトプットもペースが落ちてしまっています。</p>

<h1>来月に向けて</h1>

<p>長い目でみてもう少し状況に慣れて、あまり無理せずやっていきたいと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】他者と働く──「わかりあえなさ」から始める組織論'
description: ''
publishDate: '04/05/2020 16:44:01'
---

[CONTENTS-START]
<p>技術本ではないですが気になっていてほしいものリストにずっと入れてた本。<br />
<a href="https://jtk.hatenablog.com/entry/2020/04/01/210000">前回</a> 読んだチーム・ジャーニーでハンガーフライトの解説で、対話に関して詳しく理解したい人におすすめの本として挙げられていたので、次に読んでみようと思っていました。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4910063013/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/41VDf7PNiTL._SL160_.jpg" class="hatena-asin-detail-image" alt="他者と働く──「わかりあえなさ」から始める組織論 (NewsPicksパブリッシング)" title="他者と働く──「わかりあえなさ」から始める組織論 (NewsPicksパブリッシング)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4910063013/hatena-blog-22/">他者と働く──「わかりあえなさ」から始める組織論 (NewsPicksパブリッシング)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%B1%A7%C5%C4%C0%EE%20%B8%B5%B0%EC" class="keyword">宇田川 元一</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/10/04</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>目次</h2>

<ul>
<li>はじめに 正しい知識はなぜ実践できないのか</li>
<li>第1章 組織の厄介な問題は「合理的」に起きている</li>
<li>第2章 ナラティヴの溝を渡るための4つのプロセス</li>
<li>第3章 実践1.総論賛成・各論反対の溝に挑む</li>
<li>第4章 実践2.正論の届かない溝に挑む</li>
<li>第5章 実践3.権力が生み出す溝に挑む</li>
<li>第6章 対話を阻む5つの罠</li>
<li>第7章 ナラティヴの限界の先にあるもの</li>
</ul>


<p>2章までが枠組みや、本で扱う問題や解決方法について、3章以降は事例を元に解説されています。</p>

<h2>概要・ポイント</h2>

<h4>対話</h4>

<p>知識として正しいこと、でも実践でもそれが正しいとは限らない。その問題を解決するために行うのが対話。<br />
本の中での定義としては「新しい関係性を構築すること」<br />
そもそもそのような問題が起こる要因、解決法としての対話のステップと方法はこうですよという話がこの本の大</p>

<h4>技術的問題</h4>

<p>既存の方法で解決できる問題</p>

<h4>適応課題</h4>

<p>既存の方法で一方的に解決ができない複雑で困難な問題<br />
他の部署に協力を求めることが必要な課題を例とした関係性の中で生じる問題</p>

<h4>関係性の改善</h4>

<p>「私とそれ」という道具的な関係から「私とあなた」という固有の関係へシフトする。<br />
自分の中に相手を見出すこと、相手の中に自分を見出すことが対話の意味である。</p>

<h4>適応課題のタイプ</h4>

<ul>
<li>ギャップ型 価値観と実際の行動にギャップが生じるケース</li>
<li>対立型 互いのコミットが対立するケース</li>
<li>抑圧型 言いにくいことを言わないケース</li>
<li>回避型 痛みを伴う行動に向き合わないケース</li>
</ul>


<h4>ナラティブ</h4>

<p>物語、つまりその語りを生み出す「解釈の枠組み」のこと。それぞれ人がみんなもつもの。<br />
ビジネス上では「専門性」「職業倫理」「組織文化」などに基づいた解釈が一般的。その人にとっての一般常識。<br />
ナラティブ・アプローチとは、「どう相手に話をするか」よりも「どう相手を捉える私の物語を対話に向けていくか」を主軸にしたもの。</p>

<h4>解釈</h4>

<p>相手のナラティブにおいても意味があるようにするにはどうしたらよいのかを考えること<br />
できれば信頼のおける仲間や相棒と一緒にやるのが望ましい</p>

<h4>対話のプロセス</h4>

<ul>
<li>準備 「溝に気づく」

<ul>
<li>自分から見える景色を疑う</li>
<li>あたりを見回す</li>
<li>溝があることに気づく</li>
</ul>
</li>
<li>観察 「溝の向こうを眺める」

<ul>
<li>相手との溝に向き合う</li>
<li>対岸の相手の振る舞いをよく見る</li>
<li>相手を取り巻く対岸の状況をよく見る</li>
</ul>
</li>
<li>解釈 「溝を渡り橋を設計する」

<ul>
<li>溝を越え、対岸に渡る</li>
<li>対岸からこちらの岸をよく見る</li>
<li>橋を架けるポイントを探して設計する</li>
</ul>
</li>
<li>介入 「溝に橋を架ける」

<ul>
<li>橋を架ける</li>
<li>橋を往復して検証する</li>
<li>橋を補強したり、新しい橋を架ける</li>
</ul>
</li>
</ul>


<p>「準備」段階は歯がゆく勇気がいる。一度自分のナラティブを脇においてみることが大事。</p>

<h4>対話の罠</h4>

<ol>
<li>気づくと迎合になっている</li>
<li>相手への押しつけになっている</li>
<li>相手と馴れ合いになる</li>
<li>他の集団から孤立する</li>
<li>結果が出ずに徒労感に支配される</li>
</ol>


<p>読みながら1.は自分もそうなりそうだよなと感じていたが、迎合（忖度）は相手へ隷属すること、自ら気づいた課題意識や問題点を見ないようにすること、すなわち、諦めることを意味しているので、そこが対話との違い。（プロセスでいえば橋を渡ったまま帰ってこないのといっしょ）</p>

<p>あとは最後の辞めたり、休んだりすることも重要というのは大事な気がしました。</p>

<h2>良かった点</h2>

<ul>
<li>最後エモかった</li>
<li>インテル、レッドハットなどIT企業の例が多い</li>
</ul>


<h2>惜しかった点</h2>

<ul>
<li>特になし</li>
</ul>


<h2>まとめ・感想</h2>

<p>大学のときにメディア学すこしかじってて、ナラティブとか物語性（人は物語をつけたがる・求める）みたいな話に通ずるところがあり、今になってこういうテーマを見ることになるとはなあという感じでした。<br />
例えば第3章の新規部門と既存部門の話など結構いまの仕事というか会社内でも関連する話がありました。<br />
去年結構売れている本のようなのですが、こういう類の本が売れる（みんなが関心を持つ）っていうのはいいなあと思いました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】チーム・ジャーニー 逆境を越える、変化に強いチームをつくりあげるまで'
description: ''
publishDate: '04/01/2020 21:00:00'
---

[CONTENTS-START]
<ul>
<li><a href="https://jtk.hatenablog.com/entry/2019/09/30/103858">【読書メモ】カイゼン・ジャーニー</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2019/09/15/155334">【読書メモ】正しいものを正しくつくる</a></li>
</ul>


<p>市谷聡啓さんの上記2冊に続いて、チーム・ジャーニーを読みました。<br />
カイゼン・ジャーニーの続編ぽい感じだったので（実際には単体でも読める）2月の発売から楽しみにしており、3月に内容も多めだったのですが、ちょっとだらだらしながらになってしまいましたが読みました。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4798163635/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/51UQUfOit4L._SL160_.jpg" class="hatena-asin-detail-image" alt="チーム・ジャーニー 逆境を越える、変化に強いチームをつくりあげるまで" title="チーム・ジャーニー 逆境を越える、変化に強いチームをつくりあげるまで"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4798163635/hatena-blog-22/">チーム・ジャーニー 逆境を越える、変化に強いチームをつくりあげるまで</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%BB%D4%C3%AB%20%C1%EF%B7%BC" class="keyword">市谷 聡啓</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2020/02/17</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>目次</h2>

<p><strong>第1部　僕らが開発チームになるまで─1チームのジャーニー</strong></p>

<ul>
<li>単一チーム 基本編</li>
<li>単一チーム 応用編</li>
</ul>


<p><strong>第2部　僕らがプロダクトチームになるまで─複数チームによるジャーニー</strong></p>

<ul>
<li>複数チーム 基本編</li>
<li>複数チーム 応用編</li>
</ul>


<p>カイゼン・ジャーニーは、1人から始められるカイゼンを繰り返しチームが遷移していく（だけど焦点は個人に合っている）物語でした。<br />
対してチーム・ジャーニーは、チームマネジメントやチームづくりについて、よりチーム全体に焦点を当てた内容になっています。<br />
物語方式にて、まず問題（ストーリー・問題編）、次に課題（ストーリー・解決編）、最後に解説が各章にておかれています。<br />
基本編で4章、応用編で4章、それが1部+2部なので全16章というボリュームになっています。</p>

<h2>概要・ポイント</h2>

<p>大枠として、度々書かれていたこと</p>

<ul>
<li>なめらかに進める</li>
<li>解像度を意識する</li>
<li>状況によってフォーメーションを組む</li>
</ul>


<p>チームマネジメントにおいて、一気に状況を変えようと思っても無理は利かないので段階的に予定を立て進めていく。<br />
人によってその情報や状況に対する捉え方（視座=高低/視野=広狭）が違うので念頭におく。<br />
ひとつの固定の役割、既存の概念に囚われず状況に応じて柔軟に配置転換、役割の創出などを行なう。</p>

<p>その他、気になったこと、なるほどと思ったことなど。</p>

<h4>コンウェイの法則</h4>

<p>プロダクトやシステム設計が、組織構造（チーム分割等）を反映したものになることをいう。<br />
逆にプロダクトの機能などから組織構造を作ることを逆コンウェイの法則という。</p>

<h4>取引コスト</h4>

<p>もとは経済学の言葉で、違う文脈を持っている相手に対してコミュニケーション取ることは取引コストが高い、などという。</p>

<h4>「リード」という役割</h4>

<p>「リーダー」とは別の「リード」という役割<br />
・リーダー => 組織上の職位として定義<br />
・リード => ある状況において前進を先導する「役割」。例）テクニカルリード、仮説検証リード、テストリード</p>

<h4>情報の解像度</h4>

<p>レイヤーによって粒度分けて展開するのが望ましい。<br />
例えばPOなどのレイヤーで細かな機能についてまで話を展開してしまうと、開発者メンバー側では情報を受け取って「ただそれを実装する人」になってしまう。<br />
ある程度は余白もたせて PO => リード => 開発者 などに受け渡ししていき細部を詰める流れがよい。</p>

<h4>番頭の輪番化</h4>

<p>担当をローテーションすることで、トラックナンバー1問題（誰々しかこのコードを触れない問題）につながらないようにすること。</p>

<blockquote><p>ただし、チームメンバーの専門性や関心などで、あるメンバーに依存する領域が生まれてしまうこと自体は悪いことではありません。むしろメンバーの多様性がいきている状態ともいえます。属人性を排除することを過度に目指すのではなく、何かが起きたときに他の人でプランB（本人ほど最適ではないが、他の人でもなんとか対応できる作戦）が立てられるかどうかを明らかにしましょう。</p></blockquote>

<h4>事前に許可を求めるより、後でゆるしを得たほうがたやすい</h4>

<p>先に動いてしまって後でゆるしを得にいくということ<br />
これ結構メンバー側目線で自分も意識していて、ケースバイケースではあるものの決裁権持っているひとにいちいち確認しても時間もったいない（=ボトルネックになる）と判断したら答え確定して出した方がいいなと</p>

<ul>
<li><a href="http://blog.livedoor.jp/kensuu/archives/54849996.html">許可より謝罪 : けんすう日記</a></li>
<li><a href="https://www.jmac.co.jp/column/opinion/008/tsukamatsu_014.html">「まずやってしまって、後で謝る」原則で行動すること</a></li>
</ul>


<h4>視座と視野で決まる視点</h4>

<p>物事をどこからどこまでを見るようにするか、「どこから」というのは「視座」、「どこまで」とは「視野」にあたる。<br />
その上で<br />
・視座や視野への偏りをつくらないこと<br />
・視座の高低と視野の広狭を自分たちの意思で行き来できること<br />
が重要。</p>

<h2>良かった点</h2>

<ul>
<li>少し登場人物の名前が分かりづらいが、相変わらずストーリーがおもしろい。</li>
<li>問題：課題：解説の割合、1:1:1 くらいですが、ある問題に対して内容割いている本も少ないように思うのでためになる。</li>
</ul>


<h2>惜しかった点</h2>

<ul>
<li>特になし</li>
</ul>


<h2>まとめ</h2>

<p>本に解説してある内容でも実際の現場では状況も違うので、その都度ベストな選択や考えを結局自分自身がしたり持ったりしなくてはいけないのだけれど、その幅が広がったり選択がしやすくなるような内容の本だと思う。</p>

<p>いっぽうで結局正解はないので読者の主観に後は委ねられる部分も多くある、そういう不確定要素を好まないひとには向いていないかもしれないが、筆者の「正しいものを正しくつくる」でさんざん語られていたように今の時代そういう開発形態も考えも主流になっていくなかでうまく自分も適用できるようにならないとと感じた。</p>

<p>最近発売されたオライリーの <a href="https://www.amazon.co.jp/dp/487311909X/">みんなでアジャイル ―変化に対応できる顧客中心組織のつくりかた</a> の説明にも</p>

<blockquote><p>本書では、「顧客から始める」「早期から頻繁にコラボレーションする」「不確実性を計画する」をアジャイルの3つの原則とし、...</p></blockquote>

<p>と書かれています。<br />
自分も今の会社に入って分かったのですが、結構クライアント側の方が開発に入ってくることが多く、その良い面みたいなのはすごく感じています。それでいて知識も豊富だと後ででてくる要件も出づらいのでやりやすいなと。</p>

<p>今回の本はチームビルディング的な観点だったので、いちメンバーである自分には適用しづらい内容も多かったですが、そういう視点も持ちながら働く/働かないではわりと違うんでは、と思っているのでもちょっと視野広げてやっていきたいと感じられました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2020年3月 振り返り'
description: ''
publishDate: '03/31/2020 09:49:30'
---

[CONTENTS-START]
<h1>結果</h1>

<h2>ブログ</h2>

<p><strong>目標：月 8 回（週2回）更新</strong><br />
<strong>結果：月 15 回 更新</strong></p>

<h2>読書</h2>

<p><strong>目標：月 1 冊</strong><br />
<strong>結果：月 2 冊</strong></p>

<h1>反省点など</h1>

<p>ブログ前半は調子良かったが後半失速気味になってしまった。<br />
仕事の業務でフロントエンドできているのが収穫です。</p>

<h1>来月に向けて</h1>

<p>新たにコレを勉強する、っていうのが今のところない..<br />
Vue or Nuxt もうちょっと勉強でもするか、この機会にAWSのSAP勉強するか悩み中です。</p>

<p>3月からフルでリモートでした。<br />
当初の慣れのなさからは落ち着いてできるようになったので、もう一度もとに戻すところは戻してやっていきたい。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Netlify で $ gulp build がビルドエラーになってしまう'
description: ''
publishDate: '03/18/2020 20:01:28'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200318200015.jpg" alt="f:id:jotaki:20200318200015j:plain" title="f:id:jotaki:20200318200015j:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>いつもどおりNetlifyでGulp使ったプロジェクトをデプロイしようとしたらエラーが出てちょっと詰まったのでメモ。</p>

<p>管理画面側でDeploy Settingsからもビルドコマンドなど設定してましたがログに</p>

<pre class="code" data-lang="" data-unlink>Error running command: Build script returned non-zero exit code: 127</pre>


<p>みたいに出て、ググってみるとビルドコマンドがないよ的な内容らしい。  <br />
ただローカルでは <code>$ gulp build</code> でうまくいってるのでイメージのバージョンとかかなと思いつつ公式見てみると、</p>

<p><code>Eleventy starter with serverless functions</code> というのがあり、<br />
<a href="https://templates.netlify.com/template/eleventy-starter-with-functions/">https://templates.netlify.com/template/eleventy-starter-with-functions/</a></p>

<p>リポジトリ内に <code>netlify.toml</code> てのを見つけました。<br />
<a href="https://github.com/philhawksworth/eleventyone">https://github.com/philhawksworth/eleventyone</a></p>

<p>この <code>netlify.toml</code> は設定ファイルをコードベースで管理できるそうなので、</p>

<p>netlify.toml の中身</p>

<pre class="code toml" data-lang="toml" data-unlink>[build]
  command = &#34;gulp build&#34;
  publish = &#34;dist&#34;</pre>


<p>とりあえずこれだけ書いてルート階層に置いてプッシュしてみました。<br />
結果、うまくいった。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200318200027.png" alt="f:id:jotaki:20200318200027p:plain" title="f:id:jotaki:20200318200027p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>厳密な原因分からずですが、とりあえずGulp使って自動デプロイまでの調査結果でした。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】ユーザビリティエンジニアリング(第2版)'
description: ''
publishDate: '03/17/2020 13:10:50'
---

[CONTENTS-START]
<p><a href="https://jtk.hatenablog.com/entry/2020/01/10/094052">前回</a>、<a href="https://jtk.hatenablog.com/entry/2019/12/02/084734">前々回</a> に続いてUXの知識をつけるべく ユーザビリティエンジニアリング(第2版) ―ユーザエクスペリエンスのための調査、設計、評価手法― を読みました。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4274214834/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/41CndLD+ijL._SL160_.jpg" class="hatena-asin-detail-image" alt="ユーザビリティエンジニアリング(第2版)―ユーザエクスペリエンスのための調査、設計、評価手法―" title="ユーザビリティエンジニアリング(第2版)―ユーザエクスペリエンスのための調査、設計、評価手法―"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4274214834/hatena-blog-22/">ユーザビリティエンジニアリング(第2版)―ユーザエクスペリエンスのための調査、設計、評価手法―</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%C3%AE%CB%DC%20%C5%B0%CC%E9" class="keyword">樽本 徹也</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2014/02/26</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>目次</h2>

<ul>
<li>Chapter1 ユーザ中心設計概論</li>
<li>Chapter2 インタビュー法</li>
<li>Chapter3 インタビューの実践</li>
<li>Chapter4 データ分析法</li>
<li>Chapter5 発想法</li>
<li>Chapter6 プロトタイプ</li>
<li>Chapter7 ユーザビリティ評価法</li>
<li>Chapter8 ユーザテスト</li>
<li>Chapter9 ユーザテストの準備</li>
<li>Chapter10 ユーザテストの実施</li>
<li>Chapter11 分析と再設計</li>
<li>Chapter12 ユーザ中心設計活動</li>
</ul>


<h2>概要・ポイント</h2>

<ul>
<li>イントロダクション（1章）</li>
<li>調査（2章〜4章）</li>
<li>設計（5章〜6章）</li>
<li>評価（7章〜11章）</li>
<li>エンディング（12章）</li>
</ul>


<p>の大区分の中で、優れたUXを実現するためのユーザ中心設計（人間中心設計）プロセスや手法について解説されています。<br />
Webやスマホアプリのような限られた端末に限らず、組込みシステム等でも活用できるような内容になっています。</p>

<h3>ポイント</h3>

<h4>ユーザビリティとは</h4>

<p>前提として、「ユーザビリティ = 使いやすさ」ではない。<br />
「ユーザビリティに問題がある = 使えない」という意味でもある。</p>

<blockquote><p>国際規格ISO9241では、ユーザビリティを「特定のコンテキストに置いて、特定のユーザによって、ある製品が、特定の目標を達成するために用いられる際の、効果、効率、ユーザの満足度合い」と定義しています。</p></blockquote>

<ul>
<li>効果は、ユーザが目標を達成できる</li>
<li>効率は、なるべき最短経路で目標を達成できる</li>
<li>満足度とは、ユーザに不愉快な思いをさせない</li>
</ul>


<p>これら3つをあらゆるコンテキスト（前後関係や状況）において阻害しないことが重要。</p>

<h4>ユーザーエクスペリエンス</h4>

<blockquote><p>仮にユーザビリティが満点であっても、その製品への評価は中程度にとどまる</p></blockquote>

<ul>
<li>ユーザの「非常に満足」という評価を得るためには、ユーザビリティを超えたレベルを目指さなければならない</li>
<li>代表例として「スターバックス」「東京ディズニーランド」「iPhone」</li>
<li>ユーザーエクスペリエンスの要素 表層/骨格/構造/要件/戦略（<a href="https://www.creativevillage.ne.jp/30892">ギャレットのユーザーエクスペリエンスの要素</a>）</li>
<li>製品の開発が終わってから "上" にかぶせるものではない</li>
</ul>


<h4>ユーザ中心設計</h4>

<p>優れたUXを実現するために、ユーザ中心設計（UCD: User Centered Design）、もしくは人間中心設計（HCD: Human Centered Design）を用いて、技術優先の考えや勝手な思い込みを排除して、常にユーザの視点に立った製品開発が行える。</p>

<p>骨格となるプロセスを反復することによってUXの完成度を上げていく。（評価と改善を繰り返すのが重要）</p>

<blockquote><ol>
<li>調査：ユーザの利用状況を把握する。</li>
<li>分析：利用状況からユーザニーズを把握する。</li>
<li>設計：ユーザニーズを満たすような解決案を作る。</li>
<li>評価：解決案を評価する。</li>
<li>改善：評価結果をフィードバックして、解決案を改善する。</li>
<li>反復：評価と改善を繰り返す。</li>
</ol>
</blockquote>

<h4>ユーザの声</h4>

<p>「ユーザの声に応えればユーザは満足する」という前提は間違いで、鵜呑みにせず暗黙的な要求まで満たす必要性がある。例：医者<br />
アンケート、グループインタビュー（グルイン）のメリット、デメリット</p>

<h4>コンテクスチュアル・インクワイアリー</h4>

<blockquote><p>インタビューアを弟子、ユーザを師匠と見立てて、師匠の体験を弟子に "継承" します。</p></blockquote>

<p>コンテクスチュアル・インクワイアリーという手法。</p>

<ul>
<li>心得 教えを乞う → 根掘り葉掘り → 確認する → フォーカス移動 の手順を繰り返す</li>
<li>師匠は気難しい / 話を要約する / 例外には触れない</li>
<li>良い弟子と悪い弟子 / 用意する質問は1つだけで、2つ目以降は質問を1つ目の会話から見つける</li>
<li>リクルートやインタビュー準備</li>
</ul>


<h4>質的データ分析</h4>

<p>インタビューや観察で得られる情報は「質的データ」<br />
加減乗除のような演算をしない、編集（切り貼り）できる、KJ法での分析が可能。</p>

<h4>ペルソナ</h4>

<blockquote><p>決して "架空" のユーザではない</p></blockquote>

<p>事実に基づいたフィクションを目指す<br />
プライマリーペルソナ、セカンダリーペルソナを設けプライマリーペルソナの要求を完全に満たすことを目的にプロジェクトを進める。</p>

<h4>ブレインストーミング</h4>

<blockquote><ol>
<li>批判厳禁</li>
<li>自由奔放</li>
<li>量より質</li>
<li>便乗歓迎</li>
<li>視覚化</li>
<li>脱線禁止</li>
<li>1度に1人</li>
</ol>
</blockquote>

<p>・Yes And 話法</p>

<blockquote><p>何を言われても、まず「イエス」と肯定した後に、そこに「それに加えて」「では次に」と自分の意見を追加しながら会話を進めます。</p></blockquote>

<p>KJ法、ポジショニングマップ、ドット投票などで結論の収束を行なう。</p>

<h4>キャンバス</h4>

<p>ビジネスモデルキャンバス、それを元に新サービスなどゼロから発想するためのリーンキャンバスがある。<br />
顧客・課題・ソリューションが解決しても、コスト・収益が成り立たないなどなりがち。説得力のある内容でキャンバスを埋めることが大事。</p>

<h4>プロトタイプ</h4>

<p>制作者が作るために作ったものではなく、ユーザに使ってもらうために作るため「試作品」というよりも「試用品」。<br />
ローファイとハイファイ。Tプロトタイプ、オズの魔法使い。</p>

<blockquote><p>プロトタイプとは、全体を大雑把に作ることではなく、必要最小限に絞って作ること。</p></blockquote>

<p>ペーパープロトタイプ、パワポの使用も場面により有益。<br />
階層構造の設計にはカードソートが有効で、クローズド（見出しあり）、オープン（見出しなし）がある。</p>

<h4>評価</h4>

<blockquote><p>評価は目的に依って『統括的評価』と『形成的評価』に大別できます。</p>

<p>統括的評価とは、学習成果の総合的な度合いを "測定" することを目的とした評価です。<br />
形成的評価とは、小さい学習ごとに、どれくらい理解できているか、理解するためには何をしなければならないかをフィードバックするための評価です。</p></blockquote>

<p>具体例としてTOEICは典型的な統括的評価。英会話に通って発音矯正したり、文章添削するような継続性のあるものは形成的評価。</p>

<p>ユーザビリティ評価も2つに区分できる。<br />
統括的評価の代表は「パフォーマンス測定」（タスク達成率、達成時間など）<br />
形成的評価は『思考発話法』を使ったテスト。</p>

<blockquote><p>原則として、統括的評価は設計プロセスの "前後" で用い、形成的評価は設計プロセスの "途中で繰り返し" 用います。<br />
もう一つ、忘れてはいけない重大な原則があります。それは、「統括的評価しか行わないのならば、それは全く無駄な投資である」ということです。</p></blockquote>

<h4>ヒューリスティック評価</h4>

<blockquote><p>ユーザビリティ評価のための分析的手法の総称を『ユーザビリティ・インスペクション』といいます。</p></blockquote>

<p>これは評価者自らの知識や経験に基づいて行なう評価だが、客観性を持たすたせるために様々なガイドラインが考案されてきた。</p>

<p>そのなかでヤコブ・ニールセンがユーザビリティ問題を分析して、原則を抽出したガイドラインを『10 ヒューリスティックス（10 heuristics）』という。ヒューリスティックスとは『経験則』という意味。</p>

<blockquote><p>『ヒューリスティック評価』とは、この10ヒューリスティックスを根拠として、評価対象の製品が犯している "ルール違反" を探索するという手法です。</p></blockquote>

<p>参考： <a href="https://website-usability.info/2009/09/entry_090908.html">Jacob Nielsen の「ユーザビリティに関する10のヒューリスティクス (問題解決に役立つ知見) / Ten Usability Heuristics」 — Website Usability Info</a></p>

<p>実施手順として、評価者は</p>

<ul>
<li>複数の評価者で行なうこと（3人以上）</li>
<li>適任はユーザビリティエンジニアやユーザーインターフェースデザイナ</li>
<li>インターフェース設計者本人は除外</li>
</ul>


<p>とし、合議制ではなく単独で評価、発見した問題点をどんどんリストアップしていく。その後評価者ミーティングでディスカッション、レポートに取りまとめる、という流れ。<br />
ただ検出過多やコストの問題などがあり、ヒューリスティック評価は意外と贅沢な方法である。</p>

<h4>認知的ウォークスルー</h4>

<p>「人間の認知モデル」に基づいて評価を行う手法。<br />
ユーザの技能や経験/タスク/操作手順/画面を定義し、そのなかで4つの質問（目標設定/探査/選択/評価）の探査学習ステップの内容を分析していく。</p>

<blockquote><p>認知的ウォークスルーではユーザインタフェース上の問題点を詳細に検討するだけでなく、ユーザのとりうる行動を推測することで新たな要求開発にもつながります。</p></blockquote>

<p>設計の初期段階で用いると有効な手法で、設計者自らがデザインを客観的に再検討するために用いることも可能。</p>

<h4>ユーザテスト</h4>

<p>ユーザが参加した評価手法の総称で、</p>

<blockquote><ol>
<li>ユーザにタスク（作業）を実行するように依頼する。</li>
<li>ユーザがタスクを実行する過程を観察、記録する。</li>
</ol>
</blockquote>

<p>がユーザテストの基本。そのなかで、</p>

<ul>
<li>思考発話法と回顧法（形成的評価/質の評価）</li>
<li>パフォーマンス測定（総括的評価/量の評価）</li>
</ul>


<p>など代表的なテスト手法がある。</p>

<p>・思考発話法<br />
考えていることを話しながら操作してもらう。</p>

<p>・回顧法<br />
操作が終わってから質問に答えてもらう。<br />
ただ複雑な状況は回顧が難しいなどの短所もある。</p>

<p>・パフォーマンス測定<br />
数値データ（タスク達成率や達成時間）が必要な場合、量的なデータ収集を目的とした代表的手法が「パフォーマンス測定」<br />
ユーザビリティ3要素（効果・効率・満足度）に関係した量的データを計測する。<br />
効果 → タスク達成率<br />
効率 → タスク達成時間<br />
満足度 → 主観的評価</p>

<p>主観的評価はフレームワーク（質問セット）を使うのが一般的。日本語版はWUSがメジャー<br />
<a href="https://u-site.jp/usability/evaluation/web-usability-scale/">https://u-site.jp/usability/evaluation/web-usability-scale/</a></p>

<blockquote><p>原則としてプロジェクトの前後で実施して、目標値を設定したり、目標の達成度や改善度合いを把握したりすることが目的です。<br />
短期間にテストと改善を繰り返しながら、徐々に製品の完成度を上げていく反復デザインに適した手法ではありません。</p></blockquote>

<p>ユーザテストは「反証」を目的としている。<br />
そもそも問題点を見つけようとしているテストなので、予め問題が発生している製品などは対象にできない。（事前にヒューリスティック評価を行なうなどが必要）<br />
被験者としては5名x3回のテストをするのが理想。（15人x1回よりも小規模なテストを繰り返し実施したほうが利用品質が向上する）</p>

<p>その他ユーザテストの準備としてスケジュールの勘所 / リクルートやリソースに関して / スクリーナ（該当者選別のための判定質問） / テスト設計についてなど。</p>

<h4>ユーザ中心設計活動</h4>

<p>・原始期<br />
・黎明期<br />
・揺籃期（前期/後期）<br />
・躍動期<br />
・拡充期<br />
・完熟期</p>

<p>成熟度モデルとして6段階あり、例えば原始期は</p>

<blockquote><p>ユーザエクスペリエンスは開発者やデザイナの個人的技量に委ねられている。標準的なUX/UIガイドラインなどは参照しているが、実際のユーザと対話する活動は行っていない。<br />
UX/UCDの専門家はプロジェクトに参加していない。</p></blockquote>

<p>という筆者が考えるモデルがある。<br />
飛び級は無理なので、まずユーザテストからやってみるのが良い。ただ黎明期レベルでも成果は上がりづらい。</p>

<p>やりやすいのは、「既存製品の改善プロジェクト」。<br />
リリース直前ではなく、改善プロジェクト開始前のテストからはじめる。プロトタイプを作って事前に有効性を検証できる。</p>

<h4>調査と評価</h4>

<p>ウェブサイトのユーザビリティ調査でも様々な手法を考える必要がある。</p>

<p>・既存のウェブサイトの問題点の把握とその改善策<br />
→ ユーザテスト</p>

<p>・リニューアルに向けたユーザニーズの把握<br />
→ インタビューなどの質的調査</p>

<p>・競合サイトの比較<br />
→ パフォーマンス測定などの量的なアプローチ</p>

<p>またそれらは同時に行なうものではなく、設計プロセスのステップに応じて行なう必要がある。</p>

<p>①ユーザを "調査" して真のニーズを把握<br />
②そのニーズを満たすような製品を設計<br />
③その製品を "評価" して改善する</p>

<h2>良かった点</h2>

<ul>
<li>前回読んだ虎の巻よりも各手順や手法が網羅されている感と内容が詳細なので、深い知識がつく（気がした）。</li>
<li>参考文献とかも王道（っぽい）ものを参照しているのでなんだか内容に信頼感があるように感じた。</li>
<li>UXの向上を目的とした色々な手法が解説されているが、単にビジネス上でも役立つようなコミュニケーション術、アイデア出し手法などを知ることができた。</li>
</ul>


<h2>惜しかった点</h2>

<ul>
<li>目次を見れば分かるには分かりますが、本の最初に 調査〜設計〜評価 のおおまかな流れと概要について触れたほうが頭に入っていきやすい気がします。</li>
</ul>


<p>そこの知識ある前提で書かれている本ではあるかもしれないのですが。</p>

<h2>まとめ</h2>

<p>最後の「調査」と「評価」の使い分けにも書いてあったのですが、これまで読んだ本は触りの触りで、この本は深いところまで解説してあるなあという感想です。<br />
1つ1つの手法についてもそうですが、組織の成熟度モデルについても実態に合っているような気がするので参考になりました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'S3へのFTPクライアント接続にIP制限を掛ける'
description: ''
publishDate: '03/05/2020 17:53:14'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305110857.jpg" alt="f:id:jotaki:20200305110857j:plain" title="f:id:jotaki:20200305110857j:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>htmlを静的ホスティングしているS3バケットへのブラウザアクセスはバケットポリシーでIP制限が可能。<br />
だけど、FTPクライアントでのS3接続はIAMユーザーのアクセスキー&amp;シークレットを使うので、そのユーザーの権限で設定してあげる必要があります。<br />
ほぼ初めてちょっとテクいことをしてみたので（全然難しくないんだろうけど）メモしておきます。</p>

<h2>IAMユーザーの作成</h2>

<p>コンソールでIAMから <code>S3_ftp-client-user</code> というユーザー名でユーザー作成。<br />
アクセスキー、シークレットを取得する必要があるので「プログラムによるアクセス」にチェックを付ける。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305110321.png" alt="f:id:jotaki:20200305110321p:plain" title="f:id:jotaki:20200305110321p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>とりあえずこの段階でポリシーはアタッチせず、タグは適当なものを付ける。<br />
アクセスキーとシークレットはFTPクライアントでの接続で使うので控えておく。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305110334.png" alt="f:id:jotaki:20200305110334p:plain" title="f:id:jotaki:20200305110334p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>IAMポリシーの作成</h2>

<p>アクセス権限として下記を与える。<br />
<code>"Action": "s3:*",</code> は絞る必要があるときは絞って、 <code>"aws:SourceIp": []</code> の中に許可するIPアドレスを追加していく。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305110345.png" alt="f:id:jotaki:20200305110345p:plain" title="f:id:jotaki:20200305110345p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
    &quot;<span class="synStatement">Version</span>&quot;: &quot;<span class="synConstant">2012-10-17</span>&quot;,
    &quot;<span class="synStatement">Statement</span>&quot;: <span class="synSpecial">[</span>
        <span class="synSpecial">{</span>
            &quot;<span class="synStatement">Effect</span>&quot;: &quot;<span class="synConstant">Allow</span>&quot;,
            &quot;<span class="synStatement">Action</span>&quot;: &quot;<span class="synConstant">s3:*</span>&quot;,
            &quot;<span class="synStatement">Resource</span>&quot;: &quot;<span class="synConstant">*</span>&quot;,
            &quot;<span class="synStatement">Condition</span>&quot;: <span class="synSpecial">{</span>
                &quot;<span class="synStatement">IpAddress</span>&quot;: <span class="synSpecial">{</span>
                    &quot;<span class="synStatement">aws:SourceIp</span>&quot;: <span class="synSpecial">[</span>
                        &quot;<span class="synConstant">ここにIPアドレス01</span>&quot;,
                        &quot;<span class="synConstant">ここにIPアドレス02</span>&quot;,
                        &quot;<span class="synConstant">ここにIPアドレス03</span>&quot;
                    <span class="synSpecial">]</span>
                <span class="synSpecial">}</span>
            <span class="synSpecial">}</span>
        <span class="synSpecial">}</span>
    <span class="synSpecial">]</span>
<span class="synSpecial">}</span>
</pre>


<p><code>S3FullAccessOnlyPrivateNetwork</code> というポリシーを作成。（ <code>Private</code> ではなくネットワーク名がよい ）</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305110358.png" alt="f:id:jotaki:20200305110358p:plain" title="f:id:jotaki:20200305110358p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>IAMポリシーのアタッチ</h2>

<p>最後に <code>S3_ftp-client-user</code> ユーザーに <code>S3FullAccessOnlyPrivateNetwork</code> のポリシーをアタッチしてあげる。<br />
「アクセス権限の追加」を押して</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305110419.png" alt="f:id:jotaki:20200305110419p:plain" title="f:id:jotaki:20200305110419p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>「既存ポリシーのアタッチ」から先ほど作ったポリシーをアタッチ</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305110436.png" alt="f:id:jotaki:20200305110436p:plain" title="f:id:jotaki:20200305110436p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>動作確認</h2>

<p>Transmit を使用して登録IPアドレスからの接続確認。</p>

<p>アクセスキー&amp;シークレットを入力</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305110449.png" alt="f:id:jotaki:20200305110449p:plain" title="f:id:jotaki:20200305110449p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>問題なくリストが表示される。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305110501.png" alt="f:id:jotaki:20200305110501p:plain" title="f:id:jotaki:20200305110501p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>登録していないIPからだと Access Denied となったのでOK</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305110513.png" alt="f:id:jotaki:20200305110513p:plain" title="f:id:jotaki:20200305110513p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>まとめ</h2>

<p>今回管理ポリシーを使ったのですが、あまり運用上推奨されるプラクティスではないと思うのでもう少しいいやり方がありそうです。<br />
んまー管理ポリシー使うとしても、登録するIPアドレスはSystems Managerのパラメータストア使うとかがいいのかなと思ったり..実際にいじってみるといろいろ分かっていないなーという感じがしました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'microCMS をさわってみる その9'
description: ''
publishDate: '03/05/2020 17:43:45'
---

[CONTENTS-START]
<p>日本製のHeadless CMS、microCMSをさわってみる。その9</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200303155515.jpg" alt="f:id:jotaki:20200303155515j:plain" title="f:id:jotaki:20200303155515j:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/micro-cms-ramen">https://github.com/yuheijotaki/micro-cms-ramen</a><br />
Netlify: <a href="https://ramen.yuheijotaki.dev/">https://ramen.yuheijotaki.dev/</a></p>

<h2>ラーメンコンテンツの描画</h2>

<p>前回作ったコンテンツを描画していきます。<br />
curlは <code>python -mjson.tool</code> をつけると見やすく出してくれます。</p>

<pre class="code bash" data-lang="bash" data-unlink>curl &#34;https://jtk.microcms.io/api/v1/demo&#34; -H &#34;X-API-KEY: ここにAPIキー&#34; | python -mjson.tool</pre>


<p>JSONの中身は下記のような感じ</p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
    &quot;<span class="synStatement">contents</span>&quot;: <span class="synSpecial">[</span>
        <span class="synSpecial">{</span>
            &quot;<span class="synStatement">category</span>&quot;: <span class="synSpecial">[</span>
                <span class="synSpecial">{</span>
                    &quot;<span class="synStatement">category</span>&quot;: &quot;<span class="synSpecial">\u307f\u305d</span>&quot;,
                    &quot;<span class="synStatement">createdAt</span>&quot;: &quot;<span class="synConstant">2020-03-05T07:07:17.724Z</span>&quot;,
                    &quot;<span class="synStatement">id</span>&quot;: &quot;<span class="synConstant">5__2y6A9e</span>&quot;,
                    &quot;<span class="synStatement">updatedAt</span>&quot;: &quot;<span class="synConstant">2020-03-05T07:07:17.724Z</span>&quot;
                <span class="synSpecial">}</span>,
                <span class="synSpecial">{</span>
                    &quot;<span class="synStatement">category</span>&quot;: &quot;<span class="synSpecial">\u30e9\u30fc\u30e1\u30f3</span>&quot;,
                    &quot;<span class="synStatement">createdAt</span>&quot;: &quot;<span class="synConstant">2020-03-05T07:05:54.951Z</span>&quot;,
                    &quot;<span class="synStatement">id</span>&quot;: &quot;<span class="synConstant">pM7WYjpvf</span>&quot;,
                    &quot;<span class="synStatement">updatedAt</span>&quot;: &quot;<span class="synConstant">2020-03-05T07:07:24.608Z</span>&quot;
                <span class="synSpecial">}</span>
            <span class="synSpecial">]</span>,
            &quot;<span class="synStatement">content</span>&quot;: &quot;<span class="synConstant">&lt;h3 id=</span><span class="synSpecial">\&quot;</span><span class="synConstant">hjzz2WrKPk3</span><span class="synSpecial">\&quot;</span><span class="synConstant">&gt;</span><span class="synSpecial">\u3010\u6c60\u888b</span><span class="synConstant"> </span><span class="synSpecial">\u5473\u564c\u30e9\u30fc\u30e1\u30f3\u3011</span><span class="synConstant">&lt;/h3&gt;&lt;p&gt;</span><span class="synSpecial">\u30b7\u30c3\u30ab\u30ea\u3068\u3057\u305f\u6b6f\u5fdc\u3048\u306e\u9eba\u306f\u6fc3\u539a\u5473\u564c\u30b9\u30fc\u30d7\u3068\u76f8\u6027\u629c\u7fa4\u3067\u3059\u3002</span><span class="synConstant">&lt;/p&gt;</span>&quot;,
            &quot;<span class="synStatement">createdAt</span>&quot;: &quot;<span class="synConstant">2020-03-03T06:37:47.405Z</span>&quot;,
            &quot;<span class="synStatement">id</span>&quot;: &quot;<span class="synConstant">hanada</span>&quot;,
            &quot;<span class="synStatement">image</span>&quot;: <span class="synSpecial">{</span>
                &quot;<span class="synStatement">url</span>&quot;: &quot;<span class="synConstant">https://images.microcms-assets.io/protected/ap-northeast-1:ab97ca46-b946-408b-917a-fae46b705181/service/jtk/media/FireShot%20Capture%20062%20-%20%E9%BA%BA%E5%87%A6%20%E8%8A%B1%E7%94%B0%20%E6%B1%A0%E8%A2%8B%E5%BA%97%20-%20%E6%B1%A0%E8%A2%8B_%E3%83%A9%E3%83%BC%E3%83%A1%E3%83%B3%20%5B%E9%A3%9F%E3%81%B8%E3%82%99%E3%83%AD%E3%82%AF%E3%82%99%5D%20-%20tabelog.com.png</span>&quot;
            <span class="synSpecial">}</span>,
            &quot;<span class="synStatement">name</span>&quot;: &quot;<span class="synSpecial">\u9eba\u51e6</span><span class="synConstant"> </span><span class="synSpecial">\u82b1\u7530</span><span class="synConstant"> </span><span class="synSpecial">\u6c60\u888b\u5e97</span>&quot;,
            &quot;<span class="synStatement">updatedAt</span>&quot;: &quot;<span class="synConstant">2020-03-05T07:12:51.182Z</span>&quot;,
            &quot;<span class="synStatement">url</span>&quot;: &quot;<span class="synConstant">https://tabelog.com/tokyo/A1305/A130501/13109890/</span>&quot;
        <span class="synSpecial">}</span>
    <span class="synSpecial">]</span>,
    &quot;<span class="synStatement">limit</span>&quot;: <span class="synConstant">10</span>,
    &quot;<span class="synStatement">offset</span>&quot;: <span class="synConstant">0</span>,
    &quot;<span class="synStatement">totalCount</span>&quot;: <span class="synConstant">1</span>
<span class="synSpecial">}</span>
</pre>


<p>詳細ページのテンプレート、出力部分だけとこんな感じになります。<br />
JSONの形通りにVueで出力すればOKですね。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template lang=<span class="synConstant">&quot;pug&quot;</span>&gt;
  div
    h1 <span class="synIdentifier">{{</span> post.name <span class="synIdentifier">}}</span>
    div(
      v-html=<span class="synConstant">&quot;post.content&quot;</span>
    )
    h2 カテゴリー
    ul
      li(v-<span class="synStatement">for</span>=<span class="synConstant">&quot;item in post.category&quot;</span>) <span class="synIdentifier">{{</span>item.category<span class="synIdentifier">}}</span>
    h2 食べログURL
    p
      a(:href=<span class="synConstant">&quot;post.url&quot;</span> target=<span class="synConstant">&quot;_blank&quot;</span>) <span class="synIdentifier">{{</span> post.url <span class="synIdentifier">}}</span>
    p
      img(:src=<span class="synConstant">&quot;post.image.url&quot;</span>)
&lt;/template&gt;
</pre>


<p>フロント（見た目）はこんなかんじになりました。</p>

<p>一覧</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305174128.png" alt="f:id:jotaki:20200305174128p:plain" title="f:id:jotaki:20200305174128p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>詳細</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305174143.png" alt="f:id:jotaki:20200305174143p:plain" title="f:id:jotaki:20200305174143p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>まとめ</h2>

<p>一通り試したいことの最低ラインができたので一旦完了にします。<br />
本来は、microCMSのその他機能</p>

<ul>
<li>下書きプレビュー</li>
<li>ステージングなどの環境分け</li>
</ul>


<p>などもできれば実案件で使うときに役立てるかもしれないのですが、十分に検証はできたかと思います。</p>

<p>実案件でmicroCMS使う際の懸念点としていまだに残っているのは↑の2点ができるかということと、</p>

<ul>
<li>プランや容量がどこまでの規模の案件で使えるかの確認</li>
<li>コンテンツの形式が限られているのでその要件に収まるか</li>
<li>GitHub + Netlify 以外のサービスと組み合わせる時の環境構築どうするか</li>
<li>API（microCMS）側のサーバーどこまで安定しているのか</li>
</ul>


<p>などの検証や調査みたいなことが必要だと思っています。</p>

<p>ただ静的htmlで作っていた小規模のサイトにちょこっとお知らせエリアとか制作実績を加えたいみたいな要件に関してはすごい使えるなと思います。<br />
それこそHeadless CMSの特徴なのでWPごと入れる手間に比べれば、かなりエンジニアにとってもいい流れにあるなあということを体感できました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'microCMS をさわってみる その8'
description: ''
publishDate: '03/05/2020 16:22:09'
---

[CONTENTS-START]
<p>日本製のHeadless CMS、microCMSをさわってみる。その8</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200303155515.jpg" alt="f:id:jotaki:20200303155515j:plain" title="f:id:jotaki:20200303155515j:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/micro-cms-ramen">https://github.com/yuheijotaki/micro-cms-ramen</a><br />
Netlify: <a href="https://ramen.yuheijotaki.dev/">https://ramen.yuheijotaki.dev/</a></p>

<h2>サブドメインあてる</h2>

<p><a href="https://jtk.hatenablog.com/entry/2020/02/26/102122">前回</a> と同じ用に設定。<br />
サブドメインつきで <a href="https://ramen.yuheijotaki.dev/">https://ramen.yuheijotaki.dev/</a> としました。</p>

<h2>コンテンツ調整</h2>

<p>せっかくなのでラーメン屋を登録していきます。
写真は持っていないので、食べログの画面キャプチャを貼り付けてリンクを貼ることにします。</p>

<p>カテゴリー機能も付けたいので、APIの新規作成から <code>ramen-category</code> を作成します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305162011.png" alt="f:id:jotaki:20200305162011p:plain" title="f:id:jotaki:20200305162011p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>複数コンテンツの参照元となるのでリスト形式にします。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305162028.png" alt="f:id:jotaki:20200305162028p:plain" title="f:id:jotaki:20200305162028p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>スキーマを設定して作成。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305162046.png" alt="f:id:jotaki:20200305162046p:plain" title="f:id:jotaki:20200305162046p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>カテゴリーをコンテンツとして登録しておきます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305162059.png" alt="f:id:jotaki:20200305162059p:plain" title="f:id:jotaki:20200305162059p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>次に、参照先のAPIにてスキーマ作成します。<br />
「複数コンテンツ参照」を選択。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305162113.png" alt="f:id:jotaki:20200305162113p:plain" title="f:id:jotaki:20200305162113p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>参照したいコンテンツに先ほど作成した <code>ramen-category</code> を選択します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305162127.png" alt="f:id:jotaki:20200305162127p:plain" title="f:id:jotaki:20200305162127p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>参照先のコンテンツも登録しておきます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200305162138.png" alt="f:id:jotaki:20200305162138p:plain" title="f:id:jotaki:20200305162138p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>他にもコンテンツがあったほうがいいですが、一旦一つのみにして次回登録したコンテンツを取得していきます。</p>

<h4>残りやること</h4>

<ul>
<li>コンテンツ調整</li>
<li>かるくスタイリングする</li>
</ul>


<h4>できれば</h4>

<ul>
<li>microCMSのその他機能

<ul>
<li>下書きプレビュー</li>
<li>ステージング</li>
</ul>
</li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'microCMS をさわってみる その7'
description: ''
publishDate: '03/04/2020 16:12:41'
---

[CONTENTS-START]
<p>日本製のHeadless CMS、microCMSをさわってみる。その7</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200303155515.jpg" alt="f:id:jotaki:20200303155515j:plain" title="f:id:jotaki:20200303155515j:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/micro-cms-ramen">https://github.com/yuheijotaki/micro-cms-ramen</a><br />
Netlify: <a href="https://ramen.yuheijotaki.dev/">https://ramen.yuheijotaki.dev/</a></p>

<h2>webhook設定</h2>

<p>microCMSを更新したら自動ビルドが走るようにするのでwebhookの設定を行う。<br />
参考： <a href="https://qiita.com/ohnaka0410/items/c2f6d7c90330c1d97c69#step4-webhook%E3%81%AE%E8%A8%AD%E5%AE%9A">ヘッドレスCMS × Static Site GeneratorでJamstackな爆速表示サイトを作ってみるチュートリアル - Qiita</a> の「Step.4 Webhookの設定」</p>

<h4>ビルドフックの作成</h4>

<p>まず Netlifyの管理画面 => Settings => Build &amp; Deploy => Build hooks にて適当な名前をつけてビルドフックを作成します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200304161126.png" alt="f:id:jotaki:20200304161126p:plain" title="f:id:jotaki:20200304161126p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>ビルドフックの登録</h4>

<p>microCMSの管理画面 => API設定 => Webhook => Netlify にて先ほど作成したフックURLを入力します。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200304161151.png" alt="f:id:jotaki:20200304161151p:plain" title="f:id:jotaki:20200304161151p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>以上で設定完了。</p>

<h4>動作確認</h4>

<p>動作確認としてmicroCMSでコンテンツを登録してみます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200304161205.png" alt="f:id:jotaki:20200304161205p:plain" title="f:id:jotaki:20200304161205p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>Netlifyでビルド状況確認すると「Building」になっている。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200304161215.png" alt="f:id:jotaki:20200304161215p:plain" title="f:id:jotaki:20200304161215p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>ビルドが完了してNetlifyのURLを見ると無事動作の確認ができました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200304161226.png" alt="f:id:jotaki:20200304161226p:plain" title="f:id:jotaki:20200304161226p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>残りやること</h4>

<ul>
<li>コンテンツ調整</li>
<li>かるくスタイリングする</li>
<li>ドメインあてる？</li>
</ul>


<h4>できれば</h4>

<ul>
<li>microCMSのその他機能

<ul>
<li>下書きプレビュー</li>
<li>ステージング</li>
</ul>
</li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'microCMS をさわってみる その6'
description: ''
publishDate: '03/04/2020 14:36:00'
---

[CONTENTS-START]
<p>日本製のHeadless CMS、microCMSをさわってみる。その6</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200303155515.jpg" alt="f:id:jotaki:20200303155515j:plain" title="f:id:jotaki:20200303155515j:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/micro-cms-ramen">https://github.com/yuheijotaki/micro-cms-ramen</a><br />
Netlify: <a href="https://ramen.yuheijotaki.dev/">https://ramen.yuheijotaki.dev/</a></p>

<h2>generate設定</h2>

<p>Gitにプッシュした際に、APIから記事一覧情報取得して詳細ページを生成する必要があるので nuxt.config.js に設定を書く。<br />
参考： <a href="https://microcms.io/blog/create-nuxt-microcms-recruit/">Nuxt.jsとmicroCMSで採用ページを作成してみよう！</a></p>

<p>nuxt.config.js に追記</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// generate時にaxiosを使って詳細ページを生成</span>
<span class="synStatement">const</span> axios = require(<span class="synConstant">'axios'</span>)

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  <span class="synComment">// ...</span>
  <span class="synComment">// Netlifyへ詳細ページの自動デプロイ</span>
  generate: <span class="synIdentifier">{</span>
    routes() <span class="synIdentifier">{</span>
      <span class="synStatement">const</span> demo = axios
        .get(<span class="synConstant">'https://jtk.microcms.io/api/v1/demo'</span>, <span class="synIdentifier">{</span>
          headers: <span class="synIdentifier">{</span> <span class="synConstant">'X-API-KEY'</span>: process.env.API_KEY <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>)
        .then(res =&gt; <span class="synIdentifier">{</span>
          <span class="synStatement">return</span> res.data.contents.map(post =&gt; <span class="synIdentifier">{</span>
            <span class="synStatement">return</span> <span class="synConstant">'/posts/'</span> + post.id
          <span class="synIdentifier">}</span>)
        <span class="synIdentifier">}</span>)
      <span class="synStatement">return</span> Promise.all(<span class="synIdentifier">[</span>demo<span class="synIdentifier">]</span>).then(values =&gt; <span class="synIdentifier">{</span>
        <span class="synStatement">return</span> values.join().split(<span class="synConstant">','</span>)
      <span class="synIdentifier">}</span>)
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>環境変数はビルド実行されるNetlify側へ設定する必要があります。<br />
Settings => Build &amp; deploy => Environment</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200304143514.png" alt="f:id:jotaki:20200304143514p:plain" title="f:id:jotaki:20200304143514p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>これで設定完了。<br />
設定した nuxt.config.js をmasterにプッシュして動作確認してみます。</p>

<p>Netlifyのサイト管理画面 => Deploys で Building が1分以内には始まるのでクリック</p>

<p>Deploy log に</p>

<pre class="code" data-lang="" data-unlink>2:12:03 PM: ✔ Generated /posts/demo02
2:12:03 PM: ✔ Generated /posts/demo01
2:12:03 PM: ✔ Generated /posts/9itQJnwUs</pre>


<p>があるので詳細ページの生成はうまくいっているよう。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200304143534.png" alt="f:id:jotaki:20200304143534p:plain" title="f:id:jotaki:20200304143534p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>最後の <code>Finished processing build request in XXXs</code> を確認したらサイトをみにいく。<br />
一覧ページのリンクをクリックして各詳細ページのコンテンツが描画されていれば成功。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200304143555.png" alt="f:id:jotaki:20200304143555p:plain" title="f:id:jotaki:20200304143555p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>残りやること</p>

<ul>
<li>webhook設定（microCMSを更新したら自動ビルドが走るようにする）</li>
<li>かるくスタイリングする</li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'microCMS をさわってみる その5'
description: ''
publishDate: '03/04/2020 14:21:38'
---

[CONTENTS-START]
<p>日本製のHeadless CMS、microCMSをさわってみる。その5</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200303155515.jpg" alt="f:id:jotaki:20200303155515j:plain" title="f:id:jotaki:20200303155515j:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/micro-cms-ramen">https://github.com/yuheijotaki/micro-cms-ramen</a><br />
Netlify: <a href="https://ramen.yuheijotaki.dev/">https://ramen.yuheijotaki.dev/</a></p>

<h2>API連携（詳細ページ）</h2>

<p>詳細ページを作成する。<br />
Nuxtでは <code>pages/_id.vue</code> とすると <code>pages/[ContentID]/</code> ページへと動的ルーティングできるので _id.vue を作成する。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template lang=<span class="synConstant">&quot;pug&quot;</span>&gt;
  div
    p id: <span class="synIdentifier">{{</span> post.id <span class="synIdentifier">}}</span>
    p title: <span class="synIdentifier">{{</span> post.title <span class="synIdentifier">}}</span>
    div(
      v-html=<span class="synConstant">&quot;post.content&quot;</span>
    )
    p
      nuxt-link(to=<span class="synConstant">&quot;/&quot;</span>) index
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">import</span> axios from <span class="synConstant">'axios'</span>

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  async asyncData( <span class="synIdentifier">{</span> params <span class="synIdentifier">}</span> ) <span class="synIdentifier">{</span>
    <span class="synStatement">const</span> <span class="synIdentifier">{</span> data <span class="synIdentifier">}</span> = await axios.get(
      `$<span class="synIdentifier">{</span>process.env.API_URL<span class="synIdentifier">}</span>/$<span class="synIdentifier">{</span>params.id<span class="synIdentifier">}</span>`,
      <span class="synIdentifier">{</span>
        headers: <span class="synIdentifier">{</span> <span class="synConstant">'X-API-KEY'</span>: process.env.API_KEY <span class="synIdentifier">}</span>
      <span class="synIdentifier">}</span>
    )
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      post: data
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
&lt;/script&gt;
</pre>


<p>一覧側のコンポーネント Post.vue には <code>&lt;nuxt-link&gt;</code> をつけてあげる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template lang=<span class="synConstant">&quot;pug&quot;</span>&gt;
  li
    nuxt-link(:to=<span class="synConstant">&quot;`/posts/${post.id}/`&quot;</span>)
      p id: <span class="synIdentifier">{{</span> post.id <span class="synIdentifier">}}</span>
      p title: <span class="synIdentifier">{{</span> post.title <span class="synIdentifier">}}</span>
&lt;/template&gt;
</pre>


<p>できあがった画面は、一覧</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200304142212.png" alt="f:id:jotaki:20200304142212p:plain" title="f:id:jotaki:20200304142212p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>詳細</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200304142220.png" alt="f:id:jotaki:20200304142220p:plain" title="f:id:jotaki:20200304142220p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>残りやること</p>

<ul>
<li>generate設定</li>
<li>webhook設定（microCMSを更新したら自動ビルドが走るようにする）</li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'microCMS をさわってみる その4'
description: ''
publishDate: '03/04/2020 13:04:26'
---

[CONTENTS-START]
<p>日本製のHeadless CMS、microCMSをさわってみる。その4</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200303155515.jpg" alt="f:id:jotaki:20200303155515j:plain" title="f:id:jotaki:20200303155515j:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/micro-cms-ramen">https://github.com/yuheijotaki/micro-cms-ramen</a><br />
Netlify: <a href="https://ramen.yuheijotaki.dev/">https://ramen.yuheijotaki.dev/</a></p>

<h2>API連携（一覧ページ）</h2>

<h4>.env設定</h4>

<p>まず.envにAPIキーなど環境設定を行います。<br />
下記の記事通りでいけます。<br />
<a href="https://microcms.io/blog/create-nuxt-microcms-recruit/">Nuxt.jsとmicroCMSで採用ページを作成してみよう！</a></p>

<p>nuxt.config.js</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>require(<span class="synConstant">&quot;dotenv&quot;</span>).config();
<span class="synStatement">const</span> <span class="synIdentifier">{</span> API_KEY, API_URL <span class="synIdentifier">}</span> = process.env;

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  <span class="synComment">// ...</span>
  env: <span class="synIdentifier">{</span>
    API_KEY,
    API_URL
  <span class="synIdentifier">}</span>
  <span class="synComment">// ...</span>
<span class="synIdentifier">}</span>
</pre>


<p>.env<br />
microCMSのAPIキーは「APIリファレンス」から取得したものを貼り付けます。</p>

<pre class="code" data-lang="" data-unlink>API_KEY=APIキー
API_URL=https://jtk.microcms.io/api/v1/demo</pre>


<p>これで各.vueファイルで <code>process.env.API_KEY</code> のように <code>process.env.</code> を前につけて環境設定を読み込めます。</p>

<p>下ごしらえができたら、一覧ページのAPI連携をしてみます。</p>

<ul>
<li>components/Posts.vue （リスト用）</li>
<li>components/Post.vue （アイテム用）</li>
</ul>


<p>の.vueファイル2つ作ります。</p>

<h4>index.vue</h4>

<p>トップページの大元ファイルではPosts（リスト用コンポーネント）を読み込みします</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template lang=<span class="synConstant">&quot;pug&quot;</span>&gt;
  div
    Logo
    Posts
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">import</span> Logo from <span class="synConstant">'~/components/Logo.vue'</span>
<span class="synStatement">import</span> Posts from <span class="synConstant">'~/components/Posts.vue'</span>

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  components: <span class="synIdentifier">{</span>
    Logo,
    Posts
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<h4>components/Posts.vue （リスト用）</h4>

<p>一覧用コンポーネントファイルでは axios 使ってAPIを読み込みします。<br />
また子コンポーネント <code>Post</code> に値を受け渡すので <code>:bind</code> しておきます。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template lang=<span class="synConstant">&quot;pug&quot;</span>&gt;
  ul
    Post(
      v-<span class="synStatement">for</span>=<span class="synConstant">&quot;(post,index) in posts&quot;</span>
      :key=<span class="synConstant">&quot;index&quot;</span>
      :post=<span class="synConstant">&quot;post&quot;</span>
    )
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">import</span> axios from <span class="synConstant">'axios'</span>
<span class="synStatement">import</span> Post from <span class="synConstant">'~/components/Post.vue'</span>

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">'Posts'</span>,
  components: <span class="synIdentifier">{</span>
    Post
  <span class="synIdentifier">}</span>,
  data() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      posts: <span class="synIdentifier">[]</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  mounted :<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
    axios.get(
      process.env.API_URL,
      <span class="synIdentifier">{</span>
        headers: <span class="synIdentifier">{</span> <span class="synConstant">&quot;X-API-KEY&quot;</span>: process.env.API_KEY <span class="synIdentifier">}</span>
      <span class="synIdentifier">}</span>
    )
    .then( response =&gt; <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.posts = response.data.contents
    <span class="synIdentifier">}</span>)
    .<span class="synStatement">catch</span>( error =&gt; <span class="synIdentifier">{</span>
      console.log(error)
    <span class="synIdentifier">}</span>)
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<h4>components/Post.vue （アイテム用）</h4>

<p>アイテム用コンポーネントファイルでは <code>props</code> でデータを受け取って描画します。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template lang=<span class="synConstant">&quot;pug&quot;</span>&gt;
  li
    p id: <span class="synIdentifier">{{</span> post.id <span class="synIdentifier">}}</span>
    p title: <span class="synIdentifier">{{</span> post.title <span class="synIdentifier">}}</span>
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">'Post'</span>,
  props:<span class="synIdentifier">{</span>
    <span class="synConstant">'post'</span>: <span class="synIdentifier">{</span>
      type: <span class="synType">Object</span>,
      <span class="synStatement">default</span>: <span class="synConstant">''</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<p>これで投稿の描画を実装できました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200304130640.png" alt="f:id:jotaki:20200304130640p:plain" title="f:id:jotaki:20200304130640p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>残りやること</p>

<ul>
<li>API連携（詳細ページ）</li>
<li>generate設定</li>
<li>webhook設定（microCMSを更新したら自動ビルドが走るようにする）</li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'microCMS をさわってみる その3'
description: ''
publishDate: '03/03/2020 18:14:36'
---

[CONTENTS-START]
<p>日本製のHeadless CMS、microCMSをさわってみる。その3</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200303155515.jpg" alt="f:id:jotaki:20200303155515j:plain" title="f:id:jotaki:20200303155515j:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/micro-cms-ramen">https://github.com/yuheijotaki/micro-cms-ramen</a><br />
Netlify: <a href="https://ramen.yuheijotaki.dev/">https://ramen.yuheijotaki.dev/</a></p>

<h2>モジュールのインストール</h2>

<ul>
<li>sass-loader node-sass （.scss）</li>
<li>@nuxtjs/style-resources （共通読み込み .scss 用）</li>
<li>pug （pug）</li>
<li>pug-loader（pug）</li>
<li>pug-plain-loader（pug）</li>
<li>ress（リセットcss）</li>
</ul>


<p>それぞれ <code>$ npm i -D</code> でインストール。<br />
nuxt.config.js に設定が必要なものは追記する。<br />
設定はだいたい以前の内容と同じ。</p>

<ul>
<li><a href="https://jtk.hatenablog.com/entry/2020/01/09/084609">WordPress + Nuxt.js でポートフォリオサイトを作る その3</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/02/17/094713">WordPress + Nuxt.js でポートフォリオサイトを作る その6</a></li>
</ul>


<h2>Netlify でサイト作成</h2>

<p>これも <a href="https://jtk.hatenablog.com/entry/2020/01/09/202100">前回</a> 通り。generate設定はまた後で行う（できるかな？）</p>

<p>まず <code>New site from Git</code> ボタン選択</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200303181529.png" alt="f:id:jotaki:20200303181529p:plain" title="f:id:jotaki:20200303181529p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>デプロイ対象サービスをGitHubに</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200303181543.png" alt="f:id:jotaki:20200303181543p:plain" title="f:id:jotaki:20200303181543p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>リポジトリを選択</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200303181555.png" alt="f:id:jotaki:20200303181555p:plain" title="f:id:jotaki:20200303181555p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>ビルド設定（ブランチ、コマンド、対象フォルダ）を設定</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200303181607.png" alt="f:id:jotaki:20200303181607p:plain" title="f:id:jotaki:20200303181607p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>Nuxt側の動的ページ生成はできていませんが以上で設定完了<br />
<a href="https://trusting-hawking-c6baee.netlify.com/">https://trusting-hawking-c6baee.netlify.com/</a></p>

<p>次回はgenerate設定 or API連携をします。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'microCMS をさわってみる その2'
description: ''
publishDate: '03/03/2020 16:05:43'
---

[CONTENTS-START]
<p>日本製のHeadless CMS、microCMSをさわってみる。その2</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200303155515.jpg" alt="f:id:jotaki:20200303155515j:plain" title="f:id:jotaki:20200303155515j:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/micro-cms-ramen">https://github.com/yuheijotaki/micro-cms-ramen</a><br />
Netlify: <a href="https://ramen.yuheijotaki.dev/">https://ramen.yuheijotaki.dev/</a></p>

<h2>Nuxtのインストール</h2>

<p>GitHubでリポジトリ作ってNuxtプロジェクトを作成</p>

<pre class="code bash" data-lang="bash" data-unlink>$ npx create-nuxt-app [ProjectFolderName]</pre>


<p>今回はこんな感じに初期設定<br />
モジュールに DotEnv 入れるとかできたんですね</p>

<pre class="code bash" data-lang="bash" data-unlink>create-nuxt-app v2.14.0
✨  Generating Nuxt.js project in /PATH/[ProjectFolderName]
? Project name micro-cms-demo
? Project description My cat&#39;s meow Nuxt.js project
? Author name Yuhei Jotaki
? Choose the package manager Npm
? Choose UI framework None
? Choose custom server framework None (Recommended)
? Choose Nuxt.js modules Axios, DotEnv
? Choose linting tools (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)
? Choose test framework None
? Choose rendering mode Universal (SSR)
? Choose development tools

🎉  Successfully created project micro-cms-demo</pre>


<h2>Nuxtの起動</h2>

<pre class="code bash" data-lang="bash" data-unlink>$ cd [ProjectFolderName]
$ npm run dev</pre>


<p>これで</p>

<pre class="code bash" data-lang="bash" data-unlink>   ╭─────────────────────────────────────────────╮
   │                                             │
   │   Nuxt.js v2.11.0                           │
   │   Running in development mode (universal)   │
   │                                             │
   │   Listening on: http://localhost:3000/      │
   │                                             │
   ╰─────────────────────────────────────────────╯</pre>


<p>となるはずなので、 <a href="http://localhost:3000/">http://localhost:3000/</a> でプレビューしながら構築する。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200303160519.png" alt="f:id:jotaki:20200303160519p:plain" title="f:id:jotaki:20200303160519p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>次回はNuxtもろもろ設定をする。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'microCMS をさわってみる その1'
description: ''
publishDate: '03/03/2020 15:57:11'
---

[CONTENTS-START]
<p>日本製のHeadless CMS、microCMSをさわってみる。その1</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200303155515.jpg" alt="f:id:jotaki:20200303155515j:plain" title="f:id:jotaki:20200303155515j:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/micro-cms-ramen">https://github.com/yuheijotaki/micro-cms-ramen</a><br />
Netlify: <a href="https://ramen.yuheijotaki.dev/">https://ramen.yuheijotaki.dev/</a></p>

<h2>やること</h2>

<ul>
<li>microCMSでコンテンツ入稿、API作成</li>
<li>Nuxtでフロント構築</li>
<li>Netliftyでホスティング</li>
</ul>


<h2>microCMSの登録</h2>

<p><a href="https://app.microcms.io">https://app.microcms.io</a><br />
アカウント登録してとりあえず無料プランではじめる。</p>

<p>・ID、パスワード、認証コードなど入力。<br />
・プロジェクト名、API、エンドポイントを入力。</p>

<p>・APIの型はリスト形式に</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200303155536.png" alt="f:id:jotaki:20200303155536p:plain" title="f:id:jotaki:20200303155536p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>・ひとつスキーマを作成</p>

<p>フィールドID: <code>title</code><br />
表示名: <code>タイトル</code><br />
種類: <code>テキストフィールド</code></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200303155600.png" alt="f:id:jotaki:20200303155600p:plain" title="f:id:jotaki:20200303155600p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>・ひとつコンテンツ入稿</p>

<p>タイトルに <code>タイトル01</code> と仮で入れて公開。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200303155613.png" alt="f:id:jotaki:20200303155613p:plain" title="f:id:jotaki:20200303155613p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>ざっくりこれでAPIが作れる。10分もかからないと思います。<br />
次回はNuxtのインストールからやってみます。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'API仕様書 API blueprint でつくってみる'
description: ''
publishDate: '03/02/2020 17:54:13'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200302175407.png" alt="f:id:jotaki:20200302175407p:plain" title="f:id:jotaki:20200302175407p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p><a href="https://microcms.io/">microCMS</a> を使っているプロジェクトがあり、はじめてAPIというものをそれらしく作っているのですがドキュメント出力みたいな機能はなさげなのでサードパーティーのツールを調べて使ってみました。</p>

<p>まず有名どころとしては</p>

<ul>
<li><a href="https://swagger.io/">Swagger</a></li>
<li><a href="https://apiblueprint.org/">API blueprint</a></li>
</ul>


<p>があるらしいですね。Swaggerは他の案件でも使われているのは見ていて、API GatewayへもSwaggerで作ったファイルをインポートできるとかをデベロッパー資格の勉強の際に見たので知ってました。<br />
ただSwaggerは高機能が故、複雑そうで学習コストも高いとのこと。<br />
なので最初は API blueprint を使ってみることにしました。</p>

<h2>API blueprint とは</h2>

<blockquote><p>APIの仕様書を簡単にかつ明確にドキュメントにできるツール(言語)</p></blockquote>

<p><a href="https://qiita.com/takahyon/items/399e3d5781e0f6c73e06">API Blueprint でAPI設計書を書く 超入門編 Part1 - Qiita</a></p>

<p>言語というのを知らなく単純なツールと勘違いしていたのですが、 sample.apib みたいな API blueprint 用のファイル（マークダウン形式のドキュメント）を用意して、それをhtmlに変換して共有なりをする流れで使うようです。</p>

<h2>仕様書の作成</h2>

<p>早速やってみました。</p>

<h3>.apib ファイルの作成</h3>

<p>今回は /docs/sample.apib というファイルで下記を書いてみます。</p>

<pre class="code" data-lang="" data-unlink>FORMAT: 1A
HOST: http://localhost/api

# Sample API
this is sample API document.

## データの説明 [GET /user]
ここにデータの説明が入ります。

+ Request
    + Headers
        ```
        Authorization: {token}
        ```

+ Response 200 (application/json)
    + Body
        ```
        {
            &#34;id&#34;: 1,
            &#34;name&#34;: &#34;sample-name&#34;
        }
        ```</pre>


<h3>ドキュメントのプレビュー</h3>

<p><a href="https://github.com/danielgtaylor/aglio">aglio</a> というレンダラーを使うと、ローカルサーバーを立ててプレビューしたり、.htmlへの出力ができる。</p>

<p>aglio のインストール</p>

<pre class="code bash" data-lang="bash" data-unlink>$ npm install -g aglio</pre>


<p>node.js のバージョン、12.x系 だとエラーになったので v10.15.0 でインストールしました。</p>

<pre class="code bash" data-lang="bash" data-unlink>$ cd docs
$ aglio -i sample.apib --server</pre>


<p>とすると <a href="http://127.0.0.1:3000/">http://127.0.0.1:3000/</a> でプレビューできるので、 .apib を編集してプレビューしてを繰り返す。</p>

<h3>ドキュメントのHTML生成</h3>

<pre class="code bash" data-lang="bash" data-unlink>$ cd docs
$ aglio -i sample.apib -o sample.html</pre>


<p>で (sample).html が生成される。
<code>aglio -i [input file] -o [output file]</code> の形式です。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200302182549.png" alt="f:id:jotaki:20200302182549p:plain" title="f:id:jotaki:20200302182549p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p><code>--theme-variables slate --theme-template triple</code> のようにオプション付与すると、htmlテーマやレイアウトの変更が可能。</p>

<h3>書き方</h3>

<p>API Blueprintはとっつきやすい評があったものの、自分はちょいと試行錯誤しながらやりました。</p>

<p><a href="https://apiblueprint.org/documentation/specification.html">公式</a> をちょろちょろ見ながらやりましたが、雛形分からないのでQiitaから拾ってきてそれベースに改良。</p>

<p>microCMSの場合下記を使いまわせばBodyとSchemaが構造通りになるかと</p>

<pre class="code" data-lang="" data-unlink>FORMAT: 1A
HOST: https://hoge.microcms.io/api/v1

# hoge
hoge

## 一覧 [GET /hoge]
一覧

+ Request
    + Headers
        ```
        X-API-KEY: `APIキー`
        ```

+ Response 200 (application/json)
    + Attributes
        + contents (array[object], fixed-type)
            + (object)
                + id: `XXXXX` (string) - ID
                + text: `XXXXX` (string) - テキストフィールド
                + img: (object) - 画像
                    + url: `XXXXX` (string)
                + multi: (array[object], fixed-type) - 複数コンテンツ参照
                    + (object)
                        + id: `XXXXX` (string) - コンテンツID</pre>


<p>つまづきポイントとして type を array にしたときにうまく Body に反映されないみたいなことが起こったのですが、<code>(array[object], fixed-type)</code> と書けばいけました。（下記参照）<br />
<a href="https://qiita.com/tak458/items/77cc925c1d2dd95672b0">API Blueprint(aglio)で、生成されたSchemaのarrayにitemsがない - Qiita</a></p>

<p>変数とかいろいろ使えるみたいですが、全体の10%も理解できていなそう..なので引き続き機会あればいじってみようと思います。</p>

<h3>ほか参考</h3>

<ul>
<li><a href="https://qiita.com/oskamathis/items/c374138635eb0012b119">API Blueprintのススメ - Qiita</a></li>
<li><a href="https://qiita.com/yagays/items/8e16a27b058f0ddef653">API BlueprintでWeb APIのドキュメントを生成する - Qiita</a></li>
<li><a href="https://blog.amedama.jp/entry/2016/03/08/202403">API Blueprint で Web API の仕様を書く - CUBE SUGAR CONTAINER</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】イラスト図解式 この一冊で全部わかるWeb技術の基本'
description: ''
publishDate: '03/01/2020 12:36:40'
---

[CONTENTS-START]
<p>AWSの資格取得通して、インフラ/サーバーに関してもそうですがそもそもWebの基本があんま分かっていないなということがあったので標題の本を読みました。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4797388811/hatena-blog-22/"><img src="https://m.media-amazon.com/images/I/51l0xAHmzZL._SL160_.jpg" class="hatena-asin-detail-image" alt="イラスト図解式 この一冊で全部わかるWeb技術の基本" title="イラスト図解式 この一冊で全部わかるWeb技術の基本"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4797388811/hatena-blog-22/">イラスト図解式 この一冊で全部わかるWeb技術の基本</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%BE%AE%CE%D3%20%B6%B3%CA%BF" class="keyword">小林 恭平</a>,<a href="http://d.hatena.ne.jp/keyword/%BA%E4%CB%DC%20%CD%DB" class="keyword">坂本 陽</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2017/03/16</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>概要・ポイント</h2>

<ul>
<li>第1章 Web技術とは</li>
<li>第2章 Webとネットワーク技術</li>
<li>第3章 HTTPでやりとりする仕組み</li>
<li>第4章 Webのさまざまなデータ形式</li>
<li>第5章 Webアプリケーションの基本</li>
<li>第6章 Webのセキュリティと認証</li>
<li>第7章 Webシステムの構築と運用</li>
</ul>


<p>内容的には例えば「HTTPメッセージ」の項目を見開きで左ページに説明、右ページに図解の形式で各章10〜15項目くらいで構成されています</p>

<p>自分のイメージしていた技術でいえば2章〜5章くらいの範囲で、第1章はWebの成り立ち的なこと含めて書いており、第6章以降はセキュリティやインフラ周りとWebがどう絡むかがメインでした。<br />
良くも悪くも広く浅く網羅されているので、そのような支える技術があって成り立っているということを理解できるのが良かったかなと思います。</p>

<p>特に自分は通信周りが弱いと思っているので、そういうところがカバーされている点が良かったです。</p>

<h3>プロトコルとは</h3>

<blockquote><p>プロトコルとはネットワークに接続された機器同士が通信をするときの、あらかじめ決められた共通のルールや手順のことをいいます。</p></blockquote>

<h3>TCP/IPとは</h3>

<blockquote><p>TCP/IP(Transmission Control Protocol/Inteernet Protocol)とはインターネットにおけるさまざまなサービスを実現するためのプロトコルの集まりのことをいいます。</p></blockquote>

<p>HTTPもTCP/IPの一部。その他FTP（ファイル送受信）、SMTP（メール送信）、POP（メール受信）など用途によってさまざまなプロトコルが存在する。</p>

<h3>HTTPメッセージ</h3>

<blockquote><p>HTTP（HyperText Transfer Protocol）はその名の示すとおり、「Hyper Text」つまりHTMLなどのテキストファイルや、画像などのコンテンツをやりとりするときに使われるプロトコルです。</p></blockquote>

<p><a href="https://qiita.com/koheiyamaguchi0203/items/5777c4653a01ae4c7b06">HTTPリクエスト/レスポンスの構成要素を初心者にも分かるように解説してみた - Qiita</a></p>

<h3>2種類のHTTPメッセージ</h3>

<blockquote><p>Webeブラウザからの要求である「HTTPリクエスト」と、Webサーバーからの応答である「HTTPレスポンス」の2種類に分けることができます。</p></blockquote>

<h4>HTTPリクエスト</h4>

<blockquote><p>HTTPリクエストは、「リクエスト行」「メッセージヘッダー」「メッセージボディ」の3つに分けることができます。</p>

<p>HTTPリクエストを用いてWebサーバーに具体的な要求内容を伝えているのは、HTTPリクエスト内に含まれる「HTTPメソッド」です。</p></blockquote>

<h4>HTTPレスポンス</h4>

<blockquote><p>HTTPレスポンスは、「ステータス行」「メッセージヘッダー」「メッセージボディ」の3つに分けることができます。</p></blockquote>

<h3>ステータスコード</h3>

<blockquote><p>HTTPレスポンス内にはHTTPリクエストに対するWebサーバー内での処理結果が含まれています。それが「ステータスコード」です。</p></blockquote>

<p><a href="https://developer.mozilla.org/ja/docs/Web/HTTP/Status">HTTP レスポンスステータスコード - HTTP | MDN</a></p>

<h2>良かった点</h2>

<ul>
<li>Webの成り立ち、通信、扱うデータ、セキュリティ、インフラまで浅くではあるが網羅できる内容だった。</li>
<li>1項目見開き1ページなので合間時間でも読み切りやすい。</li>
<li>図解がわかりやすかった。</li>
<li>サーバー周りはオンプレの内容も多く、自分はクラウド（AWS）からそれらを知ったので興味深かった。（ロードバランサーなど）</li>
<li><a href="https://ja.wikipedia.org/wiki/Oracle_Database#%E3%80%8CSCOTT/TIGER%E3%80%8D%E3%81%AE%E7%94%B1%E6%9D%A5">「SCOTT/TIGER」</a> のようなプラスワンがおもしろかった。</li>
</ul>


<h2>惜しかった点</h2>

<ul>
<li>特になし</li>
</ul>


<h2>まとめ</h2>

<p>結構ためになったことが多く、たまに見返すのにもいい本かなと思います。<br />
同じシリーズで、サーバーの基本／ネットワークの基本／セキュリティの基本／クラウドの基本 が出ているので時間あるとき制覇したいなと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2020年2月 振り返り'
description: ''
publishDate: '03/01/2020 12:36:12'
---

[CONTENTS-START]
<h1>結果</h1>

<h2>ブログ</h2>

<p><strong>目標：月 8 回（週2回）更新</strong><br />
<strong>結果：月 13 回 更新</strong></p>

<h2>読書</h2>

<p><strong>目標：月 1 冊</strong><br />
<strong>結果：月 1 冊</strong></p>

<h1>反省点など</h1>

<p>AWS資格に注力していたのでフロントエンド周りの学習は疎かになった。</p>

<h1>来月に向けて</h1>

<p>アソシエイト資格無事取れたので3月はフロントエンド周りに比重をおきます。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress + Nuxt.js でポートフォリオサイトを作る その13'
description: ''
publishDate: '02/28/2020 10:28:22'
---

[CONTENTS-START]
<p>WordPressサイト（<a href="https://works-wp.yuheijotaki.com/">https://works-wp.yuheijotaki.com/</a>）の REST API と Nuxt.js でポートフォリオサイトを作成する。その13</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190924093802.png" alt="f:id:jotaki:20190924093802p:plain" title="f:id:jotaki:20190924093802p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/works-nuxt">https://github.com/yuheijotaki/works-nuxt</a><br />
Netlify: <a href="https://works.yuheijotaki.dev/">https://works.yuheijotaki.dev/</a></p>

<h2>高速化／最適化</h2>

<p>Chorme の Audits 使って改善できるところ改善</p>

<p>トップ</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200228102750.png" alt="f:id:jotaki:20200228102750p:plain" title="f:id:jotaki:20200228102750p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>詳細</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200228102759.png" alt="f:id:jotaki:20200228102759p:plain" title="f:id:jotaki:20200228102759p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>パフォーマンスのマイナスポイントはだいたい画像のサイズ関連、一応パンダちゃんで圧縮しているのですがたまーにこうなるのが謎..</p>

<p>ほかhtmlのlang属性つけたり外部リンクに <code>rel="noopener"</code> つけたりなど <a href="https://jtk.hatenablog.com/entry/2019/12/20/091856">こちら</a> でやったこと中心に対応。</p>

<p>htmlのlang属性付与 nuxt.config.js</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  head: <span class="synIdentifier">{</span>
    htmlAttrs: <span class="synIdentifier">{</span>
      lang: <span class="synConstant">'ja'</span>
    <span class="synIdentifier">}</span>,
</pre>


<h2>ドキュメント作成</h2>

<p>作った。<br />
<a href="https://github.com/yuheijotaki/works-nuxt/blob/master/README.md">https://github.com/yuheijotaki/works-nuxt/blob/master/README.md</a></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200228102814.png" alt="f:id:jotaki:20200228102814p:plain" title="f:id:jotaki:20200228102814p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>ちょっとサービス図は WP REST API あたりが認識あやしい感じですがこんな感じかと思います。</p>

<h2>まとめ</h2>

<p>一通り見てもらえるくらいの出来になったのでポートフォリオサイトは完了です。</p>

<p>できていないこと</p>

<ul>
<li>Vue Store を使う</li>
<li>Nuxt のSPAやSSRがあまり分かっていない</li>
<li>nuxt generate WP以外で使うと分からなそう</li>
<li>metaやSEO関係、実案件などでも通用するか？</li>
</ul>


<p>これらありますが、全体としてはだいたいやりたいことできたかと<br />
Vueはなんとなく使えるようになってきましたがまだまだなんちゃってな感じもしていて、基本がすっぽ抜けしてそうだったりstoreとか機能面の理解ができていないなと感じます。</p>

<p>なので引き続き何かサイト作ったり、既存のサイトに組み込んでいったりで使っていきたいと思っています。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress + Nuxt.js でポートフォリオサイトを作る その12'
description: ''
publishDate: '02/26/2020 10:21:22'
---

[CONTENTS-START]
<p>WordPressサイト（<a href="https://works-wp.yuheijotaki.com/">https://works-wp.yuheijotaki.com/</a>）の REST API と Nuxt.js でポートフォリオサイトを作成する。その12</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190924093802.png" alt="f:id:jotaki:20190924093802p:plain" title="f:id:jotaki:20190924093802p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/works-nuxt">https://github.com/yuheijotaki/works-nuxt</a><br />
Netlify: <a href="https://works.yuheijotaki.dev/">https://works.yuheijotaki.dev/</a></p>

<h2>ドメイン紐付け</h2>

<p>コンテンツ登録や調整が終わったのでドメイン紐付け</p>

<h4>これまで</h4>

<p><code>works.yuheijotaki.com</code> => WordPressサイト（バックエンド+ビュー）</p>

<h4>変更後</h4>

<p><code>works-wp.yuheijotaki.com</code> => WordPressサイト（バックエンド）<br />
<code>works.yuheijotaki.dev</code> => Netlifyサイト（ビュー）</p>

<p>にする</p>

<h3>1. ドメイン取得</h3>

<p>データ移行</p>

<p><code>works-wp.yuheijotaki.com</code> のサブドメインを作ってそちらへWordPressコンテンツを移行する。<br />
ここは通常の移行作業と同じ</p>

<h3>2. ドメイン取得</h3>

<p><code>.dev</code> をお名前.comで取得。<br />
のちのち他にも使いたいなと思って今回のサイトはサブドメインを使う。</p>

<h3>3. Netlifyでサブドメインの登録</h3>

<p>Netlifyのコンソールから Settings => Domain management => Custom domains にてサブドメイン <code>works.yuheijotaki.dev</code> を登録</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200226101555.png" alt="f:id:jotaki:20200226101555p:plain" title="f:id:jotaki:20200226101555p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h3>4. お名前.comのDNS設定変更</h3>

<p>DNSレコード設定を <code>works.yuheijotaki.dev CNAME works-yuheijotaki.netlify.com</code> とする</p>

<h3>5. Netlifyでhttpsの有効化</h3>

<p>Settings => Domain management => https からhttpsを有効化</p>

<p>参考：</p>

<ul>
<li><a href="https://qiita.com/don-bu-rakko/items/8eb30c7e9a3f9531ba16">Netlifyにお名前.comで取得した独自ドメインを設定する - Qiita</a></li>
</ul>


<p>上記の設定はだいたい15分〜30分くらいでできました。<br />
じつはもともと持っている <code>.com</code> でサブドメインを使ってやりたかったのですが、他サブドメインサイトとメールサーバは既存サーバーで...みたいなことだとちょっと複雑になりそうなので諦めました。</p>

<h3>残り</h3>

<ul>
<li>インデックス確認</li>
<li>ドキュメント作成</li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress + Nuxt.js でポートフォリオサイトを作る その11'
description: ''
publishDate: '02/25/2020 09:15:34'
---

[CONTENTS-START]
<p>WordPressサイト（<a href="http://works.yuheijotaki.com/">http://works.yuheijotaki.com/</a>）の REST API と Nuxt.js でポートフォリオサイトを作成する。その11</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190924093802.png" alt="f:id:jotaki:20190924093802p:plain" title="f:id:jotaki:20190924093802p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/works-nuxt">https://github.com/yuheijotaki/works-nuxt</a><br />
Netlify: <a href="https://works-yuheijotaki.netlify.com/">https://works-yuheijotaki.netlify.com/</a></p>

<h2>Google Analyticsの追加</h2>

<p><a href="https://ja.nuxtjs.org/faq/google-analytics/">Google アナリティクスを使うには？</a> によると公式 Google アナリティクスモジュール というものがあるらしいのでそちらを使う。</p>

<pre class="code bash" data-lang="bash" data-unlink>$ npm install --save-dev @nuxtjs/google-analytics</pre>


<p>でモジュールインストールして nuxt.config.js の <code>buildModules[]</code> に</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  <span class="synComment">// ...</span>
  buildModules: <span class="synIdentifier">[</span>
    <span class="synIdentifier">[</span><span class="synConstant">'@nuxtjs/google-analytics'</span>, <span class="synIdentifier">{</span>
      id: <span class="synConstant">'UA-XXXXXXXX-XX'</span>
    <span class="synIdentifier">}]</span>
  <span class="synIdentifier">]</span>,
  <span class="synComment">// ...</span>
</pre>


<p>を追加すればOKみたい。</p>

<p>参考：<br />
<a href="https://github.com/nuxt-community/analytics-module">nuxt-community/analytics-module: Google Analytics Module</a></p>

<h2>サイトマップの追加</h2>

<p>サイトマップもモジュール使ってできるようなのでやってみる</p>

<pre class="code bash" data-lang="bash" data-unlink>npm install --save @nuxtjs/sitemap</pre>


<p>nuxt.config.js には下記を追加</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  <span class="synComment">// ...</span>
  modules: <span class="synIdentifier">[</span>
    <span class="synConstant">'@nuxtjs/sitemap'</span>
  <span class="synIdentifier">]</span>,
  <span class="synComment">// ...</span>
</pre>


<p>Axios で WordPressのエンドポイントを指定して下記のように指定</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  <span class="synComment">// ...</span>
  sitemap: <span class="synIdentifier">{</span>
    path: <span class="synConstant">'/sitemap.xml'</span>,
    hostname: <span class="synConstant">'https://works.yuheijotaki.com'</span>,
    routes(callback) <span class="synIdentifier">{</span>
      axios.get(<span class="synConstant">'https://works-wp.yuheijotaki.com/wp-json/wp/v2/posts?per_page=100&amp;page=1&amp;_embed=1'</span>)
        .then((res) =&gt; <span class="synIdentifier">{</span>
          <span class="synIdentifier">var</span> routes = res.data.map((post) =&gt; <span class="synIdentifier">{</span>
            <span class="synStatement">return</span> <span class="synConstant">'/work/'</span> + post.slug
          <span class="synIdentifier">}</span>)
          callback(<span class="synStatement">null</span>, routes)
        <span class="synIdentifier">}</span>)
        .<span class="synStatement">catch</span>(callback)
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  <span class="synComment">// ...</span>
</pre>


<p><code>$ npm run generate</code> してみると <code>/dist</code> にsitemap.xmlが生成されているのが確認できる。</p>

<p>参考：</p>

<ul>
<li><a href="https://qiita.com/bucchi49/items/d271c4010a3f6c900926">Nuxt.jsで静的ファイル生成時にサイトマップも自動生成する方法 - Qiita</a></li>
<li><a href="https://qiita.com/sauzar18/items/2ea958043eb6758c4f83">Nuxt.jsでサイトマップを動的に設定する方法 - Qiita</a></li>
</ul>


<h2>.env ファイルの作成</h2>

<p>環境変数を使えるようにするには dotenv モジュールを使う</p>

<pre class="code bash" data-lang="bash" data-unlink>$ npm install -D @nuxtjs/dotenv</pre>


<p>.env ファイルを作成して下記のようにみたく書く</p>

<pre class="code" data-lang="" data-unlink>API_URL = &#39;https://works-wp.yuheijotaki.com/wp-json/wp/v2/&#39;
SITE_URL = &#39;https://works.yuheijotaki.com&#39;</pre>


<p>nuxt.config.js の <code>export default {</code> より前に</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// .env読み込み</span>
require(<span class="synConstant">'dotenv'</span>).config()
<span class="synStatement">const</span> <span class="synIdentifier">{</span> API_URL, SITE_URL <span class="synIdentifier">}</span> = process.env
</pre>


<p>を書いてあげて、 <code>export default {</code> の中には</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  env: <span class="synIdentifier">{</span> API_URL, SITE_URL <span class="synIdentifier">}</span>,
  modules: <span class="synIdentifier">[</span>
    <span class="synConstant">'@nuxtjs/dotenv'</span>
  <span class="synIdentifier">]</span>,
  <span class="synComment">// ...</span>
</pre>


<p>とすると nuxt.config.js でも 各 .vueファイルでも.envで定義している環境変数が使えるようになる。</p>

<p>_slug.vue</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  <span class="synComment">// ...</span>
  async asyncData( <span class="synIdentifier">{</span> params <span class="synIdentifier">}</span> ) <span class="synIdentifier">{</span>
    <span class="synStatement">const</span> <span class="synIdentifier">{</span> data <span class="synIdentifier">}</span> = await axios.get(`$<span class="synIdentifier">{</span>process.env.API_URL<span class="synIdentifier">}</span>posts?slug=$<span class="synIdentifier">{</span>params.slug<span class="synIdentifier">}</span>`)
    <span class="synComment">// ...</span>
  <span class="synIdentifier">}</span>,
  <span class="synComment">// ...</span>
</pre>


<p>のような感じで <code>process.env.[変数名]</code> という形で使う</p>

<p>このままだとNetlify側で.envの中は認識してくれないため、Netlify側で環境変数の指定を行う<br />
Settings => Build &amp; deploy => Environment にて添付のように .env と同じ値を指定する。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200225093012.png" alt="f:id:jotaki:20200225093012p:plain" title="f:id:jotaki:20200225093012p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>参考：</p>

<ul>
<li><a href="https://qiita.com/yfujii1127/items/c77bff6f0177b4ff219e">Nuxt.jsにおけるenvファイルの利用(初学者向けハンズオン) - Qiita</a></li>
<li><a href="https://public-constructor.com/nuxt-config-js-dotenv/">【Nuxt.js】nuxt.config.jsで.envで定義した環境変数を取得して使用する | Public Constructor</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress + Nuxt.js でポートフォリオサイトを作る その10'
description: ''
publishDate: '02/21/2020 12:15:15'
---

[CONTENTS-START]
<p>WordPressサイト（<a href="http://works.yuheijotaki.com/">http://works.yuheijotaki.com/</a>）の REST API と Nuxt.js でポートフォリオサイトを作成する。その10</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190924093802.png" alt="f:id:jotaki:20190924093802p:plain" title="f:id:jotaki:20190924093802p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/works-nuxt">https://github.com/yuheijotaki/works-nuxt</a><br />
Netlify: <a href="https://works-yuheijotaki.netlify.com/">https://works-yuheijotaki.netlify.com/</a></p>

<h2><code>meta</code> 設定</h2>

<p>トップと詳細で出力を分ける。<br />
また詳細は動的に設定する。</p>

<p>nuxt.config.js</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// meta設定</span>
<span class="synStatement">const</span> title = <span class="synConstant">'サイトのタイトル'</span>
<span class="synStatement">const</span> description = <span class="synConstant">'サイトのディスクリプション'</span>
<span class="synStatement">const</span> url = <span class="synConstant">'https://siteUrl.com'</span>
<span class="synStatement">const</span> ogImage = `$<span class="synIdentifier">{</span>url<span class="synIdentifier">}</span>/assets/img/ogp.png`

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  <span class="synComment">// ...</span>
  head: <span class="synIdentifier">{</span>
    htmlAttrs: <span class="synIdentifier">{</span>
      prefix: <span class="synConstant">'og: http://ogp.me/ns#'</span>
    <span class="synIdentifier">}</span>,
    titleTemplate: `%s | $<span class="synIdentifier">{</span>title<span class="synIdentifier">}</span>`,
    meta: <span class="synIdentifier">[</span>
      <span class="synIdentifier">{</span> charset: <span class="synConstant">'utf-8'</span> <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> name: <span class="synConstant">'viewport'</span>, content: <span class="synConstant">'width=device-width, initial-scale=1'</span> <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> hid: <span class="synConstant">'description'</span>, name: <span class="synConstant">'description'</span>, content: description <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> property: <span class="synConstant">'og:image'</span>, content: ogImage <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> property: <span class="synConstant">'og:site_name'</span>, content: title <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> property: <span class="synConstant">'og:description'</span>, content: description <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> hid: <span class="synConstant">'og:type'</span>, property: <span class="synConstant">'og:type'</span>, content: <span class="synConstant">'website'</span> <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> hid: <span class="synConstant">'og:url'</span>, property: <span class="synConstant">'og:url'</span>, content: url <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> hid: <span class="synConstant">'og:title'</span>, property: <span class="synConstant">'og:title'</span>, content: title <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> name: <span class="synConstant">'twitter:card'</span>, content: <span class="synConstant">'summary_large_image'</span> <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> name: <span class="synConstant">'twitter:image:src'</span>, content: ogImage <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> name: <span class="synConstant">'twitter:description'</span>, content: description <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> hid: <span class="synConstant">'twitter:url'</span>, name: <span class="synConstant">'twitter:url'</span>, content: url <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> hid: <span class="synConstant">'twitter:title'</span>, name: <span class="synConstant">'twitter:title'</span>, content: title <span class="synIdentifier">}</span>
    <span class="synIdentifier">]</span>,
    link: <span class="synIdentifier">[</span>
      <span class="synIdentifier">{</span> rel: <span class="synConstant">'icon'</span>, type: <span class="synConstant">'image/x-icon'</span>, href: <span class="synConstant">'/favicon.ico'</span> <span class="synIdentifier">}</span>
    <span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>,
  <span class="synComment">// ...</span>
</pre>


<p>トップページの.vue</p>

<p>index.vue</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// ...</span>
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  <span class="synComment">// ...</span>
  head () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      titleTemplate: <span class="synStatement">null</span>,
      title: <span class="synConstant">'Works'</span>,
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
  <span class="synComment">// ...</span>
<span class="synIdentifier">}</span>
<span class="synComment">// ...</span>
</pre>


<p>詳細ページの.vue</p>

<p>_slug.vue</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// ...</span>
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
<span class="synComment">// ...</span>
  data () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      post: <span class="synIdentifier">{}</span>,
      meta: <span class="synIdentifier">{</span>
        title: <span class="synConstant">''</span>,
        type: <span class="synConstant">'article'</span>,
        url: <span class="synConstant">''</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  async asyncData( <span class="synIdentifier">{</span> params <span class="synIdentifier">}</span> ) <span class="synIdentifier">{</span>
    <span class="synStatement">const</span> <span class="synIdentifier">{</span> data <span class="synIdentifier">}</span> = await axios.get(<span class="synConstant">'https://apiUrl.com/wp-json/wp/v2/posts?slug='</span> + params.slug)
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      post: data<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>,
      meta: <span class="synIdentifier">{</span>
        title: data<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>.title.rendered,
        url: `https:<span class="synComment">//works-yuheijotaki.netlify.com/${data[0].slug}/`</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  head () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      title: <span class="synIdentifier">this</span>.meta.title,
      meta: <span class="synIdentifier">[</span>
        <span class="synIdentifier">{</span> hid: <span class="synConstant">'description'</span>, name: <span class="synConstant">'description'</span>, content: <span class="synIdentifier">this</span>.meta.description <span class="synIdentifier">}</span>,
        <span class="synIdentifier">{</span> hid: <span class="synConstant">'og:type'</span>, property: <span class="synConstant">'og:type'</span>, content: <span class="synIdentifier">this</span>.meta.type <span class="synIdentifier">}</span>,
        <span class="synIdentifier">{</span> hid: <span class="synConstant">'og:url'</span>, property: <span class="synConstant">'og:url'</span>, content: <span class="synIdentifier">this</span>.meta.url <span class="synIdentifier">}</span>,
        <span class="synIdentifier">{</span> hid: <span class="synConstant">'og:title'</span>, property: <span class="synConstant">'og:title'</span>, content: `$<span class="synIdentifier">{this</span>.meta.title<span class="synIdentifier">}</span> | $<span class="synIdentifier">{</span>title<span class="synIdentifier">}</span>` <span class="synIdentifier">}</span>,
        <span class="synIdentifier">{</span> hid: <span class="synConstant">'twitter:url'</span>, property: <span class="synConstant">'twitter:url'</span>, content: <span class="synIdentifier">this</span>.meta.url <span class="synIdentifier">}</span>,
        <span class="synIdentifier">{</span> hid: <span class="synConstant">'twitter:title'</span>, property: <span class="synConstant">'twitter:title'</span>, content: `$<span class="synIdentifier">{this</span>.meta.title<span class="synIdentifier">}</span> | $<span class="synIdentifier">{</span>title<span class="synIdentifier">}</span>` <span class="synIdentifier">}</span>
      <span class="synIdentifier">]</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
<span class="synComment">// ...</span>
</pre>


<p>参考:</p>

<ul>
<li><a href="https://www.to-r.net/media/nuxt-setup/">Nuxt.jsでWebサイト構築時に初期設定しておきたい項目まとめ - to-R Media</a></li>
<li><a href="https://blog.naoki85.me/posts/80/index.html">Nuxt.js で API から取得した値を meta タグにセットする（nuxt-property-decorator）</a></li>
<li><a href="https://polidog.jp/2018/06/16/nuxt-head/">nuxtでtitleタグを動的に設定する · polidog lab++</a></li>
</ul>


<p>残り</p>

<ul>
<li>コンテンツ調整</li>
<li>古いworksはアーカイブつくる</li>
<li>ドメイン当てる？</li>
<li>ドキュメント作成</li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress + Nuxt.js でポートフォリオサイトを作る その9'
description: ''
publishDate: '02/20/2020 10:15:23'
---

[CONTENTS-START]
<p>WordPressサイト（<a href="http://works.yuheijotaki.com/">http://works.yuheijotaki.com/</a>）の REST API と Nuxt.js でポートフォリオサイトを作成する。その9</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190924093802.png" alt="f:id:jotaki:20190924093802p:plain" title="f:id:jotaki:20190924093802p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/works-nuxt">https://github.com/yuheijotaki/works-nuxt</a><br />
Netlify: <a href="https://works-yuheijotaki.netlify.com/">https://works-yuheijotaki.netlify.com/</a></p>

<h2>Pugで <code>v-if</code></h2>

<p>Pugで <code>v-if</code> を使う</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template lang=<span class="synConstant">&quot;pug&quot;</span>&gt;
  div
    p(v-<span class="synStatement">if</span>=<span class="synConstant">&quot;loading&quot;</span>) loading
    p(v-<span class="synStatement">else</span>) loaded
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">import</span> axios from <span class="synConstant">&quot;axios&quot;</span>;
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  data () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      posts: <span class="synIdentifier">[]</span>,
      loading: <span class="synConstant">true</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  mounted :<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
    axios.get( <span class="synConstant">'https://works.yuheijotaki.com/wp-json/wp/v2/posts?per_page=100'</span> )
    .then( response =&gt; <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.posts = response.data
      <span class="synIdentifier">this</span>.loading = <span class="synConstant">false</span>
    <span class="synIdentifier">}</span>)
    .<span class="synStatement">catch</span>( error =&gt; <span class="synIdentifier">{</span>
      console.log(error)
    <span class="synIdentifier">}</span>)
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<p>SPのスタイルもだいたいできたので残り</p>

<ul>
<li>トップ ロゴクリックでフィルター解除</li>
<li>マークアップ見直し</li>
<li>meta設定</li>
<li>コンテンツ調整

<ul>
<li>古いworksはアーカイブつくる</li>
</ul>
</li>
<li>ドメイン当てる？</li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress + Nuxt.js でポートフォリオサイトを作る その8'
description: ''
publishDate: '02/18/2020 18:08:47'
---

[CONTENTS-START]
<p>WordPressサイト（<a href="http://works.yuheijotaki.com/">http://works.yuheijotaki.com/</a>）の REST API と Nuxt.js でポートフォリオサイトを作成する。その8</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190924093802.png" alt="f:id:jotaki:20190924093802p:plain" title="f:id:jotaki:20190924093802p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/works-nuxt">https://github.com/yuheijotaki/works-nuxt</a><br />
Netlify: <a href="https://works-yuheijotaki.netlify.com/">https://works-yuheijotaki.netlify.com/</a></p>

<h2>dataで取得したカラーコードをcssネイティブ変数化</h2>

<p>必要なところのみ</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template lang=<span class="synConstant">&quot;pug&quot;</span>&gt;
  div(:style=<span class="synConstant">&quot;customStyle&quot;</span>)
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  props:<span class="synIdentifier">{</span>
    <span class="synConstant">'post'</span>: <span class="synIdentifier">{</span>
      type: <span class="synType">Object</span>,
      <span class="synStatement">default</span>: <span class="synConstant">''</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  computed: <span class="synIdentifier">{</span>
    customStyle () <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span>
        <span class="synConstant">'--user-color'</span>: <span class="synIdentifier">this</span>.post.customColor
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;

&lt;style lang=<span class="synConstant">&quot;scss&quot;</span> scoped&gt;
p <span class="synIdentifier">{</span>
  color: <span class="synIdentifier">var</span>(--user-color);
<span class="synIdentifier">}</span>
&lt;/style&gt;
</pre>


<p>参考： <a href="https://shayneo.com/blog/binding-css-variables-with-vue/">Binding CSS Variables in Vue</a></p>

<p>もうちょいうまいやり方もありそうな気もしますが</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress + Nuxt.js でポートフォリオサイトを作る その7'
description: ''
publishDate: '02/18/2020 10:15:49'
---

[CONTENTS-START]
<p>WordPressサイト（<a href="http://works.yuheijotaki.com/">http://works.yuheijotaki.com/</a>）の REST API と Nuxt.js でポートフォリオサイトを作成する。その7</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190924093802.png" alt="f:id:jotaki:20190924093802p:plain" title="f:id:jotaki:20190924093802p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/works-nuxt">https://github.com/yuheijotaki/works-nuxt</a><br />
Netlify: <a href="https://works-yuheijotaki.netlify.com/">https://works-yuheijotaki.netlify.com/</a></p>

<h2>外部リソースの（インストールした）フォントを使う</h2>

<p>src/assets/font/MyFontName.woff にフォントファイルを配置</p>

<p>src/assets/css/styles.scss ファイルを作成し下記などでフォント指定</p>

<pre class="code lang-css" data-lang="css" data-unlink><span class="synSpecial">@font-face</span> <span class="synIdentifier">{</span>
  <span class="synType">font-family</span>: 'MyFontName';
  <span class="synType">src</span>: <span class="synIdentifier">url(</span><span class="synConstant">'../font/MyFontName.eot'</span><span class="synIdentifier">)</span>;
  <span class="synType">src</span>: <span class="synIdentifier">url(</span><span class="synConstant">'../font/MyFontName.eot?#iefix'</span><span class="synIdentifier">)</span> <span class="synIdentifier">format(</span><span class="synConstant">'embedded-opentype'</span><span class="synIdentifier">)</span>,
    <span class="synIdentifier">url(</span><span class="synConstant">'../font/MyFontName.woff'</span><span class="synIdentifier">)</span> <span class="synIdentifier">format(</span><span class="synConstant">'woff'</span><span class="synIdentifier">)</span>,
    <span class="synIdentifier">url(</span><span class="synConstant">'../font/MyFontName.svg#PostGrotesk Book'</span><span class="synIdentifier">)</span> <span class="synIdentifier">format(</span><span class="synConstant">'svg'</span><span class="synIdentifier">)</span>;
  <span class="synType">font-weight</span>: <span class="synConstant">normal</span>;
  <span class="synType">font-style</span>: <span class="synConstant">normal</span>;
<span class="synIdentifier">}</span>
</pre>


<p>nuxt.config.js でスタイルシートを読み込む設定</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  css: <span class="synIdentifier">[</span>
    <span class="synIdentifier">{</span> src: <span class="synConstant">'@/assets/css/styles.scss'</span> <span class="synIdentifier">}</span>
  <span class="synIdentifier">]</span>,
</pre>


<p>をすればscssファイルやSFCのscssでフォント指定すると有効になる。</p>

<p>参考： <a href="https://qiita.com/yujiteshima/items/e4a2cf1574ad6e61feda">Nuxt.jsで好きなフォントを使う - Qiita</a></p>

<h2>日付をフォーマットする</h2>

<p>REST API で渡されるのは <code>2020-02-18T14:57:36</code> のような形なので整形する<br />
何かしらプラグイン入れたほうがよいらしいので <a href="https://github.com/iamkun/dayjs">Day.js</a> を入れてみる<br />
<code>npm i -D dayjs</code> でインストール後</p>

<p>WorksItem.vue（必要箇所のみ）</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template lang=<span class="synConstant">&quot;pug&quot;</span>&gt;
  p.date <span class="synIdentifier">{{</span> item.date | dateFilter <span class="synIdentifier">}}</span>
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">import</span> dayjs from <span class="synConstant">'dayjs'</span>
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  <span class="synComment">// 省略</span>
  filters: <span class="synIdentifier">{</span>
    dateFilter(value) <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> dayjs(value).format(<span class="synConstant">'YYYY.MM'</span>)
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<p>とすると <code>2020.02</code> で整形して出力される</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress + Nuxt.js でポートフォリオサイトを作る その6'
description: ''
publishDate: '02/17/2020 09:47:13'
---

[CONTENTS-START]
<p>WordPressサイト（<a href="http://works.yuheijotaki.com/">http://works.yuheijotaki.com/</a>）の REST API と Nuxt.js でポートフォリオサイトを作成する。その6</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190924093802.png" alt="f:id:jotaki:20190924093802p:plain" title="f:id:jotaki:20190924093802p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/works-nuxt">https://github.com/yuheijotaki/works-nuxt</a><br />
Netlify: <a href="https://works-yuheijotaki.netlify.com/">https://works-yuheijotaki.netlify.com/</a></p>

<p>前回から1ヶ月ほど空いてしまいましたが再開</p>

<h2>@nuxtjs/style-resources を使う</h2>

<p>変数用のファイルなどグローバルに読み込むscss用に <a href="https://www.npmjs.com/package/@nuxtjs/style-resources">@nuxtjs/style-resources</a> を使う。</p>

<pre class="code bash" data-lang="bash" data-unlink>$ npm i -D @nuxtjs/style-resources</pre>


<p>でインストール後、nuxt.config.js を下記のようにする</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  modules: <span class="synIdentifier">[</span>
    <span class="synConstant">'@nuxtjs/style-resources'</span>
  <span class="synIdentifier">]</span>,
  <span class="synComment">// .scssファイルをグローバルに読み込む</span>
  styleResources: <span class="synIdentifier">{</span>
    scss: <span class="synIdentifier">[</span>
      <span class="synConstant">'@/assets/scss/foundation/_config.scss'</span>,
      <span class="synConstant">'@/assets/scss/foundation/_mixin.scss'</span>
    <span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>,
</pre>


<p>以前はscssファイル指定のところ、 <code>... '@/assets/ ...</code> ではなく <code>... './assets/ ...</code> みたいにしていましたが今回はいけなくちょっとハマりました。</p>

<h2>ress.cssを使う</h2>

<p>reset.css と normalize.css のいいとこ取りリセットcssの <a href="https://github.com/filipelinhares/ress">ress.css</a> を使う。</p>

<pre class="code bash" data-lang="bash" data-unlink>$ npm i -D ress</pre>


<p>でインストール後、nuxt.config.js の <code>css:</code> に</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  css: <span class="synIdentifier">[</span><span class="synConstant">'ress'</span><span class="synIdentifier">]</span>,
</pre>


<p>としてあげるとグローバルに読み込みされる。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AWS SysOps アドミニストレーター アソシエイト 受験記'
description: ''
publishDate: '02/15/2020 19:56:08'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200105065609.png" alt="f:id:jotaki:20200105065609p:plain" title="f:id:jotaki:20200105065609p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>これまで・今回の結果</h2>

<ul>
<li><a href="https://jtk.hatenablog.com/entry/2019/06/12/223000">2019年6月 プラクティショナー 合格 830点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2019/07/09/100106">2019年7月 SAA 不合格 630点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/01/05/074534">2020年1月 SAA 合格 771点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/02/09/193011">2020年2月 DVA 合格 845点</a></li>
<li>2020年2月 SOA 合格 801点 ※今回</li>
</ul>


<h2>受験理由・モチベーション</h2>

<p>SAAとDVAとってSOAもという勢い（だけ）で。<br />
ここで取っておかないで先にまた記憶掘り起こして勉強再開するのもしんどそうということ、そろそろAWSの勉強を一区切りしてフロントエンドの勉強に注力したいと思っていたため。</p>

<h2>今回の勉強計画</h2>

<p>公式サンプルと模試やって、今回もいけそうな雰囲気だったらバウチャーもあるので早めに1回受けてみようかと考えました。<br />
内容としては</p>

<ul>
<li>公式のサンプル、模試をきちんと振り返る</li>
<li>Black Belt 弱いサービスは必ず見る</li>
<li>模試も何個かはやってみる</li>
<li>ハンズオンはできればやるけど最優先・必須にはしない</li>
</ul>


<p>SysOpsはSAAやDVAよりも内容は一番ふだんの業務から遠い所にある内容ではあるので、もちろん色々サービスや使い方を知りたいというのはあるけど、それよりも「資格取得」というところにフォーカスして最短で取れる道を取ろうと思いました。</p>

<h2>やったこと</h2>

<h3>1. 試験ガイドや体験記読む</h3>

<p>DVAの勉強期間のときからちょくちょく意識はしていたのでなんとなくは範囲は把握していました。<br />
セキュリティが多いのが厄介（複雑なIAM設定やKMS、暗号化周りが苦手）なので、18%の出題範囲をどう捉えればいいかなと思いました。<br />
いつものごとく体験記も読んでレベル感把握しておく。</p>

<ul>
<li><a href="http://blog.serverworks.co.jp/tech/2020/01/20/passing-soa/">AWS未経験/入社1ヶ月半でAWS SOA試験に合格できた勉強法（2020年） – サーバーワークスエンジニアブログ</a></li>
<li><a href="https://qiita.com/aminosan000/items/b1765260e8ad1435a366">AWS認定SysOpsアドミニストレーターアソシエイトを受験した時の話 - Qiita</a></li>
<li><a href="https://qiita.com/kkino1985/items/295509d3d94c726ae56a">AWS Sysopsアドミニストレーターアソシエイト資格に合格しました。 - Qiita</a></li>
<li><a href="https://qiita.com/murapon/items/15d511d18d6575a620eb">AWS認定 SysOps アドミニストレーター アソシエイト（SOA）の合格記録 - Qiita</a></li>
<li><a href="https://qiita.com/shinon_uk/items/e60bcb946b49bf5cabda">AWS SysOps Administrator Associate 合格記録 - Qiita</a></li>
<li><a href="https://qiita.com/sicksixrock66/items/cae927de1b41457239ca">AWS SOAを取得するまで - Qiita</a></li>
<li><a href="https://qiita.com/totonobe/items/cd83cdadcc5bbfa5d0ed">2019/8 AWS SysOpsアドミニストレータ（SOA) 合格した時にやったことまとめ - Qiita</a></li>
<li><a href="https://qiita.com/oke-py/items/87a6662703780b1a4103">AWS認定 SysOps アドミニストレーター – アソシエイト合格体験記 - Qiita</a></li>
<li><a href="https://zatoima.github.io/aws-sysops-certificate.html">AWS SysOps Administrator Associate 試験 不合格&amp;合格体験記 | my opinion is my own</a></li>
</ul>


<p>怖かったのはDVAは不合格でした、って記事をあまり見かけない気がするのですが、SysOpsは1度不合格になって、、やレベル感としてDVAよりも難しいと書いている人がちょくちょくいたこと。<br />
SAAとDVAとれたらSysOpsは大丈夫っていう人もいたり、SysOpsが一番アソシエイトレベルで難しいっていう人もいるので、そういう類の体験談は人によるな〜って感じで流すようにしました。</p>

<h3>2.【公式】模擬試験</h3>

<p>まずは力試しということで模擬試験を受ける。（2/10・月）<br />
DVAと同じ70%でしたが分からないサービス名はあまりなかったので、このときは知識埋めていけばどうにかなるような気もしました。<br />
ただ正解調べても分からなくてちょっと混乱</p>

<p>総合スコア: 70%</p>

<p>トピックレベルスコア:<br />
1.0  Monitoring and Reporting: 80%<br />
2.0  High Availability: 50%<br />
3.0  Deployment and Provisioning: 50%<br />
4.0  Storage and Data Management: 50%<br />
5.0  Security and Compliance: 100%<br />
6.0  Networking: 66%<br />
7.0  Automation and Optimization: 50%</p>

<h3>3.【公式】サンプル問題</h3>

<p>同じ日（2/10・月）にサンプル問題をやってみる。<br />
簡単とはいえ10問全問正解、8問くらいは選択肢見ないで答えられたのでここは調子に乗っていいのか迷った。</p>

<h3>4.【Whizlabs】AWS Certified SysOps Administrator Associate | Practice Tests</h3>

<p>Udemy がなかったので Whizlabs の模試を買いました。<br />
<a href="https://www.whizlabs.com/aws-sysops-administrator-associate/practice-tests/">AWS Certified SysOps Administrator Associate | Practice Tests | Whizlabs</a></p>

<p>クーポン使ってだいたい2,000円いかないくらいで模試5セットなどついてくるやつ。<br />
英語なのでChrome拡張の翻訳プラグインでいけると書いてあってほんまかいなと思ってたけど90%くらいは問題なかった。（慣れもある）<br />
※Snowball が雪玉と訳されたり、<br />
時間の都合で全部はぜんぜん無理でした。</p>

<ul>
<li>2/12 ⑤ 61%正解 (40/65)</li>
<li>2/13 ④ 58%正解 (38/65)</li>
</ul>


<p>最近の（っぽいので）⑤から進めてみました。<br />
フリーの15問のやつ全問正解だったのでレベル感大丈夫かなと思いましたが、65問のほうは難易度は高めで解説見て公式ドキュメント読んでをしました。</p>

<h3>5.【読書】AWS認定アソシエイト3資格対策</h3>

<p>VPCとか結構SAA範囲のものは抜けてたので通勤時はこちらでSOA範囲だけ読む。<br />
こちらはDVAのときも書いたとおり範囲のサービス概要だけ役立つという感じです。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4865941991/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51xwIZksknL._SL160_.jpg" class="hatena-asin-detail-image" alt="AWS認定アソシエイト3資格対策~ソリューションアーキテクト、デベロッパー、SysOpsアドミニストレーター~" title="AWS認定アソシエイト3資格対策~ソリューションアーキテクト、デベロッパー、SysOpsアドミニストレーター~"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4865941991/hatena-blog-22/">AWS認定アソシエイト3資格対策~ソリューションアーキテクト、デベロッパー、SysOpsアドミニストレーター~</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%CA%BF%BB%B3%20%B5%A3" class="keyword">平山 毅</a>,<a href="http://d.hatena.ne.jp/keyword/%B2%AC%20%C3%D2%CC%E9" class="keyword">岡 智也</a>,<a href="http://d.hatena.ne.jp/keyword/%C3%D3%C5%C4%20%C2%E7" class="keyword">池田 大</a>,<a href="http://d.hatena.ne.jp/keyword/%B8%B6%20%B9%BE%CD%FC%B2%C2" class="keyword">原 江梨佳</a>,<a href="http://d.hatena.ne.jp/keyword/%DF%B7%C5%C4%20%C2%F3%CC%E9" class="keyword">澤田 拓也</a>,<a href="http://d.hatena.ne.jp/keyword/%B8%B6%20%BD%D3%C2%C0%CF%BA" class="keyword">原 俊太郎</a>,<a href="http://d.hatena.ne.jp/keyword/%C3%E7%C2%BC%20%CD%A6%CE%BC" class="keyword">仲村 勇亮</a>,<a href="http://d.hatena.ne.jp/keyword/%BE%E5%C2%BC%20%CD%B4%B5%B1" class="keyword">上村 祐輝</a>,<a href="http://d.hatena.ne.jp/keyword/%C4%BB%C3%AB%C9%F4%20%BE%BC%B4%B2" class="keyword">鳥谷部 昭寛</a></li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> リックテレコム</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/06/13</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h3>6.【公式】Black Belt よむ &amp; みる</h3>

<p>これもDVAのときに役立ったのでSOA範囲用に見直す。<br />
YouTubeは慣れてきて1.5倍でもそれなりに入るようになりました。</p>

<h4>YouTube</h4>

<ul>
<li>2/11 <a href="https://www.youtube.com/watch?v=aHEVvsk6pkI">VPC</a>, <a href="https://www.youtube.com/watch?v=4laAoK-zXko">ELB</a>, <a href="https://www.youtube.com/watch?v=P5zX4DdlYOE">EC2</a>, <a href="https://www.youtube.com/watch?v=ffND-tX1Qxs">EBS</a>, <a href="https://www.youtube.com/watch?v=Tb2Uw4B_Ihw">GuardDuty</a>, <a href="https://www.youtube.com/watch?v=Yx7Q6peW5u0">Cost Explorer</a>, <a href="https://www.youtube.com/watch?v=58yQtvXeuCw">Trusted Advisor</a>, <a href="https://www.youtube.com/watch?v=pRQZLNMF0Lo">Service Catalog</a></li>
<li>2/13 <a href="https://www.youtube.com/watch?v=4F5rSxzu0U4">KMS</a>, <a href="https://www.youtube.com/watch?v=ULQBR-fSsGY">Systems Manager</a></li>
<li>2/14 <a href="https://www.youtube.com/watch?v=gOaZeJpb0Y4">CloudWatch</a>, <a href="https://www.youtube.com/watch?v=HU47ZAM3mtw">CloudFormation</a>, <a href="https://www.youtube.com/watch?v=o01IOnVvRxM">Auto Scaling</a></li>
</ul>


<h4>SlideShare</h4>

<ul>
<li>2/12 <a href="https://www.slideshare.net/AmazonWebServicesJapan/20171122-aws-blackbeltawswafowasptop10">WAF</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-amazon-inspector">Inspector</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-2017-aws-shield">Shield</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/20180214-aws-blackbeltorganizations">Organizations</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-2017-aws-storage-gateway">Storage Gateway</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/20180322-aws-black-belt-online-seminar-aws-snowball-edge-141081828">Snowball Edge</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-2016-aws-cloudtrail-aws-config">CloudTrail / Config</a></li>
</ul>


<p>DVAの際もですがキャプチャのような感じでスプシで重要そうなことを書いておいて試験前に見るようにしたりしてました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200215195534.png" alt="f:id:jotaki:20200215195534p:plain" title="f:id:jotaki:20200215195534p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>本試験</h2>

<p>DVAを2/9（日）に受けて、SysOpsもちょうど空きがなかったので2/14（金）に受ける。<br />
今週は祝日もあったもののさすがにちょっとはやすぎかなとも思いましたが、どのみち先2週間はできそうなので受かったらラッキーくらいに捉えました。</p>

<p>1時間30分くらいかけて1周、じっくりやったので見直しせずに（する気力もなく）結果を見る。<br />
結果、スコアは801点、すべて「十分な知識を要する」になっていたのでまんべんなく取れたようで一安心でした。</p>

<p>感触としては試験前びびりすぎていた部分もあり、結構これと分かる問題もそこそこあった印象。<br />
Whizlabほどめちゃくちゃ突っ込んだ内容や設定値問う問題はあまりなく、ただパッと分かるものでもないものが半数以上（2つには絞れるけどどっちかなみたいな）<br />
それでも受かったので、公式サンプル・模試やって、Whizlab2個やってBlackBeltで補完するというSAA、DVAで得た勉強法でよかったなと思います。</p>

<p>アソシエイトでどれが難しいか議論はみんな書いていますが、職種や得意分野、受験順や期間にも左右されるの前提で、個人的には難しい順で<br />
SAA > SOA > DVA<br />
でした。（スコア順でもありますが）</p>

<p>ただSAAはアソシエイトレベル最初の受験で難しく感じ、DVAの勉強期間長かったので楽に感じた、っていう程度なので正直レベル感は参考の参考くらいにしかならないと思います。</p>

<h2>まとめ</h2>

<p>これでアソシエイトレベルを3つ取れました。<br />
昨年7月にSAAを最初に受けた際、めっちゃ難しいなと思っていた内容でも今は理解できるようになり、コツコツ（ときには一気に）やると分かるようになるもんだなという感想です。昨年の今頃はS3とEC2くらいしか分からなかったのでそういう点は感慨深いです。</p>

<p>AWS試験は次のレベルでいうとプロフェッショナルですが、いずれ1、2年後には受けるかもしれないですが一旦は勉強終了する予定。<br />
ただ、AWSのイベントやDevelopers.IOなど、そういうものはせっかく得た興味範囲なので追っていこうと思います。</p>

<p>一段落ついて改めて思うのは、フロントエンドエンジニアと名乗ってますが、ITやインフラやネットワークやセキュリティ、Webそのものに対しての基礎や仕組みの知識が不足しているなあということでした。<br />
試験の勉強で得られるのはAWSの知識ももちろんありますが、仮想化だとか、DRだとか、マイクロサービスだとか、CI/CDだとか、基礎的なところ〜現在の潮流に合わせてAWSのサービスが出たり機能が追加されることが多いと思うので、勉強することで分かったことと分からないと実感したことが大きな学びだと思います。</p>

<p>やればそれなりに覚える（っていう精神論的な..）ことも染み込んだのは大きいと思うのでこの調子で他の勉強もがんばりたいと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AWSデベロッパー アソシエイト 受験記'
description: ''
publishDate: '02/09/2020 19:30:11'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200105065609.png" alt="f:id:jotaki:20200105065609p:plain" title="f:id:jotaki:20200105065609p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>これまで・今回の結果</h2>

<ul>
<li><a href="https://jtk.hatenablog.com/entry/2019/06/12/223000">2019年6月 プラクティショナー 合格 830点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2019/07/09/100106">2019年7月 SAA 不合格 630点</a></li>
<li><a href="https://jtk.hatenablog.com/entry/2020/01/05/074534">2020年1月 SAA 合格 771点</a></li>
<li>2020年2月 DVA 合格 845点 ※今回</li>
</ul>


<h2>受験理由・モチベーション</h2>

<p>SAA取れたら受かるみたいな記事もあり、今のうちやっておかないともったいない精神で。</p>

<h2>今回の勉強計画</h2>

<ul>
<li>前回のSAAと同様に模擬試験をやっていって実戦で力をつける</li>
<li>ハンズオンも不安なサービスは触るようにする => と思ったけどあんまやらなかった。</li>
<li>最後はなんだかんだ公式サンプル問題と公式模擬試験を復習して抜けがないようにする。</li>
<li>本試験受け急がない。きちんと受かりそうだなと自信がついたら受ける => と思ったけど2,3週間前に日程決めちゃった</li>
</ul>


<p>去年の2019/07・SAA（不合格）と同じ感じのモチベーションだったので、今回は自分なりにきっちりやり込んで受けようと思いました。</p>

<p>1/4 にSAA受かって少し休んで 1/10 くらいから勉強をはじめました。<br />
だいたい前回と同じで平日2,3時間、週末は1日やったりのペースです。</p>

<h2>やったこと</h2>

<h3>1. 試験ガイドや体験記読む</h3>

<p>当時は受けるかどうか迷いながら情報収集。<br />
サンプル問題は英語だったのでぼんやりながめた。<br />
とりあえずUdemyの模擬試験安かったので買っておいて、後戻りできないようにセットしました。</p>

<p>読んだ体験記はこちら。</p>

<ul>
<li><a href="https://kobarei.blogspot.com/2019/07/get-aws-developer-associate.html">10日間でAWS認定デベロッパー アソシエイトに合格した話</a></li>
<li><a href="https://dev.classmethod.jp/cloud/aws/how-to-become-an-aws-certified-developer-associate/">AWSにおける開発に入門しよう！ノンデベロッパーの私がAWS Certified Developer Associate認定試験を受けてきた ｜ Developers.IO</a></li>
<li><a href="https://qiita.com/shiro_rep/items/92b25a1922c54d29ac79">AWSエンジニアを目指しているAWS運用未経験の私がAWS認定デベロッパーアソシエイト(DVA)に合格したお話。AWS認定アソシエイト3資格対策の書評 - Qiita</a></li>
<li><a href="https://qiita.com/icck/items/5d3e3f6c99074d5f30de">AWS認定デベロッパーアソシエイト合格と、勉強方法と使ったサイトの感想 - Qiita</a></li>
<li><a href="http://blog.serverworks.co.jp/tech/2020/02/03/pass-three-associate-examinations/">AWS未経験でしたが2ヶ月でAWSアソシエイト3冠を達成することができました！ – サーバーワークスエンジニアブログ</a></li>
</ul>


<h3>2.【読書】AWS認定アソシエイト3資格対策</h3>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4865941991/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51xwIZksknL._SL160_.jpg" class="hatena-asin-detail-image" alt="AWS認定アソシエイト3資格対策~ソリューションアーキテクト、デベロッパー、SysOpsアドミニストレーター~" title="AWS認定アソシエイト3資格対策~ソリューションアーキテクト、デベロッパー、SysOpsアドミニストレーター~"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4865941991/hatena-blog-22/">AWS認定アソシエイト3資格対策~ソリューションアーキテクト、デベロッパー、SysOpsアドミニストレーター~</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%CA%BF%BB%B3%20%B5%A3" class="keyword">平山 毅</a>,<a href="http://d.hatena.ne.jp/keyword/%B2%AC%20%C3%D2%CC%E9" class="keyword">岡 智也</a>,<a href="http://d.hatena.ne.jp/keyword/%C3%D3%C5%C4%20%C2%E7" class="keyword">池田 大</a>,<a href="http://d.hatena.ne.jp/keyword/%B8%B6%20%B9%BE%CD%FC%B2%C2" class="keyword">原 江梨佳</a>,<a href="http://d.hatena.ne.jp/keyword/%DF%B7%C5%C4%20%C2%F3%CC%E9" class="keyword">澤田 拓也</a>,<a href="http://d.hatena.ne.jp/keyword/%B8%B6%20%BD%D3%C2%C0%CF%BA" class="keyword">原 俊太郎</a>,<a href="http://d.hatena.ne.jp/keyword/%C3%E7%C2%BC%20%CD%A6%CE%BC" class="keyword">仲村 勇亮</a>,<a href="http://d.hatena.ne.jp/keyword/%BE%E5%C2%BC%20%CD%B4%B5%B1" class="keyword">上村 祐輝</a>,<a href="http://d.hatena.ne.jp/keyword/%C4%BB%C3%AB%C9%F4%20%BE%BC%B4%B2" class="keyword">鳥谷部 昭寛</a></li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> リックテレコム</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/06/13</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>これまでの資格取得と同様に書籍から<br />
DVA対策専用ではないですが、これまで読んだSAAの2冊よりは対策になるかなと思ったので。<br />
実際にはオレンジ本のほうが詳しくかいてあるサービスもあったので、概要掴む&amp;これまでの復習という意味では良かったかなーと思います。<br />
あとCognitoやX-Rayなど新し目のもの載ってなかったりするので、それは公式みたりもしました。<br />
通勤とか隙間でやってDeveloper範囲のものは2周やる。</p>

<h3>3.【公式】模擬試験</h3>

<p>本1周目の途中くらいでわりと早い段階で受けました。（1/17）<br />
結果は70%だったのですが、確実に正解と分かるの2割もなかったかなくらい難しくでビビり始めました。<br />
キャプチャ取ったので覚えるキーワード洗い出しながら復習<br />
本試験前日にも復習する。</p>

<p>総合スコア: 70%<br />
トピックレベルスコア:<br />
1.0  Deployment: 50%<br />
2.0  Security: 50%<br />
3.0  Development with AWS Services: 85%<br />
4.0  Refactoring: 100%<br />
5.0  Monitor and Troubleshooting: 50%</p>

<h3>4.【公式】サンプル問題</h3>

<p>英語だったので <a href="https://qiita.com/tmk2154/items/4f6bd44fbd783761c5e2">AWS Developer Associate サンプル問題の日本語訳 - Qiita</a> の解答/解説を参照して。7/10 でしたが当てずっぽうなのも多く、ここでも難しくてへこみました。<br />
本試験前日に復習する。</p>

<h3>5.【公式】Black Belt よむ &amp; みる</h3>

<p>Black Belt オンラインセミナー（YouTube）があるものは動画で、ないものはSlideShareを読みました。<br />
特にSQS/API Gatewayなんかは本には試験に出そうな表面的なことは書いているのですが、動画だと深堀りしてそもそもその技術やサービスがなぜ必要とされているかなどから話してくれるのでよかったと思います。<br />
2017年くらいの資料になるとちょっと古い内容もあるのでそこは注意が必要かなと。</p>

<h4>YouTube</h4>

<ul>
<li>1/21 <a href="https://www.youtube.com/watch?v=avfc0gQ7X0A">SQS</a>, <a href="https://www.youtube.com/watch?v=1FexvzegG3o">CLI</a></li>
<li>1/22 <a href="https://www.youtube.com/watch?v=HU47ZAM3mtw">CloudFormation</a></li>
<li>1/23 <a href="https://www.youtube.com/watch?v=oFG5kMZjKtc">S3</a>, <a href="https://www.youtube.com/watch?v=xQbLiqkI1Mw">SAM</a></li>
<li>1/24 <a href="https://www.youtube.com/watch?v=QvPgjEwgiew">Lambda Part1</a>, <a href="https://www.youtube.com/watch?v=96ku2x1NCaE">Lambda Part2</a></li>
<li>1/29 <a href="https://www.youtube.com/watch?v=gOaZeJpb0Y4">CloudWatch</a>, <a href="https://www.youtube.com/watch?v=ULQBR-fSsGY">Systems Manager</a></li>
<li>1/30 <a href="https://www.youtube.com/watch?v=4F5rSxzu0U4">KMS</a>, <a href="https://www.youtube.com/watch?v=EpEETIox03s">API Gateway</a></li>
<li>1/31 <a href="https://www.youtube.com/watch?v=PGyasNJ1QTQ">Step Functions</a>, <a href="https://www.youtube.com/watch?v=RgHm-TYv5Yo">AppSync</a></li>
</ul>


<h4>SlideShare</h4>

<ul>
<li>1/28 <a href="https://www.slideshare.net/AmazonWebServicesJapan/20170809-black-belt-dynamodb">DynamoDB</a></li>
<li>2/3 <a href="https://www.slideshare.net/AmazonWebServicesJapan/20170517awsblackbeltamazoncognito">Cognito</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-2017-aws-xray">X-Ray</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-2017-aws-elastic-beanstalk">Beanstalk</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/20180214-aws-black-belt-online-seminar-amazon-container-services/">ECS</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-2017-amazon-kinesis">Kinesis</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-2017-aws-code-services-codecommit-codebuild">CodeCommit / CodeBuild</a>, <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-aws-code-services-part-2">CodeDeploy / CodePipeline / CodeStar</a></li>
<li>2/4 <a href="https://www.slideshare.net/AmazonWebServicesJapan/aws-black-belt-online-seminar-2017-amazon-elasticache-84060910">ElastiCache</a></li>
</ul>


<h3>6.【Udemy】模擬試験セット</h3>

<p>SAAと同様に複数問題集を解くために Udemy をやりました。<br />
<a href="https://www.udemy.com/course/aws-31955/learn/quiz/4739986#overview">AWS 認定デベロッパー アソシエイト模擬試験問題集（3回分195問）</a></p>

<ul>
<li>1/25 模擬試験① 41%正解 (27/65)</li>
<li>2/1 模擬試験② 44%正解 (29/65)</li>
<li>2/2 模擬試験③ 47%正解 (31/65)</li>
<li>2/5 模擬試験①（再）67%正解 (44/65)</li>
<li>2/7 模擬試験②（再）64%正解 (42/65)</li>
<li>2/8 模擬試験③（再）72%正解 (47/65)</li>
</ul>


<p>またむずいんだろうなと思ってたのですが実際にやってみると..めっちゃむずくてへこみました。へこんでばっかです。<br />
正直①やったとき諦めたほうがよいかな(´・ω・｀)とも思いました。<br />
Beanstalk めっちゃ出るなと思った記憶。。<br />
それぞれ2回やりましたが2回目は正解覚えちゃっているのもあるので油断しないようにしました。</p>

<h3>7.ハンズオン</h3>

<p>触っておきたかったサービスだけやってみましたが、本当はもっとやったほうがよいのかなーと思います。</p>

<ul>
<li>2/2 <a href="https://qiita.com/icck/items/e30d62e878b1b2c6f3d7">5分でAWS Elastic Beanstalk(作って、修正して、お片付け) - Qiita</a></li>
<li>2/2 <a href="https://qiita.com/icck/items/9271056c97b825838ff3">はじめてのECS（Fargete） - Qiita</a></li>
<li>2/2 <a href="https://dev.classmethod.jp/cloud/aws/getting-start-api-gateway/">ゼロから作りながら覚えるAPI Gateway環境構築 ｜ Developers.IO</a></li>
<li>2/4 <a href="https://pages.awscloud.com/event_JAPAN_Hands-on-for-Beginners-Serverless-2019_LP.html?trk=aws_blog">AWS Hands-on for Beginners | AWS</a> これだいぶ良かったかな。X-Rayも追加してみたりした。</li>
</ul>


<h3>8.【読書】AWS認定資格試験テキスト AWS認定 ソリューションアーキテクト-アソシエイト</h3>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07R1H87Y1/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51bzFAZE7HL._SL160_.jpg" class="hatena-asin-detail-image" alt="AWS認定資格試験テキスト　AWS認定 ソリューションアーキテクト-アソシエイト" title="AWS認定資格試験テキスト　AWS認定 ソリューションアーキテクト-アソシエイト"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07R1H87Y1/hatena-blog-22/">AWS認定資格試験テキスト　AWS認定 ソリューションアーキテクト-アソシエイト</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%BA%B4%A1%B9%CC%DA%20%C2%F3%CF%BA" class="keyword">佐々木 拓郎</a>,<a href="http://d.hatena.ne.jp/keyword/%CE%D3%20%BF%B8%B0%EC%CF%BA" class="keyword">林 晋一郎</a>,<a href="http://d.hatena.ne.jp/keyword/%B6%E2%DF%B7%20%B7%BD" class="keyword">金澤 圭</a></li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> SBクリエイティブ</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/04/20</li><li><span class="hatena-asin-detail-label">メディア:</span> Kindle版</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>サーバレス中心にデベロッパー中心出題範囲だけやっている感じになってしまっていたので、EC2やRDSなどの基礎的なところを中心に最後の1週間の通勤時間に1周する。<br />
SAA受ける際の最初に読んでいた本ですが、内容が入ってくる感じがしたので当時は知識量が足りてなかったんだなあと感じました。<br />
細かいところまで読んでいるとデベロッパーの範囲と思われる初期値や設定値のことまで書いてあったのでなかなかよくできている本というのを再発見。</p>

<h2>本試験</h2>

<p>今日いつもどおり10時からやってきました。<br />
じっくり1時間20分で1週目完了、10分見直して変に入れ替えしまいそうな気になって30分残しで終了しました。</p>

<p>終了ボタン押す前の感覚</p>

<ul>
<li>20% => 正解</li>
<li>30% => たぶん正解</li>
<li>45% => どっちか分からない</li>
<li>05% => 不正解</li>
</ul>


<p>結果は845点で合格。<br />
（スコアレポート当日でも出るみたい）</p>

<p>Udemy模試やってたので問題自体はすんなり入ってくる（そんなに難しく感じない）けど選択肢はどれだろっていうのが結構ありました。<br />
前日、当日に公式サンプルと模試をやったのが今回も良かった気がします。</p>

<p>想定していたレベル感と出題範囲だったといえばそうですが、SAAのときより分からない問題多かった印象だったので落ちるかもと試験中は思いました。</p>

<h2>まとめ</h2>

<p>巷（多くのQiitaやブログなど）で言われている、SAA取れたらDVAも簡単、は普段AWS触っているエンジニア目線の話であって、実務未経験かつ資格取得ベースでAWSを勉強している人にとってはかなりハードルが高かった印象。<br />
それでもプラクティショナーやSAA勉強し始めたときに感じるインフラ（IT）用語／サービスの種類や特長を無限に覚えないといけない（という錯覚による）絶望感に比べると、今回はそれを覚えた上でどこまで細かいことを覚えられるか、なので時間を掛ければどうにかなる気もしてました。</p>

<p>API Gateway や Codeシリーズ は自身もわりと絡むサービス領域（フロントエンド）ではあるので、比較的きちんと身につけようと思うことができました。<br />
Amplify、Lightsail などちょっとプライベートで触ってみたいサービスかなと感じそういうサービスを知ることができてそういう面でもよかったす。</p>

<p>アソシエイトレベル残りSysOps、どうしようかなあと思いますが3月入ると忙しそうだし、どうせいずれは受けたくなるのでこのまま継続してがんばります。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Nunjucks を使ってみる'
description: ''
publishDate: '02/03/2020 22:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200203155303.png" alt="f:id:jotaki:20200203155303p:plain" title="f:id:jotaki:20200203155303p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>JavaScript製のHTMLテンプレート <a href="https://mozilla.github.io/nunjucks/">Nunjucks</a> を初めて使ったのでメモ書きしておきます。<br />
タスクランナーはGulp使ってます。</p>

<h3>各ページ共通のhtmlの骨格をつくる</h3>

<p>head.njk, header.njk, footer.njk の3つのファイルはまた別ファイルになりますが、各ページ共通の骨格を作るには default.njk と index.html に次のように書く。</p>

<p>index.html</p>

<pre class="code lang-html" data-lang="html" data-unlink>{% extends '_module/layout/default.njk' %}
{% block content %}
  <span class="synComment">&lt;!-- ここに書く内容が `&lt;main class=&quot;main&quot;&gt;` と `&lt;/main&gt;` の間に挿入される --&gt;</span>
{% endblock %}
</pre>


<p>_module/layout/default.njk</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!DOCTYPE html&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">html</span><span class="synIdentifier"> </span><span class="synType">lang</span><span class="synIdentifier">=</span><span class="synConstant">&quot;ja-jp&quot;</span><span class="synIdentifier">&gt;</span>
  {% include &quot;_module/common/head.njk&quot; %}
<span class="synIdentifier">&lt;</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
  {% include &quot;_module/common/header.njk&quot; %}
  <span class="synIdentifier">&lt;</span><span class="synStatement">main</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;main&quot;</span><span class="synIdentifier">&gt;</span>
    {% block content %}{% endblock %}
  <span class="synIdentifier">&lt;/</span><span class="synStatement">main</span><span class="synIdentifier">&gt;</span>
  {% include &quot;_module/common/footer.njk&quot; %}
<span class="synIdentifier">&lt;/</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">html</span><span class="synIdentifier">&gt;</span>
</pre>


<h3>変数で値を渡す</h3>

<p><code>set hoge =</code> で変数を宣言する。<br />
ページタイトルやmeta系の記述などで使う場合</p>

<p>index.html （各ページ設定）</p>

<pre class="code lang-html" data-lang="html" data-unlink>{%
  set page = {
    name: 'トップページ'
  }
%}
{% include &quot;_module/common/head.njk&quot; %}
</pre>


<p>_module/common/head.njk</p>

<pre class="code lang-html" data-lang="html" data-unlink>{%
  set site = {
    name: 'サイトタイトル'
  }
%}
<span class="synIdentifier">&lt;</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">  </span><span class="synIdentifier">&lt;</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>{{ page.name }} ｜ {{ site.name }}<span class="synIdentifier">&lt;/</span><span class="synStatement">title</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
</pre>


<h3>マクロと引数を使う</h3>

<p>マクロと引数を使うと値を渡してHTMLを生成できる</p>

<p>index.html</p>

<pre class="code lang-html" data-lang="html" data-unlink>  {%- import '_module/component/button.njk' as macro -%}
  {{ macro.button( type='primary', label='ボタンのラベル名', href='https://www.yahoo.co.jp/', blank=true, class='hoge' ) }}
</pre>


<p>呼び出し側（button.njk）にはデフォルトの引数（引数が空だった場合に入る値）をいれておく</p>

<p>_module/component/button.njk</p>

<pre class="code lang-html" data-lang="html" data-unlink>{% macro button( type='primary', label='ボタン', href='#', blank=false, class='' ) -%}
<span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;button button--{{ type | safe }}{{ ' ' + class if class }}&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;button__anchor&quot;</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{{ href }}&quot;</span><span class="synIdentifier">{{ </span><span class="synConstant">' target=&quot;_blank&quot;'</span><span class="synIdentifier"> | safe if blank }}&gt;</span><span class="synUnderlined">{{ label }}</span><span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
{%- endmacro %}
</pre>


<p><code>if</code> を使って分岐や <code>| safe</code> を使ってフィルターがある。<br />
フィルターはいろいろ用意されているので下記を参照<br />
参考: <a href="https://mozilla.github.io/nunjucks/templating.html">https://mozilla.github.io/nunjucks/templating.html</a></p>

<h3>ループを使う</h3>

<p>パンくずを作ってみる</p>

<p>おもに <a href="https://qiita.com/toshifumiimanishi/items/d3fd1035697618c3c33b">詳解 Nunjucks − Mozilla 謹製テンプレートエンジン - Qiita</a> のコピペですが、パンくずも下記のように作成できます。</p>

<p>index.html</p>

<pre class="code lang-html" data-lang="html" data-unlink>{%
  set breadcrumbs = [
    {
      item: '親ページ名',
      href: '/parent/'
    },
    {
      item: '子ページ名'
    }
  ]
%}
{% include '_module/component/breadcrumb.njk' %}
</pre>


<p>_module/component/breadcrumb.njk</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;breadcrumb&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">ol</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;breadcrumb__list&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;breadcrumb__item&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;breadcrumb__anchor&quot;</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">span</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;breadcrumb__label&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">トップページ</span><span class="synIdentifier">&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
    {%- for breadcrumb in breadcrumbs %}
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;breadcrumb__item&quot;</span><span class="synIdentifier">&gt;</span>
      {%- if loop.last %}
      <span class="synIdentifier">&lt;</span><span class="synStatement">span</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;breadcrumb__label&quot;</span><span class="synIdentifier">&gt;</span>{{ breadcrumb.item }}<span class="synIdentifier">&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span>
      {%- else %}
      <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;breadcrumb__anchor&quot;</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{{ breadcrumb.href }}&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">span</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;breadcrumb__label&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">{{ breadcrumb.item }}</span><span class="synIdentifier">&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
      {%- endif %}
    <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
    {%- endfor %}
  <span class="synIdentifier">&lt;/</span><span class="synStatement">ol</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>いまのところ正直EJSとの違いを実感できていませんが（Nunjucksのほうが強力らしい）慣れれば使えそうなので引き続き使っていきたいとおもいます。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】AWS認定アソシエイト3資格対策'
description: ''
publishDate: '02/02/2020 17:12:14'
---

[CONTENTS-START]
<p>AWSデベロッパーアソシエイト試験を受けるにあたり、専門ではないですがアソシエイトレベルの出題サービスが網羅されているこの本を読みました。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4865941991/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51xwIZksknL._SL160_.jpg" class="hatena-asin-detail-image" alt="AWS認定アソシエイト3資格対策~ソリューションアーキテクト、デベロッパー、SysOpsアドミニストレーター~" title="AWS認定アソシエイト3資格対策~ソリューションアーキテクト、デベロッパー、SysOpsアドミニストレーター~"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4865941991/hatena-blog-22/">AWS認定アソシエイト3資格対策~ソリューションアーキテクト、デベロッパー、SysOpsアドミニストレーター~</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%CA%BF%BB%B3%20%B5%A3" class="keyword">平山 毅</a>,<a href="http://d.hatena.ne.jp/keyword/%B2%AC%20%C3%D2%CC%E9" class="keyword">岡 智也</a>,<a href="http://d.hatena.ne.jp/keyword/%C3%D3%C5%C4%20%C2%E7" class="keyword">池田 大</a>,<a href="http://d.hatena.ne.jp/keyword/%B8%B6%20%B9%BE%CD%FC%B2%C2" class="keyword">原 江梨佳</a>,<a href="http://d.hatena.ne.jp/keyword/%DF%B7%C5%C4%20%C2%F3%CC%E9" class="keyword">澤田 拓也</a>,<a href="http://d.hatena.ne.jp/keyword/%B8%B6%20%BD%D3%C2%C0%CF%BA" class="keyword">原 俊太郎</a>,<a href="http://d.hatena.ne.jp/keyword/%C3%E7%C2%BC%20%CD%A6%CE%BC" class="keyword">仲村 勇亮</a>,<a href="http://d.hatena.ne.jp/keyword/%BE%E5%C2%BC%20%CD%B4%B5%B1" class="keyword">上村 祐輝</a>,<a href="http://d.hatena.ne.jp/keyword/%C4%BB%C3%AB%C9%F4%20%BE%BC%B4%B2" class="keyword">鳥谷部 昭寛</a></li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> リックテレコム</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/06/13</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>概要・ポイント</h2>

<ul>
<li>第1章 AWS認定試験の概要と特徴</li>
<li>第2章 データセンター</li>
<li>第3章 コンピューティング</li>
<li>第4章 ネットワーキング</li>
<li>第5章 高可用性</li>
<li>第6章 ストレージ</li>
<li>第7章 データベース</li>
<li>第8章 アナリティクス</li>
<li>第9章 セキュリティ</li>
<li>第10章 AWSサービスを活用した開発</li>
<li>第11章 アプリケーションサービス</li>
<li>第12章 サーバーレス</li>
<li>第13章 モニタリングと運用自動化</li>
<li>第14章 コスト最適化</li>
<li>第15章 デプロイメントとプロビジョニング</li>
</ul>


<p>ソリューションアーキテクトアソシエイト専門の対策本は何冊か出ていますが、デベロッパー、SysOpsも含めたアソシエイトレベルに出るレベルを網羅した試験対策本。<br />
サービス各章のはじめにどの試験で出やすいかの色分けがされており、1度目は通しで読んで2度目はデベロッパーの出題範囲（7章データベース以降）をだけ復習する使い方をしました。</p>

<p>まだ本試験を受けているのでなんとも言えませんが、公式のサンプル問題、模擬試験、Udemyのサンプル試験集を受けていて感じるレベル感（説明具合）に比べるとかなり大雑把にサービスの概要を紹介している本かなと思います。<br />
本のなかでも詳しくはAWSのこのページ参照といった内容や、この部分はハンズオンして覚えておくことが重要といった説明がされているので、あくまでも取っ掛かりを掴むための本という印象でした。</p>

<h2>良かった点</h2>

<ul>
<li>DVA試験範囲のサービスがだいたい網羅できる（たぶん）</li>
</ul>


<h2>惜しかった点</h2>

<ul>
<li>図の分かりやすさがイマイチ</li>
<li>新し目のサービスは掲載されていない（CognitoやAppSyncなど）</li>
</ul>


<h2>まとめ</h2>

<p>心の持ちようなのですが、各レベルで自分は一回なにかしらの本読んどかないと不安になってしまうのでまたいつかSysOps受けるときに再度見直すかなと思います。<br />
デベロッパー今の所めちゃむずですががんばります。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2020年1月 振り返り'
description: ''
publishDate: '02/02/2020 16:56:46'
---

[CONTENTS-START]
<h1>結果</h1>

<h2>ブログ</h2>

<p><strong>目標：月 8 回（週2回）更新</strong><br />
<strong>結果：月 10 回 更新</strong></p>

<h2>読書</h2>

<p><strong>目標：月 1 冊</strong><br />
<strong>結果：月 2 冊</strong></p>

<h1>反省点など</h1>

<p>業務で使っていることをTipsレベルでいいので記事にしておきたい。</p>

<h1>来月に向けて</h1>

<p>DVAの勉強しているので受かってSysOpsも受けたい。<br />
ブログは年100記事目処にしたいと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress + Nuxt.js でポートフォリオサイトを作る その5'
description: ''
publishDate: '01/15/2020 20:00:00'
---

[CONTENTS-START]
<p>WordPressサイト（<a href="http://works.yuheijotaki.com/">http://works.yuheijotaki.com/</a>）の REST API と Nuxt.js でポートフォリオサイトを作成する。その5</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190924093802.png" alt="f:id:jotaki:20190924093802p:plain" title="f:id:jotaki:20190924093802p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/works-nuxt">https://github.com/yuheijotaki/works-nuxt</a><br/>
Netlify: <a href="https://works-yuheijotaki.netlify.com/">https://works-yuheijotaki.netlify.com/</a></p>

<h2>Pug と Nuxt.js(Vue.js)</h2>

<p>はじめてpug使ってみたのでちょっととまどったところ<br/>
属性名と属性値はぜんぶ <code>()</code> の中に突っ込めばOKという感じですね</p>

<h3><code>&lt;NuxtLink&gt;</code></h3>

<p>html</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;</span>NuxtLink<span class="synIdentifier"> :to=</span><span class="synConstant">&quot;`/work/${item.slug}/`&quot;</span><span class="synIdentifier">&gt;</span>detail<span class="synIdentifier">&lt;/</span>NuxtLink<span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
</pre>


<p>pug</p>

<pre class="code lang-html" data-lang="html" data-unlink>p
  nuxt-link(:to=&quot;`/work/${item.slug}/`&quot;) detail
</pre>


<h3><code>&lt;childComponent&gt;</code></h3>

<p>html</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>ChildComponent
<span class="synIdentifier">    v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;(post,index) in posts&quot;</span>
<span class="synIdentifier">    :item=</span><span class="synConstant">&quot;post&quot;</span>
<span class="synIdentifier">    :key=</span><span class="synConstant">&quot;index&quot;</span>
<span class="synIdentifier">  &gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
</pre>


<p>pug</p>

<pre class="code lang-html" data-lang="html" data-unlink>ul
  ChildComponent(
    v-for=&quot;(post,index) in posts&quot;
    :item=&quot;post&quot;
    :key=&quot;index&quot;
    )
  )
</pre>


<h3><code>:src (v-bind:src)</code></h3>

<p>html</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> :</span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;image.url&quot;</span><span class="synIdentifier"> </span><span class="synType">alt</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title&quot;</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-html" data-lang="html" data-unlink>img(
  :src=&quot;image.url&quot;
  :alt=&quot;title&quot;
)
</pre>


<h3><code>@click (v-on:click)</code></h3>

<p>html</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">a</span>
<span class="synIdentifier">    @click=</span><span class="synConstant">&quot;clickedEvent('hoge')&quot;</span>
<span class="synIdentifier">  &gt;</span>Hoge<span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
</pre>


<p>pug</p>

<pre class="code lang-html" data-lang="html" data-unlink>li
  a(
    @click=&quot;clickedEvent('hoge')&quot;
  ) Hoge
</pre>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】UX(ユーザー・エクスペリエンス)虎の巻-ユーザー満足度を向上する設計開発テクニック'
description: ''
publishDate: '01/10/2020 09:40:52'
---

[CONTENTS-START]
<p>会社の課題でUXに関する本を読む目標を立てていたので、入門書的な標題の本を読みました。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4526077429/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/511K4zUipyL._SL160_.jpg" class="hatena-asin-detail-image" alt="UX(ユーザー・エクスペリエンス)虎の巻-ユーザー満足度を向上する設計開発テクニック-" title="UX(ユーザー・エクスペリエンス)虎の巻-ユーザー満足度を向上する設計開発テクニック-"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4526077429/hatena-blog-22/">UX(ユーザー・エクスペリエンス)虎の巻-ユーザー満足度を向上する設計開発テクニック-</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%BA%E4%C5%EC%20%C2%E7%CA%E5" class="keyword">坂東 大輔</a></li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 日刊工業新聞社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2017/09/26</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>概要・ポイント</h2>

<ul>
<li>第1章 UX概論</li>
<li>第2章 UXの前提</li>
<li>第3章 UX向上メソッドの紹介</li>
<li>第4章 UX向上の実践</li>
<li>第5章 UX向上の具体例</li>
<li>第6章 UX向上のためのUI設計</li>
<li>第7章 UXの神髄</li>
</ul>


<p>3章までが概要や歴史、4・5章が手法やケーススタディ、その他がまとめ的な構成です。</p>

<p>虎の巻と書いているだけあって<br/>
概要面ではUXの歴史のような背景から、今の時代になぜ求められているか、<br/>
手法面ではペルソナやカスタマージャーニーマップなどの基礎手法も含められており初学者にもやさしい内容と思いました。<br/>
気になった点を何点かメモしておきます。</p>

<h3>UXの学説</h3>

<p>何個か有名なのがある。</p>

<ul>
<li>「誰のためのデザイン？」（affordance）/ D.A.Norman</li>
<li>UXのハニカム構造 / Peter Morville</li>
<li>ユーザーエクスペリエンスの要素 / Jesse James Garrett</li>
</ul>


<p>参考：</p>

<ul>
<li><a href="https://www.creativevillage.ne.jp/30892">実践的UXデザイン論　第2回 良いUXデザインとは　〜ノーマンやモービルやギャレットらと共に〜</a></li>
<li><a href="https://semanticstudios.com/user_experience_design/">User Experience Design</a></li>
<li><a href="https://www.asobou.co.jp/blog/web/ux-honeycomb">優れたユーザーエクスペリエンスを実現するためのUXハニカム : ビジネスとIT活用に役立つ情報</a></li>
<li><a href="https://u-site.jp/lecture/ux-ui">UX/UI – U-Site</a></li>
</ul>


<h3>UXの追い風となる時代の流れ</h3>

<p>(a).「人月ビジネス」から「パッケージビジネス」へ<br/>
(b).「属人型」から「自己完結型」へ<br/>
(c).「大企業向け」から「中小企業向け」へ<br/>
(d).「売り逃げ」から「体験版」へ<br/>
(e).「売切型」から「継続課金型」へ<br/>
(f).「モノ」から「コト」へ</p>

<p>ざっくりですが以上のような時代変化（傾向）によってよりUXが求められる時代になっている。</p>

<h3>UX向上プロセス</h3>

<p>UX品質の評価及び改善を体系的に行っていくためのプロセスには、ソフトウェア工学における「ユースケース」の考え方を用いることが重要。</p>

<p>手順としては下記を踏むのがベースとなる。</p>

<ol>
<li>ユースケースを洗い出す</li>
<li>ユースケースの詳細を決める</li>
<li>UXチェックリストを作成する</li>
<li>UXテストを実施する</li>
<li>UX品質の評価を行う</li>
<li>設計の改善につなげる</li>
</ol>


<h3>UXテストの実施</h3>

<blockquote><p>UXテストでは、ユーザーの感情というつかみところのない曖昧な観点を品質評価の観点に盛り込む必要性があります。
この「感情」という厄介な相手をいかにして合理的な形でテストして評価すべきかということが大きな課題です。</p></blockquote>

<h3>UX品質の評価を行う</h3>

<blockquote><p>ここまでの議論で語ってきましたが、UXは定性的で柔らかいものであるため、つかみどころがありません。よって、UX向上の効果を測定するのは難しい課題です。</p></blockquote>

<p>とした上で、極力結果を数値化することに努めるのが大事。<br/>
例としては想定したユースケースの数や、UXチェックリストの作成/消化件数など。</p>

<h2>良かった点</h2>

<ul>
<li>UXに関して時代の流れや基本原則的なことの知識がついた</li>
<li>手法に関しても一通り網羅ができ、具体例も一部学べてよかった</li>
</ul>


<h2>惜しかった点</h2>

<ul>
<li>一般的なソフトウェア（メッセンジャーアプリ）、ハードウェア（ハードディスクレコーダー）についてのケースはあったが、一般的なWebサイトの場合はどうなるのかが気になった。</li>
<li>UXのアンチパターンの例が小出しの感じ</li>
</ul>


<p>内容で触れられてもいますが、いずれもこの本では網羅できない領域なので他の書籍で具体例などを探すのが良いと思いました。</p>

<h2>まとめ</h2>

<p>実際に導入するのは難しいなとは思いつつ、中で触れられていたアンチパターンを作ってその点は破らないようにするなど、気軽に導入できる点からはじめるのがよいかなと思いました。</p>

<p>もう少し具体例も欲しいのとやっぱり始めやすい領域はUIなので、その点から深くもっと知れたらいいなと感じています。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress + Nuxt.js でポートフォリオサイトを作る その4'
description: ''
publishDate: '01/09/2020 20:21:00'
---

[CONTENTS-START]
<p>WordPressサイト（<a href="http://works.yuheijotaki.com/">http://works.yuheijotaki.com/</a>）の REST API と Nuxt.js でポートフォリオサイトを作成する。その4</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190924093802.png" alt="f:id:jotaki:20190924093802p:plain" title="f:id:jotaki:20190924093802p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/works-nuxt">https://github.com/yuheijotaki/works-nuxt</a><br/>
Netlify: <a href="https://works-yuheijotaki.netlify.com/">https://works-yuheijotaki.netlify.com/</a></p>

<h3>Netlify にデプロイ</h3>

<p><a href="https://works-yuheijotaki.netlify.com/">Netlifyのサイト</a> にデプロイできたので手順メモ</p>

<ul>
<li>Netlify でアカウント/サイト作成</li>
<li>GitHub のリポジトリと紐付け</li>
<li>nuxt.config.js の設定変更</li>
<li>記事更新時の自動デプロイ有効化</li>
</ul>


<h4>nuxt.config.js の設定変更</h4>

<p>記事の更新時に静的HTMLの生成（<code>npm run generate</code>）できるように nuxt.config.js 仕込む</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  <span class="synStatement">const</span> apiURL = <span class="synConstant">'https://works.yuheijotaki.com'</span>
  <span class="synComment">// ...</span>
  generate: <span class="synIdentifier">{</span>
    interval: 1000,
    routes() <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> Promise.all(<span class="synIdentifier">[</span>
        axios.get(`$<span class="synIdentifier">{</span>apiURL<span class="synIdentifier">}</span>/wp-json/wp/v2/posts?per_page=100&amp;page=1&amp;_embed=1`)
      <span class="synIdentifier">]</span>).then((data) =&gt; <span class="synIdentifier">{</span>
        <span class="synStatement">const</span> posts = data<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>
        <span class="synStatement">return</span> posts.data.map((post) =&gt; <span class="synIdentifier">{</span>
          <span class="synStatement">return</span> <span class="synIdentifier">{</span>
            route: <span class="synConstant">'/work/'</span> + post.slug,
            payload: post
          <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>)
      <span class="synIdentifier">}</span>)
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  <span class="synComment">// ...</span>
</pre>


<h4>記事更新時の自動デプロイ有効化</h4>

<p>WP側でプラグイン <a href="https://ja.wordpress.org/plugins/wp-jamstack-deployments/">JAMstack Deployments</a> をインストール&amp;有効化。<br/>
「設定」 > 「Deployments」からフック対象のカスタム投稿を選択、Build Hook URL をコピーしておく。</p>

<p>Netlify管理画面側で「Deploy settings」 > 「Build hooks」にビルドフックを追加。</p>

<p>以上でGitHubの対象（master）ブランチにプッシュするたび/WordPressの記事更新するたびにデプロイされる環境作成ができた。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200109144217.png" alt="f:id:jotaki:20200109144217p:plain" title="f:id:jotaki:20200109144217p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>参考：</p>

<ul>
<li><a href="https://qiita.com/yahsan2/items/39eb9e3e19f72257084c">【コードある】Nuxt + WordPress で netlify 運用が爆速すぎて神だった - Qiita</a></li>
<li><a href="https://www.expexp.jp/nuxt-js-and-wp-netlify/">Nuxt.jsでWordPressの記事をNetlifyにデプロイする（ざっくり版） – expexp.jp</a></li>
<li><a href="https://hirakublog.com/code/262/">【nuxt.js】WordPressで記事を更新したときにフックしてNetlifyに自動デプロイする方法 | hirakublog ヒラクブログ</a></li>
</ul>


<h3>残りやること</h3>

<ul>
<li>データ登録・調整</li>
<li>全体スタインリング</li>
<li>meta 調整</li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress + Nuxt.js でポートフォリオサイトを作る その3'
description: ''
publishDate: '01/09/2020 08:46:09'
---

[CONTENTS-START]
<p>WordPressサイト（<a href="http://works.yuheijotaki.com/">http://works.yuheijotaki.com/</a>）の REST API と Nuxt.js でポートフォリオサイトを作成する。その3</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190924093802.png" alt="f:id:jotaki:20190924093802p:plain" title="f:id:jotaki:20190924093802p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/works-nuxt">https://github.com/yuheijotaki/works-nuxt</a></p>

<h3>作業フォルダを src/階層にまとめる</h3>

<p>nuxt.config.js に</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  ...
  srcDir: <span class="synConstant">'src/'</span>,
  ...
</pre>


<p>を追記して src/ フォルダ作成後、<br/>
assets/components/layouts/middleware/pages/plugins/static/store ディレクトリを src/ 以下に移動</p>

<p>参考： <a href="https://ja.nuxtjs.org/api/configuration-srcdir/">API: srcDir プロパティ - NuxtJS</a></p>

<h3>.scss を使う</h3>

<p><a href="https://jtk.hatenablog.com/entry/2019/09/24/093747">前回</a> の <code>sass を使う</code> と同じ方法でOK</p>

<h3>.pug を使う</h3>

<p>今回は .vue ファイルでテンプレートエンジンとして pug を使ってみようと思うので pug モジュールも追加する。<br/>
これもsass loaderと同じでかんたんですね</p>

<pre class="code bash" data-lang="bash" data-unlink>$ npm i -D pug pug-loader pug-plain-loader</pre>


<p>components/Logo.vue</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">template</span><span class="synIdentifier"> </span><span class="synType">lang</span><span class="synIdentifier">=</span><span class="synConstant">&quot;pug&quot;</span><span class="synIdentifier">&gt;</span>
  h1
    nuxt-link(to=&quot;/&quot;) index
<span class="synIdentifier">&lt;/</span><span class="synStatement">template</span><span class="synIdentifier">&gt;</span>
</pre>


<p>でできた。</p>

<p>参考： <a href="https://qiita.com/amishiro/items/38fe1b102d7e91a93ada">nuxt.js(v2)でpug/stylusを利用する - Qiita</a></p>

<h3>残りやること</h3>

<ul>
<li>データ登録・調整</li>
<li>全体スタインリング</li>
<li>Netlify へホストする</li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress + Nuxt.js でポートフォリオサイトを作る その2'
description: ''
publishDate: '01/08/2020 22:00:00'
---

[CONTENTS-START]
<p>WordPressサイト（<a href="http://works.yuheijotaki.com/">http://works.yuheijotaki.com/</a>）の REST API と Nuxt.js でポートフォリオサイトを作成する。その2</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190924093802.png" alt="f:id:jotaki:20190924093802p:plain" title="f:id:jotaki:20190924093802p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/works-nuxt">https://github.com/yuheijotaki/works-nuxt</a></p>

<h3>クリックイベントと <code>$emit</code> / <code>props</code></h3>

<p>コンポーネント名を <code>Filter.vue</code> にしようと思ったのですが、予約語だったので <code>Search.vue</code> に修正<br/>
コードは下記ですが一部省略</p>

<p>components/Search.vue ではクリックしたカテゴリーを <code>$emit</code> する</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;div&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a @click=<span class="synConstant">&quot;clickedCategoryEvent('All')&quot;</span>&gt;All&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a @click=<span class="synConstant">&quot;clickedCategoryEvent('Front-end')&quot;</span>&gt;Front-end&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a @click=<span class="synConstant">&quot;clickedCategoryEvent('WordPress')&quot;</span>&gt;WordPress&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a @click=<span class="synConstant">&quot;clickedCategoryEvent('Web Design')&quot;</span>&gt;Web Design&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a @click=<span class="synConstant">&quot;clickedCategoryEvent('Tumblr')&quot;</span>&gt;Tumblr&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  methods: <span class="synIdentifier">{</span>
    clickedCategoryEvent(category) <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.$emit(<span class="synConstant">'clickedCategory'</span>,category);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<p>一度 pages/index.vue で受け取り、 components/WorksList.vue へ <code>props</code> する</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;div&gt;
    &lt;Search @clickedCategory=<span class="synConstant">&quot;selectedCategory&quot;</span> /&gt;
    &lt;WorksList :filterCategory=<span class="synConstant">&quot;propsCategory&quot;</span> /&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  ...
  data () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      category: <span class="synConstant">'All'</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    selectedCategory (category) <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.category = category
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  computed: <span class="synIdentifier">{</span>
    propsCategory: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">this</span>.category
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<p>components/WorksList.vue で受け取る</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;script&gt;
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  ...
  props:<span class="synIdentifier">{</span>
    <span class="synConstant">'filterCategory'</span>: <span class="synIdentifier">{</span>
      type: <span class="synType">String</span>,
      <span class="synStatement">default</span>: <span class="synConstant">'All'</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  ...
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<h3>クリックされたカテゴリーを絞り込み表示</h3>

<p>components/WorksList.vue<br/>
<code>mounted :function(){</code> にてAPIから投稿を引っ張ってきて<br/>
<code>computed: {...</code> にてpropsしてきたカテゴリーに属する投稿をフィルタリング</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
&lt;script&gt;
<span class="synStatement">import</span> axios from <span class="synConstant">&quot;axios&quot;</span>;

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">'WorksList'</span>,
  components: <span class="synIdentifier">{</span>
    WorksItem
  <span class="synIdentifier">}</span>,
  props:<span class="synIdentifier">{</span>
    <span class="synConstant">'filterCategory'</span>: <span class="synIdentifier">{</span>
      type: <span class="synType">String</span>,
      <span class="synStatement">default</span>: <span class="synConstant">'All'</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  data () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      posts: <span class="synIdentifier">[]</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  mounted :<span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
    axios.get( <span class="synConstant">'https://works.yuheijotaki.com/wp-json/wp/v2/posts?per_page=100'</span> )
    .then( response =&gt; <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.posts = response.data
    <span class="synIdentifier">}</span>)
    .<span class="synStatement">catch</span>( error =&gt; <span class="synIdentifier">{</span>
      console.log(error)
    <span class="synIdentifier">}</span>)
  <span class="synIdentifier">}</span>,
  computed: <span class="synIdentifier">{</span>
    filterWorks: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synStatement">const</span> posts = <span class="synIdentifier">this</span>.posts
      <span class="synStatement">const</span> filterCategory = <span class="synIdentifier">this</span>.filterCategory
      <span class="synStatement">if</span> ( filterCategory !== <span class="synConstant">'All'</span> ) <span class="synIdentifier">{</span>
        <span class="synStatement">return</span> <span class="synIdentifier">this</span>.posts.filter( <span class="synIdentifier">function</span>( post ) <span class="synIdentifier">{</span>
          <span class="synStatement">if</span> ( post.category_name.indexOf(filterCategory) &gt;= 0 ) <span class="synIdentifier">{</span>
            <span class="synStatement">return</span> post
          <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>)
      <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
        <span class="synComment">// 初期表示 or `All` を選択した場合</span>
        <span class="synStatement">return</span> <span class="synIdentifier">this</span>.posts
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<p><code>&lt;template&gt;</code> は computed で絞り込んだ投稿からループする。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;ul&gt;
    &lt;WorksItem
      v-<span class="synStatement">for</span>=<span class="synConstant">&quot;(post,index) in filterWorks&quot;</span>
      :item=<span class="synConstant">&quot;post&quot;</span>
      :key=<span class="synConstant">&quot;index&quot;</span>
    /&gt;
  &lt;/ul&gt;
&lt;/template&gt;
</pre>


<h3>残りやること</h3>

<ul>
<li>作業ファイルを src/ にまとめる</li>
<li>データ登録・調整やスタインリング</li>
<li>Netlify へホストする</li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress + Nuxt.js でポートフォリオサイトを作る その1'
description: ''
publishDate: '01/07/2020 22:00:00'
---

[CONTENTS-START]
<p>WordPressサイト（<a href="http://works.yuheijotaki.com/">http://works.yuheijotaki.com/</a>）の REST API と Nuxt.js でポートフォリオサイトを作成する。その1</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190924093802.png" alt="f:id:jotaki:20190924093802p:plain" title="f:id:jotaki:20190924093802p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>GitHub: <a href="https://github.com/yuheijotaki/works-nuxt">https://github.com/yuheijotaki/works-nuxt</a></p>

<h3>サイト構成</h3>

<p>下記のシンプルな構成で行う</p>

<ul>
<li>トップページ (<code>/</code>)

<ul>
<li>Works一覧（クリックで詳細ページへ）</li>
<li>カテゴリーごとの絞り込み機能</li>
</ul>
</li>
<li>Works詳細ページ (<code>/work/_slug.vue</code>)

<ul>
<li>サイト名などの情報、画面キャプチャ等</li>
</ul>
</li>
</ul>


<h3>インストールと起動</h3>

<pre class="code bash" data-lang="bash" data-unlink># create-nuxt-app
$ npx create-nuxt-app [ProjectFolderName]</pre>




<pre class="code bash" data-lang="bash" data-unlink># 起動
$ cd [ProjectFolderName]
$ npm run dev</pre>


<h3>ページ/コンポーネント</h3>

<pre class="code" data-lang="" data-unlink>root
|
└ pages/
|   └ index.vue
|   └ work/
|      └ _slug.vue
└ components/
    └ Logo.vue
    └ Filter.vue
    └ WorksList.vue
    └ WorksItem.vue
    └ WorksSingle.vue</pre>


<h3>スラッグベースのルーティング</h3>

<p>前回もつまづきましたが、今回はWPの通常投稿をスラッグ形式でルーティングする。<br/>
エンドポイントは、 <code>'https://hoge.com/wp-json/wp/v2/posts?slug=[SlugName]</code> となり、これを <code>async asyncData( { params } ) {...</code> で取ってくる必要がある。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;div&gt;
    &lt;WorksSingle
      :post=<span class="synConstant">&quot;post&quot;</span>
    /&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">import</span> axios from <span class="synConstant">'axios'</span>
<span class="synStatement">import</span> WorksSingle from <span class="synConstant">'~/components/WorksSingle.vue'</span>

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  components: <span class="synIdentifier">{</span>
    WorksSingle
  <span class="synIdentifier">}</span>,
  data () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      post: <span class="synIdentifier">{}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  async asyncData( <span class="synIdentifier">{</span> params <span class="synIdentifier">}</span> ) <span class="synIdentifier">{</span>
    <span class="synStatement">const</span> <span class="synIdentifier">{</span> data <span class="synIdentifier">}</span> = await axios.get(<span class="synConstant">'https://hoge.com/wp-json/wp/v2/posts?slug='</span> + params.slug)
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      post: data<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<p>参考：</p>

<ul>
<li><a href="https://wordpress.stackexchange.com/questions/257505/how-do-you-retrieve-a-post-by-slug-name-through-rest-api/284302">urls - How do you retrieve a post by slug name through REST API? - WordPress Development Stack Exchange</a></li>
<li><a href="https://reffect.co.jp/vue/nuxt-js-axios-asyncdata">Nuxt.jsにおけるaxios, asyncDataの使い方 | アールエフェクト</a></li>
</ul>


<p>次回はカテゴリーごとの絞り込み機能を実装する。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'JAMstack と Headless CMS'
description: ''
publishDate: '01/06/2020 21:50:00'
---

[CONTENTS-START]
<p>Headless CMS について調べる用事があったのですが、関わりが深そうな JAMstack についても調べてみました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200106110409.jpg" alt="f:id:jotaki:20200106110409j:plain" title="f:id:jotaki:20200106110409j:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>JAMstack とは？</h2>

<blockquote><p>JAMstackはテクノロジーではなく、JAMstackはWebサイトやアプリを構築する新しい方法です。クライアントサイドに基づいた最新のWeb開発アーキテクチャで、Webサーバーには依存しません。</p></blockquote>

<p>引用元： <a href="https://coliss.com/articles/build-websites/operation/javascript/about-jamstack.html">クライアントサイドに基づいたWeb開発アーキテクチャ「JAMstack」がなぜ人気になっているのか | コリス</a></p>

<p>Netlify の創業者発の言葉で <strong>JavaScript</strong> / <strong>API</strong> / <strong>Markup</strong> の頭文字をとったものとのこと。<br/>
こういう名前のサービス名ではなく思想またはアーキテクチャのこと。</p>

<p>生成された静的HTMLのホスティングサービスとしては Netlify や Firebase を使うのが一般的のよう。</p>

<h2>Headless CMS とは？</h2>

<blockquote><p>ヘッドレスの「ヘッド」は、ビュー（表示する画面）を指します。ヘッドレスなので、ビューの無いCMSということになります。</p></blockquote>

<hr />

<blockquote><p>ではヘッドレスCMSの場合、ビューはどうするのか？<br/>
CMS外で、自作する必要があります。</p></blockquote>

<p>引用元： <a href="https://microcms.io/blog/what-is-headlesscms/">ヘッドレスCMSとは何か？従来CMSとの違いやメリデメを解説！</a></p>

<p>管理画面（コンテンツ編集者側）とフロント表示（訪問者側）を切り離して、間にAPIを持たせるサイトにおける管理画面側が Headless CMS ということのようです。</p>

<p>管理画面側は WordPress 使ってフロントを REST API から受けても純粋な Headless CMS ではなさそうな感じですね。この場合は WordPress as a Headless CMS と定義したほうがわかりやすそう。</p>

<p>Headless CMS を使って作られたフロント表示は <strong>JavaScript</strong> / <strong>API</strong> / <strong>Markup</strong> が使われる（ことが大半）なので JAMstack アーキテクチャを採用したサイトと定義できるかと思います。</p>

<h3>Headless CMS のメリット・デメリット</h3>

<p>引用元： <a href="https://qiita.com/reflet/items/55665a79940a96252c68">Headless CMS - Qiita</a></p>

<h4>メリット</h4>

<ul>
<li>フロントエンド側の自由度が高まる</li>
<li>配信対象の拡大</li>
<li>フロントとバックエンドの開発分離</li>
</ul>


<h4>デメリット</h4>

<ul>
<li>開発が専門的になり、開発工数が増加する</li>
<li>APIの品質への要求が高い</li>
</ul>


<p>いろいろ記事を読んでいたのですが、あまり小規模なWebサイトに向いていないという意見と、一部分にも適用できるから導入が楽、という見方が混在していました。<br/>
あとはデメリットとして開発コスト増につながりますが、下書きプレビューがしづらいという意見も多くありました。</p>

<h3>主な Headless CMS サービス</h3>

<ul>
<li><a href="https://www.contentful.com/">API-First CMS to Power All Digital Products | Contentful</a></li>
<li><a href="https://strapi.io/">Strapi - Open source Node.js Headless CMS 🚀</a></li>
<li><a href="https://microcms.io/">microCMS | APIベースの日本製ヘッドレスCMS</a></li>
<li><a href="https://flamelink.io/">Flamelink CMS</a></li>
</ul>


<p>Flamelink は Firebase で作られたCMSなのでちょっと毛色は違うと思いますが、海外では Contentful と Strapi のどっちがいいのみたいな話になっているようです。<br/>
参考： <a href="https://stackshare.io/stackups/contentful-vs-strapi">Contentful vs Strapi | 違いは何ですか？</a></p>

<p>microCMS は日本製で比較的新しいサービス。比較は下記記事などが詳しいです。</p>

<ul>
<li><a href="https://qiita.com/to4-yanagi/items/4e431b99b78401ef65ca">4種類のHeadlessCMSを試してみた感想（wordpress/strapi/contentful/microCMS） - Qiita</a></li>
<li><a href="https://qiita.com/cheez921/items/81cba28e4b815709f863">Headless CMS 軽く触って比較してみた(Contentful / microCMS / strapi / GraphCMS) - Qiita</a></li>
</ul>


<h2>まとめ</h2>

<p>2019年から熱気を帯びてきた感じのする JAMstack / Headless CMS というワードですが、概要などなんとなく掴めたので今度は実際になにか作ってみたいと思います。</p>

<p>個人的には管理画面や仕組み的にも WordPress に慣れているので Nuxt 使って構築してみたいと考えています。</p>

<h2>その他 参考リンク</h2>

<h4>JAMstack</h4>

<ul>
<li><a href="https://jamstack.org/">Jamstack | JavaScript, APIs, and Markup</a></li>
<li><a href="https://employment.en-japan.com/engineerhub/entry/2019/12/10/103000">JAMstackってなに？実践に学ぶ高速表示を実現するアーキテクチャの構成 - エンジニアHub｜若手Webエンジニアのキャリアを考える！</a></li>
<li><a href="https://microcms.io/blog/world-jamstack-and-the-future/">世界のJAMstackとこれから</a></li>
<li><a href="https://www.pxgrid.com/service/jamstack.html">JAMstack | 株式会社ピクセルグリッド</a></li>
<li><a href="https://code-log.hatenablog.com/entry/2018/11/08/215329">モダンなweb開発「JAMstack」アーキテクチャについて調べてみた - code-log</a></li>
</ul>


<h4>Headless CMS</h4>

<ul>
<li><a href="https://qiita.com/daikiojm/items/3fbde3c88a7d0a053675">次世代Headless CMS「contentful」事始め - Qiita</a></li>
<li><a href="http://lab.astamuse.co.jp/entry/2019/01/16/114500">strapi+nuxt.jsでHeadless CMSの夜明けを感じる - astamuse Lab</a></li>
<li><a href="https://qiita.com/yutopia898/items/653068aa3d8237f3e89a">最近話題のヘッドレスCMS「microCMS」+Nuxtでサイトを作った話 - Qiita</a></li>
<li><a href="https://paiza.hatenablog.com/entry/2018/11/21/%E4%BB%8A%E3%81%99%E3%81%90%E5%A7%8B%E3%82%81%E3%82%89%E3%82%8C%E3%82%8B%EF%BC%81FIrebase%E3%82%92%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AECMS%E3%81%AB%E5%A4%89%E3%81%88%E3%82%8B%E3%80%8CFlamelink%E3%80%8D">今すぐ始められる！FIrebaseをブログのCMSに変える「Flamelink」を使ってみた！ - paiza開発日誌</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】この1冊で合格! AWS認定ソリューションアーキテクト - アソシエイト テキスト&問題集'
description: ''
publishDate: '01/05/2020 08:09:48'
---

[CONTENTS-START]
<p>ソリューションアーキテクト アソシエイトの試験を受けるにあたり、勉強段階の終盤のほうで読みました。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4046042036/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51Xn-pPCdiL._SL160_.jpg" class="hatena-asin-detail-image" alt="この1冊で合格! AWS認定ソリューションアーキテクト - アソシエイト テキスト&amp;問題集" title="この1冊で合格! AWS認定ソリューションアーキテクト - アソシエイト テキスト&amp;問題集"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4046042036/hatena-blog-22/">この1冊で合格! AWS認定ソリューションアーキテクト - アソシエイト テキスト&amp;問題集</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%AF%A5%BB%A5%F3%A5%C1%A5%E5%A5%A2%B3%F4%BC%B0%B2%F1%BC%D2" class="keyword">アクセンチュア株式会社</a>,<a href="http://d.hatena.ne.jp/keyword/%C0%C4%CC%F8%20%B2%ED%C7%B7" class="keyword">青柳 雅之</a>,<a href="http://d.hatena.ne.jp/keyword/%C8%D3%C5%C4%20%C9%D2%BC%F9" class="keyword">飯田 敏樹</a>,<a href="http://d.hatena.ne.jp/keyword/%B3%C1%BE%C2%20%CE%CF" class="keyword">柿沼 力</a>,<a href="http://d.hatena.ne.jp/keyword/%CC%E7%C8%AA%20%B8%B2%C7%EE" class="keyword">門畑 顕博</a>,<a href="http://d.hatena.ne.jp/keyword/%C2%BE" class="keyword">他</a></li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> KADOKAWA</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/07/20</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>概要・ポイント</h2>

<ul>
<li>第1章 AWS概要</li>
<li>第2章 コンピューティングとストレージ</li>
<li>第3章 セキュリティとネットワーキング</li>
<li>第4章 データベース</li>
<li>第5章 管理とガバナンス</li>
<li>第6章 アプリケーション統合</li>
<li>第7章 分析サービス</li>
<li>第8章 移行とコスト管理のサービス</li>
<li>第9章 模擬試験（65問）</li>
</ul>


<p>アクセンチュアの方々が書いているAWS本。<br/>
基本的な内容を一通りざっくり網羅していて、巻末に模擬試験が本番試験と同じボリュームでついてくる。<br/>
ザ・試験対策本な感じと思う。</p>

<p>各章やサービスにも練習問題がついてきますが、その章で扱っているサービスを選択するだけなので解説を読むだけになる。</p>

<h2>良かった点</h2>

<ul>
<li>情報が新しい。</li>
<li>模擬試験が変に優しくない。</li>
<li>図表がわかりやすい。</li>
</ul>


<p>図表に関しては今までの本が分かりづらかったのか、これまでの総仕上げとしてこの本を読んでいるから入りやすいだけだったかもしれません。<br/>
模擬試験の難易度に関してはUdemyやオレンジ本よりも本番に近いレベル感に思いました。（ただ設問順が偏っているような気もする）</p>

<h2>惜しかった点</h2>

<ul>
<li>模擬試験の解答がオンラインPDF</li>
</ul>


<p>これは本形式全般の欠点なのですが、本の設問／紙に書いた回答／PDFの解答を見比べるのがちょっと厄介でした。</p>

<h2>まとめ</h2>

<p>この1冊で合格、というのは「人による」という感じかなと思いました。<br/>
普段業務でAWSを使いこなしている人がSAA受けようと思って読む分にはボリュームもそんな多くないですがまとまってはいるので可能かもしれませんが、自分のようなほぼ未経験の人にとっては難しいように感じました。</p>

<p>ただギリギリで受かったのはこういう本1冊読んだからというのもあるので、未経験者にとっては多角的な視点を得れる、オレンジ本よりも図解が分かりやすく的を絞った内容で多角的に知識を得ることができる本でした。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2019年12月 振り返り'
description: ''
publishDate: '01/05/2020 07:53:50'
---

[CONTENTS-START]
<h1>結果</h1>

<h2>ブログ</h2>

<p><strong>目標：月 12 回（週 3 回）更新</strong><br/>
<strong>結果：月 16 回 更新</strong></p>

<h2>読書</h2>

<p><strong>目標：月 1 冊</strong><br/>
<strong>結果：月 2 冊</strong></p>

<h1>反省点など</h1>

<p>フロントエンドの技術的な所に関して何かしらの向上ができなかった。<br/>
ブログはまとめ系が多かったですがアウトプットできてよかった。</p>

<h1>来月に向けて</h1>

<p>1月の初めにSAA取得でき落ち着いたので、月次の目標設定を改めて設定して計画立てるところから始めたい。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AWSソリューションアーキテクト アソシエイト 受験記'
description: ''
publishDate: '01/05/2020 07:45:34'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20200105065609.png" alt="f:id:jotaki:20200105065609p:plain" title="f:id:jotaki:20200105065609p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>これまで・今回の結果</h2>

<ul>
<li>2019年6月 プラクティショナー合格 830点（ <a href="https://jtk.hatenablog.com/entry/2019/06/12/223000">https://jtk.hatenablog.com/entry/2019/06/12/223000</a> ）</li>
<li>2019年7月 SAA 不合格 630点 （ <a href="https://jtk.hatenablog.com/entry/2019/07/09/100106">https://jtk.hatenablog.com/entry/2019/07/09/100106</a> ）</li>
<li>2020年1月 SAA 合格 771点 ※今回</li>
</ul>


<h2>受験理由</h2>

<ul>
<li>年末年始まとめて時間取れるので</li>
<li>AWSに関して業務で自分から扱いはしないものの見聞きすることが多くなってきたので</li>
<li>3月くらいから方式が変わるようで、難しくなっても簡単になってもまた勉強し直すレベルの変更になる可能性がありその前に受けておきたかったので</li>
</ul>


<h2>モチベーション</h2>

<ul>
<li>前回落ちてもやもやしていたので</li>
<li>周りでプラクティショナー取った人が多くなったので</li>
</ul>


<h2>今回の勉強計画</h2>

<p>前回、オレンジの認定本を3回ほど通しで読んで付属の模試も完コピくらいしてしまうくらいになったものの、それで理解していると勘違いしてしまった部分があるので今回は同様な事態は避けるようにした。</p>

<p>基礎力がない／応用が効かないと本番の試験では難しいなと感じたので基礎部分をもう少し固める。<br/>
また公式のドキュメント類（ホワイトペーパーやブラックベルト）やハンズオンも前回ほとんどやってこなかったのでそちらの読み込みもやるようにした。</p>

<p>あとは試験問題に慣れること。実際にやると問題文や回答長いのでそのときだけ集中できる気がしないので前日、前々日はUdemyの模試2回ずつやって当日は難しい問題が出て当たり前なことにする作戦を立てました。</p>

<h2>やったこと</h2>

<p>試験日決めて3、4週間前くらいから開始しました。<br/>
毎日の通勤時に本読んだり、土日まとめて何時間かやったり、あとは年末年始休暇中にがっつり1日中やりました。</p>

<h3>1. 【読書】AWSクラウドの基本と仕組み</h3>

<p><a href="https://www.amazon.co.jp/dp/4798160563">https://www.amazon.co.jp/dp/4798160563</a><br/>
基礎固め&amp;半年やってなかったのでこれでリハビリ</p>

<h3>2. 【読書】AWS認定資格試験テキスト AWS認定 ソリューションアーキテクト-アソシエイト</h3>

<p><a href="https://www.amazon.co.jp/dp/479739739X/">https://www.amazon.co.jp/dp/479739739X/</a><br/>
いやというほど読んだはずでしたが改めて。巻末模擬試験はスキップ</p>

<h3>3. 【Udemy】これだけでOK！ AWS 認定ソリューションアーキテクト – アソシエイト試験突破講座（初心者向け21時間完全コース）</h3>

<p><a href="https://www.udemy.com/course/aws-associate/learn/lecture/13377668">https://www.udemy.com/course/aws-associate/learn/lecture/13377668</a><br/>
年末1,400円のときに購入。オレンジ本と同時並行で<br/>
ハンズオンはもちろん、動画（音声）で勉強できると違うなあと思いました。<br/>
最後の方は1.25倍速で</p>

<p>付属の模試を試験4,5日前にやりました。</p>

<ol>
<li>64%正解 (42/65)</li>
<li>58%正解 (38/65)</li>
</ol>


<h3>4. 【Udemy】AWS 認定ソリューションアーキテクト アソシエイト模擬試験問題集（5回分325問）</h3>

<p><a href="https://www.udemy.com/course/aws-knan/learn/quiz/4632478">https://www.udemy.com/course/aws-knan/learn/quiz/4632478</a><br/>
やるつもりなかったけど、試験形式と難易度に慣れる目的で<br/>
最後の3日間で一気にやりましたが、難しいとレビューにあったので結果は気にせず（正確には気にしたけどこれだと落ちて普通かなと開き直れた）</p>

<ol>
<li>56%正解 (37/65)</li>
<li>52%正解 (34/65)</li>
<li>61%正解 (40/65)</li>
<li>76%正解 (50/65)</li>
<li>60%正解 (39/65)</li>
</ol>


<h3>5. 【読書】この1冊で合格! AWS認定ソリューションアーキテクト - アソシエイト テキスト&amp;問題集</h3>

<p><a href="https://www.amazon.co.jp/dp/4046042036/">https://www.amazon.co.jp/dp/4046042036/</a><br/>
これもUdemyの後半と同時並行で<br/>
終盤だったので1回結構流し込みみたいな感じ<br/>
付属の模試は前日にやって64%正解 (42/65)</p>

<h3>6. もろもろ復習 公式ドキュメント読む、BlackBelt見る</h3>

<p>前回から引き続きセキュリティ分野が弱いということが分かってきたのでWell-Architectedフレームワークと質問集のセキュリティのところだけ読んだりした。<br/>
そのほか、</p>

<h4>YouTubeアーカイブ</h4>

<ul>
<li><a href="https://www.youtube.com/watch?v=0vmQNd5ZJxw">【初級】セキュリティで加速するクラウドジャーニー～セキュリティ上の論点と打ち手、進め方～ | AWS Summit Tokyo 2019</a></li>
<li><a href="https://www.youtube.com/watch?v=nebsF0XE0JA">AWSを使いこなすために - セキュリティとベストプラクティスと新しいサービス | AWS Summit Osaka 2019</a></li>
<li><a href="https://www.youtube.com/watch?v=0OTIDeKMVyY">よくご相談いただくセキュリティの質問と考え方</a></li>
</ul>


<h4>公式問題と模擬試験</h4>

<p>これ最後にやっておいてよかったです。<br/>
変にUdemyやその他の非公式的な細かい所に慣れてしまっていたので、前回の模試をやりつつ改めて基礎（EBSのボリュームタイプなど）を振り返りました。</p>

<h2>本試験結果</h2>

<p>771点<br/>
ギリギリでしたね..<br/>
<code>分野 5: オペレーショナルエクセレンスを備えたアーキテクチャを定義する</code> が 再学習の必要あり となってしまいました。</p>

<p>かなり慎重に解いていって一通り終わったのが1時間20分くらい。<br/>
1問ずつ見返したのですが時間足らずで40問くらいしかできなかったけど、そこで変えた回答もあったのでそれでひっくり返ったのもあると思うので最後までやってよかったです。</p>

<h2>覚えたほうが良さそうなこと</h2>

<h3>重要</h3>

<ul>
<li>VPC、NACL/セキュリティグループ</li>
<li>ストレージ（EBS/S3/EFS）の特性</li>
<li>EBS/S3/DBの各タイプと特性</li>
<li>暗号化（特にS3）</li>
</ul>


<h3>まぁまぁ</h3>

<ul>
<li>Storage Gateway</li>
<li>Route53</li>
<li>SQS</li>
<li>Lambda</li>
</ul>


<p>Udemyの模擬試験集でかなり慣れたつもりでいましたが、本試験は本試験で難しかったです。<br/>
パブリックにEC2とプライベートにDBの構成問う問題でも、パブリックにNATゲートウェイみたいな単純な回答はなさそう。<br/>
S3暗号化についても手順まで分かっていないと分からないものもあった記憶。</p>

<p>ただ前回とは違い分からないサービス名はほとんどなかったのと、4つの選択肢のうち2つまでは絞れる..みたいな知識向上は感じることができたのも勉強してよかったと思います。</p>

<p>試験の中で同じような問題はいくつか出て、それでも選択肢は毎回違うので、<br/>
その正解のサービスの特性を知っておくことはもちろんですが、消去法で消せる選択肢を増やすために広く知識を貯めておかないと難しいなと改めて感じました。</p>

<h2>読んだ体験記</h2>

<ul>
<li><a href="https://qiita.com/Takara1356/items/bc0752ad533becd98971">インフラ未経験者がAWSソリューションアーキテクト アソシエイトに2ヶ月で合格するまでのロードマップ - Qiita</a></li>
<li><a href="http://iwasiman.hatenablog.com/entry/20191015-aws-certified-saa-4challenger">【AWS】AWS認定『ソリューションアーキテクト- アソシエイト』(SAA)に未経験から合格した話：これから挑戦する方へ - Rのつく財団入り口</a></li>
<li><a href="https://dev.classmethod.jp/cloud/aws/certified-aws-solutions-architect-associate-4months/">入社して4カ月目でAWS 認定ソリューションアーキテクト アソシエイトに合格できた話 ｜ Developers.IO</a></li>
<li><a href="https://note.com/dafujii/n/n81fb70f29119">AWS認定ソリューションアーキテクトアソシエイトに合格しました！！！！　勉強方法など公開します｜ふじい｜note</a></li>
</ul>


<h2>まとめ</h2>

<p>毎回試験前は胃がきりきりするのですが、今回自費で受けたのでちょっと気楽に勉強できました。<br/>
前回は1つの教材を徹底的にやり込む形だったので、今回はなるべく教材は多めに色々な視点や言い回しでサービスだったり仕組みを覚えるようにしました。<br/>
自分が一番しっくりする説明が教材（本やUdemyや公式ドキュメント）によって違うので、すんなり入る教材を各サービスや仕組みごとに見つけれた気がします。</p>

<p>他の試験の予定は考え中ですが、せっかく勉強してやりこむ習慣がついたのでフロントエンド技術に対してしばらくは注ごうかなと思っています。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2020年やりたいこと'
description: ''
publishDate: '12/20/2019 22:00:00'
---

[CONTENTS-START]
<p>サービス/ツール/キーワード いろいろありますが追っておいてマスターしておきたいものたち</p>

<h3>フロントエンド</h3>

<ul>
<li>表示速度・パフォーマンス</li>
</ul>


<h3>HTML/CSS</h3>

<ul>
<li>AMP</li>
<li>PWA</li>
<li>セマンティックなマークアップ</li>
</ul>


<h3>JavaScript</h3>

<ul>
<li>Vanilla JS

<ul>
<li>Vue.js

<ul>
<li>Nuxt.js</li>
</ul>
</li>
</ul>
</li>
</ul>


<h3>WordPress</h3>

<ul>
<li>ブロックエディタ</li>
<li>Headless CMS</li>
</ul>


<h3>バックエンド/サーバー</h3>

<ul>
<li>Firebase</li>
<li>Netlify</li>
<li>AWS</li>
<li>Docker</li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Webサイト高速化／最適化のためにやったこと'
description: ''
publishDate: '12/20/2019 09:18:56'
---

[CONTENTS-START]
<h2>概要</h2>

<p>最近作っていたWebサイト（ <a href="https://atelier24b.com/">https://atelier24b.com/</a> ）で、Chorme の Audits 使ってパフォーマンス計測しながらやってみたのでその結果</p>

<p>サイトの作り的には</p>

<ul>
<li>WordPress</li>
<li>カスタム投稿で一覧/詳細ページ</li>
<li>固定ページあり</li>
<li>webpack使って html/css/js コンパイル</li>
</ul>


<p>みたいなわりとミニマムな5テンプレートくらい（ページ数20くらい）のレスポンシブのWebサイトです。</p>

<h2>設定</h2>

<p>Audits の設定はデフォルトです
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191220091736.png" alt="f:id:jotaki:20191220091736p:plain" title="f:id:jotaki:20191220091736p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>結果</h2>

<table>
<thead>
<tr>
<th>ページ名</th>
<th>Performance</th>
<th>Accessibility</th>
<th>Best Practices</th>
<th>SEO</th>
<th>URL</th>
</tr>
</thead>
<tbody>
<tr>
<td>トップ</td>
<td>89</td>
<td>100</td>
<td>100</td>
<td>100</td>
<td><a href="https://atelier24b.com/">URL</a></td>
</tr>
<tr>
<td>一覧</td>
<td>96</td>
<td>93</td>
<td>100</td>
<td>96</td>
<td><a href="https://atelier24b.com/artists/">URL</a></td>
</tr>
<tr>
<td>詳細</td>
<td>93</td>
<td>93</td>
<td>100</td>
<td>90</td>
<td><a href="https://atelier24b.com/artists/atsushi-kokawa/">URL</a></td>
</tr>
<tr>
<td>ページ</td>
<td>97</td>
<td>93</td>
<td>100</td>
<td>90</td>
<td><a href="https://atelier24b.com/about/">URL</a></td>
</tr>
</tbody>
</table>


<h4>トップ</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191220091723.png" alt="f:id:jotaki:20191220091723p:plain" title="f:id:jotaki:20191220091723p:plain" class="hatena-fotolife" itemprop="image" /></span>
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191220091712.png" alt="f:id:jotaki:20191220091712p:plain" title="f:id:jotaki:20191220091712p:plain" class="hatena-fotolife" itemprop="image" /></span>
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191220091702.png" alt="f:id:jotaki:20191220091702p:plain" title="f:id:jotaki:20191220091702p:plain" class="hatena-fotolife" itemprop="image" /></span>
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191220091707.png" alt="f:id:jotaki:20191220091707p:plain" title="f:id:jotaki:20191220091707p:plain" class="hatena-fotolife" itemprop="image" /></span>
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191220091718.png" alt="f:id:jotaki:20191220091718p:plain" title="f:id:jotaki:20191220091718p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>一覧</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191220091658.png" alt="f:id:jotaki:20191220091658p:plain" title="f:id:jotaki:20191220091658p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>詳細</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191220091742.png" alt="f:id:jotaki:20191220091742p:plain" title="f:id:jotaki:20191220091742p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>ページ</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191220091729.png" alt="f:id:jotaki:20191220091729p:plain" title="f:id:jotaki:20191220091729p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>やったこと</h2>

<h3>WordPressプラグイン</h3>

<p>最適化まわりでいれたプラグイン</p>

<h4><a href="https://ja.wordpress.org/plugins/autoptimize/">Autoptimize</a></h4>

<p>ファイル（html/css/js）のminifyをいい感じにしてくれるプラグイン<br/>
テンプレート側の記述は一切気を使わなくてよく、生成されるhtmlに対してoptimizeをかけるので手軽に導入可能です。<br/>
設定も豊富でcssインライン化などベストプラクティに沿ったオプションも用意されています。<br/>
ただデバッグはしづらいので管理画面ログイン中のユーザーは最適化しないほうがいいかもです。</p>

<h4><a href="https://ja.wordpress.org/plugins/tiny-compress-images/">Compress JPEG &amp; PNG images</a></h4>

<p>画像圧縮のプラグイン。<br/>
実際にはこれで圧縮してもPerformanceの項目では圧縮してねと怒られるのですが..</p>

<h4><a href="https://ja.wordpress.org/plugins/all-in-one-seo-pack/">All In One SEO Pack</a></h4>

<p>SEO最適化ですが、だいたいこれ入れて適切に設定できてればSEOは上がる気がします。<br/>
カスタム投稿のアーカイブなどうまく出力してくれないテンプレートやページもあるので、1ページずつ出力内容確認しながらフック使って調整していく必要がある場合も</p>

<h3>gzipの有効化</h3>

<p>Performance の項目で gzip にするといいよってことだったので .htaccess に下記を追加でファイルをgzipで配信<br/>
※ さくらサーバー + WordPressの場合<br/>
参考： <a href="http://www.sukicomi.net/2018/05/sakura-rensaba-moddeflate.html">さくらインターネットのレンタルサーバーで通信の圧縮(mod_deflate)を利用する方法 | スキコミ</a></p>

<p><details><summary>詳しくみる</summary><div></p>

<pre class="code" data-lang="" data-unlink># gzip有効
&lt;IfModule mod_deflate.c&gt;
  SetOutputFilter DEFLATE
  BrowserMatch ^Mozilla/4\.0[678] no-gzip
  BrowserMatch ^Mozilla/4 gzip-only-text/html
  BrowserMatch \bMSIE\s(7|8) !no-gzip !gzip-only-text/html

  Header append Vary Accept-Encoding env=!dont-vary

  # 画像は再圧縮しない
  SetEnvIfNoCase Request_URI \.(?:gif|jpe?g|png|ico)$ no-gzip dont-vary

  # 圧縮設定
  AddOutputFilterByType DEFLATE text/plain
  AddOutputFilterByType DEFLATE text/html
  AddOutputFilterByType DEFLATE text/xml
  AddOutputFilterByType DEFLATE text/css
  AddOutputFilterByType DEFLATE text/js
  AddOutputFilterByType DEFLATE image/svg+xml
  AddOutputFilterByType DEFLATE application/xml
  AddOutputFilterByType DEFLATE application/xhtml+xml
  AddOutputFilterByType DEFLATE application/rss+xml
  AddOutputFilterByType DEFLATE application/atom_xml
  AddOutputFilterByType DEFLATE application/javascript
  AddOutputFilterByType DEFLATE application/x-javascript
  AddOutputFilterByType DEFLATE application/x-httpd-php
&lt;/IfModule&gt;</pre>


<p></div></details></p>

<h3>その他</h3>

<ul>
<li>BEMにして各クラスセレクタにCSS当てる</li>
<li>アウトライナーを使って構造確認 ( <a href="https://chrome.google.com/webstore/detail/html5-outliner/afoibpobokebhgfnknfndkgemglggomo">HTML5 Outliner</a> )</li>
</ul>


<p>もやりましたが普段からやってはいるのでやっぱりコンテンツ（構成）がミニマムっていうのが大きい気がします。<br/>
jQueryとIsotopeやPhotoSwipeみたいなJSライブラリも使っていますし、なんか考えると特別なことはしていないという印象です。</p>

<p>SEOがスコア90くらいなのは、meta関係の設定などではなく色のコントラストをもっとつけましょうみたいな見た目的な話なのでそこは少し許容（妥協やトレードオフ）しています。</p>

<h2>感想</h2>

<p>Page Speed Insightsは割と結果判定がゆるい？気がしますが、<a href="https://gtmetrix.com/reports/atelier24b.com/YvCOWMDv">GTmetrix</a> だとPageSpeed ScoreはF判定だったりします。<br/>
Auditsの点数だけがすべてではないですね。</p>

<p>あとはいろいろな設定とか環境とか加味したり、もっとキャッシュ設定や実際の表示速度/ネットワーク周りも突き詰めてやらないといけないのかなと感じました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2019年 / 2020年'
description: ''
publishDate: '12/18/2019 21:41:05'
---

[CONTENTS-START]
<p>ちょっと早いですが今年の振り返りと来年へ向けてのことを考えました。</p>

<h2>2019年</h2>

<h3>インプット</h3>

<p>技術の知識に関しては普段の業務や読書、RSS経由でWebメディアを見ながらという感じ。<br/>
基本はフロントエンド（HTML/CSS/JavaScript/Vue.js）、デザイン（UI/UX/Webギャラリー系）をみつつ、各社の技術ブログやメディアサイト見たり、あとクラウドの会社入ってAWSの資格も取ったのでその界隈の大きな動き（大きなアップデートや障害などのニュース）は追っておこうかなという感じでした。<br/>
これまでが雑多に色々なことを取り込んだので、今年からはもう少しフォーカスしてフロントエンド中心にインプット（アウトプットもですが）を思った結果、ある程度はこれまでのインプット分のロスには追いつきつつあるのかなという気がしています。</p>

<h3>アウトプット</h3>

<p>これは仕事での業務と勉強時間が中心です。<br/>
業務では主に案件で手を動かして、個人勉強は手を動かしつつこのブログに書いていってって感じです。<br/>
ブログ書く量はそれほど不足は感じませんが、身につき具合がもう少し欲しかったのが正直なところです。<br/>
ブログ書いて満足、本も読んで満足みたいなところがあるので改めなきゃなと思います。</p>

<h3>2019年まとめ</h3>

<p>去年ブログを始める11月くらいに、これから何を学びたいか、流行ってたりやりたい技術を何十個か書き出していたのですが、思っていたよりそれらを触ったり調べたりする機会が多くて、充実していたように思います。<br/>
朝型になって朝に勉強にしようとか、読書も月1冊も最低は読もうと思って続くかなとも思ったけどそれも続いているので、そういう面でも見せかけはいい感じでした。</p>

<p>ただ何が身についたかとか技術的に成長できたかというと具体的にこれっていうのはなくて、これまでのロスを挽回できるようなラインにやっと立てた気持ちです。<br/>
来年どうやり込むかが大事になってくると思っていますがそのことは下記に書きます。</p>

<hr />

<h2>2020年</h2>

<h3>やりたいこと</h3>

<p>身につけること</p>

<ul>
<li>JavaScriptを覚える

<ul>
<li>Vue.jsを覚える</li>
</ul>
</li>
</ul>


<p>そのために</p>

<ul>
<li>ブログを続ける

<ul>
<li>Qiitaで記事を書く</li>
</ul>
</li>
<li>勉強会やイベントに行く</li>
</ul>


<p>ブログ1年書いてみて（メモしてて）思ったのですが、書くこと目的ではなくて、誰に見てほしいってものでもないので新しく知ったことを覚えるという習慣づけ的な作用があるものと考えるようにしました。<br/>
そのためにブログ書いて、刺激受けたり周りの環境を知るために勉強会にも行こうかなと思います。</p>

<h3>その他</h3>

<p>仕事面で言うと今年ある程度人数の多い会社に入って客観的に自分の能力の長所をみたとき</p>

<ul>
<li>グラフィックデザイン〜Webデザイン〜開発 までカバーできる（広く浅く）</li>
<li>小さい会社での経験がある</li>
<li>これまでのWebサイト制作のスピードと量</li>
</ul>


<p>くらいはあるかなと（それ以外はない）思ったのでそこを意識して生かしていきたいなと思います。</p>

<p>あとは興味範囲的に</p>

<ul>
<li>グラフィックデザイン</li>
<li>デジタルデザイン UI/UX</li>
<li>フロントエンド</li>
<li>仕事の取り組み方とか</li>
</ul>


<p>みたいな各クラスタのことを全ての範囲をレベル高めに知っておきたいので、そこもなにかにとらわれず興味を持っていけたらと</p>

<h3>まとめ</h3>

<p>まとまりがなくなりましたが<br/>
技術的にはJavaScriptをマスターする、にフォーカスして、<br/>
興味がある4つの範囲に関しては各クラスタの人と話せるレベルに知識を蓄えておく、<br/>
ということに決まりました。<br/>
変わるかもしれませんが。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】AWSクラウドの基本と仕組み'
description: ''
publishDate: '12/13/2019 09:22:04'
---

[CONTENTS-START]
<p>ソリューションアーキテクトの試験を7月に不合格になってからAWS関連の勉強してこなかったのですが、もう一度受けてもいいかなと思いつつ、よさそうな本がでていたのでリハビリも兼ねて読んでみました。</p>

<p><div class="hatena-asin-detail"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07Q8QL2HM/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/51naAmaMLHL._SL160_.jpg" class="hatena-asin-detail-image" alt="AWSクラウドの基本と仕組み" title="AWSクラウドの基本と仕組み"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07Q8QL2HM/hatena-blog-22/">AWSクラウドの基本と仕組み</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span><a href="http://d.hatena.ne.jp/keyword/%B5%B5%C5%C4%20%BC%A3%BF%AD" class="keyword">亀田 治伸</a>,<a href="http://d.hatena.ne.jp/keyword/%BB%B3%C5%C4%20%CD%B5%BF%CA" class="keyword">山田 裕進</a></li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 翔泳社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/10/30</li><li><span class="hatena-asin-detail-label">メディア:</span> Kindle版</li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>クラウドの概要〜AWSができた経緯や特徴、各サービスの説明までまとまっている自分にとってはとても良い内容でした。</p>

<h2>概要・ポイント</h2>

<ul>
<li>第1章 クラウドコンピューティングの特徴とメリット</li>
<li>第2章 ITシステムの使用例とAWSの主要サービス</li>
<li>第3章 AWS導入のメリットその1（ネットワーク&amp;コンピューティング）</li>
<li>第4章 AWS導入のメリットその2（ストレージ）</li>
<li>第5章 AWS導入のメリットその3（データベース）</li>
<li>第6章 AWS導入のメリットその4（セキュリティ）</li>
<li>第7章 新しいテクノロジーへの取り組みとクラウドネイティブ開発</li>
</ul>


<p>タイトルにある通り「基本と仕組み」なので、サービスの細かい難しい説明はあまりないです。</p>

<p>最初に概要、第3章から各サービスについて（VPC/EC2/S3/EBS/EFS/RDS...）と続いて最後は最近のサービス紹介（機械学習とIoT）とざっくりですが流れていきます。</p>

<p>細かい説明はあまりない、とはいいつつも取り上げられるサービスに関しては3〜5ページ以上くらいずつはあるので、例えばS3のストレージクラスやEBSのボリュームクラスについてやオプションの話もあります。</p>

<p>レベル的には本書を読んでいる人はプラクティショナーから受けてみましょうとは書いてあります。<br/>
出てくるサービスは幅広いのですべてのプラクティショナー受ける人はサービスは覚える必要はないかなという感じです。<br/>
逆にほぼSAAで出てくるサービスではあるので、SAA受ける人は理解したほうがよさそうと思います。</p>

<h2>良かった点</h2>

<ul>
<li>AWSのエバンジェリストの方とトレーナーの方が書いている本なので、AWSそのものや各サービスについての説明が分かりやすい</li>
<li>図が分かりやすい（VPC構成や、EBS最適化インスタンスの図など特にわかりやすかった）</li>
<li>わからない言葉が出てこない</li>
</ul>


<p>例えばEBSボリュームの項で最初の説明として下記のように説明してあるのでイメージが湧きやすい</p>

<blockquote><p>パソコンには、HDD（ハードディスクドライブ）やSSD（ソリッドステートディスク）が搭載されており、OSやデータはそこに格納されます。同じように、EC2インスタンスでは、OSやデータを <strong>EBSボリューム</strong> に格納しています。</p></blockquote>

<h2>惜しかった点</h2>

<p>特になし</p>

<h2>まとめ</h2>

<p>SAAを受けたときにどうしても基礎知識の不足を感じたので、この機会に補えるような感じがあってよかった。<br/>
EBSやEFSなど試験本読んだだけでは掴めなかった実体が少しですが具体的にイメージできるようになったのでその点が大きいです。<br/>
SAAの勉強もう一回やってみようかなという気持ちになれました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'copy-webpack-plugin でファイルを別階層にコピーする'
description: ''
publishDate: '12/11/2019 22:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20181228214933.png" alt="f:id:jotaki:20181228214933p:plain" title="f:id:jotaki:20181228214933p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>copy-webpack-plugin の設定でちょっとはまったのでメモ<br/>
<a href="https://github.com/webpack-contrib/copy-webpack-plugin">webpack-contrib/copy-webpack-plugin: Copy files and directories with webpack</a></p>

<h3>やりたいこと</h3>

<p><code>src/</code> 以下の特定階層ファイル（ <code>src/library/*.js</code> ）を <code>app/</code> 以下の階層にコピーしたい</p>

<h3>webpack.config.js</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> CopyPlugin = require(<span class="synConstant">'copy-webpack-plugin'</span>);

module.exports = <span class="synIdentifier">{</span>
  plugins: <span class="synIdentifier">[</span>
    <span class="synStatement">new</span> CopyPlugin(<span class="synIdentifier">[</span>
      <span class="synIdentifier">{</span>
        from: `$<span class="synIdentifier">{</span>__dirname<span class="synIdentifier">}</span>/src/js/library<span class="synComment">/*.js`,</span>
<span class="synComment">        to: `${__dirname}/app/_assets`,</span>
<span class="synComment">        context: `${__dirname}/src`</span>
<span class="synComment">      }</span>
<span class="synComment">    ]),</span>
<span class="synComment">  ]</span>
<span class="synComment">};</span>
</pre>


<p>こうすると出力は　<code>app/_assets/js/*.js</code> になる。</p>

<p><code>context</code> の書き方が変なのかもしれませんが、<code>from</code> / <code>to</code> / <code>context</code> に <code>__dirname</code> がないままだとうまくコピーしてくれませんでした。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2019年後期のWebサイト'
description: ''
publishDate: '12/09/2019 09:06:08'
---

[CONTENTS-START]
<p>2019年後期のWebサイト</p>

<p>2019年後期で気になったWebサイトをまとめておきます。<br/>
<a href="https://jtk.hatenablog.com/entry/2019/08/04/100739">前期</a> 同様、デザイン／実装ともに好みのものです。</p>

<h4>「IDOLY PRIDE」ティザーサイト</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191209085628.png" alt="f:id:jotaki:20191209085628p:plain" title="f:id:jotaki:20191209085628p:plain" class="hatena-fotolife" itemprop="image" /></span>
だいたい画像文字なのですが、このくらい生かしてるサイトもなかなか見なくなってきた<br/>
<a href="https://idolypride.jp/">https://idolypride.jp/</a></p>

<h4>KYOTO in TOKYO</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191209085642.png" alt="f:id:jotaki:20191209085642p:plain" title="f:id:jotaki:20191209085642p:plain" class="hatena-fotolife" itemprop="image" /></span>
くすんだ緑やベージュがWebっぽくない色使いで新鮮<br/>
<a href="https://www.kyotokan.jp/">https://www.kyotokan.jp/</a></p>

<h4>YOY</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191209085656.png" alt="f:id:jotaki:20191209085656p:plain" title="f:id:jotaki:20191209085656p:plain" class="hatena-fotolife" itemprop="image" /></span>
マウスオーバーのインタラクション<br/>
<a href="https://yoy-idea.jp/ja/">https://yoy-idea.jp/ja/</a></p>

<h4>みんなでつくる新しい街 | 下北線路街</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191209085706.png" alt="f:id:jotaki:20191209085706p:plain" title="f:id:jotaki:20191209085706p:plain" class="hatena-fotolife" itemprop="image" /></span>
文字大きくてもださくない Nuxt<br/>
<a href="https://senrogai.com/">https://senrogai.com/</a></p>

<h4>LAMM,Inc - JILL LAMM</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191209085714.png" alt="f:id:jotaki:20191209085714p:plain" title="f:id:jotaki:20191209085714p:plain" class="hatena-fotolife" itemprop="image" /></span>
グリッチ<br/>
<a href="https://lamm.tokyo/">https://lamm.tokyo/</a></p>

<h4>秋田人形道祖神</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191209085724.png" alt="f:id:jotaki:20191209085724p:plain" title="f:id:jotaki:20191209085724p:plain" class="hatena-fotolife" itemprop="image" /></span>
グラフィックなデザインでWebサイト<br/>
<a href="https://dosojin.jp/">https://dosojin.jp/</a></p>

<h4>Patra</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191209085732.png" alt="f:id:jotaki:20191209085732p:plain" title="f:id:jotaki:20191209085732p:plain" class="hatena-fotolife" itemprop="image" /></span>
これもイラスト的にグラフィック方向だけど実装もしっかりしてる感じ<br/>
<a href="https://patrainc.jp/">https://patrainc.jp/</a></p>

<h4>みさとと。——島根県美郷町魅力再発見プロジェクト</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191209085747.png" alt="f:id:jotaki:20191209085747p:plain" title="f:id:jotaki:20191209085747p:plain" class="hatena-fotolife" itemprop="image" /></span>
町おこし？系のWebでごりごり技術使ってデザインもいい<br/>
<a href="http://www.town.shimane-misato.lg.jp/misatoto/">http://www.town.shimane-misato.lg.jp/misatoto/</a></p>

<h4>新村デザイン事務所</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191209085802.png" alt="f:id:jotaki:20191209085802p:plain" title="f:id:jotaki:20191209085802p:plain" class="hatena-fotolife" itemprop="image" /></span>
そんな新しくないかもですが、Works一覧の色とかおもしろい<br/>
<a href="http://www.shinmura-d.co.jp/">http://www.shinmura-d.co.jp/</a></p>

<p>&amp;Post
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191209085814.png" alt="f:id:jotaki:20191209085814p:plain" title="f:id:jotaki:20191209085814p:plain" class="hatena-fotolife" itemprop="image" /></span>
コンセプトがそうなんで紙っぽいデザインなのですがモチーフの入れ方とかうまい感じ<br/>
<a href="https://andpost.jp/">https://andpost.jp/</a></p>

<p>Web Design Conference Tokyo - Awwwards
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191209085827.png" alt="f:id:jotaki:20191209085827p:plain" title="f:id:jotaki:20191209085827p:plain" class="hatena-fotolife" itemprop="image" /></span>
流行りの感じですが海外の人に受けそうな<br/>
<a href="https://conference.awwwards.com/tokyo/">https://conference.awwwards.com/tokyo/</a></p>

<p>日本気象協会
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191209085846.png" alt="f:id:jotaki:20191209085846p:plain" title="f:id:jotaki:20191209085846p:plain" class="hatena-fotolife" itemprop="image" /></span>
カッチリしたイメージの企業だけど写真・スペース大きめで今っぽいコーポレートサイト<br/>
<a href="https://www.jwa.or.jp/">https://www.jwa.or.jp/</a></p>

<h4>TRANS BOOKS</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191209085741.png" alt="f:id:jotaki:20191209085741p:plain" title="f:id:jotaki:20191209085741p:plain" class="hatena-fotolife" itemprop="image" /></span>
今まで見たことないWebサイト、ということでこれが今年ベストな気がします。毎年楽しみ。<br/>
<a href="https://transbooks.center/2019/">https://transbooks.center/2019/</a></p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '今年読んだ本'
description: ''
publishDate: '12/06/2019 09:52:48'
---

[CONTENTS-START]
<h2>フロントエンド</h2>

<ul>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4774189677/hatena-blog-22/">Webフロントエンド ハイパフォーマンス チューニング</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/477418411X/hatena-blog-22/">改訂新版JavaScript本格入門 ~モダンスタイルによる基礎から現場での応用まで</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/">JavaScript コードレシピ集</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4873115655/hatena-blog-22/">リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)</a></li>
</ul>


<h2>Vue.js / Nuxt.js</h2>

<ul>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4798056499/hatena-blog-22/">Vue.jsのツボとコツがゼッタイにわかる本</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4798158925/hatena-blog-22/">動かして学ぶ！Vue.js開発入門 (NEXT ONE)</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4863542453/hatena-blog-22/">基礎から学ぶ Vue.js</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4297100916/hatena-blog-22/">Vue.js入門 基礎から実践アプリケーション開発まで</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4863542569/hatena-blog-22/">Nuxt.jsビギナーズガイド―Vue.js ベースのフレームワークによるシングルページアプリケーション開発</a></li>
</ul>


<h2>UI/UXデザイン</h2>

<ul>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4798155454/hatena-blog-22/">UIデザインの教科書［新版］ マルチデバイス時代のインターフェース設計</a></li>
<li>はじめてのUIデザイン</li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4802511051/hatena-blog-22/">【新版】UI GRAPHICS 成功事例と思想から学ぶ、これからのインターフェイスデザインとUX</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4873115574/hatena-blog-22/">インタフェースデザインの心理学 ―ウェブやアプリに新たな視点をもたらす100の指針</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4873118948/hatena-blog-22/">インタフェースデザインのお約束 ―優れたUXを実現するための101のルール</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4873116597/hatena-blog-22/">マイクロインタラクション ―UI/UXデザインの神が宿る細部</a></li>
</ul>


<h2>開発手法</h2>

<ul>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4798153346/hatena-blog-22/">カイゼン・ジャーニー たった1人からはじめて、「越境」するチームをつくるまで</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4802511191/hatena-blog-22/">正しいものを正しくつくる プロダクトをつくるとはどういうことなのか、あるいはアジャイルのその先について</a></li>
</ul>


<h2>AWS関連</h2>

<ul>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4797397403/hatena-blog-22/">AWS認定資格試験テキスト AWS認定 クラウドプラクティショナー</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/479739739X/hatena-blog-22/">AWS認定資格試験テキスト AWS認定 ソリューションアーキテクト-アソシエイト</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07Q8QL2HM/hatena-blog-22/">AWSクラウドの基本と仕組み</a>（今読んでる）</li>
</ul>


<h2>自己啓発・その他</h2>

<ul>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4801400558/hatena-blog-22/">学びを結果に変えるアウトプット大全 (Sanctuary books)</a></li>
<li><a href="https://www.amazon.co.jp/exec/obidos/ASIN/4822289508/hatena-blog-22/">メルカリ  希代のスタートアップ、野心と焦りと挑戦の5年間</a></li>
</ul>


<h2>まとめ</h2>

<p>厳密には昨年の11月くらいからですが約20冊
こうしてみるとVueは一通り読んだけど、身についているかというと全くダメなので量より質というか、インプット方法をもう少し考えなきゃなと思います。</p>

<p>通勤中とかに読むとなるとがっつり頭使う系はなかなか難しくて、どうしてもUI/UX関係の本とかがメインになってしまいますね。
JSコードレシピ集や、Vue猫本やVue基礎とかはもう一度読み返したりしようかなと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js・Nuxt.js を使用したサイトまとめ'
description: ''
publishDate: '12/06/2019 09:26:32'
---

[CONTENTS-START]
<p>Vue.js or Nuxt.js を使ったサイト、日本のまとめあまりないのでまとめておきます。</p>

<p>デザインギャラリーサイト経由で見つけた多いのでWebアプリではなくサイトが多め。<br/>
採用サイトで結構使われているのは技術採用しやすいからかなと思いました。<br/>
Webアプリもっと深堀りすれば出てきそうですが、相鉄など企業のコーポレートサイトでも今後増えてきそうな気がします。</p>

<h2>Vue.js</h2>

<h4>amana recruit 2021</h4>

<p><a href="http://recruit.amana.jp/">http://recruit.amana.jp/</a>
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191206092327.png" alt="f:id:jotaki:20191206092327p:plain" title="f:id:jotaki:20191206092327p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>S-GROOVE（エス・グルーヴ）2020新卒採用</h4>

<p><a href="https://www.s-groove.co.jp/freshers/">https://www.s-groove.co.jp/freshers/</a>
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191206092346.png" alt="f:id:jotaki:20191206092346p:plain" title="f:id:jotaki:20191206092346p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>Webデザイン制作・開発の実績｜東京のWeb制作会社 クーシー（COOSY）</h4>

<p><a href="https://coosy.co.jp/work/">https://coosy.co.jp/work/</a>
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191206092409.png" alt="f:id:jotaki:20191206092409p:plain" title="f:id:jotaki:20191206092409p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>BAUS（バウス）｜クリエイターのためのクレジットデータベース</h4>

<p><a href="https://baus.jp/">https://baus.jp/</a>
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191206092442.png" alt="f:id:jotaki:20191206092442p:plain" title="f:id:jotaki:20191206092442p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>Nuxt.js</h2>

<h4>相鉄グループ</h4>

<p><a href="https://www.sotetsu.co.jp/">https://www.sotetsu.co.jp/</a>
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191206092450.png" alt="f:id:jotaki:20191206092450p:plain" title="f:id:jotaki:20191206092450p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>魅力がグッと伝わるWebサイトを作ります | Web制作会社 LIG</h4>

<p><a href="https://web.div.liginc.co.jp/soudan">https://web.div.liginc.co.jp/soudan</a>
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191206092502.png" alt="f:id:jotaki:20191206092502p:plain" title="f:id:jotaki:20191206092502p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>株式会社ROXX</h4>

<p><a href="https://roxx.co.jp/">https://roxx.co.jp/</a>
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191206092512.png" alt="f:id:jotaki:20191206092512p:plain" title="f:id:jotaki:20191206092512p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>BizReach Designer Recruitment</h4>

<p><a href="https://recruitment.bizreach.design/">https://recruitment.bizreach.design/</a>
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191206092522.png" alt="f:id:jotaki:20191206092522p:plain" title="f:id:jotaki:20191206092522p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>agent bank Company</h4>

<p><a href="https://company.agent-bank.com/">https://company.agent-bank.com/</a>
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191206092534.png" alt="f:id:jotaki:20191206092534p:plain" title="f:id:jotaki:20191206092534p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>ALIS | 信頼できる記事と人々を明らかにする全く新しいソーシャルメディア</h4>

<p><a href="https://alis.to/">https://alis.to/</a>
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191206092554.png" alt="f:id:jotaki:20191206092554p:plain" title="f:id:jotaki:20191206092554p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>無料まんが・試し読みが豊富！ebookjapan</h4>

<p><a href="https://ebookjapan.yahoo.co.jp/">https://ebookjapan.yahoo.co.jp/</a>
<span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191206092603.png" alt="f:id:jotaki:20191206092603p:plain" title="f:id:jotaki:20191206092603p:plain" class="hatena-fotolife" itemprop="image" /></span></p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress に Vue.js を スモールスタートで入れてみる その7'
description: ''
publishDate: '12/06/2019 08:51:38'
---

[CONTENTS-START]
<p>とあるサイトでVue.jsで作っていて、公開してからもろもろやったことまとめ その7<br/>
最後は細かいテクニック的なところについて</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h3>ローディング</h3>

<p>API から投稿データ取得するまでローディング、取得後に解除する<br/>
DOM更新後にローディング解除したいので <code>$nextTick</code> を使う</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>mounted: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
  <span class="synIdentifier">this</span>.$nextTick(<span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
    <span class="synComment">// 処理</span>
  <span class="synIdentifier">}</span>)
<span class="synIdentifier">}</span>
</pre>


<p>loading.vue</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;transition name=<span class="synConstant">&quot;fade&quot;</span>&gt;
    &lt;template v-<span class="synStatement">if</span>=<span class="synConstant">&quot;!loading&quot;</span>&gt;
      &lt;p&gt;loading&lt;/p&gt;
    &lt;/template&gt;
    &lt;template v-<span class="synStatement">else</span>&gt;
      &lt;child-component&gt;&lt;/child-component&gt;
    &lt;/template&gt;
  &lt;/transition&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">import</span> ChildComponent from <span class="synConstant">'./childComponent'</span>;

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  components: <span class="synIdentifier">{</span>
    ChildComponent
  <span class="synIdentifier">}</span>,
  data() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      loading: <span class="synConstant">true</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  mounted: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.$nextTick(<span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.loading = <span class="synConstant">false</span>;
    <span class="synIdentifier">}</span>)
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
&lt;/script&gt;
</pre>


<h3>配列からオブジェクトへ変換</h3>

<p>array</p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">[</span>
  <span class="synSpecial">[</span>
    &quot;<span class="synConstant">https://siteUrl/image01.jpg</span>&quot;,
    <span class="synConstant">1718</span>,
    <span class="synConstant">1150</span>,
    <span class="synConstant">false</span>
  <span class="synSpecial">]</span>,
  <span class="synSpecial">[</span>
    &quot;<span class="synConstant">https://siteUrl/image02.jpg</span>&quot;,
    <span class="synConstant">896</span>,
    <span class="synConstant">1248</span>,
    <span class="synConstant">false</span>
  <span class="synSpecial">]</span>,
  <span class="synSpecial">[</span>
    &quot;<span class="synConstant">https://siteUrl/image03.jpg</span>&quot;,
    <span class="synConstant">1722</span>,
    <span class="synConstant">1148</span>,
    <span class="synConstant">false</span>
  <span class="synSpecial">]</span>
<span class="synSpecial">]</span>
</pre>


<p>を</p>

<p>formattedArray</p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">[</span>
  <span class="synSpecial">{</span>
    &quot;<span class="synStatement">src</span>&quot;: &quot;<span class="synConstant">https://siteUrl/image01.jpg</span>&quot;,
    &quot;<span class="synStatement">w</span>&quot;: <span class="synConstant">1718</span>,
    &quot;<span class="synStatement">h</span>&quot;: <span class="synConstant">1150</span>
  <span class="synSpecial">}</span>,
  <span class="synSpecial">{</span>
    &quot;<span class="synStatement">src</span>&quot;: &quot;<span class="synConstant">https://siteUrl/image02.jpg</span>&quot;,
    &quot;<span class="synStatement">w</span>&quot;: <span class="synConstant">896</span>,
    &quot;<span class="synStatement">h</span>&quot;: <span class="synConstant">1248</span>
  <span class="synSpecial">}</span>,
  <span class="synSpecial">{</span>
    &quot;<span class="synStatement">src</span>&quot;: &quot;<span class="synConstant">https://siteUrl/image03.jpg</span>&quot;,
    &quot;<span class="synStatement">w</span>&quot;: <span class="synConstant">1722</span>,
    &quot;<span class="synStatement">h</span>&quot;: <span class="synConstant">1148</span>
  <span class="synSpecial">}</span>
<span class="synSpecial">]</span>
</pre>


<p>にしたい</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>array.forEach(<span class="synIdentifier">function</span>(v)<span class="synIdentifier">{</span>
  <span class="synStatement">const</span> temp = <span class="synIdentifier">{</span>
    src: v<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>, <span class="synComment">// 画像URL</span>
    w:   v<span class="synIdentifier">[</span>1<span class="synIdentifier">]</span>, <span class="synComment">// 横幅</span>
    h:   v<span class="synIdentifier">[</span>2<span class="synIdentifier">]</span>  <span class="synComment">// 縦幅</span>
  <span class="synIdentifier">}</span>;
  formattedArray.push(temp)
<span class="synIdentifier">}</span>);
</pre>


<p>とすると <code>formattedArray</code> は欲しいフォーマットになる</p>

<h3>ループでランダムな数値をつける</h3>

<p>最初にデータの整形とランダム数値の付与</p>

<p>imagesArray</p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">[</span>
  &quot;<span class="synConstant">https://siteUrl/image01.jpg</span>&quot;,
  &quot;<span class="synConstant">https://siteUrl/image02.jpg</span>&quot;,
  &quot;<span class="synConstant">https://siteUrl/image03.jpg</span>&quot;
<span class="synSpecial">]</span>
</pre>


<p>を</p>

<p>imagesObject</p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">[</span>
  <span class="synSpecial">{</span>
    &quot;<span class="synStatement">src</span>&quot;: &quot;<span class="synConstant">https://siteUrl/image01.jpg</span>&quot;,
    &quot;<span class="synStatement">delay</span>&quot;: &quot;<span class="synConstant">0.20</span>&quot;
  <span class="synSpecial">}</span>,
  <span class="synSpecial">{</span>
    &quot;<span class="synStatement">src</span>&quot;: &quot;<span class="synConstant">https://siteUrl/image02.jpg</span>&quot;,
    &quot;<span class="synStatement">delay</span>&quot;: &quot;<span class="synConstant">0.47</span>&quot;
  <span class="synSpecial">}</span>,
  <span class="synSpecial">{</span>
    &quot;<span class="synStatement">src</span>&quot;: &quot;<span class="synConstant">https://siteUrl/image03.jpg</span>&quot;,
    &quot;<span class="synStatement">delay</span>&quot;: &quot;<span class="synConstant">0.72</span>&quot;
  <span class="synSpecial">}</span>
<span class="synSpecial">]</span>
</pre>


<p>にしたい。<br/>
ここも <code>forEach</code> だけど、他のやり方がありそう</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> imagesObject = <span class="synIdentifier">[]</span>;
imagesArray.forEach((value) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> delayRandomNum = (Math.random() * 1 + 0).toFixed(2); <span class="synComment">// 0 〜 1 までの乱数（小数点2桁に丸める）をアニメーション遅延させる</span>
  imagesObject.push(<span class="synIdentifier">{</span>
    src: value,
    delay: delayRandomNum
  <span class="synIdentifier">}</span>)
<span class="synIdentifier">}</span>);
<span class="synIdentifier">this</span>.imagesObject = imagesObject
</pre>


<p>オブジェクトを作成処理ができたら <code>&lt;template&gt;</code> 箇所で</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;div
    v-<span class="synStatement">for</span>=<span class="synConstant">&quot;(image, index) in imagesObject&quot;</span>
    :key=<span class="synConstant">&quot;index&quot;</span>
  &gt;
    &lt;img
      :src=<span class="synConstant">&quot;image.src&quot;</span>
      :style=<span class="synConstant">&quot;{ transitionDelay: image.delay + 's' }&quot;</span>
    &gt;
  &lt;/div&gt;
&lt;/template&gt;
</pre>


<p>とする。HTMLは</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://siteUrl/image01.jpg&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;transition-delay: 0.20s;&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://siteUrl/image02.jpg&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;transition-delay: 0.47s;&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://siteUrl/image03.jpg&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;transition-delay: 0.72s;&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>となるのであとはcssで調整</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress に Vue.js を スモールスタートで入れてみる その6'
description: ''
publishDate: '12/05/2019 10:13:07'
---

[CONTENTS-START]
<p>とあるサイトでVue.jsで作っていて、公開してからもろもろやったことまとめ その6<br/>
今回はPhotoSwipeのvueモジュールについて</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h3>v-photoswipe</h3>

<p>バニラJSのフォトギャラリープラグイン <a href="https://photoswipe.com/">PhotoSwipe</a><br/>
スワイプなど、スマホの各アクションにも対応しているのでlightbox系ではこれを最近よく使っています。</p>

<p>Vueモジュールでも用意されているのでそれを使います。</p>

<p>GitHub: <a href="https://github.com/Leesson/v-photoswipe">Leesson/v-photoswipe: Vue plugin for image preview base on PhotoSwipe</a><br/>
npm: <a href="https://www.npmjs.com/package/v-photoswipe">v-photoswipe - npm</a></p>

<p>最終的には前回のIsotopeと併用したので組み合わせが必要ですがPhotoSwipeのところだけ抜き出し</p>

<p>サムネイル部分は決まった形なので a要素に <code>@click="showPhotoSwipe(index)"</code> をつけて <code>data</code> と <code>methods</code> も指定しておく。</p>

<p><code>v-photoswipe</code> の <code>items</code> に フルサイズの画像もバインドしておく。<br/>
このフルサイズは形がきまっているので、下記のようになるよう調整しておく必要がある。<br/>
（<code>fullsizes.forEach(function(v, i, a){...</code> のところ）</p>

<p><code>items</code></p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">[</span>
  <span class="synSpecial">{</span>
    &quot;<span class="synStatement">src</span>&quot;:&quot;<span class="synConstant">https:</span><span class="synSpecial">\/\/</span><span class="synConstant">siteUrl.com</span><span class="synSpecial">\/</span><span class="synConstant">image01.jpg</span>&quot;,
    &quot;<span class="synStatement">w</span>&quot;:<span class="synConstant">1280</span>,
    &quot;<span class="synStatement">h</span>&quot;:<span class="synConstant">620</span>
  <span class="synSpecial">}</span>,
  <span class="synSpecial">{</span>
    &quot;<span class="synStatement">src</span>&quot;:&quot;<span class="synConstant">https:</span><span class="synSpecial">\/\/</span><span class="synConstant">siteUrl.com</span><span class="synSpecial">\/</span><span class="synConstant">image02.jpg</span>&quot;,
    &quot;<span class="synStatement">w</span>&quot;:<span class="synConstant">1280</span>,
    &quot;<span class="synStatement">h</span>&quot;:<span class="synConstant">620</span>
  <span class="synSpecial">}</span>
<span class="synSpecial">]</span>
</pre>


<p>sampleGallery.vue</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;ul v-<span class="synStatement">if</span>=<span class="synConstant">&quot;sampleGallery&quot;</span>&gt;
    &lt;li
      :key=<span class="synConstant">&quot;index&quot;</span>
      v-<span class="synStatement">for</span>=<span class="synConstant">&quot;(image, index) in sampleGallery&quot;</span>
    &gt;
      &lt;a
        href=<span class="synConstant">&quot;javascript:void(0);&quot;</span>
        @click=<span class="synConstant">&quot;showPhotoSwipe(index)&quot;</span>
      &gt;
        &lt;img
          :src=<span class="synConstant">&quot;image.sizes.thumbnail&quot;</span>
          :width=<span class="synConstant">&quot;image.sizes['thumbnail-width']&quot;</span>
          :height=<span class="synConstant">&quot;image.sizes['thumbnail-height']&quot;</span>
        &gt;
      &lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
  &lt;div&gt;
    &lt;v-photoswipe
      :isOpen=<span class="synConstant">&quot;photoSwipeIsOpen&quot;</span>
      :items=<span class="synConstant">&quot;PhotoSwipeFullsizes&quot;</span>
      :options=<span class="synConstant">&quot;PhotoSwipeOptions&quot;</span>
      @close=<span class="synConstant">&quot;hidePhotoSwipe&quot;</span>&gt;
    &lt;/v-photoswipe&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">import</span> <span class="synIdentifier">{</span> API_POST_URL <span class="synIdentifier">}</span> from <span class="synConstant">'./../variable'</span>
<span class="synStatement">import</span> axios from <span class="synConstant">'axios'</span>;
<span class="synStatement">import</span> <span class="synIdentifier">{</span> PhotoSwipe <span class="synIdentifier">}</span> from <span class="synConstant">'v-photoswipe'</span>

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  components: <span class="synIdentifier">{</span>
    <span class="synConstant">'v-photoswipe'</span>: PhotoSwipe
  <span class="synIdentifier">}</span>,
  data() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      sampleGallery: <span class="synConstant">''</span>,
      <span class="synComment">// PhotoSwipe</span>
      photoSwipeIsOpen: <span class="synConstant">false</span>,
      PhotoSwipeOptions: <span class="synIdentifier">{</span>
        <span class="synComment">// ref: https://photoswipe.com/documentation/options.html</span>
        index: 0,
        history: <span class="synConstant">false</span>,
        bgOpacity: <span class="synConstant">'.9'</span>,
        preload: <span class="synIdentifier">[</span>1,3<span class="synIdentifier">]</span>,
      <span class="synIdentifier">}</span>,
      PhotoSwipeFullsizes: <span class="synIdentifier">[]</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  mounted() <span class="synIdentifier">{</span>
    axios
      .get(`$<span class="synIdentifier">{</span>API_POST_URL<span class="synIdentifier">}</span>/POSTTYPE/$<span class="synIdentifier">{</span>POST_ID<span class="synIdentifier">}</span>/`)
      .then(response =&gt; <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.sampleGallery = <span class="synIdentifier">this</span>.post.acf.sample_gallery
        <span class="synComment">/*</span>
<span class="synComment">        * PhotoSwipe の画像を取得してdataに格納</span>
<span class="synComment">        */</span>
        <span class="synComment">// フルサイズ</span>
        <span class="synStatement">const</span> fullsizes = response.data.sample_gallery_images
        <span class="synStatement">const</span> fullsizeItems = <span class="synIdentifier">[]</span>
        fullsizes.forEach(<span class="synIdentifier">function</span>(v, i, a)<span class="synIdentifier">{</span>
          <span class="synStatement">const</span> fullsize = <span class="synIdentifier">{</span>
            src: v<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>, <span class="synComment">// 画像URL</span>
            w:   v<span class="synIdentifier">[</span>1<span class="synIdentifier">]</span>, <span class="synComment">// 横幅</span>
            h:   v<span class="synIdentifier">[</span>2<span class="synIdentifier">]</span>  <span class="synComment">// 縦幅</span>
          <span class="synIdentifier">}</span>;
          fullsizeItems.push(fullsize)
        <span class="synIdentifier">}</span>);
        <span class="synIdentifier">this</span>.PhotoSwipeFullsizes = fullsizeItems
      <span class="synIdentifier">}</span>)
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    <span class="synComment">// PhotoSwipe ギャラリー形式ではなくサムネイル + フルサイズの組み合わせで表示するメソッド</span>
    showPhotoSwipe (index) <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.photoSwipeIsOpen = <span class="synConstant">true</span>
      <span class="synIdentifier">this</span>.$set(<span class="synIdentifier">this</span>.PhotoSwipeOptions, <span class="synConstant">'index'</span>, index)
    <span class="synIdentifier">}</span>,
    <span class="synComment">// PhotoSwipe クローズメソッド</span>
    hidePhotoSwipe () <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.photoSwipeIsOpen = <span class="synConstant">false</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
&lt;/script&gt;
</pre>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress に Vue.js を スモールスタートで入れてみる その5'
description: ''
publishDate: '12/05/2019 09:52:22'
---

[CONTENTS-START]
<p>とあるサイトでVue.jsで作っていて、公開してからもろもろやったことまとめ その5
今回はモジュールについて</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h3>Isotope</h3>

<p>レンガ式のレイアウトをするためにnpmモジュールがいろいろあります。<br/>
<a href="https://www.npmjs.com/package/vue-masonry">vue-masonry</a> を最初使ってましたが、実行タイミングが早かったり、<a href="https://www.npmjs.com/package/vue-masonry-css">vue-masonry-css</a> はCSSでレイアウトするので軽いのですがflexboxではレイアウトがうまくいかなかったりで結局 <a href="https://www.npmjs.com/package/isotope-layout">isotope-layout</a> を使いました。</p>

<p>今回の場合は、各投稿のACFギャラリー形式で登録した画像をIsotopeでレイアウトしたい<br/>
ACFギャラリー: <a href="https://www.advancedcustomfields.com/resources/gallery/">https://www.advancedcustomfields.com/resources/gallery/</a><br/>
フィールド名は <code>sample_gallery</code> とする<br/>
画像URLとwidth/heightが入っているので、<code>img</code> に指定しておく</p>

<p>読み込み時にガタガタしないようにするにはもう少し調整が必要</p>

<p>sampleGallery.vue</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;ul <span class="synStatement">class</span>=<span class="synConstant">&quot;sampleGallery&quot;</span> v-<span class="synStatement">if</span>=<span class="synConstant">&quot;sampleGallery&quot;</span>&gt;
    &lt;li <span class="synStatement">class</span>=<span class="synConstant">&quot;grid-sizer&quot;</span>&gt;&lt;/li&gt;
    &lt;li <span class="synStatement">class</span>=<span class="synConstant">&quot;gutter-sizer&quot;</span>&gt;&lt;/li&gt;
    &lt;li
      <span class="synStatement">class</span>=<span class="synConstant">&quot;sampleGallery__image&quot;</span>
      :key=<span class="synConstant">&quot;index&quot;</span>
      v-<span class="synStatement">for</span>=<span class="synConstant">&quot;(image, index) in sampleGallery&quot;</span>
    &gt;
      &lt;img
        alt=<span class="synConstant">&quot;&quot;</span>
        :src=<span class="synConstant">&quot;image.sizes.thumbnail&quot;</span>
        :width=<span class="synConstant">&quot;image.sizes['thumbnail-width']&quot;</span>
        :height=<span class="synConstant">&quot;image.sizes['thumbnail-height']&quot;</span>
      &gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">import</span> <span class="synIdentifier">{</span> API_POST_URL <span class="synIdentifier">}</span> from <span class="synConstant">'./../variable'</span>;
<span class="synStatement">import</span> axios from <span class="synConstant">'axios'</span>;
<span class="synStatement">const</span> Isotope = require(<span class="synConstant">'isotope-layout'</span>);

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  data() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      sampleGallery: <span class="synConstant">''</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  mounted() <span class="synIdentifier">{</span>
    axios
      .get(`$<span class="synIdentifier">{</span>API_POST_URL<span class="synIdentifier">}</span>/POSTTYPE/$<span class="synIdentifier">{</span>POST_ID<span class="synIdentifier">}</span>/`)
      .then(response =&gt; <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.sampleGallery = <span class="synIdentifier">this</span>.post.acf.sample_gallery
        <span class="synIdentifier">this</span>.layoutGallery()
      <span class="synIdentifier">}</span>)
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    <span class="synComment">// Isotope レイアウト</span>
    layoutGallery() <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.iso = <span class="synStatement">new</span> Isotope(<span class="synConstant">'.sampleGallery'</span>, <span class="synIdentifier">{</span>
        itemSelector: <span class="synConstant">'.sampleGallery__image'</span>,
        masonry: <span class="synIdentifier">{</span>
          columnWidth: <span class="synConstant">'.grid-sizer'</span>,
          gutter: <span class="synConstant">'.gutter-sizer'</span>
        <span class="synIdentifier">}</span>
      <span class="synIdentifier">}</span>);
      <span class="synIdentifier">this</span>.iso.layout();
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
&lt;/script&gt;
</pre>


<p>次回はPhotoSwipeのvueモジュール編</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress に Vue.js を スモールスタートで入れてみる その4'
description: ''
publishDate: '12/05/2019 09:32:01'
---

[CONTENTS-START]
<p>とあるサイトでVue.jsで作っていて、公開してからもろもろやったことまとめ その4<br/>
今回は記事ページでの情報取得について</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h3>詳細ページで記事情報のAPIにアクセス</h3>

<p>テンプレートファイル側（.php）で投稿IDを取得して変数 <code>POST_ID</code> に格納しておく</p>

<p>SAMPLE-POSTTYPE-single.php</p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synStatement">$</span><span class="synIdentifier">id</span> <span class="synStatement">=</span> get_the_ID<span class="synSpecial">()</span>;
<span class="synSpecial">?&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">  </span><span class="synComment">// 投稿IDを.js側へ受け渡す</span>
<span class="synSpecial">  </span><span class="synStatement">const</span><span class="synSpecial"> POST_ID = `&lt;?php</span> <span class="synPreProc">echo</span> <span class="synStatement">$</span><span class="synIdentifier">id</span>; <span class="synSpecial">?&gt;`;</span>
<span class="synSpecial">  </span><span class="synStatement">document</span><span class="synSpecial">.addEventListener</span>(<span class="synConstant">'DOMContentLoaded'</span><span class="synSpecial">, </span><span class="synIdentifier">function</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">    renderSamplePostType</span>()
<span class="synSpecial">  </span><span class="synIdentifier">}</span>)
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<p>.vue 側では</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;script&gt;
<span class="synStatement">import</span> <span class="synIdentifier">{</span> API_POST_URL <span class="synIdentifier">}</span> from <span class="synConstant">'./../variable'</span>
<span class="synStatement">import</span> axios from <span class="synConstant">'axios'</span>;

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  data() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      post: <span class="synIdentifier">[]</span>,
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  mounted() <span class="synIdentifier">{</span>
    axios
      .get(`$<span class="synIdentifier">{</span>API_POST_URL<span class="synIdentifier">}</span>/SAMPLE-POSTTYPE/$<span class="synIdentifier">{</span>POST_ID<span class="synIdentifier">}</span>/`)
      .then(response =&gt; <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.post = response.data
      <span class="synIdentifier">}</span>)
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>みたくしたけど、、もう少しよいやり方はありそうな気がしています。<br/>
次回は使ったvueモジュール編</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress に Vue.js を スモールスタートで入れてみる その3'
description: ''
publishDate: '12/05/2019 09:14:28'
---

[CONTENTS-START]
<p>とあるサイトでVue.jsで作っていて、公開してからもろもろやったことまとめ その3<br/>
今回はACFオプションページのリピーターフィールドについて</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h3>ACF オプションページ リピーターフィールドの取得・出力</h3>

<p>カスタムフィールドは、</p>

<ul>
<li>sample_field（繰り返しフィールド）

<ul>
<li>sample_field_title（テキスト）</li>
<li>sample_field_text（テキストエリア）</li>
</ul>
</li>
</ul>


<p><a href="https://siteUrl.com/wp-json/acf/v3/options/options/">https://siteUrl.com/wp-json/acf/v3/options/options/</a> では</p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
  &quot;<span class="synStatement">acf</span>&quot;:<span class="synSpecial">{</span>
    &quot;<span class="synStatement">sample_field</span>&quot;:<span class="synSpecial">[</span>
      <span class="synSpecial">{</span>
        &quot;<span class="synStatement">sample_field_title</span>&quot;:&quot;<span class="synConstant">title01-title01-title01</span>&quot;,
        &quot;<span class="synStatement">sample_field_text</span>&quot;:&quot;<span class="synConstant">text01-text01-text01</span>&quot;
      <span class="synSpecial">}</span>,
      <span class="synSpecial">{</span>
        &quot;<span class="synStatement">sample_field_title</span>&quot;:&quot;<span class="synConstant">title02-title02-title02</span>&quot;,
        &quot;<span class="synStatement">sample_field_text</span>&quot;:&quot;<span class="synConstant">text02-text02-text02</span>&quot;
      <span class="synSpecial">}</span>,
      <span class="synError">// ...</span>
    <span class="synSpecial">]</span>
  <span class="synSpecial">}</span>
<span class="synSpecial">}</span>
</pre>


<p>のようにAPIが吐かれる。そのうえで <code>sampleField.vue（親）</code> から <code>sampleFieldBlock.vue（子）</code> に props でオブジェクトを渡して、子コンポーネントで出力</p>

<p>sampleField.vue</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;sample-field-block:option=<span class="synConstant">&quot;option&quot;</span>&gt;
  &lt;/sample-field-block&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">import</span> <span class="synIdentifier">{</span> API_OPTION_URL <span class="synIdentifier">}</span> from <span class="synConstant">'./../variable'</span>
<span class="synStatement">import</span> axios from <span class="synConstant">'axios'</span>;
<span class="synStatement">import</span> SampleFieldBlock from <span class="synConstant">'./../component/sampleFieldBlock'</span>;

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  components: <span class="synIdentifier">{</span>
    SampleFieldBlock
  <span class="synIdentifier">}</span>,
  data() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      option: <span class="synIdentifier">{}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  mounted() <span class="synIdentifier">{</span>
    axios
      .get(`$<span class="synIdentifier">{</span>API_OPTION_URL<span class="synIdentifier">}</span>`)
      .then((response) =&gt; <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.option = response.data.acf;
      <span class="synIdentifier">}</span>)
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
&lt;/script&gt;
</pre>


<p>sampleFieldBlock.vue</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;section v-<span class="synStatement">if</span>=<span class="synConstant">&quot;option.sample_field&quot;</span>&gt;
    &lt;h1&gt;Title&lt;/h1&gt;
      &lt;section v-<span class="synStatement">for</span>=<span class="synConstant">&quot;(group,index) in option.sample_field&quot;</span> :key=<span class="synConstant">&quot;index&quot;</span>&gt;
        &lt;h2&gt;<span class="synIdentifier">{{</span>group.sample_field_title<span class="synIdentifier">}}</span>&lt;/h2&gt;
        &lt;div&gt;
          &lt;p&gt;<span class="synIdentifier">{{</span>group.sample_field_text<span class="synIdentifier">}}</span>&lt;/p&gt;
        &lt;/div&gt;
      &lt;/section&gt;
  &lt;/section&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  props: <span class="synIdentifier">{</span>
    option: <span class="synType">Object</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
&lt;/script&gt;
</pre>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress に Vue.js を スモールスタートで入れてみる その2'
description: ''
publishDate: '12/04/2019 21:30:00'
---

[CONTENTS-START]
<p>とあるサイトでVue.jsで作っていて、公開してからもろもろやったことまとめ その2</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h3>基本構造 WordPress の各テンプレートファイルからVue.jsを呼び込む</h3>

<p>トップページの場合、 <code>homeGallery.vue</code> には Vue ( <code>&lt;template&gt;</code> と <code>&lt;script&gt;</code> ) を書いていく感じ。</p>

<p>▼ app.js</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> Vue from <span class="synConstant">'vue'</span>

<span class="synComment">// import文を使ってSassファイルを読み込む。（これがないと.scss =&gt; .cssへコンパイルされない）</span>
<span class="synStatement">import</span> <span class="synConstant">'./../scss/app.scss'</span>;

<span class="synComment">// Variable</span>
<span class="synStatement">import</span> <span class="synIdentifier">{</span>
  APP_ID
<span class="synIdentifier">}</span> from <span class="synConstant">'./variable'</span>;

<span class="synComment">// Vue Component</span>
<span class="synStatement">import</span> HomeGallery from <span class="synConstant">'./component/homeGallery'</span>;

<span class="synComment">// Home</span>
<span class="synStatement">window</span>.renderHome = <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
  <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
    el: `#$<span class="synIdentifier">{</span>APP_ID<span class="synIdentifier">}</span>`,
    components: <span class="synIdentifier">{</span>
      HomeGallery
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>
</pre>


<p>▼ front-page.php</p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span> get_header<span class="synSpecial">()</span>; <span class="synSpecial">?&gt;</span>
  <span class="synIdentifier">&lt;</span>home-gallery<span class="synIdentifier">&gt;&lt;/</span>home-gallery<span class="synIdentifier">&gt;</span>
<span class="synSpecial">&lt;?php</span> get_footer<span class="synSpecial">()</span>; <span class="synSpecial">?&gt;</span>
</pre>


<p>▼ footer.php</p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">'text/javascript'</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">'/_assets/js/bundle.js'</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">&lt;?php</span> <span class="synStatement">if</span> <span class="synSpecial">(</span> is_front_page<span class="synSpecial">()</span> <span class="synSpecial">)</span> <span class="synStatement">:</span> <span class="synSpecial">?&gt;</span>
  <span class="synComment">&lt;!-- トップページ --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">    </span><span class="synStatement">document</span><span class="synSpecial">.addEventListener</span>(<span class="synConstant">'DOMContentLoaded'</span><span class="synSpecial">, </span><span class="synIdentifier">function</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      renderHome</span>()
<span class="synSpecial">    </span><span class="synIdentifier">}</span>)
<span class="synSpecial">  </span><span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">&lt;?php</span> <span class="synStatement">endif</span>; <span class="synSpecial">?&gt;</span>
</pre>


<h3>定数用の.jsファイル</h3>

<p><code>js/variable.js</code> では定数の管理を行って各.vueにexportする</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> APP_ID = `app`;

<span class="synComment">// サイト情報</span>
<span class="synStatement">const</span> SITE_INFO = <span class="synIdentifier">{</span>
  name: <span class="synConstant">'siteName'</span>,
  url: `https:<span class="synComment">//siteUrl.com`</span>
<span class="synIdentifier">}</span>

<span class="synComment">// APIのベースURL</span>
<span class="synStatement">const</span> API_POST_URL = `$<span class="synIdentifier">{</span>SITE_INFO.url<span class="synIdentifier">}</span>/wp-json/wp/v2`;
<span class="synStatement">const</span> API_OPTION_URL = `$<span class="synIdentifier">{</span>SITE_INFO.url<span class="synIdentifier">}</span>/wp-json/acf/v3/options/options/`;

<span class="synStatement">export</span> <span class="synIdentifier">{</span>
  APP_ID,
  SITE_INFO,
  API_POST_URL,
  API_OPTION_URL
<span class="synIdentifier">}</span>;
</pre>


<p>全体構成編、ちょっと長くなったのでここまで。<br/>
次回はもう少し細かい内容になる予定です。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress に Vue.js を スモールスタートで入れてみる その1'
description: ''
publishDate: '12/04/2019 10:39:10'
---

[CONTENTS-START]
<p>とあるサイトでVue.jsで作っていて、公開してからもろもろやったことをまとめようと思ったのですが、年内公開も怪しくなってきたので今の段階でメモしておこうとおもいます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>概要</h2>

<p>WordPress を使った既存サイトがあり、リニューアル版は WordPress を残しつつ、REST API と Vue.js 使って組めるところは組んでみようというたくらみでした。<br/>
Vue.js を実案件で勉強したかったのが大きな理由で、残りは高速化など自分で触ってみてどこまでできるかを知りたかったためです。</p>

<h2>WordPress と Vue.js と組み合わせ方</h2>

<p>設計段階でどの箇所にVue入れるかもそうですが、そもそもの入れ方が分からなかったので色々なGitHubリポジトリをみました。</p>

<p>みてみてると、</p>

<ul>
<li>SPA方式</li>
<li>スタンドアロン方式</li>
</ul>


<p>的なふたつがあるようでした（表現合っているかわかりませんが）<br/>
参考： <a href="https://qiita.com/rmlabo/items/89af2ef9ae8824f43761">Vue.js と WordPress の 付き合い方について考えてみた - Qiita</a></p>

<h3>SPA方式</h3>

<p>index.php に <code>&lt;div id="app"&gt;&lt;/div&gt;</code> だけ用意して、ルーティングはVue Routerなどを使って書いていく方法</p>

<ul>
<li><a href="https://github.com/torounit/Aetherium">torounit/Aetherium: A next-generation WordPress theme built with the Rest API and Vue.js .</a></li>
<li><a href="https://github.com/gilbitron/wp-rest-theme">gilbitron/wp-rest-theme: A WordPress theme powered by the WordPress REST API and Vue.js</a></li>
<li><a href="https://github.com/mkyjp/worldsearch">mkyjp/worldsearch</a></li>
<li><a href="https://github.com/rtCamp/VueTheme">rtCamp/VueTheme: WordPress theme using Rest API and Vue.js</a></li>
</ul>


<h3>スタンドアロン方式</h3>

<p>front-page/page/archive/single.php など、各ページテーマテンプレートファイルは用意しつつ、箇所箇所でVue.jsを使う（Axios経由でAPI取得=>出力）方法</p>

<p>これもどこかのリポジトリを参考にした気がするのですが失念してしまいました..<br/>
ただ色々記事みたり触ってみて、スモールスタートで小規模なところから使っていくやり方が良いと思い今回はこちらを採用しました。</p>

<h2>ファイル構成</h2>

<p>今回webpackを使って、リポジトリ内のファイル構造的には</p>

<pre class="code" data-lang="" data-unlink>.
├── node_modules
├── package.json
├── webpack.config.js
│
├── src
│   ├── js
│   │   ├── app.js
│   │   ├── variable.js
│   │   ├── page
│   │   │   └── *.vue
│   │   └── component
│   │   │   └── *.vue
│   │   └── function
│   │       └── *.vue
│   └── scss
│       ├── app.scss
│       ├── foundation
│       │   └── _*.scss
│       ├── layout
│       │   └── _*.scss
│       └── object
│           └── _*.scss
│
└── themes
    ├── _assets
    │   ├── img
    │   │   └── *.jpg
    │   ├── js
    │   │   └── bundle.js
    │   └── css
    │       └── app.css
    ├── _inc
    │   └── *.php
    ├── functions.php
    ├── header.php
    ├── footer.php
    ├── index.php
    └── ...</pre>


<p>になりました。<br/>
<code>src/</code> 内の <code>app.js</code> と <code>scss/</code> 内の <code>app.scss</code> 、<br/>
テンプレートいじる必要があるときは <code>themes/</code> 内の <code>*.php</code> を直接いじる</p>

<h2>webpack 設定</h2>

<p><details>
  <summary>展開する</summary></p>

<div>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> TerserPlugin            = require(<span class="synConstant">'terser-webpack-plugin'</span>);
<span class="synStatement">const</span> MiniCssExtractPlugin    = require(<span class="synConstant">'mini-css-extract-plugin'</span>);
<span class="synStatement">const</span> OptimizeCSSAssetsPlugin = require(<span class="synConstant">'optimize-css-assets-webpack-plugin'</span>);
<span class="synStatement">const</span> VueLoaderPlugin         = require(<span class="synConstant">'vue-loader/lib/plugin'</span>);

<span class="synComment">// [定数] webpack の出力オプションを指定します</span>
<span class="synComment">// 'production' か 'development' を指定</span>
<span class="synStatement">const</span> MODE = <span class="synConstant">'production'</span>;

<span class="synComment">// ソースマップの利用有無 production or development (productionのときはソースマップを利用しない)</span>
<span class="synStatement">const</span> enabledSourceMap = (MODE === <span class="synConstant">'production'</span>);

module.exports = <span class="synIdentifier">{</span>
  name: <span class="synConstant">&quot;app&quot;</span>,
  externals: <span class="synIdentifier">{</span>
    Vue: <span class="synConstant">&quot;Vue&quot;</span>
  <span class="synIdentifier">}</span>,
  <span class="synComment">// モード値を production に設定すると最適化された状態で、</span>
  <span class="synComment">// development に設定するとソースマップ有効でJSファイルが出力される</span>
  mode: MODE,
  <span class="synComment">// メインとなるJavaScriptファイル（エントリーポイント）</span>
  entry: <span class="synIdentifier">{</span>
    <span class="synConstant">&quot;app&quot;</span>: <span class="synConstant">'./src/js/app.js'</span>
  <span class="synIdentifier">}</span>,
  <span class="synComment">// ファイルの出力設定</span>
  output: <span class="synIdentifier">{</span>
    <span class="synComment">// 出力ファイルのディレクトリ名</span>
    path: `$<span class="synIdentifier">{</span>__dirname<span class="synIdentifier">}</span>/themes/_assets/js`,
    <span class="synComment">// 出力ファイル名</span>
    filename: <span class="synConstant">'bundle.js'</span>
  <span class="synIdentifier">}</span>,
  <span class="synComment">// CSS minify と sourceMap の出力のための設定</span>
  optimization: <span class="synIdentifier">{</span>
    minimizer: <span class="synIdentifier">[</span>
      <span class="synStatement">new</span> TerserPlugin(<span class="synIdentifier">{</span>
        parallel: <span class="synConstant">true</span>,
        sourceMap: <span class="synConstant">true</span>,
      <span class="synIdentifier">}</span>),
      <span class="synStatement">new</span> OptimizeCSSAssetsPlugin(<span class="synIdentifier">{</span>
        cssProcessorOptions: <span class="synIdentifier">{</span>
          map: <span class="synIdentifier">{</span>
            inline: <span class="synConstant">false</span>,
            annotation: <span class="synConstant">true</span>,
          <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>
      <span class="synIdentifier">}</span>)
    <span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>,
  module: <span class="synIdentifier">{</span>
    rules: <span class="synIdentifier">[</span>
      <span class="synIdentifier">{</span>
        test: <span class="synConstant">/\.vue$/</span>,
        use: <span class="synIdentifier">[</span>
          <span class="synIdentifier">{</span>
            <span class="synComment">// Babel を利用する</span>
            loader: <span class="synConstant">'vue-loader'</span>,
          <span class="synIdentifier">}</span>
        <span class="synIdentifier">]</span>
      <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span>
        <span class="synComment">// .js の場合</span>
        test: <span class="synConstant">/\.js$/</span>,
        use: <span class="synIdentifier">[</span>
          <span class="synIdentifier">{</span>
            <span class="synComment">// Babel を利用する</span>
            loader: <span class="synConstant">'babel-loader'</span>,
            <span class="synComment">// Babel のオプションを指定する</span>
            options: <span class="synIdentifier">{</span>
              presets: <span class="synIdentifier">[</span>
                <span class="synComment">// プリセットを指定することで、ES2018 を ES5 に変換</span>
                <span class="synConstant">'@babel/preset-env'</span>
              <span class="synIdentifier">]</span>
            <span class="synIdentifier">}</span>
          <span class="synIdentifier">}</span>
        <span class="synIdentifier">]</span>
      <span class="synIdentifier">}</span>,
      <span class="synComment">// Sassファイルの読み込みとコンパイル</span>
      <span class="synIdentifier">{</span>
        test: <span class="synConstant">/\.scss/</span>, <span class="synComment">// 対象となるファイルの拡張子</span>
        use:
          <span class="synIdentifier">[</span>
            <span class="synComment">// CSSファイルを書き出すオプションを有効にする</span>
            <span class="synIdentifier">{</span>
              loader: MiniCssExtractPlugin.loader,
            <span class="synIdentifier">}</span>,
            <span class="synComment">// CSSをバンドルするための機能</span>
            <span class="synIdentifier">{</span>
              loader: <span class="synConstant">'css-loader'</span>,
              options: <span class="synIdentifier">{</span>
                <span class="synComment">// オプションでCSS内のurl()メソッドの取り込みを禁止する</span>
                url: <span class="synConstant">false</span>,
                <span class="synComment">// ソースマップの利用有無</span>
                sourceMap: enabledSourceMap,

                <span class="synComment">// 0 =&gt; no loaders (default);</span>
                <span class="synComment">// 1 =&gt; postcss-loader;</span>
                <span class="synComment">// 2 =&gt; postcss-loader, sass-loader</span>
                importLoaders: 2
              <span class="synIdentifier">}</span>
            <span class="synIdentifier">}</span>,
            <span class="synIdentifier">{</span>
              loader: <span class="synConstant">'sass-loader'</span>,
              options: <span class="synIdentifier">{</span>
                <span class="synComment">// ソースマップの利用有無</span>
                sourceMap: enabledSourceMap,
              <span class="synIdentifier">}</span>
            <span class="synIdentifier">}</span>
          <span class="synIdentifier">]</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>,
  <span class="synComment">// 完全ビルドされたVue.jsを読み込むように変更</span>
  <span class="synComment">// ref: https://aloerina01.github.io/blog/2017-03-08-1</span>
  resolve: <span class="synIdentifier">{</span>
    alias: <span class="synIdentifier">{</span>
      <span class="synConstant">'vue$'</span>: <span class="synConstant">'vue/dist/vue.esm.js'</span>
    <span class="synIdentifier">}</span>,
    extensions: <span class="synIdentifier">[</span><span class="synConstant">'*'</span>, <span class="synConstant">'.js'</span>, <span class="synConstant">'.vue'</span>, <span class="synConstant">'.json'</span><span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>,
  plugins: <span class="synIdentifier">[</span>
    <span class="synComment">// CSSファイルを外だしにするプラグイン</span>
    <span class="synStatement">new</span> MiniCssExtractPlugin(<span class="synIdentifier">{</span>
      <span class="synComment">// ファイル名を設定します（output.path から見た階層）</span>
      filename: <span class="synConstant">'./../css/app.css'</span>,
    <span class="synIdentifier">}</span>),
    <span class="synComment">// Vue loader プラグイン</span>
    <span class="synStatement">new</span> VueLoaderPlugin()
  <span class="synIdentifier">]</span>
<span class="synIdentifier">}</span>;
</pre>

</div>


<p></details></p>

<p>こんな感じで開発環境は完了<br/>
次回は .vue でやったこと中心に書いていきます。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】インタフェースデザインのお約束 ―優れたUXを実現するための101のルール'
description: ''
publishDate: '12/02/2019 08:47:34'
---

[CONTENTS-START]
<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873118948/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41T8kBOmYaL._SL160_.jpg" class="hatena-asin-detail-image" alt="インタフェースデザインのお約束 ―優れたUXを実現するための101のルール" title="インタフェースデザインのお約束 ―優れたUXを実現するための101のルール"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873118948/hatena-blog-22/">インタフェースデザインのお約束 ―優れたUXを実現するための101のルール</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> Will Grant,武舎広幸,武舎るみ</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> オライリージャパン</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/11/09</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4873118948/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>本屋に寄って見つけた インタフェースデザインのお約束 ―優れたUXを実現するための101のルール を読みました。<br/>
オライリー系のインタフェース関連本は <a href="https://jtk.hatenablog.com/entry/2019/08/05/102608">インタフェースデザインの心理学</a> 以来でしたが、形式は似ているものの内容は新しく共感することも多い本でした。</p>

<h2>概要・ポイント</h2>

<p>タイトルの通り、101個のデザインについての筆者の考えが掲載されています。</p>

<ul>
<li>文字と言葉</li>
<li>アイコンやボタン</li>
<li>UI部品</li>
<li>フォーム</li>
<li>ナビゲーションとユーザージャーニー</li>
<li>ユーザーへの情報提示</li>
<li>アクセシビリティ</li>
</ul>


<p>の各章がありその中で例えば、</p>

<ul>
<li>009 用語は製品内で統一せよ</li>
<li>034 リンクはリンクらしい体裁にせよ</li>
<li>069 ハンバーガーメニューなんて使うな</li>
<li>079 検索結果は関連度の高い順に表示せよ</li>
<li>094 UIデザインではベストプラクティスの採用は盗用にはならない</li>
</ul>


<p>のような指針が101個書かれています。<br/>
英語のタイトルが 101 UX PRINCIPLES ~A definitive design guide~ なので101の指針、原則が載っているような感じですね。</p>

<p>201〜208までは訳者によって日本（語）特有の指針もあとがきとしてあります。<br/>
オライリー公式にPDFでもありました。<br/>
<a href="https://www.oreilly.co.jp/pub/9784873118949/yakusha-atogaki.pdf">https://www.oreilly.co.jp/pub/9784873118949/yakusha-atogaki.pdf</a></p>

<p>作者のWill GrantさんはイギリスのUI/UX専門家とのこと<br/>
まえがきに</p>

<blockquote><p>「これには賛成できない」と思えるルールもあるかもしれないが、それはそれでかまわない。なにしろこれは私が自説を披露する本なのだ。とはいえ、ときにはそのような意見の相違が、これまで良しとしてきた考え方の見直しに、ひいてはユーザーのゴールを達成するより良い方法の模索につながる可能性もあり得る。</p></blockquote>

<p>とあり決してこの101個の指針をその通り飲み込めといっているわけではないそうです。<br/>
そのうえで、 <code>001 あなたもUXのプロになれる</code> では</p>

<blockquote><p>UXデザインに必須の基本スキルは<strong>共感力</strong>と<strong>客観性</strong>だ。</p></blockquote>

<p>という内容があります。このふたつは度々出てくるキーワードで <code>012 常に「顧客は生身の人間」を念頭に置いた表現を</code> でも</p>

<blockquote><p>...<br/>
「自分たちが作っている製品」という見方を一時捨てて、顧客の目になって見直してみる能力が大事、ということだ。これはユーザビリティの高いソフトウェアを構築するには欠かせない能力であり、面倒でもやってみる価値は十分にある。</p></blockquote>

<p>とあくまでユーザーファーストで開発しようというスタンスで全ての指針が同じ方向を向いていると感じました。</p>

<h3>ポイント</h3>

<ul>
<li>「ユーザーにとって」分かりやすく アイコン、色情報にはラベルをつけるなど</li>
<li>ユーザーはやりたい作業（Jobs To Be Done）をこなすために製品を使う。その上でユーザーが主導権や裁量権を握っていることが大事。</li>
<li>車輪の再発明をしなくてよい。デフォルトのコントロール、既存のUIからベストプラクティスを拝借して使う。</li>
</ul>


<h2>良かった点</h2>

<ul>
<li>1項目1ページ〜2ページほどなので合間時間でも読みやすい。</li>
<li>語り口がかしこまってないので頭に入りやすい。</li>
<li>本のサイズがちょうどよく小さいサイズ。（インタフェースデザインの心理学 は大きかったので）</li>
<li>間口が広い内容なので ディレクター／デザイナー／フロントエンドエンジニア だれでも興味深い内容になっている（おすすめしやすい）</li>
</ul>


<h2>惜しかった点</h2>

<p>特になし。</p>

<h2>まとめ</h2>

<p>チームみんなで読んでそれぞれの考えの方向性をまとめれると感覚的なコミュニケーションロスが少なくなるのかなと感じました。<br/>
どの場面でもこの通りにするのは難しいこともあるかもしれないですが。<br/>
ともあれ、今年読んだ本の中で一番共感もでき面白い内容の本でした。</p>

<p>本のサポートページもあり、読者から意見（新しいルール）も募集しているみたいです。<br/>
<a href="https://www.marlin-arms.com/support/101-ux-principles/">インタフェースデザインのお約束 —— 優れたUXを実現するための101のルール サポートページ — マーリンアームズ株式会社</a></p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2019年11月 振り返り'
description: ''
publishDate: '11/29/2019 22:00:00'
---

[CONTENTS-START]
<h1>結果</h1>

<h2>ブログ</h2>

<p><strong>目標：月 12 回（週 3 回）更新</strong><br/>
<strong>結果：月 5 回 更新</strong></p>

<h2>読書</h2>

<p><strong>目標：月 1 冊</strong><br/>
<strong>結果：月 1 冊</strong></p>

<h1>反省点など</h1>

<p>11月中に読んだUI GRAPHICSと、次のを読んでいるので読書週間は少しずつ回復<br/>
ブログを書くネタがないわけではないですが、日頃からネタ帳作っておかないとなと思った</p>

<h1>来月に向けて</h1>

<p>Vueのサイトは残り調整くらい。年末までには公開できそう<br/>
使った技術的なことをブログに書き起こすのと、今年全体の振り返りや来年に向けても考えたい</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Shifter をさわってみた'
description: ''
publishDate: '11/24/2019 12:44:57'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191122165357.png" alt="f:id:jotaki:20191122165357p:plain" title="f:id:jotaki:20191122165357p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>WordPress の静的ホスティングサービス <a href="https://www.getshifter.io/japanese/">Shifter</a> を検証で触ったのでメモしておきます。<br/>
今回採用には至らず、無料プランで試した範囲の内容です。</p>

<h3>概要</h3>

<p>WordPress の静的ホスティングサービスってなんだろと思ってましたがざっくり Shifter の特長として認識したのは</p>

<ul>
<li>静的HTMLで書き出される（.php動的されない）

<ul>
<li>CloudFront での配信</li>
</ul>
</li>
<li>管理画面は常時稼働（アクセス）されず、編集が必要なときのみ稼働</li>
</ul>


<p>の2点が大きいかなと</p>

<p>それを受けての大きいメリットは、</p>

<ul>
<li>配信が高速</li>
<li>WordPress のセキュリティホールつかれてもphp動いていないので安心</li>
</ul>


<p>ということ</p>

<p>デメリットとしては、</p>

<ul>
<li>有料（無料プランもありますが）</li>
<li>即時反映できない（数分生成が必要）</li>
<li>管理画面が2段階（Shifter管理画面 => WordPress管理画面）</li>
</ul>


<p>ですかね。<br/>
あまり裏側のこと分かっていないので目立つ部分だけですが。</p>

<h3>やりたかったこと・できなかったこと</h3>

<p>既存で動いている・運用している WordPress サイトを Shifter を使って静的HTML配信。</p>

<p>これに関して、自身の調査前の認識と違う所がShifter触ってみるとありました。<br/>
大枠の流れや仕組みを図にまとめたのはこちら。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191124124447.png" alt="f:id:jotaki:20191124124447p:plain" title="f:id:jotaki:20191124124447p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>一番大枠の部分ですが、<br/>
<b>既存のWordPress環境にShifter環境（機能）を追加する、</b>ではなく<br/>
<b>既存のWordPress環境を新規のShifter環境に移行する、</b>必要があることです。<br/>
サーバーレス/マネージドホスティングと謳っているので、そういうことなのねという感じでした。</p>

<h4>既存 => Shifter環境への移行</h4>

<p><a href="https://support.getshifter.io/en/articles/3002009-migrating-to-shifter">公式</a> で移行の際は All-in-One WP Migration を推奨しており、これでやってみるとコンテンツからテーマまで移行できました。</p>

<h4>Shifter環境ではおすすめできないプラグイン</h4>

<p>プラグインに関しても動作が出来ない可能性が高いものは <a href="https://support.getshifter.io/en/articles/1648764-force-disabled-plugins">公式</a> にのっています。</p>

<h4>Shifter環境では動かない機能</h4>

<p>いくつかのブログにも載っている通り動的生成される要素や機能は再現が難しいです。</p>

<ul>
<li>検索</li>
<li>お問い合わせフォーム</li>
</ul>


<p>など。<br/>
ただこれに関しては未検証ですがShifter側が公式で代替の方法を作っている</p>

<ul>
<li><a href="https://github.com/getshifter/wp-serverless-search">getshifter/wp-serverless-search: A static search plugin for WordPress.</a></li>
<li><a href="https://github.com/getshifter/wp-serverless-forms">getshifter/wp-serverless-forms: Replace PHP form actions with API and WebHook driven services such IFTT, Basin, FormKeep, Formspree, custom Endpoints and more.</a></li>
</ul>


<p>あと今回はパーマリンク周りで全部 Custom Permalinks を使っていて、 <code>/.html</code> などにしていましたがそれが <code>/.html/</code> になってしまうとか細かい所で調整や妥協が必要そうなところがでてきてしまいました。</p>

<h4>Shifter側のサーバーは触れない</h4>

<p>WordPressサーバーへFTPクライアントなど経由で接続できない（はず）なので、img/css/js などのアセット類はルートではなくテーマフォルダ内に置く必要があったりする。</p>

<p>テーマは手動で管理画面のテーマページからアップするか <a href="https://www.digitalcube.jp/shifter/10479/">GitHubリポジトリとの連携</a> もできるみたい</p>

<p>.htaccess的な設定も直接触れなかったり、/wp-content/ 以下もアクセスができないので、例えばプラグイン一気に移行して、WPのバージョンやphpが既存と新環境（最新版）が合ってなかったりしてプラグイン有効化して止まると管理画面が真っ白状態になってしまったこともありました。（サポートに問い合わせれば解決かな）<br/>
その時はこれも未検証ですが <a href="https://github.com/getshifter/shifter-local">ローカル環境つくって</a> やるのが正解っぽい感じです。</p>

<h3>まとめ・今後</h3>

<p>上記で挙げた、移行に際しての懸念やもう少し要検証の要素があったこと、<br/>
Shifter管理画面 => WordPress管理画面 => 編集 => html生成 => デプロイ のフローを複数人で運用していくことが今は難しそうなどもあり、今回は見送りになりました。</p>

<p>ただ最初にあげたメリットをどこかで生かしてWordPressサイト作りたいと思うときも出てくると思うので、そのときにまた検証からはじめて使ってみたいと思っています。</p>

<p>参考：</p>

<ul>
<li><a href="https://gatespace.jp/2019/09/11/shifter-migration/">WordPressサイトをShifterに移行する時のポイント #JP_Getshifter | Gatespace's Blog</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】UI GRAPHICS 成功事例と思想から学ぶ、これからのインターフェイスデザインとUX'
description: ''
publishDate: '11/22/2019 09:43:45'
---

[CONTENTS-START]
<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4802511051/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41sjdrLz6cL._SL160_.jpg" class="hatena-asin-detail-image" alt="【新版】UI GRAPHICS 成功事例と思想から学ぶ、これからのインターフェイスデザインとUX" title="【新版】UI GRAPHICS 成功事例と思想から学ぶ、これからのインターフェイスデザインとUX"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4802511051/hatena-blog-22/">【新版】UI GRAPHICS 成功事例と思想から学ぶ、これからのインターフェイスデザインとUX</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 安藤剛,水野勝仁,萩原俊矢,ドミニク・チェン,菅俊一,鹿野護,有馬トモユキ,渡邊恵太,須齋佑紀/津?将氏,庄野祐輔,藤田夏海,塚田有那,増川草介??栂木一徳</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> ビー・エヌ・エヌ新社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/10/19</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li><li><a href="http://d.hatena.ne.jp/asin/4802511051/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>UI関連の本で以前から欲しい物リストに入っていた UI GRAPHICS 成功事例と思想から学ぶ、これからのインターフェイスデザインとUX を読みました。</p>

<h2>概要・ポイント</h2>

<p>事例では、</p>

<ul>
<li>Intuitive</li>
<li>Minimal &amp; Clean</li>
<li>Analog &amp; Comfortable</li>
<li>Illustration &amp; Infographic</li>
<li>Micro Interaction</li>
<li>Onboading Illustration</li>
<li>Internet of Things</li>
</ul>


<p>の各テーマの事例がいくつか画面キャプチャありで掲載されています。<br/>
主にアプリのUIについてで、Webに派生しているものはほんのわずか紹介がある形。</p>

<p>ページ数的にこの事例がこの本のメインなんじゃないかと思っていたのですが、事例の合間に描き下ろしのコラムが10個ほどあります。<br/>
興味深かったのは、、いくつかピックアップしようと思いましたが全部ですね。</p>

<ul>
<li>Apple が目指す「流れるインターフェイス」 | 安藤剛</li>
<li>思考とジェスチャーとのあいだの微細なインタラクションがマインドをつくる | 水野勝仁</li>
<li>個人的なインタラクション | 萩原俊矢</li>
<li>ユーザーのウェルビーイングのためのUI/UX | ドミニク・チェン</li>
<li>導線としての制約を作る | 菅俊一</li>
<li>動きとUI デザイン | 鹿野護</li>
<li>話法について | 有馬トモユキ</li>
<li>UI の外在化とメタハードウェア | 渡邊恵太</li>
<li>世界観への期待を創るUI デザインとエクスペリエンサビリティを向上するUX | 須齋佑紀/津﨑将氏</li>
</ul>


<p>UIの変遷的な話の基礎部分から、それぞれの観点で捉えるUIについて語られるといった感じでしょうか。<br/>
特に近年のUIについてはフラットデザインで理解が止まっていたので Fluid Interface のこと、その潮流に伴う思考の変化など勉強になりました。</p>

<p>あとは個人的にUX寄りですがウェルビーイングについては初めて触れる観点でいろいろな世界があるなあと感じました。</p>

<p>巻末の再録は、</p>

<ul>
<li>メタファー、ボタン、テクスチャ、色面、ピクセル | 水野勝仁</li>
<li>マテリアルデザインとその可能性 | 深津貴之</li>
<li>レスポンシブ・タイポグラフィ | iA</li>
</ul>


<p>が特に興味深かったです。</p>

<h2>良かった点</h2>

<ul>
<li>事例が新しい、印刷がきれい</li>
<li>コラムが充実</li>
</ul>


<h2>惜しかった点</h2>

<p>特になし。<br/>
ほんのサイズがちょい大きいくらいです（けど事例見せるためと思うのでしょうがないかなと）</p>

<h2>まとめ</h2>

<p>ぱっと本屋で立ち読みして事例目当てで買いましたが、どちらかというとコラムが面白かったです。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Docker で WordPress ローカル環境構築'
description: ''
publishDate: '11/18/2019 22:00:00'
---

[CONTENTS-START]
<p>だいぶ前に作られた環境を触った経験はある気がしますが、Dockerを入れると環境構築が楽だということでやってみました。<br/>
まだまだ理解ができていない細かいことありますが、結構便利だなと<br/>
複数人でも同じローカル環境つくれるのいいですね。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191118150845.png" alt="f:id:jotaki:20191118150845p:plain" title="f:id:jotaki:20191118150845p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h3>インストール</h3>

<h4>Dockerアプリのインストール</h4>

<p><a href="https://upd.world/docker-install-mac/">DockerをMacにインストールする方法 - UPDATE</a> の通り</p>

<h4>Dockerを起動</h4>

<p>[projectFolder] に docker-compose.yml を配置<br/>
docker-compose.yml の中身は下記を参考に<br/>
<a href="http://docs.docker.jp/v1.11/compose/wordpress.html">クイックスタート・ガイド：Docker Compose と Wordpress — Docker-docs-ja 1.11.0 ドキュメント</a></p>

<pre class="code bash" data-lang="bash" data-unlink>$ cd [projectFolder]
# コンテナを起動
$ docker-compose up</pre>


<p><a href="http://localhost:8000/">http://localhost:8000/</a> をみるとインストール画面が表示されるはず</p>

<h4>その他コマンド</h4>

<pre class="code bash" data-lang="bash" data-unlink># コンテナを停止
$ docker-compose down
# サービスを停止
$ docker-compose stop
# コンテナの一覧を表示
$ docker-compose ps</pre>


<h3>詰まった所</h3>

<h4>Docker Networkが削除ができない</h4>

<p>何度か docker-compose.yml を書き直して、compose up してとしていたけどうまくキャッシュ的なものが消せてなかった様子</p>

<p><a href="https://qiita.com/shunchandayo/items/8b24af5239d9162b253c">docker networkの削除ができない - Qiita</a> で一旦まっさらにもどしてからやるとうまくいきました。</p>

<h4>アップロード容量制限に引っ掛かる</h4>

<p>DBコンテンツは All-in-One WP Migration プラグインを使って移行しましたが、Docker環境ではアップロード容量が少ないので下記で一旦</p>

<pre class="code" data-lang="" data-unlink>file_uploads = On
upload_max_filesize = 2G
post_max_size = 2G</pre>


<p>としました。<br/>
<a href="https://github.com/docker-library/wordpress/issues/375">How to support changing the upload file size limit · Issue #375 · docker-library/wordpress · GitHub</a></p>

<p>その他参考:</p>

<ul>
<li><a href="https://upd.world/docker-compose-wordpress/">Docker Compose で WordPress の開発環境を構築する方法 - UPDATE</a></li>
<li><a href="http://bashalog.c-brains.jp/19/08/15-120000.php">Docker Compose でWordPress環境を作ってみる | バシャログ。</a></li>
<li><a href="https://noumenon-th.net/programming/2019/04/05/docker-wordpress/">Docker ComposeでWordPressを構築する[WordPress]</a></li>
<li><a href="https://qiita.com/wasanx25/items/d47caf37b79e855af95f">docker-compose コマンドまとめ - Qiita</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'EJSで使う構文まとめ'
description: ''
publishDate: '11/08/2019 22:00:00'
---

[CONTENTS-START]
<p>会社でGulpでEJS触わる機会が多いので、よく使う構文をまとめておこうと思います。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191108143317.png" alt="f:id:jotaki:20191108143317p:plain" title="f:id:jotaki:20191108143317p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h3>基本</h3>

<p>.html</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;% var ejsRoot = </span><span class="synConstant">'./'</span><span class="synIdentifier">; %&gt;</span>
<span class="synIdentifier">&lt;%- include(ejsRoot + </span><span class="synConstant">'_module/ejsFileName'</span><span class="synIdentifier">); %&gt;</span>
</pre>


<p>.ejs</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!-- .htmlで出力するHTML --&gt;</span>
</pre>


<h3>パラメータ指定</h3>

<h4>ボタンのコンポーネントをejs化するサンプル</h4>

<p>.html</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;%- include(ejsRoot + </span><span class="synConstant">'_module/component/button'</span><span class="synIdentifier">, {</span>
<span class="synIdentifier">  buttonColor: </span><span class="synConstant">'red'</span><span class="synIdentifier">,</span>
<span class="synIdentifier">  buttonLink: </span><span class="synConstant">'/path/'</span><span class="synIdentifier">,</span>
<span class="synIdentifier">  buttonText: </span><span class="synConstant">'ボタンのテキスト'</span>
<span class="synIdentifier">}); %&gt;</span>
</pre>


<p>.ejs</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;button button--&lt;%= buttonColor %&gt;&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&lt;%= buttonLink %&gt;&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;%=</span><span class="synConstant"> buttonText</span><span class="synIdentifier"> %&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
</pre>


<p>.html側でパラメータ指定がない場合はGulpでコンパイルエラーになるのを回避するには、</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;% if( typeof buttonColor!=</span><span class="synConstant">'undefined'</span><span class="synIdentifier"> ){ %&gt;</span>
  <span class="synComment">&lt;!-- ここに `buttonColor: 'hogehoge' が定義されている場合 --&gt;</span>
<span class="synIdentifier">&lt;% } else { %&gt;</span>
  <span class="synComment">&lt;!-- それ以外の場合 --&gt;</span>
<span class="synIdentifier">&lt;% } %&gt;</span>
</pre>


<p>などとすると分岐してエラー回避できる。</p>

<p>参考：
<a href="https://github.com/tj/ejs/issues/90">Using "if" to check variable before usage results in Error, Undefined · Issue #90 · tj/ejs</a></p>

<h4>出力するバナーの個数をパラメータで指定する</h4>

<p>.html</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;%- include(ejsRoot + </span><span class="synConstant">'_module/component/banner'</span><span class="synIdentifier">, { item: 4 }); %&gt;</span>
</pre>


<p>.ejs</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;% </span><span class="synType">for</span><span class="synIdentifier"> (var i=</span><span class="synConstant">0;</span><span class="synIdentifier"> i</span><span class="synError">&lt;</span><span class="synIdentifier">item; i++) { %&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;banner.png&quot;</span><span class="synIdentifier"> </span><span class="synType">alt</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;% } %&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
</pre>


<h4>パンくずをパラメータで指定する</h4>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;%- include(ejsRoot + </span><span class="synConstant">'_module/component/breadcrumb'</span><span class="synIdentifier">, {</span>
<span class="synIdentifier">  navigationList: [</span>
<span class="synIdentifier">    {</span>
<span class="synIdentifier">      path: </span><span class="synConstant">'/'</span><span class="synIdentifier">,</span>
<span class="synIdentifier">      </span><span class="synType">label</span><span class="synIdentifier">: </span><span class="synConstant">'ホーム'</span>
<span class="synIdentifier">    },</span>
<span class="synIdentifier">    {</span>
<span class="synIdentifier">      path: </span><span class="synConstant">'/parent/'</span><span class="synIdentifier">,</span>
<span class="synIdentifier">      </span><span class="synType">label</span><span class="synIdentifier">: </span><span class="synConstant">'親階層ページ'</span>
<span class="synIdentifier">    },</span>
<span class="synIdentifier">    {</span>
<span class="synIdentifier">      path: </span><span class="synConstant">''</span><span class="synIdentifier">,</span>
<span class="synIdentifier">      </span><span class="synType">label</span><span class="synIdentifier">: </span><span class="synConstant">'子階層ページ'</span>
<span class="synIdentifier">    }</span>
<span class="synIdentifier">  ]</span>
<span class="synIdentifier">}); %&gt;</span>
</pre>


<p>.ejs</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">ol</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;% </span><span class="synType">for</span><span class="synIdentifier"> (var key in navigationList) { %&gt;</span>
  <span class="synIdentifier">&lt;%</span>
<span class="synIdentifier">    // .html 側に定義された path と </span><span class="synType">label</span><span class="synIdentifier"> をループしてパンくずを生成</span>
<span class="synIdentifier">    var path =</span><span class="synConstant"> navigationList[key].path;</span>
<span class="synIdentifier">    var </span><span class="synType">label</span><span class="synIdentifier"> =</span><span class="synConstant"> navigationList[key].label;</span>
<span class="synIdentifier">  %&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;% if ( path =</span><span class="synConstant">==</span><span class="synIdentifier"> </span><span class="synConstant">''</span><span class="synIdentifier"> ) { %&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">span</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;current&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;%=</span><span class="synConstant"> label</span><span class="synIdentifier"> %&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;% } else { %&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&lt;%= path %&gt;&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;%=</span><span class="synConstant"> label</span><span class="synIdentifier"> %&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;% } %&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;% } %&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">ol</span><span class="synIdentifier">&gt;</span>
</pre>


<p>参考：
<a href="https://qiita.com/y_hokkey/items/31f1daa6cecb5f4ea4c9">テンプレートエンジンEJSで使える便利な構文まとめ - Qiita</a></p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2019年10月 振り返り'
description: ''
publishDate: '11/02/2019 16:40:39'
---

[CONTENTS-START]
<h1>結果</h1>

<h2>ブログ</h2>

<p><strong>目標：月 12 回（週 3 回）更新</strong><br/>
<strong>結果：月 6 回 更新</strong></p>

<h2>読書</h2>

<p><strong>目標：月 1 冊</strong><br/>
<strong>結果：月 0 冊</strong></p>

<h1>反省点など</h1>

<p>本も特に興味を持てるものがなかったのですが、習慣づけなきゃですね</p>

<h1>来月に向けて</h1>

<p>結局Nuxtでやろうと思ってたものはVueオンリーでやることになりそう
11月中に公開までしたい。また使ったものに関してブログにまとめる</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'カスタム投稿 REST APIで取得するJSONを並び替えプラグイン通りにする'
description: ''
publishDate: '10/15/2019 22:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190206105446.png" alt="f:id:jotaki:20190206105446p:plain" title="f:id:jotaki:20190206105446p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p><a href="https://siteUrl.com/wp-json/wp/v2/POST-TYPE-NAME/">https://siteUrl.com/wp-json/wp/v2/POST-TYPE-NAME/</a> のREST APIを叩くと順番がデフォルト（投稿日順？）になってしまうので、これを並び替えプラグイン通りに並べ替えたい。</p>

<p>ぴったしの記事がありました<br/>
<a href="https://aircolor.hatenablog.com/entry/2019/03/13/081135">Intuitive Custom Post Orderの並び順をWP-REST-APIに反映する - aircolor memolog</a></p>

<p>カスタム投稿の場合は下記のようにする（ <code>POST-TYPE-NAME</code> にポストタイプを指定 ）</p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
add_filter<span class="synSpecial">(</span> <span class="synConstant">'rest_POST-TYPE-NAME_query'</span>, <span class="synPreProc">function</span><span class="synSpecial">(</span> <span class="synStatement">$</span><span class="synIdentifier">args</span>, <span class="synStatement">$</span><span class="synIdentifier">request</span> <span class="synSpecial">)</span> <span class="synSpecial">{</span>
  <span class="synStatement">$</span><span class="synIdentifier">args</span><span class="synSpecial">[</span><span class="synConstant">'order'</span><span class="synSpecial">]</span> <span class="synStatement">=</span> <span class="synConstant">'ASC'</span>;
  <span class="synStatement">$</span><span class="synIdentifier">args</span><span class="synSpecial">[</span><span class="synConstant">'orderby'</span><span class="synSpecial">]</span> <span class="synStatement">=</span> <span class="synConstant">'menu_order'</span>;
  <span class="synStatement">return</span> <span class="synStatement">$</span><span class="synIdentifier">args</span>;
<span class="synSpecial">}</span>, <span class="synConstant">10</span>, <span class="synConstant">2</span> <span class="synSpecial">)</span>;
</pre>


<p>タクソノミーの場合も同様</p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
add_filter<span class="synSpecial">(</span> <span class="synConstant">'rest_TAXONOMY-NAME_query'</span>, <span class="synPreProc">function</span><span class="synSpecial">(</span> <span class="synStatement">$</span><span class="synIdentifier">args</span>, <span class="synStatement">$</span><span class="synIdentifier">request</span> <span class="synSpecial">)</span> <span class="synSpecial">{</span>
<span class="synStatement">...</span>
</pre>


<p>他参考</p>

<ul>
<li><a href="https://qiita.com/K_ichi/items/a5d6b1047b3df391a2b6">WordPress REST API での検索条件設定 - Qiita</a></li>
<li><a href="http://hookr.io/filters/rest_taxonomy_query/">rest<em><taxonomy></em>query | filter | WordPress | hookr.io</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'ACF オプションページのREST APIエンドポイント'
description: ''
publishDate: '10/10/2019 09:51:27'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191008144612.png" alt="f:id:jotaki:20191008144612p:plain" title="f:id:jotaki:20191008144612p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>ACFオプションページのエンドポイントがうまくいかなかったのでメモ<br/>
公式ドキュメント: <a href="https://github.com/airesvsg/acf-to-rest-api">https://github.com/airesvsg/acf-to-rest-api</a><br/>
同じようなissue: <a href="https://github.com/airesvsg/acf-to-rest-api/issues/184">https://github.com/airesvsg/acf-to-rest-api/issues/184</a></p>

<p>登録はfunctions.phpに通常通り記述</p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synComment">// ...</span>
<span class="synStatement">if</span><span class="synSpecial">(</span> <span class="synIdentifier">function_exists</span><span class="synSpecial">(</span><span class="synConstant">'acf_add_options_page'</span><span class="synSpecial">)</span> <span class="synSpecial">)</span> <span class="synSpecial">{</span>
  <span class="synStatement">$</span><span class="synIdentifier">option_page</span> <span class="synStatement">=</span> acf_add_options_page<span class="synSpecial">(</span><span class="synType">array</span><span class="synSpecial">(</span>
    <span class="synConstant">'page_title'</span> <span class="synStatement">=&gt;</span> <span class="synConstant">'PAGE-NAME'</span>,
    <span class="synConstant">'menu_title'</span> <span class="synStatement">=&gt;</span> <span class="synConstant">'PAGE-NAME'</span>,
    <span class="synConstant">'menu_slug'</span> <span class="synStatement">=&gt;</span> <span class="synConstant">'SLUG-NAME'</span>,
    <span class="synConstant">'capability'</span> <span class="synStatement">=&gt;</span> <span class="synConstant">'edit_posts'</span>,
    <span class="synConstant">'redirect'</span> <span class="synStatement">=&gt;</span> <span class="synConstant">false</span>
  <span class="synSpecial">))</span>;
<span class="synSpecial">}</span>
<span class="synComment">// ...</span>
</pre>


<p>ドキュメントに <code>/wp-json/acf/v3/options/{id}/</code> とあるので<br/>
https://{site_url}.com/wp-json/acf/v3/options/{id}/<br/>
を叩いてみても <code>acf:{}</code> と空が返ってくる...</p>

<p><a href="https://www.bountysource.com/issues/69485018-unable-to-put-post-values-for-custom-fields">こちら</a> によると</p>

<p><code>/wp-json/acf/v3/options/{id}/</code><br/>
ではなく<br/>
<code>/wp-json/acf/v3/options/options/</code><br/>
だとうまくいくとのこと。</p>

<p>https://{site_url}.com/wp-json/acf/v3/options/options/<br/>
が正解でちゃんと返ってきました。<br/>
ただこれだとすべてのオプションページのフィールドを含んでいるみたいです。<br/>
オプションページ登録部分が悪いのか、環境依存なのかは謎なままですがとりあえず取得まではこれでできるという感じでした。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'node.js の切り替えを nodebrew ではなく nodenv で行う'
description: ''
publishDate: '10/08/2019 22:30:00'
---

[CONTENTS-START]
<p>nodebrew はプロジェクトごとに切り替えがしづらいので、 nodenv のがいいらしい。
導入は <a href="https://qiita.com/tonkotsuboy_com/items/5322d226b6783d25b5df">こちら</a> 通りでいけました</p>

<p>リスト表示</p>

<pre class="code bash" data-lang="bash" data-unlink>$ nodenv versions</pre>


<p>バージョン指定でインストール</p>

<pre class="code bash" data-lang="bash" data-unlink>$ nodenv install 10.15.0
$ nodenv install 12.11.0</pre>


<p>デフォルトで使用するバージョンを指定</p>

<pre class="code bash" data-lang="bash" data-unlink>$ nodenv global 12.11.0</pre>


<p>プロジェクトごとに使用するバージョンを指定</p>

<pre class="code bash" data-lang="bash" data-unlink>$ cd [project folder]
$ nodenv local 10.15.0
$ nodenv local 12.11.0</pre>


<p>これでプロジェクトフォルダに .node-version ファイルが追加されているはず<br/>
バージョン確認</p>

<pre class="code bash" data-lang="bash" data-unlink>$ node -v</pre>


<p>nodebrew の削除</p>

<pre class="code bash" data-lang="bash" data-unlink># パス 削除
$ export PATH=$HOME/.nodebrew/current/bin:$PATH
$ export PATH=$HOME/.nodebrew/current/bin/npm:$PATH

# nodebrew 削除
$ brew uninstall nodebrew</pre>


<p>最後に、 <code>~/.nodebrew</code> ディレクトリを削除</p>

<p>参考：</p>

<ul>
<li><a href="https://qiita.com/tonkotsuboy_com/items/5322d226b6783d25b5df">Node.jsのバージョンを自動で切り替えられるndenvが超便利 - Qiita</a></li>
<li><a href="https://qiita.com/bobStrange/items/f7301bebe72079f115a7">nodebrew から ndenvに切り替えたメモ(OSX) - Qiita</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'REST API のスキーマにリピーターフィールドの画像データを格納する'
description: ''
publishDate: '10/08/2019 22:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20191008144612.png" alt="f:id:jotaki:20191008144612p:plain" title="f:id:jotaki:20191008144612p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p><a href="https://ja.wordpress.org/plugins/acf-to-rest-api/">ACF to REST API</a> を使えば REST API でACFの値が取得できますが、カスタマイズした形でカスタムフィールドの値を追加する方法です。</p>

<p>例えばACFフィールドでアップロードした画像は指定している戻り値がREST APIでも返ってきます。<br/>
<code>image_field</code>: リピーターの親フィールド<br/>
<code>image_sub_field</code>: リピーターの子フィールド（返り値 => 画像ID の場合）</p>

<pre class="code lang-json" data-lang="json" data-unlink>...
&quot;<span class="synStatement">acf</span>&quot;: <span class="synSpecial">{</span>
    &quot;<span class="synStatement">image_field</span>&quot;: <span class="synSpecial">[</span>
      <span class="synSpecial">{</span> &quot;<span class="synStatement">image_sub_field</span>&quot;: <span class="synConstant">164</span> <span class="synSpecial">}</span>,
      <span class="synSpecial">{</span> &quot;<span class="synStatement">image_sub_field</span>&quot;: <span class="synConstant">165</span> <span class="synSpecial">}</span>,
      <span class="synSpecial">{</span> &quot;<span class="synStatement">image_sub_field</span>&quot;: <span class="synConstant">166</span> <span class="synSpecial">}</span>,
...
</pre>


<p>このままだとAPIからは画像URLなど取れないので独自で追加する必要があります。<br/>
functions.php</p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synComment">// ...</span>
<span class="synPreProc">function</span> register_custom_images_data<span class="synSpecial">()</span> <span class="synSpecial">{</span>
  register_rest_field<span class="synSpecial">(</span>
    <span class="synConstant">'CUSTOM_POST_TYPE_NAME'</span>, <span class="synComment">// カスタム投稿名</span>
    <span class="synConstant">'CUSTOM_REST_API_KEY'</span>,   <span class="synComment">// REST API に追加するキー</span>
    <span class="synType">array</span><span class="synSpecial">(</span>
      <span class="synConstant">'get_callback'</span>    <span class="synStatement">=&gt;</span> <span class="synConstant">'get_custom_image_data'</span>,
      <span class="synConstant">'update_callback'</span> <span class="synStatement">=&gt;</span> <span class="synType">null</span>,
      <span class="synConstant">'schema'</span>          <span class="synStatement">=&gt;</span> <span class="synType">null</span>,
    <span class="synSpecial">)</span>
  <span class="synSpecial">)</span>;
<span class="synSpecial">}</span>
add_action<span class="synSpecial">(</span> <span class="synConstant">'rest_api_init'</span>, <span class="synConstant">'register_custom_images_data'</span> <span class="synSpecial">)</span>;
<span class="synComment">// リピーター画像取得</span>
<span class="synPreProc">function</span> get_custom_image_data<span class="synSpecial">(</span> <span class="synStatement">$</span><span class="synIdentifier">object</span>, <span class="synStatement">$</span><span class="synIdentifier">field_name</span>, <span class="synStatement">$</span><span class="synIdentifier">request</span> <span class="synSpecial">)</span> <span class="synSpecial">{</span>
  <span class="synStatement">$</span><span class="synIdentifier">meta_fields</span> <span class="synStatement">=</span> <span class="synStatement">$</span><span class="synIdentifier">object</span><span class="synSpecial">[</span><span class="synConstant">'acf'</span><span class="synSpecial">][</span><span class="synConstant">'image_field'</span><span class="synSpecial">]</span>;
  <span class="synStatement">$</span><span class="synIdentifier">meta</span> <span class="synStatement">=</span> <span class="synType">array</span><span class="synSpecial">()</span>;
  <span class="synStatement">foreach</span> <span class="synSpecial">(</span> <span class="synStatement">$</span><span class="synIdentifier">meta_fields</span> <span class="synStatement">as</span> <span class="synStatement">$</span><span class="synIdentifier">field</span> <span class="synSpecial">)</span> <span class="synSpecial">{</span>
    <span class="synStatement">$</span><span class="synIdentifier">artist_images_full</span> <span class="synStatement">=</span> wp_get_attachment_image_src<span class="synSpecial">(</span> <span class="synStatement">$</span><span class="synIdentifier">field</span><span class="synSpecial">[</span><span class="synConstant">'image_sub_field'</span><span class="synSpecial">]</span>, <span class="synConstant">'full'</span><span class="synSpecial">)</span>;
    <span class="synIdentifier">array_push</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">meta</span>, <span class="synStatement">$</span><span class="synIdentifier">artist_images_full</span><span class="synSpecial">)</span>;
  <span class="synSpecial">}</span>
  <span class="synStatement">return</span> <span class="synStatement">$</span><span class="synIdentifier">meta</span>;
<span class="synSpecial">}</span>
<span class="synComment">// ...</span>
</pre>


<p>として REST API を叩くと</p>

<pre class="code lang-json" data-lang="json" data-unlink>...
  &quot;<span class="synStatement">CUSTOM_REST_API_KEY</span>&quot;: <span class="synSpecial">[</span>
  <span class="synSpecial">{</span>
    &quot;<span class="synConstant">https:/siteUrl.com/wp-content/uploads/2019/10/sample02.jpg</span>&quot;,
    <span class="synConstant">1280</span>,
    <span class="synConstant">640</span>,
    <span class="synConstant">false</span>
  <span class="synSpecial">}</span>,
  <span class="synSpecial">{</span>
    &quot;<span class="synConstant">https:/siteUrl.com/wp-content/uploads/2019/10/sample01.jpg</span>&quot;,
    <span class="synConstant">1280</span>,
    <span class="synConstant">640</span>,
    <span class="synConstant">false</span>
  <span class="synSpecial">}</span>,
...
</pre>


<p>となる</p>

<p>仮に Vue で出力するには</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;(image,index) in post.data.CUSTOM_REST_API_KEY&quot;</span><span class="synIdentifier"> :key=</span><span class="synConstant">&quot;index&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">img</span>
<span class="synIdentifier">      :</span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;image[0]&quot;</span>
<span class="synIdentifier">      :</span><span class="synType">data</span><span class="synIdentifier">-</span><span class="synType">size</span><span class="synIdentifier">=</span><span class="synConstant">&quot;`${image[1]}x${image[2]}`&quot;</span>
<span class="synIdentifier">      &gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
</pre>


<p>という感じで出力する</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'WordPress + Nuxt.js で スラッグベースのパーマリンクにルーティングする'
description: ''
publishDate: '10/01/2019 23:30:00'
---

[CONTENTS-START]
<p><code>ルーティングする</code> という表現があっているのかどうか微妙ですが、<br/>
カスタム投稿タイプを使ったWordPressの投稿をIDベースではなくスラッグベースで実装する場合</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190924093802.png" alt="f:id:jotaki:20190924093802p:plain" title="f:id:jotaki:20190924093802p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>カスタム投稿: <code>book</code><br/>
.vue ファイル名: <code>/pages/book/_slug.vue</code><br/>
実現したいURL構造: <code>https://hoge.com/book/[スラッグ名]</code></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;section&gt;
    &lt;pre&gt;<span class="synIdentifier">{{</span>post<span class="synIdentifier">[</span>0<span class="synIdentifier">]}}</span>&lt;/pre&gt;
    &lt;p&gt;id: <span class="synIdentifier">{{</span>post<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>.id<span class="synIdentifier">}}</span>&lt;/p&gt;
    &lt;p&gt;slug: <span class="synIdentifier">{{</span>post<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>.slug<span class="synIdentifier">}}</span>&lt;/p&gt;
    &lt;p&gt;date: <span class="synIdentifier">{{</span>post<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>.date<span class="synIdentifier">}}</span>&lt;/p&gt;
    &lt;p&gt;link: <span class="synIdentifier">{{</span>post<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>.link<span class="synIdentifier">}}</span>&lt;/p&gt;
    &lt;h1&gt;<span class="synIdentifier">{{</span>post<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>.title.rendered<span class="synIdentifier">}}</span>&lt;/h1&gt;
    &lt;div v-html=<span class="synConstant">&quot;post[0].content.rendered&quot;</span>&gt;&lt;/div&gt;
  &lt;/section&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">import</span> axios from <span class="synConstant">'axios'</span>
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  data () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      post: <span class="synIdentifier">{}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  asyncData (<span class="synIdentifier">{</span> params <span class="synIdentifier">}</span>) <span class="synIdentifier">{</span>
    <span class="synComment">// console.log(params)</span>
    <span class="synComment">// console.log(params.slug)</span>
    <span class="synStatement">return</span> axios.get(`https:<span class="synComment">//hoge.com/wp-json/wp/v2/book?slug=${params.slug}`)</span>
      .then(response =&gt; <span class="synIdentifier">{</span>
        <span class="synStatement">return</span> <span class="synIdentifier">{</span> post: response.data <span class="synIdentifier">}</span>
      <span class="synIdentifier">}</span>)
      .<span class="synStatement">catch</span>((error) =&gt; <span class="synIdentifier">{</span>
        <span class="synStatement">return</span> <span class="synIdentifier">{</span> error: error <span class="synIdentifier">}</span>
      <span class="synIdentifier">}</span>)
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<p>結構つまってしまって、REST APIのエンドポイント、IDベースでしか記事情報が取得できないと思って<br/>
<code>https://hoge.com/wp-json/wp/v2/book/${params.id}</code> でid取得したあとにスラッグ取るのどうやんのかなとか思ってましたが、<br/>
<code>https://hoge.com/wp-json/wp/v2/book?slug=${params.slug}</code> でいけました</p>

<p>なのでAPI側を理解してなかったっていう話でした<br/>
参考: <a href="https://unicorn.limited/jp/item/949">https://unicorn.limited/jp/item/949</a></p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '🍺 nodebrew 🍺'
description: ''
publishDate: '10/01/2019 23:00:00'
---

[CONTENTS-START]
<p>インストールされている Node.js のバージョン確認</p>

<pre class="code bash" data-lang="bash" data-unlink>$ nodebrew list
v10.15.0
v11.6.0
v12.11.0

current: v12.11.0</pre>


<p>安定版のインストール</p>

<pre class="code bash" data-lang="bash" data-unlink>nodebrew install-binary stable</pre>


<p>バージョン指定でインストール</p>

<pre class="code bash" data-lang="bash" data-unlink>nodebrew install-binary v10.16.3</pre>


<p>使用するバージョンの切り替え</p>

<pre class="code bash" data-lang="bash" data-unlink>$ nodebrew use v10.15.0
use v10.15.0</pre>


<p>現在のバージョン確認</p>

<pre class="code bash" data-lang="bash" data-unlink>$ node -v
v10.15.0</pre>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2019年9月 振り返り'
description: ''
publishDate: '09/30/2019 10:44:39'
---

[CONTENTS-START]
<h1>結果</h1>

<h2>ブログ</h2>

<p><strong>目標：月 12 回（週 3 回）更新</strong><br/>
<strong>結果：月 4 回 更新</strong></p>

<h2>読書</h2>

<p><strong>目標：月 1 冊</strong><br/>
<strong>結果：月 2 冊</strong></p>

<h1>反省点など</h1>

<p>スクラム開発を知りたい欲が高まって関連本読んだが、技術的に進歩はほぼなし</p>

<h1>来月に向けて</h1>

<p>Nuxt 触ってサイト完成までもっていく。実績として1つ公開したサイトを作っておきたい<br/>
ブログの更新は目標回数見直そうかなと思います</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】カイゼン・ジャーニー'
description: ''
publishDate: '09/30/2019 10:38:58'
---

[CONTENTS-START]
<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798153346/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/413zYBVOo2L._SL160_.jpg" class="hatena-asin-detail-image" alt="カイゼン・ジャーニー たった1人からはじめて、「越境」するチームをつくるまで" title="カイゼン・ジャーニー たった1人からはじめて、「越境」するチームをつくるまで"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798153346/hatena-blog-22/">カイゼン・ジャーニー たった1人からはじめて、「越境」するチームをつくるまで</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 市谷聡啓,新井剛</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 翔泳社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/02/07</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4798153346/hatena-blog-22" target="_blank">この商品を含むブログ (2件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>カイゼン・ジャーニー を読みました。<br/>
先日の <a href="https://jtk.hatenablog.com/entry/2019/09/15/155334">正しいものを正しくつくる</a> で開発手法（アジャイル、スクラム）に興味を持ったので同じ著者の方の本ということで選びました。</p>

<h2>概要・ポイント</h2>

<p>書かれている内容は「正しいものを正しくつくる」の内容と似ていると思います。<br/>
物語形式で書かれており、そのなかで解説が都度入ってくるというスタイルで、主人公がタスク管理について〜開発チームのリーダーとしてチームをまとめたり、同じ方向を向かせるために様々な方法を通して解決していく流れです。</p>

<p>最後にユーザーインタビューを突貫でしたり詰め込んでいる感がありますが、前提として物語を読みたい &lt; カイゼンや開発について勉強したい、だったのでそこは気になりませんでした。</p>

<h2>良かった点</h2>

<ul>
<li>物語形式で話が進む点</li>
<li>開発手法のこともあったが業務改善の方法についても多く触れられていた点</li>
<li>デザインプロセスから</li>
</ul>


<h2>惜しかった点</h2>

<ul>
<li>大きいポイントではないが人物相関図があればもっと話が入ったかもしれない</li>
</ul>


<h2>まとめ</h2>

<p>タイトルに「カイゼン〜」があるので当たり前なのですが、思っていたよりも開発寄りの話ではなく業務のカイゼンの手法の話も多かった。<br/>
あまりその手の本を読んでこなかったので勉強になった。<br/>
経験踏まえて我流でやっていることにもモデルや概念は元々あるというのも知ることができた。</p>

<ul>
<li>星取表（スキルマップ）</li>
<li>TWI（Training Within Industry）</li>
<li>プランニングポーカー</li>
<li>パーキンソンの法則</li>
</ul>


<p>ただ知らなかった考えの中で役立ちそうそうなことも多かった。</p>

<ul>
<li>氷山モデル</li>
<li>Working Agreement</li>
<li>狩野モデル</li>
<li>ECRS</li>
<li>リーダーズインテグレーション</li>
<li>CCPM</li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Nuxt.js をさわってみる'
description: ''
publishDate: '09/24/2019 09:37:47'
---

[CONTENTS-START]
<p>Vue.js と WordPressと使って、SSRできる仕組みということで Nuxt.js を触ってみました。<br/>
<a href="https://github.com/yuheijotaki/nuxt-study_20190919">yuheijotaki/nuxt-study_20190919: Nuxt.js for study 20190919</a></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190924093802.png" alt="f:id:jotaki:20190924093802p:plain" title="f:id:jotaki:20190924093802p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>導入は基本これ通りです。<br/>
Vue CLI使うとすんなり環境構築できますね<br/>
<a href="https://qiita.com/_takeshi_24/items/224d00e5a026dbb76716">Nuxt.js使ってみた - Qiita</a></p>

<h4>sass を使う</h4>

<p>index.vueやcomponents配下の.vueファイルでsassを使うには、ふつうのVueと同じで
<code>$ npm i -D sass-loader node-sass</code><br/>
をインストールする</p>

<h4>_mixin.scss など .scssのグローバルファイルを使う</h4>

<p><code>$ npm run dev</code> をすると触れるようになるのですが、Sassのグローバルファイルを使いたい場合、Nuxt Style Resources というモジュールをインストールして nuxt.config.js に設定情報を記述する。<br/>
<code>$ npm i -D @nuxtjs/style-resources</code><br/>
nuxt.config.js</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>module.exports = <span class="synIdentifier">{</span>
  <span class="synComment">// ...</span>
  modules: <span class="synIdentifier">[</span><span class="synConstant">'@nuxtjs/style-resources'</span><span class="synIdentifier">]</span>,
  styleResources: <span class="synIdentifier">{</span>
    scss: <span class="synIdentifier">[</span>
      <span class="synConstant">'~/assets/sass/foundation/_variable.scss'</span>,
      <span class="synConstant">'~/assets/sass/foundation/_mixin.scss'</span>,
      <span class="synConstant">'~/assets/sass/foundation/_common.scss'</span>
    <span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>これでindex.vueやcomponents配下の.vueファイルで_variable.scssで設定した変数が使えるようになる。<br/>
参考: <a href="https://qiita.com/uto-usui/items/6b745203fa6fad577877">《Nuxt.js》Sassの共通の変数やmixinを一括で各コンポーネントに読み込む方法。 - Qiita</a></p>

<h3>参考</h3>

<ul>
<li><a href="https://ja.nuxtjs.org/">Nuxt.js - ユニバーサル Vue.js アプリケーション</a></li>
<li><a href="https://vuex.vuejs.org/ja/">Vuex とは何か？ | Vuex</a></li>
<li><a href="https://liginc.co.jp/449551">【Ch.1】 Nuxt とは？動かして理解する【Nuxt de Portfolio】 | 東京上野のWeb制作会社LIG</a></li>
<li><a href="https://uyamazak.hatenablog.com/entry/2018/08/15/124952">Nuxt.jsいらない説 - GAミント至上主義</a></li>
<li><a href="https://techblog.scouter.co.jp/entry/2017/11/13/120000">Vue.jsで作られたフレームワーク「Nuxt.js」でできること - ROXX(旧SCOUTER)開発者ブログ</a></li>
</ul>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】正しいものを正しくつくる'
description: ''
publishDate: '09/15/2019 15:53:34'
---

[CONTENTS-START]
<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4802511191/hatena-blog-22/"><img src="https://images-fe.ssl-images-amazon.com/images/I/41txD1eZGrL._SL160_.jpg" class="hatena-asin-detail-image" alt="正しいものを正しくつくる プロダクトをつくるとはどういうことなのか、あるいはアジャイルのその先について" title="正しいものを正しくつくる プロダクトをつくるとはどういうことなのか、あるいはアジャイルのその先について"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4802511191/hatena-blog-22/">正しいものを正しくつくる プロダクトをつくるとはどういうことなのか、あるいはアジャイルのその先について</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 市谷聡啓</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> ビー・エヌ・エヌ新社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/06/14</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li><li><a href="http://d.hatena.ne.jp/asin/4802511191/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>正しいものを正しくつくる を読みました。<br/>
数ヶ月前にスクラム開発を取り入れたある程度大きな案件に携わったのですが、そもそもアジャイルやスクラム開発についての理解が薄かったので最近出た本で評判が良さそうだったのでこの本を選びました。</p>

<h2>概要・ポイント</h2>

<p>この本のなかの「正しい」という言葉の定義については、</p>

<blockquote><p>「わかるものをわかるようにする、わかったことを形にする」
「正しいものを正しくつくる」を、「わかったことを正しくつくる」と読み替えて、</p></blockquote>

<p>あたりが定義されている箇所かなと思います。</p>

<ul>
<li>第1章 なぜプロダクトづくりがうまくいかないのか → プロダクトづくりの現状</li>
<li>第2章 プロダクトをアジャイルにつくる → アジャイル開発/スクラムとは、イベントについて</li>
<li>第3章 不確実性への適応 → アジャイル開発で出てくる問題点にどう対応すべきか</li>
<li>第4章 アジャイル開発は2度失敗する → プロダクトオーナーが自身やチームとどう関わるか</li>
<li>第5章 仮説検証型アジャイル開発 → 検証活動について</li>
<li>第6章 ともにつくる → まとめ</li>
</ul>


<blockquote><p>現在の私たちが作ろうとしているプロダクトとは、「どうあるべきか本当のところが誰にもわからないが、なんとかして形に仕立てていく」</p></blockquote>

<p>と書かれている通り、その前提がどのように生まれてどのようにそれぞれの立場や役割で関わったり向き合うべきか、もしくは周囲の状況（ユーザーやニーズ）の多様化など、不確実性の高いプロダクトづくりにどう向き合うべきかのような内容が主かなと思います。</p>

<ul>
<li>スクラムはアジャイルの開発手法の中のひとつ。ほかに、エクストリーム・プログラミングやカンバンなどもアジャイル開発手法の中のひとつ。</li>
<li><a href="https://www.scrumguides.org/docs/scrumguide/v2017/2017-Scrum-Guide-Japanese.pdf">スクラムガイド</a> に書かれている通り、スクラム開発は理解が容易だが習得は困難な開発手法。</li>
</ul>


<h2>良かった点</h2>

<ul>
<li>アジャイル開発、スクラム開発について一連のフローやイベントの目的が分かった</li>
<li>スクラムマスター、プロダクトオーナーがどのような視点（視座/視野）で仕事をするのか（するべきなのか）がなんとなく分かった</li>
<li>現在の開発スタイルへの考え方のトレンドというか流れと、今後どのように開発者がプロジェクトに携わるようになるかが分かった</li>
</ul>


<h2>惜しかった点</h2>

<ul>
<li>仮説検証段階の話は、自分の今の立ち位置だとピンとくる話が少なかった。けど、それも含めて越境していくことなんだと思う。</li>
</ul>


<h2>まとめ</h2>

<p>開発手法についてのこういう類の本ははじめて読んだのですが、会話などの直接コミュニケーションも大事にすることは意外でした。
<a href="http://agilemanifesto.org/iso/ja/manifesto.html">アジャイルソフトウェア開発宣言</a> というのがあるのですが、そこにも</p>

<blockquote><p>プロセスやツールよりも個人と対話を、
とあるので開発手法っていうのが上辺だけの開発にまつわる決まりと勘違いしていました。</p></blockquote>

<p>プロジェクトに関わる人が多い案件はやってこなかったので、今の会社はそれができる体制が整っているので今だから勉强できること、という感じで新しい学びが得られるように今後もしたいなと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2019年8月 振り返り'
description: ''
publishDate: '09/02/2019 09:26:09'
---

[CONTENTS-START]
<h2>結果</h2>
<h3>ブログ</h3>
<p><strong>目標：月 12 回（週 3 回）更新</strong><br /> <strong>結果：月 7 回 更新</strong></p>
<h3>読書</h3>
<p><strong>目標：月 1 冊</strong><br /> <strong>結果：月 2 冊</strong></p>
<h2>反省点など</h2>
<p>読書やVueのクイズを一旦完成までもっていけたが、ブログの更新数がまた達成できず</p>
<h2>来月に向けて</h2>
<p>来月も忙しそうだが細かめの内容でもメモしてアップする習慣をつける  <br />Vueで新しくなにかを作る</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Backlogでの課題管理など'
description: ''
publishDate: '08/28/2019 08:30:00'
---

[CONTENTS-START]
<p>最近案件でBacklogを使っていて、課題管理など自分なりにやりやすい方法をみつけたのでまとめてみます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190827101916.png" alt="f:id:jotaki:20190827101916p:plain" title="f:id:jotaki:20190827101916p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h3>ルール決め（ざっくりとでも）</h3>

<p>最初に構想をもつ。<br/>
下記に挙げるようなフローにおいて、</p>

<ul>
<li><strong>どの</strong>タイミングで起票するか</li>
<li><strong>どのくらいの</strong>粒度で課題を立てるか</li>
<li><strong>だれに</strong>担当者の割り振りを行うか</li>
<li><strong>いつどのようなときに</strong>ステータスを変更するか</li>
<li><strong>だれ</strong>にとっての完了か</li>
<li><strong>なに</strong>をWikiに記載するか</li>
</ul>


<p>上記はプロジェクトごとに、どのようなプロジェクトか、誰と共有するプロジェクトか、いつまでのプロジェクトかでも変わるので毎回変わる。<br/>
また運用していく中でもこっちの方が分かりやすいねといった感じで変わっていくが、あらかじめ枠組みないと各自のルールで進めてしまい課題に対しての捉え方（特にステータス変更）がバラバラになってしまう気がする。</p>

<h3>起票タイミング</h3>

<p>何か課題となること（タスクとなること）を見込みを含めて起こりそうになったタイミングですぐに起票する。<br/>
起票しないと忘れてしまうし、仮にタスクがなしになったときも完了理由を「対応しない」で課題完了すればOK。</p>

<h3>課題の粒度</h3>

<p>基本的には細かければ細かいほうがやりやすい。<br/>
大きな粒度だと、例えばその中でタスクが10個ある状態だと9個完了してても残りの1個がまだで課題完了ができない。→ 一覧で見たときに進捗含め可視化しづらい。</p>

<h3>課題詳細</h3>

<p>コメントには重要な情報を置きっぱなしにせずに、こちらに不変の情報（仕様や修正内容）を記載する。<br/>
各課題はコメントの着信ベースで閲覧されるが、課題の本来の目的に立ち返るときに参照できるものに随時アップデートしておく。<br/>
何個かタスクが入った場合はチェックボックスを使う必要があるが、本来確認事項のメモなどに使う用途のような気がするのでやはり課題自体の粒度を細かめにするのがよさそう。</p>

<h3>ステータス</h3>

<p>どのタイミングで各ステータスに変更するか、共通認識をもっておくことが大事。<br/>
特に「完了」課題は一覧でフィルターかからないのがデフォルトのため、基本的には誰にも見られない課題になってしまい注意が必要そう。</p>

<h3>担当者</h3>

<p>基本的には未設定にしない。だれがボール持っているかをはっきりさせる。</p>

<h3>コメント、コメントのお知らせ</h3>

<p>誰に言っているのかをはっきりさせる。（<code>@</code>でメンションつけれればいいなと、自動的にお知らせも届く）<br/>
お知らせはcc的な意味合い込めて関わる人にはつける。</p>

<h3>種別とマイルストーン</h3>

<p>あんまりきちんと使えてないんですけど、課題フィルターするときとかつけておくと便利だなーと思います。</p>

<h3>ガントチャート</h3>

<p>こちらは全然使えてないです。</p>

<h3>Wiki</h3>

<p>こういうBacklogルール含めルールなどをHomeはインデックスつけておいておく。</p>

<hr />

<p>こんな感じでしょうか。<br/>
とにかく忘れるのが怖い（自分の記憶に自信がない）ので、管理のための管理にはならないようにツールに頼りたいと思います。</p>

<p>↑とは関係ないですが、最近読んだBacklogのアクセシビリティ改善の話<br/>
<a href="https://speakerdeck.com/nulabinc/actions-for-improving-accessibility-in-backlog-ja11yc">https://speakerdeck.com/nulabinc/actions-for-improving-accessibility-in-backlog-ja11yc</a></p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'vue-quiz の Tips'
description: ''
publishDate: '08/27/2019 08:58:47'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p><a href="https://jtk.hatenablog.com/entry/2019/08/25/115918">vue-quiz</a> を作った際にでてきたTipsをまとめておきます</p>

<h3>同じID（値）を持った配列をまとめたい</h3>

<p>今回の場合、ラジオボタン式（単一解答）なら問題ないけど、チェックボックス式（複数解答）のときに整形する必要がでてきた<br/>
つまり</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>array = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span> id: <span class="synConstant">&quot;1&quot;</span>, answer: <span class="synConstant">&quot;d&quot;</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> id: <span class="synConstant">&quot;3&quot;</span>, answer: <span class="synConstant">&quot;a&quot;</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> id: <span class="synConstant">&quot;3&quot;</span>, answer: <span class="synConstant">&quot;b&quot;</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> id: <span class="synConstant">&quot;3&quot;</span>, answer: <span class="synConstant">&quot;c&quot;</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> id: <span class="synConstant">&quot;4&quot;</span>, answer: <span class="synConstant">&quot;b&quot;</span> <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>
</pre>


<p>を↓のようにしたい</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>formatArray = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span> id: <span class="synConstant">&quot;1&quot;</span>, answer: <span class="synIdentifier">[</span><span class="synConstant">&quot;d&quot;</span><span class="synIdentifier">]</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> id: <span class="synConstant">&quot;3&quot;</span>, answer: <span class="synIdentifier">[</span><span class="synConstant">&quot;a&quot;</span>,<span class="synConstant">&quot;b&quot;</span>,<span class="synConstant">&quot;c&quot;</span><span class="synIdentifier">]</span> <span class="synIdentifier">}</span>
  <span class="synIdentifier">{</span> id: <span class="synConstant">&quot;4&quot;</span>, answer: <span class="synIdentifier">[</span><span class="synConstant">&quot;b&quot;</span><span class="synIdentifier">]</span> <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>
</pre>


<p>こういうときに <code>reduce()</code> を使うみたい</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> data = array.reduce((acc, value) =&gt; <span class="synIdentifier">{</span>
  acc<span class="synIdentifier">[</span>value.id<span class="synIdentifier">]</span> = acc<span class="synIdentifier">[</span>value.id<span class="synIdentifier">]</span> ? acc<span class="synIdentifier">[</span>value.id<span class="synIdentifier">]</span> : <span class="synIdentifier">[]</span>;
  acc<span class="synIdentifier">[</span>value.id<span class="synIdentifier">]</span> ? acc<span class="synIdentifier">[</span>value.id<span class="synIdentifier">]</span>.push(value.answer) : <span class="synIdentifier">[</span>value.answer<span class="synIdentifier">]</span>;
  <span class="synStatement">return</span> acc;
<span class="synIdentifier">}</span>, <span class="synIdentifier">{}</span>);
<span class="synIdentifier">let</span> formattedAnswerArray = <span class="synType">Object</span>.entries(data).map(d =&gt; (<span class="synIdentifier">{</span> id: d<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>, answer: d<span class="synIdentifier">[</span>1<span class="synIdentifier">]</span> <span class="synIdentifier">}</span>) );
</pre>


<p>参考: <a href="https://stackoverflow.com/questions/31688459/group-array-items-using-object">https://stackoverflow.com/questions/31688459/group-array-items-using-object</a></p>

<h3>配列の比較</h3>

<p>これも参考のとおりなのですが、配列を比較、今回の場合は答え合わせの際に、問題の正解とユーザーの解答を比べるときに使いました。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> array_equal(a, b) <span class="synIdentifier">{</span>
  <span class="synStatement">if</span> (!<span class="synType">Array</span>.isArray(a))    <span class="synStatement">return</span> <span class="synConstant">false</span>;
  <span class="synStatement">if</span> (!<span class="synType">Array</span>.isArray(b))    <span class="synStatement">return</span> <span class="synConstant">false</span>;
  <span class="synStatement">if</span> (a.length != b.length) <span class="synStatement">return</span> <span class="synConstant">false</span>;
  <span class="synStatement">for</span> (<span class="synIdentifier">var</span> i = 0, n = a.length; i &lt; n; ++i) <span class="synIdentifier">{</span>
    <span class="synStatement">if</span> (a<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span> !== b<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>) <span class="synStatement">return</span> <span class="synConstant">false</span>;
  <span class="synIdentifier">}</span>
  <span class="synStatement">return</span> <span class="synConstant">true</span>;
<span class="synIdentifier">}</span>
</pre>


<p>というfunctionを作って <code>computed</code> で</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// スコアの計算</span>
calcScore: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> correctAnswer = <span class="synIdentifier">this</span>.correctAnswerArray; <span class="synComment">// 問題の正解</span>
  <span class="synStatement">const</span> userAnswer = <span class="synIdentifier">this</span>.userAnswerArray;       <span class="synComment">// ユーザーの解答</span>
  <span class="synIdentifier">let</span> userScore = 0;
  correctAnswer.forEach((value,index) =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">const</span> correctAnswerValue = value;
    <span class="synStatement">const</span> userAnswerValue = userAnswer<span class="synIdentifier">[</span>index<span class="synIdentifier">]</span>;
    <span class="synComment">// ユーザーの解答が問題の正解とイコールならスコアを+1する</span>
    <span class="synStatement">if</span> ( array_equal(correctAnswerValue,userAnswerValue) ) <span class="synIdentifier">{</span>
      userScore ++;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>);
  <span class="synStatement">return</span> userScore;
<span class="synIdentifier">}</span>
</pre>




<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">template</span><span class="synIdentifier">&gt;</span>
...
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{calcScore}}問正解です<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
...
<span class="synIdentifier">&lt;/</span><span class="synStatement">template</span><span class="synIdentifier">&gt;</span>
</pre>


<p>参考: <a href="https://marycore.jp/prog/js/array-equal/">https://marycore.jp/prog/js/array-equal/</a></p>

<h3><code>&lt;template&gt;</code> を使って条件分岐</h3>

<p>直接HTMLタグに分岐を書かずに <code>&lt;template&gt;</code> に分岐を書く。<br/>
あらかじめどちらに統一すると決めてマークアップしていったほうがいいですね。<br/>
<code>answerCorrect()</code> メソッドで分岐する場合</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">template</span><span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;answerCorrect(hoge,fuga)&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text text--correct&quot;</span><span class="synIdentifier">&gt;</span>{{ value }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">template</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">template</span><span class="synIdentifier"> v-else&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier">&gt;</span>{{ value }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">template</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<h3>カスタムデータ属性（<code>data-*</code>）をバインドする</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">input</span>
<span class="synIdentifier">  </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;checkbox&quot;</span>
<span class="synIdentifier">  v-bind:</span><span class="synType">data</span><span class="synIdentifier">-hoge=</span><span class="synConstant">&quot;post.id&quot;</span>
<span class="synIdentifier">  &gt;</span>
</pre>



[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js でクイズをつくる'
description: ''
publishDate: '08/25/2019 11:59:18'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>結構前からやってたような気がするクイズの実装一旦できたので内容まとめようと思います。</p>

<p>GitHub Pages: <a href="https://yuheijotaki.github.io/vue-quiz/">https://yuheijotaki.github.io/vue-quiz/</a><br/>
GitHub: <a href="https://github.com/yuheijotaki/vue-quiz">https://github.com/yuheijotaki/vue-quiz</a></p>

<h2>機能</h2>

<ul>
<li>JSONから設問情報（設問テキスト/選択肢/解答など）を取得して描画</li>
<li>回答形式は単数（ラジオボタン）と複数（チェックボックス）</li>
<li>答え合わせボタンでスコアと解答を表示</li>
</ul>


<h2>設問のJSON</h2>

<p>READMEにも書きましたがこんな感じで調整しながら落ち着きました</p>

<pre class="code" data-lang="" data-unlink>[
  {
    &#34;id&#34;: 1,                // [Number] question ID
    &#34;queText&#34;: &#34;text&#34;,      // [String] question text
    &#34;ansType&#34;: &#34;single&#34;,    // &#34;single&#34; or &#34;multi&#34;
    &#34;ansCorrect&#34;: [&#34;A&#34;],    // [Array(String)] correct answer. If &#39;ansType&#39; is &#34;multi&#34;, specify like [&#34;A&#34;,&#34;B&#34;]
    &#34;ansChoice&#34;: {          // [String] choice answer text
      &#34;A&#34;: &#34;answer A&#34;,
      &#34;B&#34;: &#34;answer B&#34;,
      &#34;C&#34;: &#34;answer C&#34;,
      &#34;D&#34;: &#34;answer D&#34;
    },
    &#34;ansCommentary&#34;: &#34;text&#34; // [String] answer commentary using HTML tags
  },
  {
    &#34;id&#34;: 2,
    ...
  }
  ...
]</pre>


<h2>ハマったこと</h2>

<p>いろいろあった気がしますが、コンポーネントの構成はあらかじめ紙に書いて進めても後で設計し直しがありました。</p>

<p>また設問の描画（<code>components/Question.vue</code>）、解答データの取得（<code>components/Answer.vue</code>）で一覧取得するのに同じメソッド使ってたりするのですが、うまくまとめたりできるんだろうなと思いつつ書き方わかんないなーと思って冗長なところが多々ある気がします。</p>

<h2>残り課題</h2>

<ul>
<li>リセットボタン（ページ最下部）の追加。全回答リセット機能がほしい</li>
<li>線 or 円形のプログレスバーの追加。回答状況の進捗を確かめられる要素を入れると親切な気がする</li>
<li>LocalStorage で質問リストの解答を保存。リロードで一瞬で消えてしまうので</li>
<li>複数時 質問リスト 選択肢上限（jQuery） チェックボックス不具合（前選択していた上限が引き継がれてしまう）</li>
<li>（そもそも）設問1問ずつでページ遷移する形のほうがよい？</li>
</ul>


<p>とかですかね。基本の回答 → 答え合わせはできたのですが細かい所でちょくちょく改善したい点はあります。</p>

<h2>これから</h2>

<p>CLI使うとき、ビルドインにするとき、Router 使うときなどいろいろな導入の方法あると何がベストなのかが実際に触っている段階でも分からないので触れる機会を増やさなきゃなぁと思います。<br/>
SPAから逃げてきたので次回はページ遷移する要件もった何かを作りたいと思います。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】はじめてのUIデザイン'
description: ''
publishDate: '08/15/2019 08:40:19'
---

[CONTENTS-START]
<p><a href="https://peaks.cc/books/ui_design">はじめてのUIデザイン</a> を読みました。</p>

<p>サイトに書かれていますが対象読者は、</p>

<ul>
<li>UIデザインについて知りたい、勉強したい人</li>
<li>UIデザインの経験はあるが、基本から再入門したい人</li>
<li>開発しているアプリ、サービスのUIデザインをしたいエンジニア</li>
<li>UIデザインを理解したいディレクター</li>
</ul>


<p>ということで自分はUIデザインするわけではないですが、著者の人の感じから最近の動向なども込み込みで理解できるのでは、と思って手に取りました。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190815083838.png" alt="f:id:jotaki:20190815083838p:plain" title="f:id:jotaki:20190815083838p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>PEAKS というクラウドファンディングで技術本を出版しているレーベルから出ているもので、サイトからPDF or 物理本を購入する形です。自分は物理本にしました。</p>

<h2>概要</h2>

<p>PC/アプリをはじめとしたオンスクリーンデザインの歴史（iPhone登場の2007年あたりから）、領域で活動するにあたり関わることの多いメンバーの役職の説明などベーシックな内容からはじまります。<br />
次にUIコンポーネントといわれるもののひとつひとつの説明、情報設計について、アプリ/Webそれぞれのデザイン手法についてが続きます。<br />
5章でサンプルの題材をもとに実際にUIデザインに落とし込む流れの解説、その後UX的な話、最後はサービス全体に目を配るといった広いデザインについて書かれています。</p>

<h2>ポイント</h2>

<p>気になったコンポーネントやツールの紹介などはキリがないので印象に残ったところだけ</p>

<h4>5-5 「UIデザイン」の意味を改めて考える</h4>

<blockquote><p>UIは「ユーザーインターフェース」の略ですが、あなたが作ったUIデザインはまだユーザーに使われていないはずです。そうです。ツール上でUIを作っただけでは、それは「インターフェイスデザイン」であって「ユーザーインターフェースデザイン」ではないのです。<br />
...<br />
UIを作るまでのフェーズ、情報設計のさらにその前には「そもそもなぜサービスを作るのか」「そのサービスは誰のために作るのか」「その『誰か』は存在していて、サービスを使いたいと思うのか」といった視点があるはずです。UIを作った後のフェーズは「作ったUIは本当に使われるのか」「作ったUIをどう改善していくのか」といった視点です。</p></blockquote>

<h4>7-1 サービスをつくる</h4>

<blockquote><p><strong>何のためにサービスを作るのか</strong><br />
サービスは企業が売上や企業価値を上げるために作ります。<strong>ユーザーに価値を与えた結果、利益を生み出す製品を作るのがデザイン</strong>です。</p></blockquote>

<p>本当は人や目的によってそれぞれでもいいのかもですが、この本で扱うデザインの定義に関してはこうですよって感じでしょうか。</p>

<h2>良かった点</h2>

<ul>
<li>UIデザインの基礎的なレベルの考え方、手法、運用、ツールなど広い知識が得られた</li>
<li>最近のデザイナーが利用しているツールの紹介があったので、ある程度スタンダードが分かった気がする（Sketch / Figma / Sketch は仕事で使っているか認知はしているが <a href="https://www.abstract.com/">Abstract</a> などは知らなかったので）</li>
<li>資料や紹介されるツールが新しいものであること</li>
<li>関連資料（Webのページや書籍情報）が豊富でQRコードつきでアクセスしやすいこと</li>
</ul>


<h2>惜しかった点</h2>

<ul>
<li>物理本は2章の一部分しかカラーでなかった（PDF版はオールカラーなのかな）</li>
</ul>


<h2>まとめ</h2>

<p>自分がデザインしていたのは7〜8年くらい前なので、単純に今求められることは領域が広がったなあと思いました。<br />
でも広がったというより当時の自分が気づいていないだけで、ポイントにあげたようなことに関して目が向いていなかっただけなのかも知れません。<br />
エンジニアとうまく連携するのも、レイヤー（コンポーネント）の命名規則を考えたりするのもデザイナーのスキル（価値）になって大変だなと..</p>

<p>でもデザイナーとエンジニアも同じ目線で、作りやすさではなくユーザーや未来に目を向けることは同じ部分もたくさんあるなと思って勉強になりました。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】インタフェースデザインの心理学 ―ウェブやアプリに新たな視点をもたらす100の指針'
description: ''
publishDate: '08/05/2019 10:26:08'
---

[CONTENTS-START]
<p><span class="md-plain" style="box-sizing: border-box;">インタフェースデザイン／Webデザイン分野で評価の高めな本ということで、インタフェースデザインの心理学を読みました。  <br /></span><span class="md-plain" style="box-sizing: border-box;">続編として </span><span class="md-link" style="box-sizing: border-box;"><a spellcheck="false" href="https://www.amazon.co.jp/dp/4873117712/" style="box-sizing: border-box; cursor: pointer; color: #4183c4; -webkit-user-drag: none;"><span class="md-plain" style="box-sizing: border-box;">続・インタフェースデザインの心理学</span></a></span><span class="md-plain" style="box-sizing: border-box;">、派生本として </span><span class="md-link" style="box-sizing: border-box;"><a spellcheck="false" href="https://www.amazon.co.jp/dp/4873116082" style="box-sizing: border-box; cursor: pointer; color: #4183c4; -webkit-user-drag: none;"><span class="md-plain" style="box-sizing: border-box;">インタフェースデザインの実践教室</span></a></span><span class="md-plain" style="box-sizing: border-box;"> があり、「〜の心理学」は </span><span class=" md-link" style="box-sizing: border-box;"><a spellcheck="false" href="https://en.wikipedia.org/wiki/Susan_Weinschenk" style="box-sizing: border-box; cursor: pointer; color: #4183c4; -webkit-user-drag: none;"><span class="md-plain" style="box-sizing: border-box;">Susan Weinschenk</span></a></span><span class="md-plain" style="box-sizing: border-box;"> さんという行動心理学者（behavioral psychologist）の方が書いているものです。</span></p>
<div class="freezed">
<div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873115574/hatena-blog-22/"><img class="hatena-asin-detail-image" title="インタフェースデザインの心理学 ―ウェブやアプリに新たな視点をもたらす100の指針" src="https://images-fe.ssl-images-amazon.com/images/I/41jDv9YsOuL._SL160_.jpg" alt="インタフェースデザインの心理学 ―ウェブやアプリに新たな視点をもたらす100の指針" /></a>
<div class="hatena-asin-detail-info">
<p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873115574/hatena-blog-22/">インタフェースデザインの心理学 ―ウェブやアプリに新たな視点をもたらす100の指針</a></p>
<ul>
<li><span class="hatena-asin-detail-label">作者:</span> Susan Weinschenk,武舎広幸,武舎るみ,阿部和也</li>
<li><span class="hatena-asin-detail-label">出版社/メーカー:</span> オライリージャパン</li>
<li><span class="hatena-asin-detail-label">発売日:</span> 2012/07/14</li>
<li><span class="hatena-asin-detail-label">メディア:</span> 大型本</li>
<li><span class="hatena-asin-detail-label">購入</span>: 36人 <span class="hatena-asin-detail-label">クリック</span>: 751回</li>
<li><a href="http://d.hatena.ne.jp/asin/4873115574/hatena-blog-22" target="_blank">この商品を含むブログ (31件) を見る</a></li>
</ul>
</div>
<div class="hatena-asin-detail-foot"> </div>
</div>
</div>
<h5 class="md-end-block md-heading" style="box-sizing: border-box; break-after: avoid-page; break-inside: avoid; orphans: 2; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #eeeeee; white-space: pre-wrap; caret-color: #333333; color: #333333; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-style: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration: none;"><span class="md-plain" style="box-sizing: border-box;">概要</span></h5>
<p><span class="md-plain" style="box-sizing: border-box;">UI/UX関連の本ではありますが、筆者の得意分野的に一般的な心理学や行動学からそれを踏まえた上でインターフェイスやUXデザインをするにはこういうアプローチをしたほうがいいですよ、という流れのポイントが10章100ポイントでまとめられています。</span></p>
<p><span class="md-plain" style="box-sizing: border-box;">1章の「人はどう見るのか」から、「人はどう〜するのか」形式で「読む」「記憶する」「考える」「注目する」「ヤル気になる」のかと進んでいきます。</span> <span class="md-plain" style="box-sizing: border-box;">前半は実作業でデザインする人にはより実践に結びやすい内容と思います。</span></p>
<p><span class="md-plain" style="box-sizing: border-box;">後半は心理学的な感じ方の話がメインで、社会的な結びつき、感情、間違えや決断に関しての章が続いていきます。</span></p>
<h2 class="md-end-block md-heading" style="box-sizing: border-box; break-after: avoid-page; break-inside: avoid; orphans: 2; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #eeeeee; white-space: pre-wrap; caret-color: #333333; color: #333333; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-style: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration: none;"><span class="md-plain" style="box-sizing: border-box;">ポイント</span></h2>
<p><span class="md-plain" style="box-sizing: border-box;">印象に残った点を何点か引用します。</span></p>
<h5 class="md-end-block md-heading" style="box-sizing: border-box; break-after: avoid-page; break-inside: avoid; orphans: 2; font-size: 1em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; caret-color: #333333; color: #333333; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-style: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration: none;"><span class="md-plain" style="box-sizing: border-box;">002 対象の「あらまし」をつかむのは中心視野より周辺視野の役目</span></h5>
<p><span class="md-plain" style="box-sizing: border-box;">見えてはいないものの直視はしていない視野を周辺視野というが、対象の全体像を掴む際は中心視野より周辺視野を使ってさまざまな情報を補完することが多い。</span></p>
<h5 class="md-end-block md-heading" style="box-sizing: border-box; break-after: avoid-page; break-inside: avoid; orphans: 2; font-size: 1em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; caret-color: #333333; color: #333333; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-style: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration: none;"><span class="md-plain" style="box-sizing: border-box;">006 人は過去の経験と予想に基づいて画面を見る</span></h5>
<p><span class="md-plain" style="box-sizing: border-box;">左から右に読む言語を主言語としている人であれば、コンピュータの画面も左から右に見る傾向がある。  <br /></span><span class="md-plain" style="box-sizing: border-box;">とはいえ、ブラウザの左上の角（ロゴやナビゲーション）から見始める人はほぼいなく、端は避けて画面の中の方をみる傾向がある。</span></p>
<h5 class="md-end-block md-heading" style="box-sizing: border-box; break-after: avoid-page; break-inside: avoid; orphans: 2; font-size: 1em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; caret-color: #333333; color: #333333; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-style: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration: none;"><span class="md-plain" style="box-sizing: border-box;">011 男性の9%、女性の0.5%が色覚異常</span></h5>
<p><span class="md-plain" style="box-sizing: border-box;">これはよく言われていることですがメモとして</span></p>
<h5 class="md-end-block md-heading" style="box-sizing: border-box; break-after: avoid-page; break-inside: avoid; orphans: 2; font-size: 1em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; caret-color: #333333; color: #333333; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-style: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration: none;"><span class="md-plain" style="box-sizing: border-box;">013 大文字がもともと読みにくいものであるという説は誤りである</span></h5>
<p><span class="md-plain" style="box-sizing: border-box;">（英語の場合）</span> <span class="md-plain" style="box-sizing: border-box;">単に読み慣れていないだけで小文字より大文字のほうが読みづらいということはない。  <br /></span><span class="md-plain" style="box-sizing: border-box;">人は文章を読むとき、短い時間の静止を挟んで（これを「固視」という）1度に約7〜9文字分ジャンプする（これを「サッカード」という）を繰り返す。  <br /></span><span class="md-plain" style="box-sizing: border-box;">サッカードの移動で実際に知覚している範囲はその2倍で、これは周辺視野を利用している。</span></p>
<h5 class="md-end-block md-heading" style="box-sizing: border-box; break-after: avoid-page; break-inside: avoid; orphans: 2; font-size: 1em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; caret-color: #333333; color: #333333; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-style: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration: none;"><span class="md-plain" style="box-sizing: border-box;">016 文字の大きさは理解度を左右する</span></h5>
<p><span class="md-plain" style="box-sizing: border-box;">エックスハイトが大きいと文字は大きく見える  <br /></span><span class="md-plain" style="box-sizing: border-box;">同じ </span><span style="box-sizing: border-box;" spellcheck="false"><code style="box-sizing: border-box; font-family: var(--monospace); text-align: left; border: 1px solid #e7eaed; background-color: #f3f4f4; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px; padding: 0px 2px; font-size: 0.9em;">font-size:</code></span><span class="md-plain" style="box-sizing: border-box;"> でもフォントファミリーでサイズが違うように見えてしまうのはこれが要因ぽいですね</span></p>
<h5 class="md-end-block md-heading" style="box-sizing: border-box; break-after: avoid-page; break-inside: avoid; orphans: 2; font-size: 1em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; caret-color: #333333; color: #333333; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-style: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration: none;"><span class="md-plain" style="box-sizing: border-box;">020 一度に覚えられるのは4つだけ</span></h5>
<p><span class="md-plain" style="box-sizing: border-box;">いくつかの情報のまとまり（チャンク）に分けてグループ化することで3つあるいは4つの数字のチャンクを覚えることができる場合がある。  <br /></span><span class="md-plain" style="box-sizing: border-box;">例）電話番号 090-1234-5678</span></p>
<h5 class="md-end-block md-heading" style="box-sizing: border-box; break-after: avoid-page; break-inside: avoid; orphans: 2; font-size: 1em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; caret-color: #333333; color: #333333; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-style: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration: none;"><span class="md-plain" style="box-sizing: border-box;">024 記憶は思い出すたびに再構築される</span></h5>
<p><span class="md-plain" style="box-sizing: border-box;">記憶は思い出すたびに再構築される。また後になって起こった出来事が、前にあった出来事の記憶を変えてしまうことがある。</span></p>
<h5 class="md-end-block md-heading" style="box-sizing: border-box; break-after: avoid-page; break-inside: avoid; orphans: 2; font-size: 1em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; caret-color: #333333; color: #333333; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-style: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration: none;"><span class="md-plain" style="box-sizing: border-box;">028 心的な処理には難しいものとやさしいものがある</span></h5>
<p><span class=" md-link" style="box-sizing: border-box;"><a spellcheck="false" href="https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A3%E3%83%83%E3%83%84%E3%81%AE%E6%B3%95%E5%89%87" style="box-sizing: border-box; cursor: pointer; color: #4183c4; -webkit-user-drag: none;"><span class="md-plain" style="box-sizing: border-box;">フィッツの法則</span></a></span><span class="md-plain" style="box-sizing: border-box;"> を使えば科学的な基準を元にボタンの適切な大きさを決めることができる。</span> <span class="md-plain" style="box-sizing: border-box;">速さ、正確さ、距離の間には関係があるということ  <br /></span><span class="md-plain" style="box-sizing: border-box;">参考: </span><span class="md-link" style="box-sizing: border-box;"><a spellcheck="false" href="https://www.sociomedia.co.jp/349" style="box-sizing: border-box; cursor: pointer; color: #4183c4; -webkit-user-drag: none;"><span class="md-plain" style="box-sizing: border-box;">フィッツの法則</span></a></span></p>
<h5 class="md-end-block md-heading" style="box-sizing: border-box; break-after: avoid-page; break-inside: avoid; orphans: 2; font-size: 1em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; caret-color: #333333; color: #333333; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-style: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration: none;"><span class="md-plain" style="box-sizing: border-box;">029 人は30%の時間はぼんやりしている</span></h5>
<p><span class="md-plain" style="box-sizing: border-box;">ある作業を行っているのに、いつの間にか作業とは関係のないことを考えている状態 ＝ マインドワンダリング</span></p>
<h5 class="md-end-block md-heading" style="box-sizing: border-box; break-after: avoid-page; break-inside: avoid; orphans: 2; font-size: 1em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; caret-color: #333333; color: #333333; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-style: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration: none;"><span class="md-plain" style="box-sizing: border-box;">031 人はシステムを使うときメンタルモデルを作る</span></h5>
<p><span class="md-plain" style="box-sizing: border-box;">Apple 製品のインターフェイス、iPhone / iPad を使ったことがある人はその製品を使って何かしらの作業をすることの「メンタルモデル」を持つ。</span></p>
<h5 class="md-end-block md-heading" style="box-sizing: border-box; break-after: avoid-page; break-inside: avoid; orphans: 2; font-size: 1em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; caret-color: #333333; color: #333333; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-style: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration: none;"><span class="md-plain" style="box-sizing: border-box;">038 人は「フロー状態」に入る</span></h5>
<p><span class="md-plain" style="box-sizing: border-box;">何もかも忘れて没頭してしまい、他のすべてから離れ、時間の感覚も変わり、自分が何者でどこにいるのかも忘れてしまう状態をフロー状態という。</span> <span class="md-plain" style="box-sizing: border-box;">ゾーンと同じぽいですね。  <br />自分が好きなゾーンに入る方法は </span><span class=" md-link" style="box-sizing: border-box;"><a spellcheck="false" href="https://anond.hatelabo.jp/20140204221702" style="box-sizing: border-box; cursor: pointer; color: #4183c4; -webkit-user-drag: none;"><span class="md-plain" style="box-sizing: border-box;">『ゾーン』に入る方法</span></a></span></p>
<h5 class="md-end-block md-heading" style="box-sizing: border-box; break-after: avoid-page; break-inside: avoid; orphans: 2; font-size: 1em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.4; cursor: text; white-space: pre-wrap; caret-color: #333333; color: #333333; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-style: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration: none;"><span class="md-plain" style="box-sizing: border-box;">039 文化は考え方に影響する</span></h5>
<p><span class="md-plain" style="box-sizing: border-box;">（牛と背景の写真）</span> <span class="md-plain" style="box-sizing: border-box;">西洋人に写真を見せると、前景にある中心的なものや目立つものに注目しますが、東洋人は写真の状況や背景に注目する傾向があります。</span></p>
<p><span class="md-plain" style="box-sizing: border-box;">飛ばしすぎて前半だけになってしまいましたが、ざっくり大事そうで今後も覚えておきたいことはこんな感じです。</span></p>
<h2 class="md-end-block md-heading" style="box-sizing: border-box; break-after: avoid-page; break-inside: avoid; orphans: 2; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #eeeeee; white-space: pre-wrap; caret-color: #333333; color: #333333; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-style: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration: none;"><span class="md-plain" style="box-sizing: border-box;">良かった点</span></h2>
<ul>
<li>心理学というものにほぼ触れた経験がなかったので、これまでなんとなく断片的に聞いたことのあった内容を深く知ることができ、人の本質的な習性や欲求的なところからくるものを仕事に落とし込むことに対して興味が持てた。 ただその落とし込み方が一番むずかしい気もした。</li>
<li>0 → 100 を作る際に参考になるというよりは、80あるものがなぜそうなっているのか、100にするためにはどうするべきかという所で役立ちそうなことが多かった。</li>
</ul>
<h2 class="md-end-block md-heading" style="box-sizing: border-box; break-after: avoid-page; break-inside: avoid; orphans: 2; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #eeeeee; white-space: pre-wrap; caret-color: #333333; color: #333333; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-style: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration: none;"><span class="md-plain" style="box-sizing: border-box;">惜しかった点</span></h2>
<ul>
<li>「インターフェイスやUXデザインをするにはこういうアプローチをしたほうがいいですよ」という点はだいたい各ポイントに書かれているのですが、それの量があまりないこと。</li>
<li>サンプルに掲載される図が古めなこと。</li>
</ul>
<h2 class="md-end-block md-heading" style="box-sizing: border-box; break-after: avoid-page; break-inside: avoid; orphans: 2; font-size: 1.75em; margin-top: 1rem; margin-bottom: 1rem; position: relative; font-weight: bold; line-height: 1.225; cursor: text; padding-bottom: 0.3em; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #eeeeee; white-space: pre-wrap; caret-color: #333333; color: #333333; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif; font-style: normal; font-variant-caps: normal; letter-spacing: normal; text-align: start; text-indent: 0px; text-transform: none; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration: none;">まとめ</h2>
<p><span class="md-plain" style="box-sizing: border-box;">デザインの実作業をする人にも向いている本だと思いますが、より向いているのはより上流のディレクション業務やマーケティング的な業務する人にも向いている内容と思いました。</span></p>
<p><span class="md-plain" style="box-sizing: border-box;">なかなか実務でどう使えるかは難しいかもしれませんが、頭にほんのり残っているものから使っていこうと思います。</span></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2019年前期のWebサイト'
description: ''
publishDate: '08/04/2019 10:07:39'
---

[CONTENTS-START]
<p>2019年で気になったWebサイトをまとめておきます。<br/>
いろいろな観点ありますが、デザイン／実装ともに好みのものです。</p>

<h4>株式会社オリエントコーポレーション</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190804095257.png" alt="f:id:jotaki:20190804095257p:plain" title="f:id:jotaki:20190804095257p:plain" class="hatena-fotolife" itemprop="image" /></span>
コーポレート／グラデーションやトーン／表示の動きやマウスオーバー／情報整理<br/>
<a href="https://www.orico.co.jp/company/">https://www.orico.co.jp/company/</a></p>

<h4>KARTE（カルテ）</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190804095124.png" alt="f:id:jotaki:20190804095124p:plain" title="f:id:jotaki:20190804095124p:plain" class="hatena-fotolife" itemprop="image" /></span>
プロダクト／アイコン／きれいな Noto Sans の使い方<br/>
<a href="https://karte.io/">https://karte.io/</a></p>

<h4>株式会社テクニカルパートナー</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190804095226.png" alt="f:id:jotaki:20190804095226p:plain" title="f:id:jotaki:20190804095226p:plain" class="hatena-fotolife" itemprop="image" /></span>
イラスト／わかりやすさ／企業規模<br/>
<a href="https://tec-p.co.jp/">https://tec-p.co.jp/</a></p>

<h4>野村證券 2020年度新卒採用ホームページ</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190804095235.png" alt="f:id:jotaki:20190804095235p:plain" title="f:id:jotaki:20190804095235p:plain" class="hatena-fotolife" itemprop="image" /></span>
ストーリー／世界観／Vue.js<br/>
<a href="https://www.nomura-recruit.jp/graduate/2020/">https://www.nomura-recruit.jp/graduate/2020/</a></p>

<h4>SUN-AD サン・アド</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190804095208.png" alt="f:id:jotaki:20190804095208p:plain" title="f:id:jotaki:20190804095208p:plain" class="hatena-fotolife" itemprop="image" /></span>
ブランディング・コピー／フォント・縦書き<br/>
<a href="https://sun-ad.co.jp/">https://sun-ad.co.jp/</a></p>

<h4>THE FASHION POST</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190804095057.png" alt="f:id:jotaki:20190804095057p:plain" title="f:id:jotaki:20190804095057p:plain" class="hatena-fotolife" itemprop="image" /></span>
ウェブマガジン／タイポグラフィ・文字詰め・縦書き／記事カテゴリーの各色使い<br/>
<a href="https://fashionpost.jp/">https://fashionpost.jp/</a></p>

<h4>よかよか市場 熊モットー</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190804095309.jpg" alt="f:id:jotaki:20190804095309j:plain" title="f:id:jotaki:20190804095309j:plain" class="hatena-fotolife" itemprop="image" /></span>
ECサイト／かすれやフォント<br/>
<a href="https://yokayoka-kumamotto.com/">https://yokayoka-kumamotto.com/</a></p>

<h4>もぐし海のこども園</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190804095148.png" alt="f:id:jotaki:20190804095148p:plain" title="f:id:jotaki:20190804095148p:plain" class="hatena-fotolife" itemprop="image" /></span>
アミューズメント／イラスト<br/>
<a href="http://mogushi.jp/">http://mogushi.jp/</a></p>

<p>やっぱりアプリやWebアプリではなくて、Webサイトが好きだなあと思います。<br/>
THE FASHION POST は全部画像文字に見えるくらいに文字の扱いきれいでため息ものでした。</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2019年7月 振り返り'
description: ''
publishDate: '08/04/2019 09:30:39'
---

[CONTENTS-START]
<h2>結果</h2>
<h3>ブログ</h3>
<p><strong>目標：月 12 回（週 3 回）更新</strong><br /> <strong>結果：月 7 回 更新</strong></p>
<h3>読書</h3>
<p><strong>目標：月 1 冊</strong><br /> <strong>結果：月 0 冊</strong></p>
<h2>反省点など</h2>
<p>SAA取れず、ブログも読書も目標達成できず。  <br />習慣もないがしろになりつつある。</p>
<h2>来月に向けて</h2>
<p>デザイン関連の本2冊読む。  <br />Vueのクイズももう少しなので完成させる。  <br />暑いですが体調に気をつけて徐々に戻していきたいとおもいます。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Loading Placeholder いろいろ'
description: ''
publishDate: '07/29/2019 09:50:26'
---

[CONTENTS-START]
<p>オリジナルは不明ですがWebやアプリでよくある画像とテキストの読み込み前に表示されるグレーのプレースホルダー、<br/>
Loading Placeholder や <a href="https://www.codepicky.com/content-placeholders/">Content Placeholders</a> というふうによばれているんですね。</p>

<p>実装する必要がありそうなのでPC（Webブラウザ版）にて各サービスをキャプチャしてみました。<br/>
思ったよりもPCだとあまり実装されていなくてアプリ寄りの実装が多いのかなと思いました。</p>

<h4>Backlog</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190729094810.png" alt="f:id:jotaki:20190729094810p:plain" title="f:id:jotaki:20190729094810p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>アニメーションなし、角丸ラインスタイル</p>

<h4>Dribbble</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190729094816.png" alt="f:id:jotaki:20190729094816p:plain" title="f:id:jotaki:20190729094816p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>サムネイルクリックした際のモーダル表示時にでます<br/>
ラインはグレーの濃淡アニメーション、画像エリアはボールがバウンドする</p>

<h4>Dropbox</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190729094821.png" alt="f:id:jotaki:20190729094821p:plain" title="f:id:jotaki:20190729094821p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>ファイル一覧のページ<br/>
アニメーションなしっぽい、コントラスト薄め</p>

<h4>Facebook</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190729094828.png" alt="f:id:jotaki:20190729094828p:plain" title="f:id:jotaki:20190729094828p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>一番メジャーっぽいやつ<br/>
コンテンツ全体にラインではなく3行固定、画像エリアはブランク</p>

<h4>Instagram</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190729094833.png" alt="f:id:jotaki:20190729094833p:plain" title="f:id:jotaki:20190729094833p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>PCのおすすめユーザー箇所<br/>
スマホは画像部分がほやけ→くっきりなる</p>

<h4>Qiita</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190729094836.png" alt="f:id:jotaki:20190729094836p:plain" title="f:id:jotaki:20190729094836p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>Qiitaはサイドバーのおすすめ記事やランキングなるけど記事一覧はならないっぽい<br/>
（読み込み早いだけかも）</p>

<h4>Slack</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190729094839.png" alt="f:id:jotaki:20190729094839p:plain" title="f:id:jotaki:20190729094839p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>読み込み時にメッセージが表示されてたときは、もう少し派手に（わかりやすく）プレースホルダーがあった気がしますが、<br/>
いまはユーザーごとに読み込みされるときにこんな感じになる</p>


[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue CLI UI'
description: ''
publishDate: '07/26/2019 09:00:00'
---

[CONTENTS-START]
<p>また <a href="https://github.com/yuheijotaki/vue-study_20190716">クイズアプリ</a>作っているのですが心が何回か折れているので、気分転換に Vue CLI UI をさわってみました。<br/>
<a href="https://cli.vuejs.org/guide/creating-a-project.html#using-the-gui">https://cli.vuejs.org/guide/creating-a-project.html#using-the-gui</a></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190726103818.png" alt="f:id:jotaki:20190726103818p:plain" title="f:id:jotaki:20190726103818p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>だいたい参考にしたのは下記の記事。<br/>
<a href="https://qiita.com/isihigameKoudai/items/eee3eb6a435675fdfd73">https://qiita.com/isihigameKoudai/items/eee3eb6a435675fdfd73</a></p>

<pre class="code bash" data-lang="bash" data-unlink>$ vue --version</pre>


<p>で 2.x 系だったら</p>

<pre class="code bash" data-lang="bash" data-unlink>$ npm install -g @vue/cli</pre>


<p>で3系インストール。</p>

<pre class="code bash" data-lang="bash" data-unlink>$ vue ui</pre>


<p>で起動するとGUI画面が <a href="http://localhost:8000/project/select">http://localhost:8000/project/select</a> で開く。<br/>
大枠の管理画面（Vue プロジェクトマネージャ）と、プロジェクトごとの管理画面（プロジェクトダッシュボード）がある感じ。</p>

<p>ちょこっと触ってみた感じ設定わりと細々できて良さそうですね。できなくてもこれまで通りコマンド打てばいいので使えるところだけつかったらいいのかなと<br/>
タスク（serve/build/lint）もGUI上からできて通信予想速度？やファイルサイズも出るので便利っぽいです。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190726103830.png" alt="f:id:jotaki:20190726103830p:plain" title="f:id:jotaki:20190726103830p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue CLI（webpack）で jQuery を使う'
description: ''
publishDate: '07/18/2019 09:51:58'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>Vue CLI でというより webpack で使う、といったほうが正しいと思いますが</p>

<p><a href="https://codepen.io/vjandrei/pen/rAuam">https://codepen.io/vjandrei/pen/rAuam</a><br/>
こういうチェックボックスの上限値を設けるようなフォーム制御とか特に素のJSだときついなあと思ったのでjQueryで書きたいとなるときがある。</p>

<pre class="code bash" data-lang="bash" data-unlink>$ npm install jquery -D</pre>


<p>で .vue ファイルに</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> $ from <span class="synConstant">'jquery'</span>;

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">'App'</span>,
  created: <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
    $(<span class="synConstant">'#app'</span>).addClass(<span class="synConstant">'jqueryTest'</span>);
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>とする。</p>

<p>ライフサイクルフック（実行タイミング）には気を使う必要がありそうですがとりあえず使うところまではこれでOKでした。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AWS SAA'
description: ''
publishDate: '07/09/2019 10:01:06'
---

[CONTENTS-START]
<p><strong>※不合格の記録なのでほぼ参考になりません。ごめんなさい。</strong></p>

<h4>職種や前提知識</h4>

<p>Webのフロントエンジニア。クラウドプラクティショナーは6月に取得済み。<br/>
その他の知識などについては前回の記事に書いています。<br/>
7月はじめに受けて不合格だったのですが、将来また受けることもあるかもしれないのでメモしておきます。</p>

<h4>認定資格テキストの読みこみ（本・1回目）</h4>

<p>AWS認定資格試験テキスト「AWS認定資格試験テキスト AWS認定 ソリューションアーキテクト アソシエイト」 <a href="https://www.amazon.co.jp/dp/479739739X/">https://www.amazon.co.jp/dp/479739739X/</a> の読み込み1周目。<br/>
分からない単語やサービスが残りつつも最後まで通して読んで巻末の模擬試験は 15/30 で半分の正答率。</p>

<h4>AWS Summit Tokyo のライブストリームを聞く</h4>

<p>ちょうど勉強期間にやっていたので初級のセッションを仕事中になんとなく聞く。</p>

<ul>
<li>【初級】AWSにおけるデータベースの選択指針</li>
<li>【初級】AWSストレージサービス入門</li>
<li>【初級】AWSコンテナサービス入門</li>
</ul>


<p>が特によかった。コンテナに関しては概念から分からなかったのでこのタイミングで理解が進んで助かった。</p>

<h4>認定資格テキストの読みこみ（2回目）</h4>

<p>AWS認定資格試験テキスト2周目。巻末の模擬試験は 28/30。</p>

<h4>AWS で配布のサンプル問題集（1回目）</h4>

<p><a href="https://d1.awsstatic.com/training-and-certification/docs-sa-assoc/AWS%20Certified%20Solutions%20Architect%20-%20Associate_Exam%20Sample_v1.5_FINALJP.pdf">https://d1.awsstatic.com/training-and-certification/docs-sa-assoc/AWS%20Certified%20Solutions%20Architect%20-%20Associate_Exam%20Sample_v1.5_FINALJP.pdf</a> の答えを消して解いてみる。結果は 7/10。</p>

<p>解説は <a href="https://blog.trainocate.co.jp/blog/aws-saa-sample">https://blog.trainocate.co.jp/blog/aws-saa-sample</a> を参照して復習。</p>

<h4>別の認定資格テキストの模擬試験を解く（1回目）</h4>

<p>会社にあった「最短突破 AWS認定ソリューションアーキテクト アソシエイト 合格教本」<a href="https://www.amazon.co.jp/dp/4297103826/">https://www.amazon.co.jp/dp/4297103826/</a> の巻末についている模擬試験を解く。結果は 29/65。よかったら本試験受けようとも思っていたけど全然でした。<br/>
解説ついているので間違い中心に読む。試験中に弱い所/理解していないところをメモ（下記）して復習。</p>

<ul>
<li>暗号化 S3 で KMSを使う場合、クライアント/サーバーサイドで行う方法を整理</li>
<li>各DBの特性、パフォーマンス、マルチAZ、結合可能／不可能、リードレプリカ、ElastiCacheの使いどころ、実行速度</li>
<li>VPC/サブネット周り</li>
<li>セキュリティグループとネットワークACL</li>
<li>Lambda でできることやコスト周り</li>
<li>Route53 レコード設定</li>
<li>NAT ゲートウェイ/NATインスタンス</li>
<li>EBS 各タイプの特徴</li>
<li>EFS の特性、ユースケース EBS との違い</li>
<li>ベストプラクティスに沿った構成図 特にVPC/サブネット/NAT ゲートウェイ周り</li>
</ul>


<p>ちょっとこの本出題範囲が結構偏っている気もしました。（構成やネットワーク周りがめちゃくちゃ多い、正解で被るものが多い、など）<br/>
けどネットワーク構成弱いこと分かったので後で勉強するときにかなり意識できた気もします。</p>

<h4>公式の模擬試験</h4>

<p>総合スコア:  72%</p>

<p>トピックレベルスコア:</p>

<ul>
<li>1.0  Design Resilient Architectures: 88%</li>
<li>2.0  Define Performant Architectures: 71%</li>
<li>3.0  Specify Secure Applications and Architectures: 33%</li>
<li>4.0  Design Cost-Optimized Architectures: 100%</li>
<li>5.0  Define Operationally-Excellent Architectures: 100%</li>
</ul>


<p>また週始めにやって点数よかったら週末に本試験受けようかと思ったけどこの時点では無理そうでした、、<br/>
プラクティショナーのときと同様に模擬試験は簡単と言われているのと、確実に正解かなという回答が少なかった（たまたま正解も多かったっぽい）のでもう一度弱い所（セキュアなアプリケーションおよびアーキテクチャを規定する）中心にやるようにしました。</p>

<h4>認定資格テキストの読みこみ（3回目）</h4>

<p>模擬試験が悪かったので反省して再度読み込み3周目。<br/>
ようやくネットワークまわりが少し分かってきた気がします。<br/>
ただ巻末の模擬試験は 27/30。前回よりも落ちる。</p>

<h4>AWS で配布のサンプル問題集（2回目）</h4>

<p>もう一度公式のサンプル問題の答えを消して解いてみる。結果は 10/10。</p>

<h4>別の認定資格テキストの模擬試験を解く（2回目）</h4>

<p>「最短突破 AWS認定ソリューションアーキテクト アソシエイト 合格教本」<a href="https://www.amazon.co.jp/dp/4297103826/">https://www.amazon.co.jp/dp/4297103826/</a> の巻末についている模擬試験2回目。<br/>
結果は 46/65。2回目なのにぎりぎり70%ほどでまた落ち込む。覚えなきゃと思ったことは下記</p>

<ul>
<li>EIPの使い方 ELB/EC2にどのように紐付けるか</li>
<li>ELB/EC2/DNS 紐づけの流れ</li>
<li>ELB グローバルIP/プライベートIPとは</li>
<li>Dynamo DB 特長やユースケース</li>
<li>DB（RDS/Aurora/DynamoDB）はオートスケール可能なのか</li>
<li>プライベートサブネットからのS3アクセスパターン</li>
<li>オートスケールの設定項目（ステップ/スケジュールの特性）</li>
</ul>


<h4>認定資格テキストの読みこみ（4回目）</h4>

<p>本試験をどのタイミングにしようかなと思いつつ、さすがに4周目なのでSAAから出題範囲にされるようなサービス周りだけを読む。（ECS/EFS/KMS/SQS/Code系/ETL系/OpsWorksなど）</p>

<h4>Black Belt Online Seminar（動画）</h4>

<p>本当は一通り見たほうが良さげですが本試験当日に下記2つだけYouTubeでみました。</p>

<p>クラウド設計・運用のベストプラクティス集 “AWS Well-Architected Framework”<br/>
<a href="https://www.youtube.com/watch?v=MgyLqnkSxn4">https://www.youtube.com/watch?v=MgyLqnkSxn4</a></p>

<p>Amazon VPC<br/>
<a href="https://www.youtube.com/watch?v=aHEVvsk6pkI">https://www.youtube.com/watch?v=aHEVvsk6pkI</a></p>

<h4>本試験</h4>

<p>スコア：628点（合格基準：720点）</p>

<p>開始数分で心折れましたね。。</p>

<p><strong>十分な知識を有する</strong></p>

<ul>
<li>分野 1: 回復性の高いアーキテクチャを 設計する</li>
<li>分野 4: コスト最適化アーキテクチャを 設計する</li>
<li>分野 5: オペレーショナルエクセレンス を備えたアーキテクチャを定義する</li>
</ul>


<p><strong>再学習の必要あり</strong></p>

<ul>
<li>分野 2: パフォーマンスに優れたアーキ テクチャを定義する</li>
<li>分野 3: セキュアなアプリケーションお よびアーキテクチャを規定する</li>
</ul>


<p>たぶんダメだったのは、</p>

<ul>
<li>セキュリティ関連（特に暗号化まわり/方式など）</li>
<li>SGとACLまわりも理解していたつもりでしたが結構間違っていそう</li>
<li>インスタンスタイプとか、最適ストレージ（S3/EBS/EFS）など</li>
</ul>


<p>かな。。本などの問題やりすぎて本試験応用効いていない感ありました。（=基礎力が足りないってことですが）  <br/>
複数AZでの最適なインスタンス配置とか、公式のサンプル問題（10問のやつ）は漏れなく出たと思うので、そこはしっかりやったほうがいいなと感じました。
VPCの構成配置まわり（パブリックVPC/プライベートVPC/NAT/VPCエンドポイント）もできた気はするけどこの点数だと怪しいです。</p>

<h4>まとめ</h4>

<p>だいたい毎日1〜2時間。通勤中に本読んで期間は4〜5週間。<br/>
クラウドプラクティショナー取得直後から始めたので、雰囲気や勘所はつかんでいたつもりですがさらに範囲も広がって覚えることも難しかった印象。<br/>
ただプラクティショナーの勉強し始めにあった単語やサービス名の知識が皆無でどん底感があった頃と比べるとそっちはそっちできつかった気もします。</p>

<p>ここから100点どうあげるかなと思ったときにUdemyやホワイトペーパー読むことになると思うのですが、また1ヶ月ほどかけて受けるエネルギーは今のところないので一旦AWSは終わりにします。</p>

<p>もともと興味や知識が薄かった分野だったというのもありますが、本とか1回読んだだけじゃ頭の中に入っていないんだなというのを痛感しました。<br/>
1周目に覚えるの絶対無理と思ってたことでも3周目くらいになっているとだんだん慣れてなんとなくでも頭に入ってくるものだから不思議でした。
感覚あまり良くないので反復してやらないと頭の中には入らないのと、仕事し初めの頃に自然にやってたことができていないと感じたのでそりゃJS覚えようとしてもなかなか難しいなと反省しました。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AWS SAA認定試験のために覚えたサービス'
description: ''
publishDate: '07/09/2019 10:00:01'
---

[CONTENTS-START]
<h3>ネットワーク</h3>

<h4>NATゲートウェイ</h4>

<p>プライベートサブネット内のEC2インスタンスがインターネットに接続する際に必要。ネットワークアドレス変換 （NAT） ゲートウェイを使用して、プライベートサブネットのインスタンスからはインターネットや他の AWS サービスに接続できるが、インターネットからはこれらのインスタンスとの接続を開始できないようにすることができる。<br/>
その他VPCのゲートウェイの種類として、インターネットゲートウェイ（IGW）、仮想プライベートゲートウェイ（VGW）がある。</p>

<h4>VPCエンドポイント</h4>

<p>プライベートサブネットからの通信はNATを、Publicであればゲートウェイを通過したアクセスとなる。<br/>
しかし、S3エンドポイントを設定することにより、インターネットをかえさないセキュアな通信となり、プライベートサブネットの場合はNATを通さない通信が可能となる。<br/>
参考: <a href="https://qiita.com/SatoHiroyuki/items/b611485b6ec736e9076f">https://qiita.com/SatoHiroyuki/items/b611485b6ec736e9076f</a></p>

<h3>コンピューティングサービス</h3>

<h4>API Gateway</h4>

<p>簡単に API の作成、配布、保守、監視、保護が行える完全マネージド型のサービス。<br/>
参考: <a href="https://aws.amazon.com/jp/api-gateway/">https://aws.amazon.com/jp/api-gateway/</a><br/>
図解: <a href="https://qiita.com/yuke/items/4df468efa7504ba539fc">https://qiita.com/yuke/items/4df468efa7504ba539fc</a></p>

<h3>ストレージサービス</h3>

<h4>S3</h4>

<h5>署名付きURL</h5>

<p>有効期限を設けて、ある特定のURLからのみアクセスできるようにするための機能。
基本はプライベートにしておいて、他のポリシーを緩めることなく一時的に他のユーザにファイルを共有したりすることが可能になる。ユーザ単位のアクセス制御ではないため、有効期限内であれば、誰でもそのURLからアクセスできるという点には注意が必要です。<br/>
参考: <a href="https://capsulecloud.io/blog/aws/4940">https://capsulecloud.io/blog/aws/4940</a></p>

<h4>EBS</h4>

<p>各ボリュームの種類について。<br/>
参考: <a href="https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/EBSVolumeTypes.html">https://docs.aws.amazon.com/ja_jp/AWSEC2/latest/UserGuide/EBSVolumeTypes.html</a></p>

<table>
<thead>
<tr>
<th> 種類                            </th>
<th> 特長                                                         </th>
</tr>
</thead>
<tbody>
<tr>
<td> 汎用 SSD (<code>gp2</code>)*               </td>
<td> さまざまなワークロードに適した、価格とパフォーマンスのバランスが取れている汎用 SSD ボリューム </td>
</tr>
<tr>
<td> プロビジョンド IOPS SSD (<code>io1</code>) </td>
<td> ミッションクリティカルな低レイテンシーまたは高スループットワークロードに適した、最高パフォーマンスの SSD ボリューム </td>
</tr>
<tr>
<td> スループット最適化 HDD (<code>st1</code>)  </td>
<td> 高いスループットを必要とするアクセス頻度の高いワークロード向けの低コストの HDD ボリューム </td>
</tr>
<tr>
<td> Cold HDD (<code>sc1</code>)                </td>
<td> アクセス頻度の低いワークロード用に設計された低コストの HDD ボリューム </td>
</tr>
</tbody>
</table>


<h4>エフェメラルストレージ（ボリューム）</h4>

<p>EC2 インスタンスはブロックレベルのストレージとしてEBSと、インスタンスストアをサポートしている。<br/>
インスタンスストアの別称をエフェメラルストレージという。<br/>
インスタンスの一時的なブロックレベルのストレージを提供し、関連付けられたインスタンスの存続期間中にのみ保持される。<br/>
インスタンスが停止または終了した場合、インスタンスストアボリューム上のデータはすべて失われる。<br/>
参考: <a href="https://stay-ko.be/aws/solutionarchitect-pro-aws-ebs-vs-instance-store">https://stay-ko.be/aws/solutionarchitect-pro-aws-ebs-vs-instance-store</a></p>

<h4>EFS（Elastic File System）</h4>

<p>AWS クラウドサービスおよびオンプレミスリソースで利用できる、シンプル、スケーラブル、伸縮自在なファイルストレージ。<br/>
参考: <a href="https://aws.amazon.com/jp/efs/features/">https://aws.amazon.com/jp/efs/features/</a></p>

<h3>データベースサービス</h3>

<h4>DynamoDB TTL機能（Time to Live機能）</h4>

<p>DynamoDBにてレコード毎にデータの有効期限を指定でき、その有効期限を過ぎるとデータが自動削除する仕組み。<br/>
参考: <a href="https://dev.classmethod.jp/cloud/aws/try-dynamodb-ttl/">https://dev.classmethod.jp/cloud/aws/try-dynamodb-ttl/</a></p>

<h4>Athena</h4>

<p>インタラクティブなクエリサービスで、Amazon S3 内のデータを標準 SQL を使用して簡単に分析できます。Athena はサーバーレスなので、インフラストラクチャの管理は不要です。実行したクエリに対してのみ料金が発生します。</p>

<h3>セキュリティサービス</h3>

<h4>KMS（Key Management Service）</h4>

<p>データの暗号化に使用する暗号化キーを簡単に作成および管理できるマネージドサービス。<br/>
参考: <a href="https://dev.classmethod.jp/cloud/aws/cm-advent-calendar-2015-aws-relearning-key-management-service/">https://dev.classmethod.jp/cloud/aws/cm-advent-calendar-2015-aws-relearning-key-management-service/</a></p>

<h4>STS（Security Token Service）</h4>

<p>一時的な認証情報を発行してくれるサービス。<br/>
一時的な認証情報は、「アクセスキー」と「シークレットアクセスキー」、「セッショントークン」の3つで許可された別のアカウントのリソースにアクセスすることが可能になる。<br/>
参考: <a href="http://blog.serverworks.co.jp/tech/2016/05/18/sts/#sts_01">http://blog.serverworks.co.jp/tech/2016/05/18/sts/#sts_01</a></p>

<h3>アプリケーションサービス</h3>

<h4>SES（Simple Email Service）</h4>

<p>高可用性で低価格な、ユーザー自身の E メールアドレスとドメインを使用して E メールを送受信するための、簡単で費用効率の高い方法を提供する E メールプラットフォームです。<br/>
参考: <a href="https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/Welcome.html">https://docs.aws.amazon.com/ja_jp/ses/latest/DeveloperGuide/Welcome.html</a></p>

<h3>プロビジョニングサービス</h3>

<h4>Elasitic Beanstalk</h4>

<p>作成したJavaアプリケーションをクラウドにデプロイするだけで、Webアプリケーションとして利用できるサービス。<br/>
「ジャックと豆の木」の話に出てきる豆の木のように雲に届くもの、という意味から名付けられた。<br/>
参考: <a href="https://www.atmarkit.co.jp/ait/articles/1106/15/news128.html">https://www.atmarkit.co.jp/ait/articles/1106/15/news128.html</a><br/>
参考: <a href="https://dev.classmethod.jp/cloud/aws/cm-advent-calendar-2015-aws-re-entering-elasticbeanstalk/">https://dev.classmethod.jp/cloud/aws/cm-advent-calendar-2015-aws-re-entering-elasticbeanstalk/</a></p>

<h4>OpsWorks</h4>

<p>Chef や Puppet のマネージド型インスタンスを利用できるようになる構成管理サービス。<br/>
参考: <a href="https://aws.amazon.com/jp/opsworks/">https://aws.amazon.com/jp/opsworks/</a></p>

<h3>分析サービス</h3>

<h4>EMR</h4>

<p>管理された Hadoop フレームワークが提供され、動的にスケーリング可能な Amazon EC2 インスタンスで、大量のデータを、簡単、高速、高コスト効率な方法で処理できるサービス。<br/>
<a href="https://aws.amazon.com/jp/emr/">https://aws.amazon.com/jp/emr/</a><br/>
<a href="https://dev.classmethod.jp/cloud/aws/cm-advent-calendar-2015-getting-started-again-aws-emr/">https://dev.classmethod.jp/cloud/aws/cm-advent-calendar-2015-getting-started-again-aws-emr/</a></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AWS（クラウド）周りの聞き慣れない用語（SAAレベル）'
description: ''
publishDate: '07/09/2019 09:59:20'
---

[CONTENTS-START]
<h4>スループット</h4>

<p>コンピューターが一定時間内に処理できる情報の量や、処理速度のこと。
回線速度やネットワーク機器の処理速度など、システム全体のすべての要素を通して、最終的に処理がどれほどの速度で行われるかを指す。
参考: <a href="https://kotobank.jp/word/%E3%82%B9%E3%83%AB%E3%83%BC%E3%83%97%E3%83%83%E3%83%88-5065">https://kotobank.jp/word/%E3%82%B9%E3%83%AB%E3%83%BC%E3%83%97%E3%83%83%E3%83%88-5065</a></p>

<h4>IOPS</h4>

<p>1秒あたりに処理できるI/Oアクセスの数
性能の指標として用いられる。</p>

<h4>ブルー・グリーンデプロイメント</h4>

<p>デプロイの自動化、サーバーのダウンタイムゼロを目標とするデプロイ方法。</p>

<h4>ステートレス/ステートフル</h4>

<p><strong>ステートレス</strong> => システムが現在の状態を表すデータなどを保持せず、入力の内容によってのみ出力が決定される方式。<br/>
同じ入力に対する出力は常に同じになる。</p>

<p><strong>ステートフル</strong> => システム内部に状態を表すデータなどを保持しておき、処理内容に反映させるような方式。</p>

<p>参考: <a href="http://e-words.jp/w/%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%AC%E3%82%B9.html">http://e-words.jp/w/%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%AC%E3%82%B9.html</a></p>

<h4>疎結合/密結合</h4>

<p><strong>疎結合</strong> => 他と結びつきが弱い構造。独立性が強い。<br/>
プログラム、コンポーネント同士のの結びつきが弱い状態。</p>

<p><strong>密結合</strong> => 他と結びつきが強く依存する構造。独立性が弱い。<br/>
プログラム、コンポーネント同士が密接に結合していて分離すると動かない状態。</p>

<p>参考: <a href="http://www.gamecradle.net/document/main/content/doki/session11/su-loose_tightly_coupling%20.html">http://www.gamecradle.net/document/main/content/doki/session11/su-loose_tightly_coupling%20.html</a><br/>
参考: <a href="http://chuu-information.com/cloud/post-674/">http://chuu-information.com/cloud/post-674/</a></p>

<h4>CI/CD</h4>

<p>継続的インテグレーション（CI = Continuous Integration）、継続的デリバリー（CD = Continuous Delivery）のこと。<br/>
継続的にアプリケーションの価値を高めていくために、ソースコードのビルド、ユニットテストを走らせるなどの開発プロセスの自動化を考える必要があるという考え方。<br/>
AWSではCodeシリーズ（CodeCommit/CodeBuild/CodeDeploy/CodePipeline）、とりわけ4つのサービスを利用したCodeStarがCI/CD環境を自動構築できるサービスと位置づけられる。</p>

<h4>DR</h4>

<p>DRとはディザスタリカバリ（Disaster Recovery）の略であり、日本語に訳すと「災害復旧」のこと。<br/>
参考: <a href="https://www.idcf.jp/words/dr.html">https://www.idcf.jp/words/dr.html</a></p>

<h4>ETL（Extract Transform Load）</h4>

<p>基幹系システムからあらゆる業務データを抽出、加工し、データウェアハウスに送る作業のこと。<br/>
参考: <a href="https://it-trend.jp/etl/article/function">https://it-trend.jp/etl/article/function</a></p>

<h4>モノリシック</h4>

<p>一体となっている、あるいは一枚岩的な組織やものという意味。<br/>
ソフトウェアにおいては、分割されていない1つのモジュールで構成されたものを指す。</p>

<h4>マイクロサービス</h4>

<p>個々に開発された複数の小さな（マイクロ）サービスに分割して管理、運営をおこなっていくこと。<br/>
モノリシックサービスとの対比で用いられる。</p>

<h4>PoC（Proof of Concept）</h4>

<p>事前検証活動、もしくは概念実証という意味。<br/>
新しい概念や理論、原理、アイディアの実証を目的とした、試作開発の前段階における検証やデモンストレーションを指す。</p>

<h4>Docker</h4>

<p>アプリケーションをすばやく構築、テスト、デプロイできるソフトウェアプラットフォーム。<br/>
Docker は、コンテナと呼ばれる標準化されたユニットにソフトウェアをパッケージ化する。<br/>
参考: <a href="https://aws.amazon.com/jp/docker/">https://aws.amazon.com/jp/docker/</a></p>

<h4>プロキシサーバー</h4>

<p>プロキシサーバーとは、内部のネットワークとインターネットの境界で動作し、両者間のアクセスを代理して行うものです。プロキシとは「代理」という意味がある。<br/>
ネットワーク内におけるインターネットの出入り口をプロキシサーバー経由に限定することで、通信内容を一括してプロキシサーバー側でチェックすることが可能。クライアントコンピュータは直接インターネットにつながることがなく、不正アクセスや侵入行為を防ぐことができセキュリティ向上目的で用いられる。<br/>
参考: <a href="https://www.idcf.jp/words/proxy-server.html">https://www.idcf.jp/words/proxy-server.html</a></p>

<h4>ワークロード</h4>

<p>稼働中のコンピュータにかかっている負荷の大きさ、実行中のソフトウェアによって処理能力が占有される度合いのことをワークロードという。</p>

<h4>RTO（Recovery Time Objective）</h4>

<p>復旧時間目標。ビジネスが中断することで許容できない結果が発生しないようにするために、障害（中断）が発生してから、ビジネスプロセスが規定のサービスレベルに復旧するまでに必要な時間のことをいう。<br/>
例えば、障害が午後12時（正午）に発生し、RTO が8時間の場合、DR プロセスでは、午後8時までに許容できるサービスレベルに復旧する。<br/>
参考: <a href="http://www.hitachi.co.jp/products/it/backup/outline/buckup/matter/">http://www.hitachi.co.jp/products/it/backup/outline/buckup/matter/</a></p>

<h4>RPO（Recovery Point Objective）</h4>

<p>復旧ポイント目標。どの程度のデータ紛失を許容できるかを時間で表す。<br/>
例えば、RPO が1時間の場合、障害が発生したのは正午なので、復旧後のシステムには午前 11 時以降のデータのみが含まれることになる。<br/>
参考: <a href="http://www.hitachi.co.jp/products/it/backup/outline/buckup/matter/">http://www.hitachi.co.jp/products/it/backup/outline/buckup/matter/</a></p>

<h4>SLA（Service Level Agreement ）</h4>

<p>可用性。サービスを提供事業者とその利用者の間で結ばれるサービスのレベル（定義、範囲、内容、達成目標等）に関する合意サービス水準、サービス品質保証などと訳される。<br/>
参考: <a href="https://www.idcf.jp/words/sla.html">https://www.idcf.jp/words/sla.html</a></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2019年6月 振り返り'
description: ''
publishDate: '07/01/2019 23:00:00'
---

[CONTENTS-START]
<h2>結果</h2>

<h3>ブログ</h3>

<p><strong>目標：月 12 回（週 3 回）更新</strong><br/>
<strong>結果：月 7 回 更新</strong></p>

<h3>読書</h3>

<p><strong>目標：月 1 冊</strong><br/>
<strong>結果：月 1 冊</strong></p>

<h2>反省点など</h2>

<p>読書はまたAWSの認定本だけ。(SAAの本)<br/>
プラクティショナー終わったらやめる気でいたけどせっかく覚えたんだしと思ってSAAも受けることにしました。<br/>
早く終わらして通常モードに戻りたいと思います。</p>

<h2>来月に向けて</h2>

<p>7月前半までにSAAとって以降はJSの勉強をする。<br/>
あとは6月のときの目標と同じ。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'HTML セクショニングと見出しのマークアップ'
description: ''
publishDate: '06/13/2019 08:00:00'
---

[CONTENTS-START]
<p>最近の案件でマークアップに関していろいろ気づきがあったのでメモしておきます。</p>

<h3>見出しタグが入らないエリアは <code>&lt;section&gt;</code> で囲まない</h3>

<p><strong>良くないと思われる例</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">section</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>テキストです。<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">section</span><span class="synIdentifier">&gt;</span>
</pre>


<p><strong>改善例</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>テキストです。<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<h3><code>&lt;section&gt;</code> の中には見出しタグはひとつにする</h3>

<p><strong>良くないと思われる例</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">section</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>見出しです。その1<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>見出しです。その2<span class="synIdentifier">&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">section</span><span class="synIdentifier">&gt;</span>
</pre>


<p><strong>改善例</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">section</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>見出しです。その1<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">section</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>見出しです。その2<span class="synIdentifier">&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">section</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">section</span><span class="synIdentifier">&gt;</span>
</pre>


<p>もしくは</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">section</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">span</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title01&quot;</span><span class="synIdentifier">&gt;</span>見出しです。その1<span class="synIdentifier">&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">span</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;title02&quot;</span><span class="synIdentifier">&gt;</span>見出しです。その2<span class="synIdentifier">&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">section</span><span class="synIdentifier">&gt;</span>
</pre>


<h3>見出しタグは順番にマークアップする</h3>

<p><strong>良くないと思われる例</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">section</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>見出しです。その1<span class="synIdentifier">&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>見出しです。その2<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">section</span><span class="synIdentifier">&gt;</span>
</pre>


<p><strong>改善例</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">section</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>見出しです。その1<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>見出しです。その2<span class="synIdentifier">&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">section</span><span class="synIdentifier">&gt;</span>
</pre>


<p>できない場所は無理やりJSで入れ替えるなども方法としてはあがるようですが、<a href="https://webtan.impress.co.jp/e/2018/04/20/29008">見出しがh1→h2→h3の順でないと、SEOに悪影響あったりします?</a> などを見るとSEO的には関係なさそうです。</p>

<h3><code>&lt;nav&gt;</code> の中には見出しタグがあったほうがよい</h3>

<p><strong>良くないと思われる例</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">nav</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">ナビゲーション</span><span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">ナビゲーション</span><span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">ナビゲーション</span><span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">nav</span><span class="synIdentifier">&gt;</span>
</pre>


<p><strong>改善例</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">nav</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>メニュー<span class="synIdentifier">&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">ナビゲーション</span><span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">ナビゲーション</span><span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">ナビゲーション</span><span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">nav</span><span class="synIdentifier">&gt;</span>
</pre>


<p>要素構成上の問題でもありますが、<code>&lt;nav&gt;</code> タグ内に見出しがないと <code>Untitled NAV</code> となってしまいます。<br/>
<a href="https://maboroshi.biz/clearskysource/?p=144">nav要素内に見出しがない |  clear sky source</a><br/>
ただどうやらエラー認定はされないようでここはあまり気にする必要はないかもしれません。</p>

<h3>まとめ</h3>

<p>宗教論争的な面が多くありそうな話なのでその時々のルールを守って快適に仕事が進むのがいいと思いますが、<br/>
基礎的なルールで間違いていたところがあったので、まとまった時間でもう少し学びたいなと思いました。<br/>
<code>&lt;article&gt;</code> や <code>&lt;aside&gt;</code> あたりもしっかりしようと思います。<br/>
HTMLそれなりに触っては来たけど何も分かっていない気がしてきました。</p>

<p><strong>他参考サイト</strong></p>

<ul>
<li><a href="https://helog.jp/html-css/html5-outline-markup/">HTML5のアウトラインを意識したマークアップ | helog - WEB／システム／IT技術ブログ</a></li>
<li><a href="http://webcre8.jp/think/html5-section-outline.html">[HTML5]アウトラインで迷わない！ sectionと見出しについて - WEBCRE8.jp</a></li>
<li><a href="https://webliker.info/46840/">【一覧表あり】HTML5でのタグの入れ子のルールを徹底まとめ | webliker</a></li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AWS クラウドプラクティショナー認定試験のために覚えたサービス'
description: ''
publishDate: '06/12/2019 23:30:00'
---

[CONTENTS-START]
<p>クラウドプラクティショナー取得のための勉強に際して覚えたサービスと短い説明をまとめておきます。<br/>
基本的にプラクティショナーレベルの場合、サービス名称と概要を覚えておけば、サービス名を聞かれる問題はなんとかなると思います。（EC2やIAMなどのメジャーどころはもちろん除きますが）<br/>
以下にあげた以外にも実際の出題はあったと思うので、ある程度広く浅くが大事かなと感じました。</p>

<h2>セキュリティ関連</h2>

<h4>AWS Shield</h4>

<p>分散サービス妨害（DDoS攻撃）に対するマネージド型の保護サービス。<br/>
AWS で実行しているWebアプリケーションを保護する。<br/>
「Standard」と「Advanced」の2つのレベルでサービスがあり、「Standard」は追加料金なしで保護の適用を受けることが可能。<br/>
攻撃通知や分析、レポート生成は「Advanced」を選択することでDDoS Response Teamにアウトソースすること、AWS WAFサービスが無制限に利用可能。</p>

<h4>Amazon Inspector</h4>

<p>AWSのEC2上にデプロイされたアプリケーションのセキュリティとコンプライアンスを向上させるための、脆弱性診断を自動で行うことができるサービス。</p>

<h4>AWS WAF (Web Application Firewall)</h4>

<p>マネージド型のWebアプリケーションファイアウォールサービス。<br/>
アプリケーションの可用性低下、セキュリティの侵害、リソースの過剰消費などの一般的なWebの脆弱性からWebアプリケーションを保護する。<br/>
基本利用料は無料でWebセキュリティルールに基づき課金される。セキュリティルールはユーザーが設定する必要がある。</p>

<h4>IAM (Identity and Access Management)</h4>

<p>ユーザーのAWSクラウドリソースへのアクセス管理サービス。<br/>
AWSのユーザーとグループを作成および管理し、アクセス権を使用してAWSリソースへのアクセスを許可および拒否できる。</p>

<h4>セキュリティグループ</h4>

<p>1つ以上のインスタンスのトラフィックを制御する仮想ファイアウォール。</p>

<ul>
<li>許可のルールの指定が可能</li>
<li>拒否のルールは指定は不可能</li>
<li>インバウンドトラフィックとアウトバウンドトラフィックのルールを個別に指定可能</li>
</ul>


<h4>MFA (Multi-Factor Authentication)</h4>

<p>他要素認証。<br/>
コンソールログイン時にMFAを有効化することでアカウントを保護できる。</p>

<h2>テクノロジー</h2>

<h3>コンピューティングサービス</h3>

<h4>EC2 (Elastic Compute Cloud)</h4>

<p>サイズ変更可能なコンピューティング性能をAWSクラウド内で提供するウェブサービス。</p>

<h4>AMI (Amazon Machine Image)</h4>

<p>EC2インスタンスのテンプレート。OS/アプリケーション/データなどの様々な情報を提供する。</p>

<ul>
<li>クイックスタートAMI</li>
<li>マイAMI</li>
<li>AWS Marketplace</li>
<li>コミュニティAMI
から選択/作成できる。</li>
</ul>


<h4>ELB (Elastic Load Balancing)</h4>

<p>同じ構成を持った2つのEC2インスタンスを別々のAZに配置し、ユーザーからのリクエストトラフィックを分散できる。<br/>
（マルチAZ配置。高可用性・耐障害性を向上することができる）</p>

<ul>
<li>Application Load Balancer（HTTP/HTTPSのリクエストを負荷分散する用途）</li>
<li>Network Load Balancer（HTTP/HTTPS以外のTCPプロトコルを使用する場合）</li>
<li>Classic Load Balancer（以前のタイプのロードバランサー）
の3種類がある。</li>
</ul>


<h4>Auto Scaling</h4>

<p>EC2インスタンスを必要なときに自動で増減できる機能。<br/>
1つのインスタンスのサイズ（性能）ではなく、数の増減でスケーリングする。（水平スケーリングの自動化）</p>

<h4>EBS (Elastic Block Store)</h4>

<p>EC2インスタンスにアタッチして使用するブロックストレージボリューム。<br/>
ボリュームタイプは変更が可能で、同じアベイラビリティゾーン内の複数サーバー間で自動的にレプリゲートされるなどの特徴がある。</p>

<h3>ストレージサービス</h3>

<h4>S3 (Simple Storage Service)</h4>

<p>インターネット対応の完全マネージド型のオブジェクトストレージ。<br/>
無制限のストレージ容量、高い耐久性（イレブン・ナイン）、インターネット経由でアクセス可能という特徴がある。</p>

<p><strong>S3のアクセス権限</strong></p>

<p>デフォルトでプライベート設定。以下の3種類のなかからアクセス権を設定する。</p>

<ul>
<li>アクセスコントロールリスト (ACL)</li>
<li>バケットポリシー</li>
<li>IAMポリシー</li>
</ul>


<h3>ネットワーク</h3>

<h4>VPC (Virtual Private Cloud)</h4>

<p>AWSクラウド内にプライベートなネットワーク環境を構築するサービス。<br/>
リージョンを選択して複数のアベイラビリティゾーンをまたがって作成することができる。<br/>
EC2やRDSといったサービスはVPCを使用する場合VPC内で起動される。</p>

<h4>ネットワークACL (Network Access Control List)</h4>

<p>VPCのサブネットに対して設定する仮想ファイアウィール機能。<br/>
必要な要件があった場合に設定する、追加のセキュリティレイヤーとして機能させることができる。<br/>
デフォルトでインバウント（受信）とアウトバウンド（送信）が許可されている。</p>

<h4>CloudFront</h4>

<p>世界中に150箇所以上あるエッジロケーションを使い、最も低いレイテンシー（遅延度）でコンテンツを配信できるコンテンツ配信ネットワーク (Contents Delivery Network/CDN)サービス。</p>

<h4>Route 53</h4>

<p>エッジロケーションで使用されるDNSサービス。<br/>
一般的なDNSサービスと同様に、ドメインに対してのIPアドレスをマッピングしてユーザーからの問い合わせに回答する。</p>

<h3>データベースサービス</h3>

<h4>RDS (Relational Database Service)</h4>

<p>AWSで簡単にリレーショナルデータベースを使用することができるサービス。<br/>
オンプレミスで使われているデータベースエンジンをそのまま簡単に使うことができる。</p>

<ul>
<li>Amazon Aurora (MySQL/PostgreSQL のデータモデルをサポート)</li>
<li>MySQL</li>
<li>PostgreSQL</li>
<li>MariaDB</li>
<li>Oracle</li>
<li>Microsoft SQL Server
以上のデータベースエンジンが利用可能。<br/>
OS、データベースエンジンのメンテナンスをAWSに任せることができる。<br/>
マルチAZ配置を有効化すると、複数のアベイラビリティゾーンでデータベースのレプリケーションが可能。</li>
</ul>


<h4>DMS (Database Migration Service)</h4>

<p>オンプレミスの従来のデータベースからAWSへのデータベース移行を簡単にするサービス。</p>

<h4>Dynamo DB</h4>

<p>NoSQL型の高いパフォーマンスを持ったフルマネージド型のデータベースサービス。<br/>
使用の際にはリージョンを選択するだけで、自動的に複数のアベイラビリティゾーンの複数の施設で同期・保存が開始される。（マルチAZな環境）</p>

<p><strong>リレーショナルデータベース(RDS)と、非リレーショナルデータベース（Dynamo DB/NoSQL）</strong></p>

<p>リレーショナルデータベース（垂直スケーリング） => 空席予約などの厳密な確定処理に向いている。大量のデータ更新や読み込み処理は不向き。<br/>
非リレーショナルデータベース（水平スケーリング） => 大量なアクセスを処理することに向いている。複雑なクエリ、トランザクションを必要とする処理は不向き。</p>

<h4>Amazon Redshift</h4>

<p>高速でスケーラブルなデータウェアハウスサービス。<br/>
データウェアハウスとデータレイクすべてにわたる分析をシンプルで費用対効果高く行える。</p>

<h4>管理サービス</h4>

<h4>Amazon CloudWatch</h4>

<p>EC2インスタンス、RDSインスタンス、Dynamo DBテーブルなどの各インスタンス、EBSのディスクI/Oなどの現在の状態、情報をモニタリングするサービス。<br/>
標準メトリクスではAWSが管理している範囲の情報をお客様側での追加の設定なしで収集している。<br/>
EC2のメモリやアプリケーションのステータスなどOS以上の範囲、およびお客様がコントロールしている範囲に関しては CloudWatch を使用してカスタムメトリクスとして書き込むことができる。</p>

<p><strong>CloudWatch Logs</strong></p>

<p>EC2のアプリケーションのログ、Lambdaのログ、VPC Flow Logsなどのログを収集する機能。<br/>
CloudWatchエージェントをインストールして少しの設定が必要。</p>

<h4>Trusted Advisor</h4>

<p>AWSアカウント環境の状態を自動的にチェックして回り、ベストプラクティスに対してどうであったかを示すアドバイスをレポートするサービス。</p>

<h4>CloudTrail</h4>

<p>AWSアカウント内のすべてのAPI呼び出しを記録するサービス。<br/>
API呼び出しを記録するということはAWSアカウント内におけるすべての操作を記録するため、監査や調査に最も適している。</p>

<h4>AWS Config</h4>

<p>AWSリソースの変更履歴を記録する。VPCの変更記録など誰がいつ何を変更したかが自動で記録される。</p>

<h4>CloudFormation</h4>

<p>AWSの各リソースを含めた環境を自動作成/更新/管理するサービス。<br/>
テンプレートを用いるので、同一のAWS環境を何度でも自動で構築することが可能。</p>

<h4>Elastic Beanstalk</h4>

<p>Webアプリケーションの環境を簡単にAWSに構築するサービス。<br/>
CloudFormation との違いは、Elastic Beanstalkはテンプレートが必要ない（設定パラメータを提供する）。</p>

<h2>請求と支払い</h2>

<h4>請求ダッシュボード</h4>

<p>どのサービスにどれくらいコストが発生しているかを確認する画面。</p>

<h5>コストエクスプローラー</h5>

<p>ROIの計測等で用いるコスト分析機能。<br/>
設定したコスト配分タグにてデータが可視化される。</p>

<h5>コスト配分タグ</h5>

<p>設定したキーと値によってタグ分けする機能。<br/>
コストエクスプローラーで可視化したり、CSV形式でダウンロードする際に使われる。</p>

<h4>請求アラーム</h4>

<p>CloudWatchメトリクスの1つなので、SNS(Simple Notification Service)と連携して設定すると、特定の金額を超えたときにメール送信することなどができる。</p>

<h4>AWS Organizations</h4>

<p>複数アカウントを一括で階層管理するサービス。<br/>
Organizationsの一括請求を使用することで複数アカウントの請求を1つにまとめることができる。</p>

<h4>AWS簡易見積りツール</h4>

<p>AWSでどれくらいコストがかかるのかを事前に知るために使うことのできるツール。</p>

<h4>TCO計算ツール</h4>

<p>AWSへの移行、導入を検討している際に、オンプレミスで構築した場合とのコスト比較をレポートしてくれるツール。<br/>
経営層やシステムを所有する企業へのプレゼンテーションに利用ができる。<br/>
※TCO = Total Cost of Ownership（総保有コスト）</p>

<h4>AWSのサポートプラン</h4>

<p>ベーシック/開発者/ビジネス/エンタープライズ の4プランがある。<br/>
<a href="https://aws.amazon.com/jp/premiumsupport/compare-plans/">https://aws.amazon.com/jp/premiumsupport/compare-plans/</a></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AWS（クラウド）周りの聞き慣れない用語（クラウドプラクティショナーレベル）'
description: ''
publishDate: '06/12/2019 23:00:00'
---

[CONTENTS-START]
<h1>AWS（クラウド）周りの聞き慣れない用語</h1>

<p>AWS 認定試験（クラウドプラクティショナー）勉強の際に、ネットワークやサーバー周りに疎い自分からすると理解が難しい単語によく出くわしました。<br/>
カテゴリーばらばらで適切でないかもですが、サービス名以前に用語の理解が必要だなと感じたので、最初に理解しづらかった単語と意味を並べていきます。</p>

<h2>共通/基礎部分</h2>

<h4>マネージド</h4>

<p>直訳すると「管理する」なので、<br/>
マネージドサービス = システム側での管理がされたサービス = ユーザー側での管理があまり必要のないサービス<br/>
のように考えました。</p>

<p>さらに「フルマネージド」となると、一括で管理されたサービスという意味合いになるので、<br/>
さらにユーザー側での管理が必要のないサービスという認識。</p>

<h4>デプロイ</h4>

<p>日本語訳的には配置する、展開すること。<br/>
主にネットワークを通じて提供されるWebアプリケーションなどのシステム開発工程において、システムを利用可能な状態にすること。<br/>
参照元: <a href="https://www.weblio.jp/content/%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4">https://www.weblio.jp/content/%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4</a></p>

<h4>レイテンシー</h4>

<p>データ転送の「遅延」のこと。<br/>
「低レイテンシー」とは、遅延が少なくデータ処理が行われることを指す。（ポジティブな意味）<br/>
CloudFrontは最寄りのエッジロケーションにあるキャッシュを使用してコンテンツを配信しているので低レイテンシーの実現ができる。</p>

<h4>スケールメリット</h4>

<p>規模の拡大によって得られるメリット。<br/>
AWSは数十万単位の多くのユーザーがクラウドを使用するため、スケールメリットを活かして従量課金制の料金も低く提供できる。</p>

<h2>EC2/RDS/S3関連</h2>

<h4>インスタンス</h4>

<p>EC2で立てるサーバーのひとつを指す。<br/>
例）インスタンスをひとつ立てる = サーバーをひとつ立てる<br/>
EC2には、さまざまな種類（スペック）のEC2インスタンスが用意されている。</p>

<p>データベースインスタンスは、AWSではRDSで使われるまた別のもの。<br/>
こちらも様々なタイプが用意されている。</p>

<h4>レプリケート（レプリケーション）</h4>

<p>コピー（複製）すること。<br/>
RDSはMulti-AZ配置をするとAZ間でレプリケートされる。<br/>
S3でもレプリケート先パケットを指定すると異なるリージョンにあるパケットにレプリケートできる。<br/>
EBSはアベイラビリティゾーン内の複数のサーバーで自動的にレプリゲートされている。</p>

<h4>リードレプリカ</h4>

<p>更新用データベース（マスター）からレプリケーションされた参照専用のデータベースのこと。<br/>
参照元: <a href="https://www.iij.ad.jp/svcsol/category/cloud/bp/db002.html">https://www.iij.ad.jp/svcsol/category/cloud/bp/db002.html</a></p>

<h4>バケット（パケット）</h4>

<p>バケツ（入れ物）のこと。<br/>
S3ではバケットを作成して、その中にオブジェクト（ファイル）を格納する。<br/>
バケット名はユニークである必要がある。</p>

<h4>オブジェクト</h4>

<p>データ（アップロードするファイル）のこと。</p>

<h2>障害/負荷関連</h2>

<h4>フォールトトレランス</h4>

<p>障害発生時にサービス全体を止めずにシステムを動かし続けること。<br/>
参照元: <a href="https://dev.classmethod.jp/cloud/amazon-rds-replication/">https://dev.classmethod.jp/cloud/amazon-rds-replication/</a></p>

<h4>フェイルオーバー</h4>

<p>稼働中のシステムで問題が生じてシステムやサーバーが停止してしまった際に、自動的に待機システムに切り替える仕組み。<br/>
参照元: <a href="https://www.idcf.jp/words/failover.html">https://www.idcf.jp/words/failover.html</a></p>

<h4>スナップショット</h4>

<p>バックアップ。<br/>
ある時点でのソースコードや、ファイル、ディレクトリ、データベースファイルなどの状態を抜き出したもののこと。<br/>
参照元: <a href="https://www.idcf.jp/words/snapshot.html">https://www.idcf.jp/words/snapshot.html</a></p>

<h4>ヘルスチェック</h4>

<p>システムなどが正常に稼働しているかを外部の別の機器などから監視あるいは検査すること。<br/>
<a href="http://e-words.jp/w/%E3%83%98%E3%83%AB%E3%82%B9%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF.html">http://e-words.jp/w/%E3%83%98%E3%83%AB%E3%82%B9%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF.html</a><br/>
チェック結果：ヘルシー => ヘルスチェックが良好 => 問題は起こっていない。<br/>
チェック結果：アンヘルシー => ヘルスチェックでエラー => 何かしらの問題が起こっている。</p>

<h4>スケーラブル</h4>

<p>増大・拡大に適応できる能力・度合いのこと。</p>

<h4>スケールアップ / スケールダウン</h4>

<p>サーバーなどの性能を上げる/下げること</p>

<ul>
<li>アップ => 上げる</li>
<li>ダウン => 下げる
※垂直スケーリング（性能の上下）の場合に使う</li>
</ul>


<h4>スケールアウト / スケールイン</h4>

<p>サーバーなどの台数を増やす/減らすこと。</p>

<ul>
<li>アウト => 増やす（拡大する）</li>
<li>イン => 減らす（縮小する）
※水平スケーリング（台数の増減）の場合に使う</li>
</ul>


<h4>垂直スケール / 水平スケール</h4>

<p>垂直スケール => ひとつのサーバーなどを大きくする。<br/>
水平スケール => ひとつのサーバーなどの数を増やす。並列で使う。</p>

<h2>設計関連</h2>

<h4>Design for Failure</h4>

<p>故障に備えた設計。<br/>
時間が経てば故障する、ということを認識し、アーキテクチャに取り入れた考えのこと。</p>

<h4>Single Point Of Failure（SPOF）</h4>

<p>単一障害点。<br/>
Design for Failure を実現するために SPOF をなくすという考え方をする。<br/>
障害の原因ポイントが単数だと設計的に良くないとされていて、予め複数にリソースを割り振った設計が好ましいとされる。</p>

<h4>可用性</h4>

<p>システムが継続して稼働できる能力のこと。</p>

<p>高可用性 => システムの停止時間をなるべく少なくすること。<br/>
AWSのサービスを使った高可用性の実現には、複数のAZおよびリージョンにまたがるアーキテクチャにしたり、Auto Scalingを使用するといった方法がある。<br/>
参照元: <a href="https://qiita.com/hz1_d/items/ca24e1d131bf475e23b1">https://qiita.com/hz1_d/items/ca24e1d131bf475e23b1</a></p>

<h4>冗長化</h4>

<p>コンピューターやシステムに何らかの障害が発生したケースに備えて、予備装置を普段から配置、運用しておくこと。<br/>
参照元: <a href="https://boxil.jp/mag/a2945/">https://boxil.jp/mag/a2945/</a>
コンピュータの世界では、冗長は無駄というようなネガティブな意味ではない。<br/>
「冗長性がある設計や構成」ということは、予め何らかの障害に対して対策している良い設計や構成というポジティブな意味。</p>

<h4>イレブン・ナイン</h4>

<p>99.999999999%のこと。<br/>
9が11個あるので、イレブン・ナイン。</p>

<p>S3の耐久性（堅牢性）はイレブン・ナイン。<br/>
S3の可用性は99.99%なので注意。</p>

<h4>プロビジョニング</h4>

<p>必要に応じてネットワークやコンピューターの設備などのリソースを提供できるよう予測し、準備しておくこと。<br/>
参照元: <a href="https://www.idcf.jp/words/provisioning.html">https://www.idcf.jp/words/provisioning.html</a></p>

<h2>ユーザー関連</h2>

<h4>MFA (Multi-Factor Authentication)</h4>

<p>サインインする際に行う多要素認証のこと。<br/>
ユーザー名とパスワードに加えて保護のレイヤーを追加する。（PingもMFAのソリューションのひとつ）</p>

<h4>フェデレーティッドユーザー</h4>

<p>AWS上ではアカウントを保持していないAWS外部のユーザーを指す。<br/>
Auth認証（Twitterでログインするみたいな）のようなサービスの利用法をフェデレーションという。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AWS クラウドプラクティショナー 取得まで'
description: ''
publishDate: '06/12/2019 22:30:00'
---

[CONTENTS-START]
<h3>職種や前提知識</h3>

<p>Webのフロントエンドエンジニア。<br/>
過去に案件でAWSを用いたプロジェクトはいくつか担当しましたが、実際にコンソール上で設定を変更したりすることはほぼなく、よく使われるサービス（EC2/S3/ELB/CloudFrontあたり）がどのようなサービスであるかをなんとなく知っている程度。<br/>
VPCなどコーディング業務から遠いサービスは今回ほぼ初めて聞いた程度でネットワークやサーバーに関しての知識も基礎部分はかなりあやしいです。</p>

<h3>認定資格テキストの読みこみ（本）</h3>

<p>まずAWS認定資格試験テキスト「AWS認定 クラウドプラクティショナー」 <a href="https://www.amazon.co.jp/dp/4797397403/">https://www.amazon.co.jp/dp/4797397403/</a> の読みこみを行いました。<br/>
認定試験の知識のなかで一番ベースとなる知識をつけることができ、試験のレベル感もこの本で把握していきました。</p>

<p>1週目は分からない部分がありながらも一通り読み進めて設問を解きました。<br/>
初めて聞くサービスや用語も多いので、</p>

<ul>
<li>資格取得の全体の雰囲気（設問の出され方など）を把握する</li>
<li>聞いたことがない用語に関しては把握する</li>
<li>聞いたことがあるサービスに関しては、概要を説明できる</li>
<li>聞いたことがないサービスに関しては、どのようなサービスかをぼんやりと認識できる</li>
<li>AWSの責任共有モデルやセキュリティ、料金システムに関しては細かい仕組みや数字は覚えられず、基本的な考え方や方向性に関して認識できる程度の理解度までが1週目では限界でした。<br/>
※全部を覚えようとするとパンクしてしまうと思い途中で方向転換</li>
</ul>


<h3>トレーニングプログラム AWS Cloud Practitioner Essentials（動画）</h3>

<p>AWSが提供しているクラウドプラクティショナー向けの動画カリキュラム。<br/>
現在配信されているパート2ではなくパート1？を見たような気がしますが、全7〜8時間くらいで長めです。</p>

<p>認定資格用に作られている動画と、初心者ユーザー向けのサービス紹介の動画の2タイプで構成されていましたので、有益度合いは人によるかなと思います。（聞いておいて損はしないですが）<br/>
機械翻訳的な日本語音声なのでちょっと聞きづらさを感じてしまいました。</p>

<p>各セクションの最後に設問があるので役に立ちます。難易度が高く感じました。（動画に出てないことも出てくる）<br/>
この時点で50%くらいの正答率だったので結構ヘコみました。<br/>
このあたりで勉強開始前までに聞いたことないサービスに関しても概要は理解できたと思いますが、まだまだ細かい所は覚えられていなかったと思います。<br/>
そのため、この段階でもう一度テキストを読みました。（2周目）</p>

<h3>実際にAWSを触ってみる</h3>

<p>実際にAWSのアカウント作成して無料枠で触ってみました。<br/>
参考にしたのは少し古いですが <a href="https://qiita.com/hiroshik1985/items/6433d5de97ac55fedfde">0から始めるAWS入門：概要 - Qiita</a> などをみながら進めて、VPC設定、インスタンスの立ち上げくらいまで行ってみました。（約2時間程度）</p>

<h3>AWS Innovate 2019 AWSome Day セッション（動画）</h3>

<p>AWS公式の初心者向けセッション動画を一通り見ました。（4動画）<br/>
<a href="https://aws.amazon.com/jp/about-aws/events/aws-innovate/sessions/#awsomeday02">https://aws.amazon.com/jp/about-aws/events/aws-innovate/sessions/#awsomeday02</a><br/>
こちらは厳密に資格対策用の教材ではないですが、内容はかなり初心者向けに作られています。<br/>
図を用いながら説明があるので、もしかすると認定資格テキストの前の最初の段階で見るほうがいいかもしれません。<br/>
スピーカーの方が2人いるのですが、掛け合いして進んでいくので、個人的には飽きずに楽しむことができました。</p>

<h3>これまでの知識の復習など</h3>

<ul>
<li>よく使われる用語や試験範囲のサービス一覧を自分でまとめてみる</li>
<li>テキストの読みこみ 2回（3週目、4週目）</li>
<li>認定資格テキストとトレーニングプログラムの設問を改めて一通りやってみる</li>
</ul>


<h3>模擬試験</h3>

<p>試験の1週間くらい前に受けました。<br/>
正解90%程度。<br/>
本試験より難易度はやさしいとは分かっていたものの、だいたい正解だったので試験の日程を1週間後に設定できました。<br/>
解答と解説がないのであまり有益でないかもですが、試験形式に慣れるためにやっておいたほうがよいです。</p>

<h3>試験結果</h3>

<p>820点ほどで合格。</p>

<ul>
<li>20%：間違いなく正解</li>
<li>60%：なんとなく正解かな</li>
<li>10%：たぶん間違いかな</li>
<li>10%：これ分かんないな</li>
</ul>


<p>というくらいの感触でした。90分の持ち時間でだいたい30分で一通り回答、15〜20分でマークつけた問題の見直しを行いました。（40分余り）</p>

<p>勉強期間はGW明けくらいから初めて6月上旬の受験だったので1ヶ月ほど。<br/>
通勤時間に本読んだり、動画は週末に見たりしました。<br/>
はじめは他の勉強や課題と同時並行で進めれるかなと思っていましたが、本の読み込み1週目でこれ大変だなと思って5月中旬以降はほぼこれだけの勉強期間になってしまいました。</p>

<h3>問題内容や難易度/対策</h3>

<p>認定資格を取ること、が目的であれば直接コンソール触わらなくてもOKかなと思います。<br/>
初見のサービス名がいきなり出たり、知らない英語の用語が出てきたりして焦ってましたが、<br/>
70%正解なら合格にはなるので、簡単（素直）な問題などを落とさないように基礎固めておいたほうが安心できそうです。</p>

<ul>
<li>EC2（インスタンスタイプなど）</li>
<li>RDS（データベース周り）</li>
<li>IAM（ユーザー権限）</li>
</ul>


<p>に関してはそれぞれ3問ずつ以上は出たと思うので、しっかりおさえておいたほうがよいかなと感じます。<br/>
（IAMとかMFAとか5回以上設問や選択肢であった気もする）</p>

<p>自分みたいなレベル感の人はとりあえずサービス名や用語覚えるまでの段階が一苦労と思いますが、<br/>
そこを乗り越えたらそれぞれの特徴覚えて、問題の傾向やクセを理解するテクニック的なところになるので割と一気にいけちゃうと思いました。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Mac SourceTree で AWS CodeCommit のリポジトリをチェックアウト'
description: ''
publishDate: '06/12/2019 09:00:00'
---

[CONTENTS-START]
<p>前回もつまづきまくって2度目があったのでメモしておきます。<br/>
https でリポジトリアクセス、IAMのロール周りも設定後の場合です。</p>

<p>公式で近いチュートリアルは下記が近そう<br/>
<a href="https://docs.aws.amazon.com/ja_jp/codecommit/latest/userguide/setting-up-https-windows.html">https://docs.aws.amazon.com/ja_jp/codecommit/latest/userguide/setting-up-https-windows.html</a></p>

<h2>Amazon CLI をインストール</h2>

<p>ここは省略します<br/>
参考: <a href="https://qiita.com/yabekenzo/items/230f34393f293972c779#aws-cli-%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB">AWS CodeCommit + Git (https) &#x3092; OSX &#x304B;&#x3089; SourceTree&#x3067;&#x4F7F;&#x3046; - Qiita</a></p>

<h2>AWS CLI の設定</h2>

<p>ターミナルから下記で AWS CLI の設定を行います。</p>

<pre class="code bash" data-lang="bash" data-unlink>$ aws configure --profile [プロジェクト名（自由につけて良い/あとで使う）]
AWS Access Key ID : [アクセスキーID]
AWS Secret Access Key : [シークレットアクセスキーID]
Default region name : [CodeCommitを使う？リージョン（ap-northeast-1 など）]
Default output format : [空欄（None）でOK]</pre>


<h2>認証情報ヘルパーを設定する</h2>

<p>同じくターミナルで認証情報ヘルパーを設定します。</p>

<pre class="code bash" data-lang="bash" data-unlink>$ git config credential.helper &#34;!aws codecommit credential-helper $@&#34;
$ git config credential.UseHttpPath true</pre>


<p>下記もひつようかな？</p>

<p>/user/.gitconfig ファイルに下記を追加</p>

<pre class="code" data-lang="" data-unlink>[credential]
    helper = &#34;aws configure --profile [CLI設定のプロジェクト名] codecommit credential-helper &#34;
    UseHttpPath = true</pre>


<h2>SorceTree からクローン</h2>

<p>SorceTree で Git URL をクローンする。<br/>
URLにhttpsアドレスを入力して Git のユーザー名/パスワードを入力<br/>
※このときにパスワードしか出ない場合はほかプロジェクトのユーザー名が使われているかも</p>

<p>問題なければクローンできる。Git URL と判定されていなければ以上の設定で不備ありと思います。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'slick のオプション'
description: ''
publishDate: '06/05/2019 23:00:00'
---

[CONTENTS-START]
<p>これまで Swiper 一択だったけど Slick のほうがカルーセルの個数など融通ききやすい気がするのでいつもググるものをメモしておきます。</p>

<p><a href="https://kenwheeler.github.io/slick/">slick - the last carousel you&#39;ll ever need</a></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;js-carousel-hero&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;slide.png&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;slide.png&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;slide.png&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink>$(<span class="synConstant">&quot;.js-carousel&quot;</span>).slick(<span class="synIdentifier">{</span>
  mobileFirst: <span class="synConstant">true</span>,
  centerPadding: 0,
  dots: <span class="synConstant">true</span>,
  arrows: <span class="synConstant">true</span>,
  infinite: <span class="synConstant">true</span>,
  speed: 400,
  autoplay: <span class="synConstant">true</span>,
  autoplaySpeed: 4000,
  cssEase: <span class="synConstant">'ease-in'</span>,
  responsive: <span class="synIdentifier">[</span>
    <span class="synIdentifier">{</span>
      breakpoint: 768,
      settings: <span class="synIdentifier">{</span>
        <span class="synComment">// for PC settings  </span>
        centerMode: <span class="synConstant">true</span>,
        variableWidth: <span class="synConstant">true</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">]</span>
<span class="synIdentifier">}</span>);
</pre>


<p>PCでスライドの横幅指定且つセンターモードにしたい場合は下記のようにcssで指定する
（オプション側だとうまくいかなかった.）</p>

<pre class="code lang-css" data-lang="css" data-unlink><span class="synStatement">ul</span> <span class="synIdentifier">{</span>
  li <span class="synIdentifier">{</span>
    <span class="synType">width</span>: <span class="synConstant">1000px</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2019年5月 振り返り'
description: ''
publishDate: '06/01/2019 14:16:25'
---

[CONTENTS-START]
<h2>結果</h2>

<h3>ブログ</h3>

<p><strong>目標：月 12 回（週 3 回）更新</strong><br/>
<strong>結果：月 13 回 更新</strong></p>

<h3>読書</h3>

<p><strong>目標：月 1 冊</strong><br/>
<strong>結果：月 1 冊</strong></p>

<h2>反省点など</h2>

<p>読書はAWSの認定本だけ。最初は他の勉強と同時並行でいけるかなと思いましたが後半難しくてそれだけになってしまった。<br/>
Vue.js でひとつ作れたのですが、JSもそれ以外の進展はなし。</p>

<p>月後半が少し忙しかったのでやれるときにもっとやっておかなきゃなというのと、忙しいなかでも時間作ってやる方法をもう少し考えたい。</p>

<h2>来月に向けて</h2>

<p>6月中旬までにAWS認定とって以降はJSの勉強をする。<br/>
案件でセマンティックなマークアップについてもっと学ばなきゃという機会があったのでどこかでまとめて学習する。<br/>
本はインターフェイスの本が途中になっているのでそれを読む。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'フォーム入力バインディングを理解する その11'
description: ''
publishDate: '05/23/2019 09:56:51'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>何年か前に jQuery で作った <a href="https://yuheijotaki.com/demo/type_tester/1.1/">type tester</a> という簡易的なフォント（関連のスタイリング）のテスターツールを Vue.js で作ってみる。 その11</p>

<p>GitHub Pages： <a href="https://yuheijotaki.github.io/type-tester/">https://yuheijotaki.github.io/type-tester/</a><br/>
GitHub リポジトリ：<a href="https://github.com/yuheijotaki/type-tester">https://github.com/yuheijotaki/type-tester</a></p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190523095755.png" alt="f:id:jotaki:20190523095755p:plain" title="f:id:jotaki:20190523095755p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h3>改善点</h3>

<p>まだ仕様や使い勝手的な部分で改善できる所がありそうで、メモのため書いておきます。</p>

<ul>
<li>再読込時にテキストの内容が保存されないようになっているので、localStorage使って保存できるように</li>
<li><code>color:</code> / <code>background:</code> のカラーコード入力時、短縮形の場合は補完機能、エラー時は入力前の値に戻るなどのバリデーション機能</li>
<li>フォントのバリエーションをGoogle Fontsから取ってこれるなどバリエーションが多ければなお良い</li>
<li>ローカルストレージの削除ボタンで既存のスタイルをデフォルトにリセットする機能</li>
<li>全体的に追加要件に対しては手書きになっている箇所ばかりなので、そこも動的だせたらなお良い</li>
</ul>


<h3>感想</h3>

<p>↑のような改善したい点はまだあるのですが、想定していたより短期間で実装できた感触です。
jQuery 版と比べると結構コアなところも時間かからなかったので Vue と localStorage すごいなーという感じです</p>

<ul>
<li><code>computed</code> と <code>methods</code> の違いがやっと分かってきた気がする</li>
<li>Vue.js の枠内でやれることもあるが意外とやれない（もしくは複雑になる）こともあるので、そういう場合は JavaScript で書くところもあるのだなと</li>
<li>今回のようなフォーム要素などあるものは、UIフレームワークなり使ったほうが良さそうな気がするので、そのあたりも知識必要かなと</li>
<li>localStorage も初めて触わりましたがやっぱり Cookie と同じような感じで、それでいて扱いやすいのでもっと使いこなせるようにしたい</li>
<li>Vue CLI は結局 webpack を使っているので webpack の知識もあったほうがいいなー</li>
<li>今回のページ構成のあるサービスでないので、ルーティング周りや vue-head の使いかたも覚えないとなとか</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'フォーム入力バインディングを理解する その10'
description: ''
publishDate: '05/23/2019 07:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>何年か前に jQuery で作った <a href="https://yuheijotaki.com/demo/type_tester/1.1/">type tester</a> という簡易的なフォント（関連のスタイリング）のテスターツールを Vue.js で作ってみる。 その10</p>

<p>GitHub Pages： <a href="https://yuheijotaki.github.io/type-tester/">https://yuheijotaki.github.io/type-tester/</a><br/>
GitHub リポジトリ：<a href="https://github.com/yuheijotaki/type-tester">https://github.com/yuheijotaki/type-tester</a></p>

<hr />

<h3>localStorage 用に <code>vue-ls</code> ライブラリを使ってリロード対策</h3>

<p>これまでブラウザの再読込をした際に前回までの作業が記録されない状態だったので、localStorage を使って保存できるように実装する。<br/>
ピュアな JS でも書けそうですが、何個がライブラリがあった中で <a href="https://www.npmjs.com/package/vue-ls">vue-ls</a> を使用しました。</p>

<p>インストール</p>

<pre class="code bash" data-lang="bash" data-unlink>$ npm install vue-ls --save</pre>


<p><strong><code>/src/main.js</code></strong>（抜粋）</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
<span class="synStatement">import</span> VueLocalStorage from <span class="synConstant">'vue-ls'</span>
Vue.use(VueLocalStorage)
...
</pre>


<p>順番的には、</p>

<ol>
<li>ローカルストレージにセットするメソッド <code>setItem()</code> 追加</li>
<li>あるタイミングでセットする</li>
<li><code>mounted()</code> 時にセットされたローカルストレージを取得 <code>getItem()</code></li>
<li>3.で取得した値で何かしらを実行</li>
</ol>


<p>みたいな順序とイメージでつくりました</p>

<h5>1. ローカルストレージにセットするメソッド <code>setItem()</code> 追加</h5>

<p><code>data()</code> で定義されている <code>styleObject</code> オブジェクトをセットするメソッドを追加します。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
  methods: <span class="synIdentifier">{</span>
    ...
    setStylesInfo() <span class="synIdentifier">{</span>
      localStorage.setItem(<span class="synConstant">'styleObject'</span>, JSON.stringify(<span class="synIdentifier">this</span>.styleObject));
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
...
</pre>


<h5>2. あるタイミングでセットする</h5>

<p>ツールでカラーを変更した際にセットされるようにメソッドに追加します。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
  methods: <span class="synIdentifier">{</span>
    changeColor: <span class="synIdentifier">function</span> (color) <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.styleObject<span class="synIdentifier">[</span><span class="synConstant">'color'</span><span class="synIdentifier">]</span> = color;
      <span class="synIdentifier">this</span>.setStylesInfo();
    <span class="synIdentifier">}</span>,
    ...
</pre>


<h5>3. <code>mounted()</code> 時にセットされたローカルストレージを取得 <code>getItem()</code></h5>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
  mounted() <span class="synIdentifier">{</span>
    <span class="synComment">// ローカルストレージに styleObject があるかチェック</span>
    <span class="synStatement">const</span> local_styleObject = localStorage.getItem(<span class="synConstant">'styleObject'</span>);
    <span class="synStatement">if</span> ( local_styleObject ) <span class="synIdentifier">{</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
...
</pre>


<h5>4. 3.で取得した値で何かしらを実行</h5>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>... <span class="synComment">// 3.の if文の続き</span>
    <span class="synStatement">if</span> ( local_styleObject ) <span class="synIdentifier">{</span>
      <span class="synComment">// ある場合、その styleObject を上書きする（CSS/テキストコンテンツにも適用される）</span>
      <span class="synIdentifier">this</span>.styleObject = JSON.parse(local_styleObject) || <span class="synIdentifier">[]</span>
      <span class="synComment">// color</span>
      <span class="synStatement">document</span>.tools.colorPalette.value = <span class="synIdentifier">this</span>.styleObject<span class="synIdentifier">[</span><span class="synConstant">'color'</span><span class="synIdentifier">]</span>;
      <span class="synStatement">document</span>.tools.color.value = <span class="synIdentifier">this</span>.styleObject<span class="synIdentifier">[</span><span class="synConstant">'color'</span><span class="synIdentifier">]</span>;
      ...
    <span class="synIdentifier">}</span>
...
</pre>


<p><code>getItem()</code> するときに <code>JSON.parse()</code> しないといけないなどちょっとつまづきましたが、特に styleObject の扱いはすごいやりやすかったです。</p>

<p>ただ子コンポーネントの各フォーム部品の値がセットされないので、</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// color</span>
<span class="synStatement">document</span>.tools.colorPalette.value = <span class="synIdentifier">this</span>.styleObject<span class="synIdentifier">[</span><span class="synConstant">'color'</span><span class="synIdentifier">]</span>;
<span class="synStatement">document</span>.tools.color.value = <span class="synIdentifier">this</span>.styleObject<span class="synIdentifier">[</span><span class="synConstant">'color'</span><span class="synIdentifier">]</span>;
</pre>


<p>のようにひとつずつセットしてあげる必要がありました。</p>

<h3>参考リンク</h3>

<ul>
<li><a href="http://luca3104.hatenablog.com/entry/2018/03/05/201636">Vue.jsを再入門する 3 - 週休七日</a></li>
<li><a href="https://qiita.com/shingorow/items/97c265d4cab33cb13b6c">【Vue.js】リストのデータを Local Storage で永続化する方法 - Qiita</a></li>
</ul>


<h3>次やること</h3>

<p>結構形になってきたので次回で最後になりそうです。</p>

<ul>
<li>全体スタイリング</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'フォーム入力バインディングを理解する その9'
description: ''
publishDate: '05/22/2019 10:04:45'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>何年か前に jQuery で作った <a href="https://yuheijotaki.com/demo/type_tester/1.1/">type tester</a> という簡易的なフォント（関連のスタイリング）のテスターツールを Vue.js で作ってみる。 その9</p>

<p>GitHub Pages： <a href="https://yuheijotaki.github.io/type-tester/">https://yuheijotaki.github.io/type-tester/</a><br/>
GitHub リポジトリ：<a href="https://github.com/yuheijotaki/type-tester">https://github.com/yuheijotaki/type-tester</a></p>

<hr />

<h3><code>methods:</code> でアロー関数が使えない</h3>

<p>せっかくVue CLI 使ってwebpackも入ってES6使えるのだからアロー関数とか使おうと思ってたのですが、<code>methods:</code> の function に対しては <code>this</code> の参照が期待通りにならないので使えないとのことでした。。</p>

<p>公式ドキュメント <a href="https://jp.vuejs.org/v2/api/index.html#methods">https://jp.vuejs.org/v2/api/index.html#methods</a></p>

<blockquote><p><strong>メソッド(例 plus: () => this.a++) を定義するためにアロー関数を使用すべきではないこと</strong>に注意してください。</p></blockquote>

<p><strong><code>App.vue</code></strong>（抜粋）</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// アロー関数を使う（ダメな例）</span>
methods: <span class="synIdentifier">{</span>
  toggleCss: () =&gt; <span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.displayCss = !<span class="synIdentifier">this</span>.displayCss;
  <span class="synIdentifier">}</span>,
  ...

<span class="synComment">// アロー関数を使わない（よい例）</span>
methods: <span class="synIdentifier">{</span>
  toggleCss: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.displayCss = !<span class="synIdentifier">this</span>.displayCss;
  <span class="synIdentifier">}</span>,
  ...
</pre>


<h3><code>vue-head</code> を使って meta / OGP 設定をする</h3>

<p>今回はSPAではないので特に難しいことせずに index.html にmeta / OGP 設定は直書きできるのですが、今後のために動的生成とページごと設定を実現したいので <a href="https://www.npmjs.com/package/vue-head">vue-head</a> を使ってみました。</p>

<p>Vue CLIを使っている場合になります。 <br/>
まずインストール</p>

<pre class="code bash" data-lang="bash" data-unlink>$ npm install vue-head --save</pre>


<p><strong><code>/src/main.js</code></strong></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
<span class="synStatement">import</span> VueHead from <span class="synConstant">'vue-head'</span>

Vue.use(VueHead)
...
</pre>


<p><strong><code>/src/App.vue</code></strong></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
  data() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      metaTitle: <span class="synConstant">'site title'</span>
    <span class="synIdentifier">}</span>,
  <span class="synIdentifier">}</span>,
  head: <span class="synIdentifier">{</span>
    title: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span>
        inner: <span class="synIdentifier">this</span>.metaTitle
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>,
    meta: <span class="synIdentifier">[</span>
      <span class="synIdentifier">{</span> name: <span class="synConstant">'description'</span>, content: <span class="synConstant">'My description'</span>, id: <span class="synConstant">'desc'</span> <span class="synIdentifier">}</span>
    <span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>
...
</pre>


<p>のようにdataから動的生成する場合は <code>title: function () { return …</code> のように指定する。</p>

<p>JSで書き換えが行われるので静的HTMLでなく検証ツールでの確認が必要。</p>

<p>他の設定項目は <a href="https://github.com/ktquez/vue-head">Github</a> のドキュメントが詳しいです。<br/>
OGP / Twitter / Schema.org の設定、Google Analytics もできるみたい。 <a href="https://qiita.com/buchiya4th/items/dd8f16dfcd296bd247bb">https://qiita.com/buchiya4th/items/dd8f16dfcd296bd247bb</a><br/>
案件で使ったらこれだけで記事書きたいなと思います。</p>

<h3>次やること</h3>

<ul>
<li>localStorage 使ってリロード対策</li>
<li>全体スタイリング</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'フォーム入力バインディングを理解する その8'
description: ''
publishDate: '05/21/2019 22:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>何年か前に jQuery で作った <a href="https://yuheijotaki.com/demo/type_tester/1.1/">type tester</a> という簡易的なフォント（関連のスタイリング）のテスターツールを Vue.js で作ってみる。 その8</p>

<p>GitHub Pages： <a href="https://yuheijotaki.github.io/type-tester/">https://yuheijotaki.github.io/type-tester/</a><br/>
GitHub リポジトリ：<a href="https://github.com/yuheijotaki/type-tester">https://github.com/yuheijotaki/type-tester</a></p>

<hr />

<h3>ツール、CSS のトグル表示</h3>

<p><code>&lt;template v-if=""&gt;</code> を ツールで使った場合、<code>$emit</code> してきた値がリセットされてしまうので CSS で表示/非表示にしました。<br/>
CSSの出力エリアはふつうに <code>v-if</code> を使いました。</p>

<p><strong><code>App.vue</code></strong>（抜粋）</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;tools&quot;</span>&gt;
    ...
  &lt;/div&gt;
  &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;container&quot;</span>&gt;
    &lt;template v-<span class="synStatement">if</span>=<span class="synConstant">&quot;displayCss&quot;</span>&gt;
      &lt;pre&gt;CSS: <span class="synIdentifier">{{</span>styleObject<span class="synIdentifier">}}</span>&lt;/pre&gt;
    &lt;/template&gt;
  &lt;/div&gt;
  &lt;ul <span class="synStatement">class</span>=<span class="synConstant">&quot;toggle&quot;</span>&gt;
    &lt;li <span class="synStatement">class</span>=<span class="synConstant">&quot;toggle__button&quot;</span>&gt;
      &lt;a <span class="synStatement">class</span>=<span class="synConstant">&quot;toggle__anchor&quot;</span> href=<span class="synConstant">&quot;javascript:void(0);&quot;</span> v-on:click=<span class="synConstant">&quot;toggleTools&quot;</span>&gt;Tools toggle button&lt;/a&gt;
    &lt;/li&gt;
    &lt;li <span class="synStatement">class</span>=<span class="synConstant">&quot;toggle__button&quot;</span>&gt;
      &lt;a <span class="synStatement">class</span>=<span class="synConstant">&quot;toggle__anchor&quot;</span> href=<span class="synConstant">&quot;javascript:void(0);&quot;</span> v-on:click=<span class="synConstant">&quot;toggleCss&quot;</span>&gt;CSS toggle button&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/template&gt;

...
  data() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      ...
      displayCss: <span class="synConstant">false</span>
      ...
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    <span class="synComment">// CSSエリアのトグル表示</span>
    toggleCss: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synComment">// `.css` クラスのトグル</span>
      <span class="synIdentifier">this</span>.displayCss = !<span class="synIdentifier">this</span>.displayCss;
    <span class="synIdentifier">}</span>,
    <span class="synComment">// ツールのトグル表示</span>
    toggleTools: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synComment">// `.tools` クラスのトグル</span>
      <span class="synStatement">const</span> tools = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.tools'</span>);
      tools.classList.toggle(<span class="synConstant">'js-tools-active'</span>);
      <span class="synComment">// `.container` クラスのトグル</span>
      <span class="synStatement">const</span> container = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.container'</span>);
      container.classList.toggle(<span class="synConstant">'js-tools-active'</span>);
    <span class="synIdentifier">}</span>,
...
</pre>


<h3>styleObject を出力用に整形</h3>

<p>Vue で格納した styleObject を実際のCSS指定のテキスト形式に変換する。<br/>
<code>computed</code> 処理内に下記の感じで実装 <code>font-familly</code> だけ <code>""</code> が必要なので分岐する</p>

<p><strong><code>App.vue</code></strong>（抜粋）</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
computed: <span class="synIdentifier">{</span>
  <span class="synComment">// styleObject を出力用に整形</span>
  styleObjectFormatted: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
    <span class="synStatement">const</span> styleObject = <span class="synIdentifier">this</span>.styleObject; <span class="synComment">// styleObject を取得</span>
    <span class="synStatement">const</span> styleObjectArray = <span class="synIdentifier">[]</span>; <span class="synComment">// テキスト用の配列を用意</span>
    <span class="synComment">// styleObject をループして新しい配列に key と value を格納</span>
    <span class="synType">Object</span>.keys(styleObject).forEach(<span class="synIdentifier">function</span> (key) <span class="synIdentifier">{</span>
      <span class="synStatement">if</span> ( key === <span class="synConstant">'font-family'</span> ) <span class="synIdentifier">{</span>
        <span class="synComment">// key が 'font-family' の場合は値に '&quot;&quot;' をつける</span>
        styleObjectArray.push(`$<span class="synIdentifier">{</span>key<span class="synIdentifier">}</span>: <span class="synConstant">&quot;${styleObject[key]}&quot;</span>;`);
      <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
        styleObjectArray.push(`$<span class="synIdentifier">{</span>key<span class="synIdentifier">}</span>: $<span class="synIdentifier">{</span>styleObject<span class="synIdentifier">[</span>key<span class="synIdentifier">]}</span>;`);
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>);
    <span class="synStatement">const</span> styleObjectText = styleObjectArray.join(<span class="synSpecial">'\n'</span>); <span class="synComment">// 1行ずつ改行処理</span>
    <span class="synStatement">return</span> styleObjectText;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
...
</pre>


<p>これで <code>&lt;pre&gt;{{styleObjectFormatted}}&lt;/pre&gt;</code> とすれば</p>

<pre class="code lang-css" data-lang="css" data-unlink><span class="synError">font</span>-family: <span class="synConstant">&quot;Helvetica , Hiragino Kaku Gothic ProN&quot;</span>;
color: #000000;
background: <span class="synIdentifier">#ffffff</span>;
<span class="synError">font</span>-size: 16px;
<span class="synType">line-height</span>: 1.7;
<span class="synType">letter-spacing</span>: 0em;
<span class="synError">font</span>-weight: normal;
<span class="synType">text-align</span>: left;
padding-top: 20px;
padding-bottom: 20px;
padding-left: 20px;
padding-right: 20px;
<span class="synError">font</span>-feature-settings: normal;
-webkit-<span class="synError">font</span>-smoothing: subpixel-antialiased;
</pre>


<p>がreturnされる</p>

<h3>次やること</h3>

<ul>
<li>meta / OGP 設定</li>
<li>localStorage 使ってリロード対策</li>
<li>ラベルなど文字ゆれある所を直す</li>
<li>ファイル/コンポーネント名を直す</li>
<li>リファクタリング（アロー関数使える所使う）</li>
<li>全体スタイリング</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'フォーム入力バインディングを理解する その7'
description: ''
publishDate: '05/20/2019 09:56:47'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>何年か前に jQuery で作った <a href="https://yuheijotaki.com/demo/type_tester/1.1/">type tester</a> という簡易的なフォント（関連のスタイリング）のテスターツールを Vue.js で作ってみる。 その7</p>

<p>GitHub Pages： <a href="https://yuheijotaki.github.io/type-tester/">https://yuheijotaki.github.io/type-tester/</a><br/>
GitHub リポジトリ：<a href="https://github.com/yuheijotaki/type-tester">https://github.com/yuheijotaki/type-tester</a></p>

<hr />

<h3>和文/欧文テキスト/自由入力欄を選択式でテキスト表示をする</h3>

<ul>
<li>和文/欧文の場合はデフォルトテキストをそれぞれ用意</li>
<li>自由入力欄の場合はテキストエリアを空にしておいて入力されたテキストをプレビューできるようにする</li>
</ul>


<p>Vue でラジオボタンの値だけ取得してJavaScriptで <code>&lt;textarea&gt;</code> の要素を入れ替える形にしました。</p>

<p><strong><code>App.vue</code></strong>（抜粋）</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
changeTextRadio: <span class="synIdentifier">function</span> (textType) <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> inputTextArea = <span class="synStatement">document</span>.tools.inputTextArea; <span class="synComment">// ツールのテキストエリアオブジェクトを取得</span>
  <span class="synStatement">const</span> textTypeValue = textType;                     <span class="synComment">// 選択されたラジオボタンのテキストタイプを取得</span>
  <span class="synStatement">if</span> ( textTypeValue === <span class="synConstant">'textJa'</span> ) <span class="synIdentifier">{</span>
    inputTextArea.value = defaultTextJa; <span class="synComment">// ツールのテキストエリアの値書き換え</span>
    <span class="synIdentifier">this</span>.message = defaultTextJa;        <span class="synComment">// プレビューエリアのテキストを書き換え</span>
  <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synStatement">if</span> ( textTypeValue === <span class="synConstant">'textEn'</span> ) <span class="synIdentifier">{</span>
    inputTextArea.value = defaultTextEn;
    <span class="synIdentifier">this</span>.message = defaultTextEn;
  <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synStatement">if</span> ( textTypeValue === <span class="synConstant">'textFree'</span> ) <span class="synIdentifier">{</span>
    inputTextArea.value = ``;
    <span class="synIdentifier">this</span>.message = ``;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>,
...
</pre>


<h3><code>font-feature-settings</code> の値</h3>

<p>CSS的な話ですが、<code>font-feature-settings</code> の値で、</p>

<ul>
<li>既定設定の <code>normal</code> や <code>inherit</code> <code>initial</code> <code>unset</code> は  <strong><code>""</code> がなし</strong></li>
<li>Open Type の特性タグを使用する <code>"palt"</code> <code>"smcp"</code> <code>"swsh"</code> は <strong><code>""</code> があり</strong></li>
</ul>


<p>で値変更したときに下記のように変更しないとダメでした。<br/>
<strong><code>App.vue</code></strong>（抜粋）</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
changeFontFeatureSettings: <span class="synIdentifier">function</span> (feature) <span class="synIdentifier">{</span>
  <span class="synStatement">if</span> ( feature === <span class="synConstant">'normal'</span> ) <span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.styleObject<span class="synIdentifier">[</span><span class="synConstant">'font-feature-settings'</span><span class="synIdentifier">]</span> = `$<span class="synIdentifier">{</span>feature<span class="synIdentifier">}</span>`;
  <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.styleObject<span class="synIdentifier">[</span><span class="synConstant">'font-feature-settings'</span><span class="synIdentifier">]</span> = `<span class="synConstant">&quot;${feature}&quot;</span>`;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>,
...
</pre>


<p><code>text-align:</code> の初期値は <code>left</code>と思っていたのですが、<code>start</code> だったり細かい発見がありました。</p>

<h3>次やること</h3>

<ul>
<li>ツール一式を非表示にする機能</li>
<li>CSSの出力機能</li>
<li>ラベルなど文字ゆれある所を直す</li>
<li>ファイル/コンポーネント名を直す</li>
<li>全体スタイリング</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'フォーム入力バインディングを理解する その6'
description: ''
publishDate: '05/17/2019 10:26:31'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>何年か前に jQuery で作った <a href="https://yuheijotaki.com/demo/type_tester/1.1/">type tester</a> という簡易的なフォント（関連のスタイリング）のテスターツールを Vue.js で作ってみる。 その6</p>

<p>GitHub Pages： <a href="https://yuheijotaki.github.io/type-tester/">https://yuheijotaki.github.io/type-tester/</a><br/>
GitHub リポジトリ：<a href="https://github.com/yuheijotaki/type-tester">https://github.com/yuheijotaki/type-tester</a></p>

<hr />

<h3><code>&lt;input type="color"&gt;</code> のバインディング</h3>

<p>これも <code>v-model=""</code> でバインディングが可能</p>

<p><strong><code>input-color.vue</code></strong>（一部簡略化）</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;div&gt;
    Color: &lt;input
      type=<span class="synConstant">&quot;color&quot;</span>
      v-model=<span class="synConstant">&quot;color&quot;</span>
      @input=<span class="synConstant">&quot;updateValue&quot;</span>
      @focus=<span class="synConstant">&quot;$emit('focus', $event)&quot;</span>
      @blur=<span class="synConstant">&quot;$emit('blur', $event)&quot;</span>
    &gt;
    &lt;input
      type=<span class="synConstant">&quot;text&quot;</span>
      v-model=<span class="synConstant">&quot;color&quot;</span>
      @input=<span class="synConstant">&quot;updateValue&quot;</span>
      @focus=<span class="synConstant">&quot;$emit('focus', $event)&quot;</span>
      @blur=<span class="synConstant">&quot;$emit('blur', $event)&quot;</span>
    &gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">'inputColor'</span>,
  data() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      color: <span class="synConstant">'#000000'</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    updateValue(e) <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.$emit(<span class="synConstant">'input'</span>, e.target.value)
      <span class="synIdentifier">this</span>.$emit(<span class="synConstant">'change'</span>, e.target.value)
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<h4><strong>すこし課題</strong></h4>

<p><code>&lt;input type="color"&gt;</code>と <code>&lt;input type="text"&gt;</code> を双方向にバインディングする場合は <code>#000</code> など短縮カラーコードではなく <code>#000000</code> など6桁で入力されていないと color側が バインディング（同期）がされない。HTML側の仕様といえば仕様なのですが、</p>

<ul>
<li>短縮カラーコードが入力された場合は6桁に変換</li>
<li>カラーコード以外が入力された場合は、元のセットされていた値を復元</li>
</ul>


<p>を余裕あったら実装したい</p>

<h3>次やること</h3>

<ul>
<li>和文テキストのデフォルト、欧文テキストのデフォルトをそれぞれ用意、自由入力欄も残して選択式でテキスト表示をする</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'フォーム入力バインディングを理解する その5'
description: ''
publishDate: '05/17/2019 09:38:45'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>何年か前に jQuery で作った <a href="https://yuheijotaki.com/demo/type_tester/1.1/">type tester</a> という簡易的なフォント（関連のスタイリング）のテスターツールを Vue.js で作ってみる。 その5</p>

<p>GitHub Pages： <a href="https://yuheijotaki.github.io/type-tester/">https://yuheijotaki.github.io/type-tester/</a><br/>
GitHub リポジトリ：<a href="https://github.com/yuheijotaki/type-tester">https://github.com/yuheijotaki/type-tester</a></p>

<hr />

<h3><code>font-family:</code> のバインディング</h3>

<p>考え方は下記のように <code>欧文指定</code> + <code>和文指定</code> になるのでちょっと一工夫必要でした。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190517093752.png" alt="f:id:jotaki:20190517093752p:plain" title="f:id:jotaki:20190517093752p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>日本語ラジオボタン／英語ラジオボタン のコンポーネント</p>

<p><strong><code>radio-fontFamilyJa.vue</code></strong>（一部簡略化）</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    fontFamilyJa:
      <span class="synIdentifier">&lt;</span><span class="synStatement">input</span>
<span class="synIdentifier">        </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span>
<span class="synIdentifier">        </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;fontFamilyJa&quot;</span>
<span class="synIdentifier">        </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;fontFamilyJa01&quot;</span>
<span class="synIdentifier">        </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;Hiragino Kaku Gothic ProN&quot;</span>
<span class="synIdentifier">        v-model=</span><span class="synConstant">&quot;fontFamilyJa&quot;</span>
<span class="synIdentifier">        @input=</span><span class="synConstant">&quot;updateValue&quot;</span>
<span class="synIdentifier">      &gt;</span>
...
</pre>


<p><strong><code>radio-fontFamilyEn.vue</code></strong>（一部簡略化）</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    fontFamilyEn:
      <span class="synIdentifier">&lt;</span><span class="synStatement">input</span>
<span class="synIdentifier">        </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span>
<span class="synIdentifier">        </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;fontFamilyEn&quot;</span>
<span class="synIdentifier">        </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;fontFamilyEn01&quot;</span>
<span class="synIdentifier">        </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;Helvetica&quot;</span>
<span class="synIdentifier">        v-model=</span><span class="synConstant">&quot;fontFamilyEn&quot;</span>
<span class="synIdentifier">        @input=</span><span class="synConstant">&quot;updateValue&quot;</span>
<span class="synIdentifier">      &gt;</span>
...
</pre>


<p>親側で選択したフォントを取得してもう片方のラジオ選択状態も取得、その後に <code>欧文</code> + <code>和文</code> に並べてフォントファミリー指定する</p>

<p><strong><code>App.vue</code></strong>（一部簡略化）</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
  methods: <span class="synIdentifier">{</span>
    changeFontFamily: <span class="synIdentifier">function</span> (family) <span class="synIdentifier">{</span>
    <span class="synComment">// フォントファミリーが変更された際の日本語/英語の処理分岐</span>
    <span class="synStatement">if</span> ( family.familyJa ) <span class="synIdentifier">{</span>
      <span class="synComment">// 日本語が選択された場合は英語のチェック状態を取得</span>
      <span class="synIdentifier">var</span> familySelectedJa = family.familyJa;
      <span class="synIdentifier">var</span> familySelectedEn = <span class="synIdentifier">this</span>.getOtherSideFont(<span class="synConstant">'fontFamilyEn'</span>);
      <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synStatement">if</span> ( family.familyEn ) <span class="synIdentifier">{</span>
      <span class="synComment">// 英語が選択された場合は日本語のチェック状態を取得</span>
      <span class="synIdentifier">var</span> familySelectedJa = <span class="synIdentifier">this</span>.getOtherSideFont(<span class="synConstant">'fontFamilyJa'</span>);
      <span class="synIdentifier">var</span> familySelectedEn = family.familyEn;
    <span class="synIdentifier">}</span>
    <span class="synComment">// CSSの値用に 欧文指定 -&gt; 和文指定 の順に並べる</span>
    <span class="synStatement">const</span> familyJoin = `$<span class="synIdentifier">{</span>familySelectedEn<span class="synIdentifier">}</span> , $<span class="synIdentifier">{</span>familySelectedJa<span class="synIdentifier">}</span>`;
    <span class="synIdentifier">this</span>.styleObject<span class="synIdentifier">[</span><span class="synConstant">'font-family'</span><span class="synIdentifier">]</span> = familyJoin;
  <span class="synIdentifier">}</span>,
...
</pre>


<h3>ラジオボタンの選択状態取</h3>

<p>これはJSですが、↑ の <code>getOtherSideFont()</code> は</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>getOtherSideFont: <span class="synIdentifier">function</span> (name) <span class="synIdentifier">{</span>
  <span class="synComment">// ラジオボタンオブジェクトを取得する</span>
  <span class="synComment">// ref: https://javascript.programmer-reference.com/js-radio-value/</span>
  <span class="synIdentifier">var</span> radios = <span class="synStatement">document</span>.getElementsByName(name);
  <span class="synComment">// 取得したラジオボタンオブジェクトから選択されたものを探し出す</span>
  <span class="synIdentifier">var</span> result;
  <span class="synStatement">for</span>(<span class="synIdentifier">var</span> i=0; i&lt;radios.length; i++)<span class="synIdentifier">{</span>
    <span class="synStatement">if</span> (radios<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>.checked) <span class="synIdentifier">{</span>
      <span class="synComment">// 選択されたラジオボタンのvalue値を取得する</span>
      result = radios<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>.value;
      <span class="synStatement">break</span>;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
  <span class="synStatement">return</span> result;
<span class="synIdentifier">}</span>,
</pre>


<p>な感じで下記コピーしました。<br/>
<a href="https://javascript.programmer-reference.com/js-radio-value/">[JavaScript] ラジオボタンのvalue値を取得する – コピペで使える JavaScript逆引きリファレンス</a></p>

<p>やっぱりJSが弱いなあと思います。</p>

<h3>次やること</h3>

<ul>
<li><code>color:</code> や <code>background-color:</code> は <code>&lt;input type="color"&gt;</code> で実装する</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'フォーム入力バインディングを理解する その4'
description: ''
publishDate: '05/17/2019 08:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>何年か前に jQuery で作った <a href="https://yuheijotaki.com/demo/type_tester/1.1/">type tester</a> という簡易的なフォント（関連のスタイリング）のテスターツールを Vue.js で作ってみる。 その4</p>

<p>GitHub Pages： <a href="https://yuheijotaki.github.io/type-tester/">https://yuheijotaki.github.io/type-tester/</a><br/>
GitHub リポジトリ：<a href="https://github.com/yuheijotaki/type-tester">https://github.com/yuheijotaki/type-tester</a></p>

<hr />

<h3><code>input type="radio"</code> のバインド</h3>

<p>ラジオボタンの value をスタイルオブジェクトにバインドするときは下記のようになる<br/>
<a href="https://jp.vuejs.org/v2/guide/forms.html#%E3%83%A9%E3%82%B8%E3%82%AA">https://jp.vuejs.org/v2/guide/forms.html#%E3%83%A9%E3%82%B8%E3%82%AA</a></p>

<p><details><summary><strong><code>App.vue</code></strong>（一部簡略化）</summary><div></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span>radioFontWeight<span class="synIdentifier"> @change=</span><span class="synConstant">&quot;changeFontWeight&quot;</span><span class="synIdentifier">&gt;&lt;/</span>radioFontWeight<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-bind:</span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;styleObject&quot;</span><span class="synIdentifier">&gt;</span>{{message}}<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synStatement">import</span><span class="synSpecial"> radioFontWeight from </span><span class="synConstant">'./components/radio-fontWeight'</span>

<span class="synStatement">export</span><span class="synSpecial"> </span><span class="synStatement">default</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">  name: </span><span class="synConstant">'App'</span><span class="synSpecial">,</span>
<span class="synSpecial">  components: </span><span class="synIdentifier">{</span>
<span class="synSpecial">    radioFontWeight</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">  data</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">    </span><span class="synStatement">return</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      message: </span><span class="synConstant">'私はその人を常に先生と呼んでいた。だからここでもただ先生と書くだけで本名は打ち明けない。これは世間を憚かる遠慮というよりも、その方が私にとって自然だからである。私はその人の記憶を呼び起すごとに、すぐ「先生」といいたくなる。筆を執っても心持は同じ事である。よそよそしい頭文字などはとても使う気にならない。'</span><span class="synSpecial">,</span>
<span class="synSpecial">      styleObject: </span><span class="synIdentifier">{</span>
<span class="synSpecial">        color: </span><span class="synConstant">'#111'</span><span class="synSpecial">,</span>
<span class="synSpecial">        fontSize: </span><span class="synConstant">'16px'</span><span class="synSpecial">,</span>
<span class="synSpecial">        lineHeight: </span><span class="synConstant">'1.7'</span><span class="synSpecial">,</span>
<span class="synSpecial">        letterSpacing: </span><span class="synConstant">'0em'</span><span class="synSpecial">,</span>
<span class="synSpecial">        fontWeight: </span><span class="synConstant">'normal'</span>
<span class="synSpecial">      </span><span class="synIdentifier">}</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">  methods: </span><span class="synIdentifier">{</span>
<span class="synSpecial">    changeFontWeight: </span><span class="synIdentifier">function</span><span class="synSpecial"> </span>(<span class="synSpecial">weight</span>)<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      </span><span class="synIdentifier">this</span><span class="synSpecial">.styleObject.fontWeight = weight;</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<p></div></details></p>

<p><details><summary><strong><code>radio-fontWeight.vue</code></strong>（一部簡略化）</summary><div></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    fontWeight:
      <span class="synIdentifier">&lt;</span><span class="synStatement">input</span>
<span class="synIdentifier">        </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span>
<span class="synIdentifier">        </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;fontWeight01&quot;</span>
<span class="synIdentifier">        </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;normal&quot;</span>
<span class="synIdentifier">        v-model=</span><span class="synConstant">&quot;fontWeight&quot;</span>
<span class="synIdentifier">        @input=</span><span class="synConstant">&quot;updateValue&quot;</span>
<span class="synIdentifier">      &gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;fontWeight01&quot;</span><span class="synIdentifier">&gt;</span>Normal<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">input</span>
<span class="synIdentifier">        </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span>
<span class="synIdentifier">        </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;fontWeight02&quot;</span>
<span class="synIdentifier">        </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;bold&quot;</span>
<span class="synIdentifier">        v-model=</span><span class="synConstant">&quot;fontWeight&quot;</span>
<span class="synIdentifier">        @input=</span><span class="synConstant">&quot;updateValue&quot;</span>
<span class="synIdentifier">      &gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;fontWeight02&quot;</span><span class="synIdentifier">&gt;</span>Bold<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synStatement">export</span><span class="synSpecial"> </span><span class="synStatement">default</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">  name: </span><span class="synConstant">'radioFontWeight'</span><span class="synSpecial">,</span>
<span class="synSpecial">  data</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">    </span><span class="synStatement">return</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      fontWeight: </span><span class="synConstant">'normal'</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">  methods: </span><span class="synIdentifier">{</span>
<span class="synSpecial">    updateValue</span>(<span class="synSpecial">e</span>)<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      </span><span class="synIdentifier">this</span><span class="synSpecial">.$emit</span>(<span class="synConstant">'input'</span><span class="synSpecial">, e.target.value</span>)
<span class="synSpecial">      </span><span class="synIdentifier">this</span><span class="synSpecial">.$emit</span>(<span class="synConstant">'change'</span><span class="synSpecial">, e.target.value</span>)
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<p></div></details></p>

<h3>スタイルオブジェクトのプロパティに <code>-webkit-</code> などのプレフィクスが付けられない</h3>

<p>キャメルケースだとハイフンの入れ方どうするかって思ったがプレフィクスは自動で挿入さるるので問題なさそう
<code>-webkit-font-smoothing:</code> の場合</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>styleObject: <span class="synIdentifier">{</span>
  fontSmoothing: <span class="synConstant">'subpixel-antialiased'</span>
<span class="synIdentifier">}</span>
</pre>


<p>参考：<a href="https://qiita.com/atoris/items/70e9289c0bb3e2a95b3c#%E8%87%AA%E5%8B%95%E3%83%97%E3%83%AA%E3%83%95%E3%82%A3%E3%83%83%E3%82%AF%E3%82%B9">初心者がVue.jsの公式ガイドを勉強するメモ　クラスとスタイル編 - Qiita</a></p>

<h3>次やること</h3>

<ul>
<li><code>font-familly:</code> が 欧文/和文、ゴシック/明朝 で少し複雑そうだがやってみる</li>
<li><code>color:</code> や <code>background-color:</code> は <code>&lt;input type="color"&gt;</code> で実装する</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'フォーム入力バインディングを理解する その3'
description: ''
publishDate: '05/17/2019 07:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>何年か前に jQuery で作った <a href="https://yuheijotaki.com/demo/type_tester/1.1/">type tester</a> という簡易的なフォント（関連のスタイリング）のテスターツールを Vue.js で作ってみる。 その3</p>

<p>GitHub Pages： <a href="https://yuheijotaki.github.io/type-tester/">https://yuheijotaki.github.io/type-tester/</a><br/>
GitHub リポジトリ：<a href="https://github.com/yuheijotaki/type-tester">https://github.com/yuheijotaki/type-tester</a></p>

<hr />

<h3><code>input type="range"</code> と <code>input type="number"</code> を双方向でバインドして <code>$emit</code> する</h3>

<p>両方に <code>v-model=""</code> 指定と、 <code>min=""</code>  / <code>max=""</code> に同じ値を指定すればOKでした。</p>

<p><strong><code>input-fontSize.vue</code></strong>（一部簡略化）</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    FontSize: <span class="synIdentifier">&lt;</span><span class="synStatement">input</span>
<span class="synIdentifier">      </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;range&quot;</span>
<span class="synIdentifier">      min=</span><span class="synConstant">&quot;10&quot;</span>
<span class="synIdentifier">      max=</span><span class="synConstant">&quot;200&quot;</span>
<span class="synIdentifier">      v-model=</span><span class="synConstant">&quot;fontSize&quot;</span>
<span class="synIdentifier">      @input=</span><span class="synConstant">&quot;updateValue&quot;</span>
<span class="synIdentifier">      @focus=</span><span class="synConstant">&quot;$emit('focus', $event)&quot;</span>
<span class="synIdentifier">      @blur=</span><span class="synConstant">&quot;$emit('blur', $event)&quot;</span>
<span class="synIdentifier">    &gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">input</span>
<span class="synIdentifier">      </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;number&quot;</span>
<span class="synIdentifier">      min=</span><span class="synConstant">&quot;10&quot;</span>
<span class="synIdentifier">      max=</span><span class="synConstant">&quot;200&quot;</span>
<span class="synIdentifier">      v-model=</span><span class="synConstant">&quot;fontSize&quot;</span>
<span class="synIdentifier">      @input=</span><span class="synConstant">&quot;updateValue&quot;</span>
<span class="synIdentifier">      @focus=</span><span class="synConstant">&quot;$emit('focus', $event)&quot;</span>
<span class="synIdentifier">      @blur=</span><span class="synConstant">&quot;$emit('blur', $event)&quot;</span>
<span class="synIdentifier">    &gt;</span> px
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synStatement">export</span><span class="synSpecial"> </span><span class="synStatement">default</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">  name: </span><span class="synConstant">'inputFontSize'</span><span class="synSpecial">,</span>
<span class="synSpecial">  data</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">    </span><span class="synStatement">return</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      fontSize: </span>16<span class="synSpecial">,</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">  methods: </span><span class="synIdentifier">{</span>
<span class="synSpecial">    updateValue</span>(<span class="synSpecial">e</span>)<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      </span><span class="synIdentifier">this</span><span class="synSpecial">.$emit</span>(<span class="synConstant">'input'</span><span class="synSpecial">, e.target.value</span>)
<span class="synSpecial">      </span><span class="synIdentifier">this</span><span class="synSpecial">.$emit</span>(<span class="synConstant">'change'</span><span class="synSpecial">, e.target.value</span>)
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<h3>次やること</h3>

<p><code>font-familly:</code>, <code>font-weight:</code> あたりのラジオボタンコンポーネントを実装する</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'フォーム入力バインディングを理解する その2'
description: ''
publishDate: '05/17/2019 06:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>何年か前に jQuery で作った <a href="https://yuheijotaki.com/demo/type_tester/1.1/">type tester</a> という簡易的なフォント（関連のスタイリング）のテスターツールを Vue.js で作ってみる。 その2</p>

<p>GitHub Pages： <a href="https://yuheijotaki.github.io/type-tester/">https://yuheijotaki.github.io/type-tester/</a><br/>
GitHub リポジトリ：<a href="https://github.com/yuheijotaki/type-tester">https://github.com/yuheijotaki/type-tester</a></p>

<hr />

<h3>フォーム要素をバインドしてスタイル変更</h3>

<p><details><summary><strong><code>App.vue</code></strong>（一部簡略化）</summary><div></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span>inputFontSize<span class="synIdentifier"> @change=</span><span class="synConstant">&quot;changeFontSize&quot;</span><span class="synIdentifier">&gt;&lt;/</span>inputFontSize<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-bind:</span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;styleObject&quot;</span><span class="synIdentifier">&gt;</span>ここにテキストが入ります。<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synStatement">import</span><span class="synSpecial"> inputFontSize from </span><span class="synConstant">'./components/input-fontSize'</span>

<span class="synStatement">export</span><span class="synSpecial"> </span><span class="synStatement">default</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">  name: </span><span class="synConstant">'App'</span><span class="synSpecial">,</span>
<span class="synSpecial">  components: </span><span class="synIdentifier">{</span>
<span class="synSpecial">    inputFontSize</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">  data</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">    </span><span class="synStatement">return</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      styleObject: </span><span class="synIdentifier">{</span>
<span class="synSpecial">        color: </span><span class="synConstant">'red'</span><span class="synSpecial">,</span>
<span class="synSpecial">        fontSize: </span><span class="synConstant">'16px'</span>
<span class="synSpecial">      </span><span class="synIdentifier">}</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">  methods: </span><span class="synIdentifier">{</span>
<span class="synSpecial">    changeFontSize: </span><span class="synIdentifier">function</span><span class="synSpecial"> </span>(<span class="synSpecial">size</span>)<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      </span><span class="synIdentifier">this</span><span class="synSpecial">.styleObject.fontSize = `$</span><span class="synIdentifier">{</span><span class="synSpecial">size</span><span class="synIdentifier">}</span><span class="synSpecial">px`;</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<p></div></details></p>

<p><details><summary><strong><code>input-fontSize.vue</code></strong>（一部簡略化）</summary><div></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    FontSize: <span class="synIdentifier">&lt;</span><span class="synStatement">input</span>
<span class="synIdentifier">      </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;number&quot;</span>
<span class="synIdentifier">      min=</span><span class="synConstant">&quot;10&quot;</span>
<span class="synIdentifier">      :</span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;fontSize&quot;</span>
<span class="synIdentifier">      @input=</span><span class="synConstant">&quot;updateValue&quot;</span>
<span class="synIdentifier">      @focus=</span><span class="synConstant">&quot;$emit('focus', $event)&quot;</span>
<span class="synIdentifier">      @blur=</span><span class="synConstant">&quot;$emit('blur', $event)&quot;</span>
<span class="synIdentifier">    &gt;</span> px
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synStatement">export</span><span class="synSpecial"> </span><span class="synStatement">default</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">  name: </span><span class="synConstant">'inputFontSize'</span><span class="synSpecial">,</span>
<span class="synSpecial">  data</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">    </span><span class="synStatement">return</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      fontSize: </span>16<span class="synSpecial">,</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">  methods: </span><span class="synIdentifier">{</span>
<span class="synSpecial">    updateValue</span>(<span class="synSpecial">e</span>)<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      </span><span class="synIdentifier">this</span><span class="synSpecial">.$emit</span>(<span class="synConstant">'input'</span><span class="synSpecial">, e.target.value</span>)
<span class="synSpecial">      </span><span class="synIdentifier">this</span><span class="synSpecial">.$emit</span>(<span class="synConstant">'change'</span><span class="synSpecial">, e.target.value</span>)
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<p></div></details></p>

<h3>style オブジェクト を使ってインラインスタイル</h3>

<p><a href="https://jp.vuejs.org/v2/guide/class-and-style.html#%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%96%87-1">公式ドキュメント</a> の通りですが、</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>data() <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    styleObject: <span class="synIdentifier">{</span>
      color: <span class="synConstant">'red'</span>,
      fontSize: <span class="synConstant">'16px'</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>と定義して</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-bind:</span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;styleObject&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>のようにバインドできる。<br/>
親側の変更監視のメソッドは</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>methods: <span class="synIdentifier">{</span>
  changeFontSize: <span class="synIdentifier">function</span> (size) <span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.styleObject.fontSize = `$<span class="synIdentifier">{</span>size<span class="synIdentifier">}</span>px`;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>とする。</p>

<h3>次やること</h3>

<p><code>&lt;input type="text"&gt;</code> と <code>&lt;input type="range"&gt;</code> を組み合わせて双方向のバインディングを行う<br/>
参考: <a href="https://codepen.io/Angelpsy/pen/mApRqJ">vuejs + input range</a></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'フォーム入力バインディングを理解する その1'
description: ''
publishDate: '05/17/2019 05:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>何年か前に jQuery で作った <a href="https://yuheijotaki.com/demo/type_tester/1.1/">type tester</a> という簡易的なフォント（関連のスタイリング）のテスターツールを Vue.js で作ってみる。 その1</p>

<p>jQuery ファイルは <a href="https://yuheijotaki.com/demo/type_tester/1.1/common/common.js">これ</a> なのですが、冗長なので同機能でも Vue.js でうまく書けたらいいなと思います。</p>

<p>GitHub Pages： <a href="https://yuheijotaki.github.io/type-tester/">https://yuheijotaki.github.io/type-tester/</a><br/>
GitHub リポジトリ：<a href="https://github.com/yuheijotaki/type-tester">https://github.com/yuheijotaki/type-tester</a></p>

<hr />

<h3>コンポーネント間のデータ受け渡し</h3>

<p>前に 子コンポーネント → 親コンポーネントの <code>$emit</code> を使ったクリックイベントはしたことがあったけど フォーム入力はやったことなくちょっとつまづきました。</p>

<p>今回も Vue CLI を使っています。</p>

<p><details><summary><strong><code>App.vue</code></strong>（一部簡略化）</summary><div></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span>inputText<span class="synIdentifier"> @change=</span><span class="synConstant">&quot;changeText&quot;</span><span class="synIdentifier">&gt;&lt;/</span>inputText<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>{{message}}<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synStatement">import</span><span class="synSpecial"> inputText from </span><span class="synConstant">'./components/input-text'</span>

<span class="synStatement">export</span><span class="synSpecial"> </span><span class="synStatement">default</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">  name: </span><span class="synConstant">'App'</span><span class="synSpecial">,</span>
<span class="synSpecial">  components: </span><span class="synIdentifier">{</span>
<span class="synSpecial">    inputText</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">  data</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">    </span><span class="synStatement">return</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      message: </span><span class="synConstant">&quot;デフォルトのメッセージ&quot;</span><span class="synSpecial">,</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">  methods: </span><span class="synIdentifier">{</span>
<span class="synSpecial">    changeText: </span><span class="synIdentifier">function</span><span class="synSpecial"> </span>(<span class="synSpecial">message</span>)<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      </span><span class="synIdentifier">this</span><span class="synSpecial">.message = message;</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<p></div></details></p>

<p><details><summary><strong><code>/components/input-text.vue</code></strong></summary><div></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">textarea</span>
<span class="synIdentifier">      :</span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;message&quot;</span>
<span class="synIdentifier">      @input=</span><span class="synConstant">&quot;updateValue&quot;</span>
<span class="synIdentifier">      @focus=</span><span class="synConstant">&quot;$emit('focus', $event)&quot;</span>
<span class="synIdentifier">      @blur=</span><span class="synConstant">&quot;$emit('blur', $event)&quot;</span>
<span class="synIdentifier">    &gt;&lt;/</span><span class="synStatement">textarea</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synStatement">export</span><span class="synSpecial"> </span><span class="synStatement">default</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">  name: </span><span class="synConstant">'inputText'</span><span class="synSpecial">,</span>
<span class="synSpecial">  data</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">    </span><span class="synStatement">return</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      message: </span><span class="synConstant">&quot;デフォルトのメッセージ&quot;</span><span class="synSpecial">,</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">  methods: </span><span class="synIdentifier">{</span>
<span class="synSpecial">    updateValue </span>(<span class="synSpecial">e</span>)<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      </span><span class="synIdentifier">this</span><span class="synSpecial">.$emit</span>(<span class="synConstant">'input'</span><span class="synSpecial">, e.target.value</span>)
<span class="synSpecial">      </span><span class="synIdentifier">this</span><span class="synSpecial">.$emit</span>(<span class="synConstant">'change'</span><span class="synSpecial">, e.target.value</span>)
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<p></div></details></p>

<h3><code>&lt;textarea&gt;</code> 要素のバインディング</h3>

<p>改行はCSS側の <code>white-space: pre-line;</code>   で回避
参考： <a href="https://stackoverflow.com/a/36729761">javascript - Rendering newline character in VueJS - Stack Overflow</a></p>

<p><code>white-space: pre;</code> でも回避できる風だが、文字量多い場合にコンテンツエリアからはみ出してしまう。</p>

<h3>参考リンク</h3>

<p>コンポーネント間での値受け渡し<code>props</code>  <code>$emit</code> 関連</p>

<ul>
<li><a href="https://www.hypertextcandy.com/vuejs-components-introduction-emit-events">Vue.jsコンポーネント入門 (4) $emitによるイベントの発行 | Hypertext Candy</a></li>
<li><a href="https://se-tomo.com/2018/11/03/vue-js-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E9%96%93%E3%81%AE%E9%80%9A%E4%BF%A1/">【Vue.js】コンポーネント間のデータ通信について図解 | とものブログ</a></li>
</ul>


<p>フォームのコンポーネント化</p>

<ul>
<li><a href="https://qiita.com/wakame_isono_/items/611e51ff965d698bbc7c">Vue.jsでForm部品をComponent化する - Qiita</a></li>
</ul>


<h3>次やること</h3>

<p>フォームでスタイル要素をバインディングする。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js で クイズ実装'
description: ''
publishDate: '05/15/2019 22:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>設問 + 答え のクイズをVue.jsで実装する。</p>

<h2>URL</h2>

<p>GitHub pages：<a href="https://yuheijotaki.github.io/practice-exam/">https://yuheijotaki.github.io/practice-exam/</a><br/>
GitHub リポジトリ：<a href="https://github.com/yuheijotaki/practice-exam">https://github.com/yuheijotaki/practice-exam</a></p>

<h2>機能</h2>

<ul>
<li>設問／正解などのデータは JSON にいれて Vue で描画</li>
<li>設問に対してユーザーが選択式で解答する</li>
<li>「答え合わせ」ボタン押下で、正解の表示、正誤判定</li>
</ul>


<h2>JSON</h2>

<p><a href="https://yuheijotaki.github.io/practice-exam/static/assets/qa.json">https://yuheijotaki.github.io/practice-exam/static/assets/qa.json</a></p>

<ul>
<li>ID <code>id</code></li>
<li>設問種別（カテゴリー） <code>field</code></li>
<li>解答タイプ <code>ansType</code>

<ul>
<li>単一方式： <code>single</code> （ラジオボタン）</li>
<li>複数選択方式： <code>multi</code> （チェックボックス）</li>
</ul>
</li>
<li>設問テキスト <code>queText</code></li>
<li>解答 <code>ansChoice</code>

<ul>
<li><code>"a": "選択肢aです。"</code></li>
</ul>
</li>
<li>正解 <code>ansItem</code>

<ul>
<li>単一： <code>["a"]</code></li>
<li>複数： <code>["a","b"]</code></li>
</ul>
</li>
<li>解説 <code>ansComment</code></li>
<li>出典元 <code>ansSource</code></li>
</ul>


<h2>ハマった箇所</h2>

<p>いろいろハマった気がしますが大きくはふたつです</p>

<h4>フォームバインディングに <code>v-mdoel:</code> が使えない</h4>

<p>JSON から取得した設問リストをもとに解答のラジオボタン/チェックボックスを動的する場合、<code>v-model:</code> が使えず、自力で選択されたか否かを判定してデータに格納する必要があるっぽい。<br/>
ラジオボタンは値を上書きすればいいだけなのでまだよかったが、チェックボックスは <code>v-on:change</code> を使うとチェック毎に値が溜まっていく一方なので、溜まった値が奇数の場合は  <code>true</code> 、偶数の場合は <code>false</code> みたいに、おそらくよくないやり方をしてしまった。</p>

<h4>答え合わせ時に正解と解答が一致しない</h4>

<p>これも探り探りやりましたが、正解と解答は別の配列で作っていて、それをマッチングさせるようにしているが、
正解：<code>["a"]</code> と解答： <code>["a"]</code> を <code>===</code> で繋いでも <code>true</code> にならなかったので、一度配列たちを <code>toString()</code> して判定した。</p>

<h2>課題</h2>

<ul>
<li>正解数/正誤率の表示（カテゴリー毎に正誤率を計算できるとなお良い）</li>
<li>バリデーション

<ul>
<li>チェックボックスの上限設定（これはなくてもOKかな）</li>
<li>「答え合わせ」ボタンを押した際に未入力の問題がないか</li>
</ul>
</li>
<li>見た目の調整</li>
<li>リファクタリング（命名／コンポーネント化）</li>
</ul>


<h2>感想</h2>

<ul>
<li>JSのオブジェクトについて少し理解が深まった（難しさも分かった..）</li>
<li>やっぱり足りていないのはJSの基礎力かな..</li>
<li>どんなコードでも形になったのでとりあえずよしとします</li>
</ul>


<p>結構時間かかってしまったので、次のはもう少しレベル落とそうかなと思います</p>

<h2>参考にしたリンク</h2>

<h4>JavaScript</h4>

<p>オブジェクトのループ<br/>
<a href="https://qiita.com/ledsun/items/953b25b60592c22811ca">https://qiita.com/ledsun/items/953b25b60592c22811ca</a><br/>
<a href="https://chaika.hatenablog.com/entry/2018/10/15/090000">https://chaika.hatenablog.com/entry/2018/10/15/090000</a></p>

<p>オブジェクトのプロパティへのアクセス<br/>
<a href="https://qiita.com/tomcky/items/0757348473873765432e">https://qiita.com/tomcky/items/0757348473873765432e</a></p>

<p>オブジェクトのプロパティ削除<br/>
<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Creating_New_Objects/Deleting_Properties">https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Creating_New_Objects/Deleting_Properties</a></p>

<p>奇数・偶数の判定<br/>
<a href="https://9-bb.com/javascript/">https://9-bb.com/javascript/</a></p>

<p>型変換いろいろ<br/>
<a href="https://qiita.com/zawascript/items/a25eaf7a222ac3671275">https://qiita.com/zawascript/items/a25eaf7a222ac3671275</a></p>

<h4>Vue.js</h4>

<p><code>computed</code> と <code>methods</code> の違い、組み合わせ方法など<br/>
<a href="https://dev83.com/vue-computed-methods/">https://dev83.com/vue-computed-methods/</a></p>

<p>フォーム要素のバインディングに <code>v-model</code> を使わない方法<br/>
<a href="https://qiita.com/gyarasu/items/7bc16ec3466f00b2c9fa">https://qiita.com/gyarasu/items/7bc16ec3466f00b2c9fa</a></p>

<p>オブジェクトに動的に値を追加してリアクティブにする方法<br/>
<a href="https://qiita.com/tmak_tsukamoto/items/7623f458448fa7cd01c7">https://qiita.com/tmak_tsukamoto/items/7623f458448fa7cd01c7</a></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2019年4月 振り返り'
description: ''
publishDate: '05/05/2019 10:06:58'
---

[CONTENTS-START]
<h2>結果</h2>

<h3>ブログ</h3>

<p><strong>目標：月 12 回（週 3 回）更新</strong><br/>
<strong>結果：月 24 回 更新</strong></p>

<h3>読書</h3>

<p><strong>目標：月 1 冊</strong><br/>
<strong>結果：月 2 冊</strong></p>

<h2>反省点など</h2>

<p>読書は Vue.js のカエル本と JavaScriptコードレシピ集を読みながら手を動かして、半年近く勉強してきたものがある程度身になっている感触が得られた一方、マスターしたとは程遠い感触でもあるのでもう少し根気強くやっていきたい。</p>

<p>仕事に直結している感じが得られないのはもやっとする部分もあるが、今のうちに基礎的なところはなるべくカバーしておいて実務になったときに余裕を持てるようにする。</p>

<h2>来月に向けて</h2>

<p>電車のなかで読み進める → PCがある環境で再度写経、という流れがなんとなくできてきたので、このフローを継続していきたい。<br/>
終盤のほうに書いたツールやプログラミングのTipsなどもコンスタントにアウトプットする習慣をつける。</p>

<p>AWS認定試験の資格取得をする必要がでてきたので、この機会に今までなんとなくの用語理解で終わっていたことを勉強する。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【VS Code】 ワークスペース `.code-workspace` を使おう'
description: ''
publishDate: '04/26/2019 20:30:00'
---

[CONTENTS-START]
<h2>ワークスペース機能とは</h2>

<p>VS Code 上でプロジェクト単位で作業拡張できる（？）機能です。<br/>
基本的には「フォルダを開く」以後の作業が、ワークスペースを導入すると初回の1回の設定だけで保存されるイメージで、Sublime Text でいうところの Project のような感じです。</p>

<h2>導入</h2>

<p>導入は下記がキャプチャあるのでわかりやすいです。<br/>
<a href="http://trelab.info/visual-studio-code/visual-studio-code-%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%B9%E3%83%9A%E3%83%BC%E3%82%B9/">Visual Studio Code ワークスペース | trelab</a></p>

<p><code>_.code-workspace</code> のようなファイル名でワークスペースを保存。<br/>
次回の作業時から、このファイルをクリックすると VS Code 上でプロジェクト配下を編集できる</p>

<h2>メリット</h2>

<ul>
<li>都度都度「フォルダを開く」からフォルダを選択しないで済む（他の案件の切り替えが多少しやすい）</li>
<li>ファイルや単語の検索は自動的にプロジェクト配下にフィルターされる</li>
<li>拡張機能をワークスペースごとにインストール/アンインストールできる（状態も保存される）</li>
<li>Gitで <code>_.code-workspace</code> を管理すれば、複数人で環境を共有できる（プラグインなどできないかも？）</li>
</ul>


<h2>発展</h2>

<p>同プロジェクトで複数ルートが階層ある場合など、もっと使いみちがありそうです。<br/>
（というか下記の記事では <code>ワークスペースは、複数ルートのフォルダーを同時に開く機能</code> と書かれていますね）<br/>
<a href="https://qiita.com/YuichiNukiyama/items/ef16a0219f46ea03a045">VS Codeのワークスペース - Qiita</a></p>

<p>自分は基本的な使い方しかできていないっぽいですが、それでも便利なので使ってみたらいいと思います〜</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Git コミットメッセージのプレフィクス'
description: ''
publishDate: '04/26/2019 20:30:00'
---

[CONTENTS-START]
<p>Git のコミットメッセージ、プレフィクスを毎回つけるのですがいつも、
<code>add</code> / <code>fix</code> / <code>update</code> とかになってしまうので、少しだけバリエーション増やして細分化できるようにするようにする。</p>

<p><a href="https://qiita.com/numanomanu/items/45dd285b286a1f7280ed">【今日からできる】コミットメッセージに 「プレフィックス」 をつけるだけで、開発効率が上がった話 - Qiita</a> にある、</p>

<p>Angular.js の開発者ドキュメント
<a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#type">https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#type</a></p>

<p>意訳すると、下記のような感じかなと</p>

<table>
<thead>
<tr>
<th> プレフィクス </th>
<th> 意味 </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>feat:</code> </td>
<td> 新規機能追加 </td>
</tr>
<tr>
<td> <code>fix:</code> </td>
<td> バグフィックス </td>
</tr>
<tr>
<td> <code>docs:</code> </td>
<td> ドキュメントの更新 </td>
</tr>
<tr>
<td> <code>style:</code> </td>
<td> コードに影響しない変更（空白、書式設定、セミコロンの欠落など） </td>
</tr>
<tr>
<td> <code>refactor:</code> </td>
<td> リファクタリング（バグを修正も機能も追加していないコードの変更） </td>
</tr>
<tr>
<td> <code>perf:</code> </td>
<td> パフォーマンス改善のための変更 </td>
</tr>
<tr>
<td> <code>chore:</code> </td>
<td> ビルドツールやライブラリファイルの変更 </td>
</tr>
</tbody>
</table>


<p>上記を毎回使えば、 <code>add:</code> や <code>fix:</code>、<code>delete:</code> から1レベル細分化できて、プレフィクスでコミット内容の判断がつきやすくなるように思います。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js / JSON から情報を引っ張ってくる その14'
description: ''
publishDate: '04/26/2019 20:30:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>ポートフォリオサイト 前回の続き</p>

<p><strong>やったこと</strong></p>

<ul>
<li>デザインいれる</li>
<li>レスポンシブ</li>
<li>ソース整理</li>
</ul>


<p>Github Pages: <a href="https://yuheijotaki.github.io/vue-study_20190424/">https://yuheijotaki.github.io/vue-study_20190424/</a><br/>
リポジトリ: <a href="https://github.com/yuheijotaki/vue-study_20190424">https://github.com/yuheijotaki/vue-study_20190424</a></p>

<h3>Vue.js で変数や mixin を使う</h3>

<p><a href="https://gootablog.com/vuejs-sass-globalvariables">Vue.jsでSassを使う時にグローバル変数を読み込む方法 - Goota</a> の通りなのですが、 <code>sass-resources-loader</code> を npmインストールして、<code>/build/utils.js</code> のなか、</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
  scss: generateLoaders(<span class="synConstant">'sass'</span>),
...
</pre>


<p>を</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
  scss: generateLoaders(<span class="synConstant">'sass'</span>).concat(
    <span class="synIdentifier">{</span>
      loader: <span class="synConstant">'sass-resources-loader'</span>,
      options: <span class="synIdentifier">{</span>
        resources: path.resolve(__dirname, <span class="synConstant">'../src/sass/_base.scss'</span>)
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>),
...
</pre>


<p>とする</p>

<h2>まとめ</h2>

<p><strong>やりたい（やりたかった）こと</strong></p>

<ul>
<li>初回ローディング時には <code>No posts</code> は非表示</li>
<li>ヘッダーのチェックボックスのカテゴリーを動的出力 or ループ処理</li>
<li>詳細ページの作成</li>
</ul>


<p>WordPress のテーマ側に組み込むには下記などが参考になりそう</p>

<ul>
<li><a href="https://qiita.com/d2cd-kimura/items/c8283849c4dff245d219">wordpress で SNS や SEO に優しい簡単 SPA 作り - Qiita</a></li>
<li><a href="http://itaoyuta.hatenablog.com/entry/2017/12/28/152338">WordPressで全面的にVue.jsを導入してみた(SPA実装ではない) - 超空洞</a></li>
</ul>


<p>GWに入るので、一回やること整理しつつ次の課題やっていきたいと思います。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【PHP】変数名に変数の値を代入する'
description: ''
publishDate: '04/25/2019 23:00:00'
---

[CONTENTS-START]
<pre class="code lang-php" data-lang="php" data-unlink>$array = [
  'name01' =<span class="synError">&gt;</span> 'Taro',
  'name02' =<span class="synError">&gt;</span> 'Hanako',
  'name03' =<span class="synError">&gt;</span> 'Jiro'
];
</pre>


<p>という配列があって、</p>

<pre class="code lang-php" data-lang="php" data-unlink>$targetName = 'Hanako';
</pre>


<p>のように、宣言した変数の値 <code>Hanako</code> とオブジェクトの値がマッチする場合を判定し、</p>

<pre class="code lang-php" data-lang="php" data-unlink>$name02 = true;
</pre>


<p>という変数を作りたい場合、</p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
  <span class="synStatement">$</span><span class="synIdentifier">targetName</span> <span class="synStatement">=</span> '<span class="synConstant">Hanako</span>';
  <span class="synStatement">$</span><span class="synIdentifier">array</span> <span class="synStatement">=</span> <span class="synSpecial">[</span>
    '<span class="synConstant">name01</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">Taro</span>',
    '<span class="synConstant">name02</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">Hanako</span>',
    '<span class="synConstant">name03</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">Jiro</span>'
  <span class="synSpecial">]</span>;
  <span class="synStatement">foreach</span> <span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">array</span> <span class="synStatement">as</span> <span class="synStatement">$</span><span class="synIdentifier">key</span> <span class="synStatement">=&gt;</span> <span class="synStatement">$</span><span class="synIdentifier">value</span><span class="synSpecial">){</span>
    <span class="synComment">// 変数 key を宣言</span>
    <span class="synComment">// オブジェクトの value が $targetName と同じ場合は true にする</span>
    <span class="synStatement">if</span> <span class="synSpecial">(</span><span class="synIdentifier">strpos</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">targetName</span>,<span class="synStatement">$</span><span class="synIdentifier">value</span><span class="synSpecial">)</span> <span class="synStatement">!==</span> <span class="synConstant">false</span><span class="synSpecial">)</span> <span class="synSpecial">{</span>
      <span class="synStatement">$</span><span class="synSpecial">{</span><span class="synStatement">$</span><span class="synIdentifier">key</span><span class="synSpecial">}</span> <span class="synStatement">=</span> <span class="synConstant">true</span>;
    <span class="synSpecial">}</span> <span class="synStatement">else</span> <span class="synSpecial">{</span>
      <span class="synStatement">$</span><span class="synSpecial">{</span><span class="synStatement">$</span><span class="synIdentifier">key</span><span class="synSpecial">}</span> <span class="synStatement">=</span> <span class="synConstant">false</span>;
    <span class="synSpecial">}</span>
  <span class="synSpecial">}</span>
  <span class="synComment">// $name01 = false;</span>
  <span class="synComment">// $name02 = true;</span>
  <span class="synComment">// $name03 = false;</span>
<span class="synSpecial">?&gt;</span>
</pre>


<p>とする。</p>

<p><code>${$variableName}</code> と書くことで、変数名に変数の値を代入できる。</p>

<hr />

<p>参考：</p>

<ul>
<li><a href="http://www.promeshi.com/archives/479">PHPの変数名を動的に変更する方法 ｜ ぷろめし｜プログラミングよりも飯が好き</a></li>
<li><a href="https://www.javadrive.jp/php/for/index9.html">foreach文でキーと値を取り出す - 繰り返し処理 - PHP入門</a></li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js / JSON から情報を引っ張ってくる その13'
description: ''
publishDate: '04/25/2019 09:30:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p><a href="https://yuheijotaki.hatenablog.com/entry/2019/04/05/101951">【学習メモ】Vue.js のツボとコツがゼッタイにわかる本 その3</a> のデモをベースにしてポートフォリオサイトを作り直す。</p>

<p>Github Pages: <a href="https://yuheijotaki.github.io/vue-study_20190424/">https://yuheijotaki.github.io/vue-study_20190424/</a><br/>
リポジトリ: <a href="https://github.com/yuheijotaki/vue-study_20190424">https://github.com/yuheijotaki/vue-study_20190424</a></p>

<h3>ファイル構成</h3>

<pre class="code" data-lang="" data-unlink>/src/
└ App.vue
└ main.js
└ /components/
  └ work-header.vue
  └ work-list.vue
  └ work.vue</pre>


<p><code>App.vue</code> ファイルにて <code>axios</code> を使ってJSON取得、 表示判定は <code>work-list.vue</code> で行う。<br/>
<code>work-header.vue</code> からチェックボックス状態のプロパティと値を <code>props</code> して  <code>work-list.vue</code> で表示判定<br/>
<code>work.vue</code> はアイテム1つ単位の表示専用コンポーネント</p>

<h3>いじった所</h3>

<p>WordPress の REST API で取得できるカテゴリーが</p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">[</span>
  0: <span class="synSpecial">{</span>
    ...
    category_name: &quot;<span class="synError">Front</span>-<span class="synError">end</span> ,<span class="synError">WordPress</span>&quot;
    ...
  <span class="synSpecial">}</span>,
  ...
<span class="synSpecial">]</span>
</pre>


<p>というオブジェクトになるので、</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  methods: <span class="synIdentifier">{</span>
    request: <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
      axios.get( <span class="synConstant">'https://works.yuheijotaki.com/wp-json/wp/v2/posts?per_page=100'</span> )
      .then( response =&gt; <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.works = response.data; <span class="synComment">// JSONデータの取得</span>
        <span class="synIdentifier">let</span> obj = <span class="synIdentifier">this</span>.works;
        <span class="synType">Object</span>.keys(obj).forEach((key) =&gt; <span class="synIdentifier">{</span>
          <span class="synStatement">const</span> catName = obj<span class="synIdentifier">[</span>key<span class="synIdentifier">]</span>.category_name; <span class="synComment">// この投稿が属するカテゴリー</span>
          <span class="synStatement">if</span> (catName.includes(<span class="synConstant">'Front-end'</span>)) <span class="synIdentifier">{</span>
            obj<span class="synIdentifier">[</span>key<span class="synIdentifier">]</span>.isCatFrontEnd = <span class="synConstant">true</span>;
          <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
            obj<span class="synIdentifier">[</span>key<span class="synIdentifier">]</span>.isCatFrontEnd = <span class="synConstant">false</span>;
          <span class="synIdentifier">}</span>
  ...
</pre>


<p>のように <code>isCatFrontEnd</code> のプロパティと <code>true</code> or <code>false</code> の値をつけた。<br/>
<code>work-list.vue</code> の <code>computed</code> でこの処理やったほうがスマートそうですが、できるかよく分からずJSONに書き足す形になっちゃいました。</p>

<h3>残り</h3>

<ul>
<li><p>記述の整理</p>

<ul>
<li>ファイルやパーツ命名のリファクタリング</li>
<li>コンポーネントの分け方も見直しをする</li>
</ul>
</li>
<li><p>スタイリング</p>

<ul>
<li>見た目整える</li>
<li>レスポンシブ</li>
</ul>
</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】JavaScriptコードレシピ集 その15'
description: ''
publishDate: '04/23/2019 21:00:00'
---

[CONTENTS-START]
<p>JavaScriptコードレシピ集 の学習メモ 続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/"><img src="/images/hatena/20190726111820.jpg" class="hatena-asin-detail-image" alt="JavaScript コードレシピ集" title="JavaScript コードレシピ集"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/">JavaScript コードレシピ集</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 池田泰延,鹿野壮</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/01/25</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297103680/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>Chapter17 プログラムのデバッグ</h2>

<p><code>console.log()</code> しか使ってきませんでしたがいろいろ便利そうです。<code>console.table()</code> とか</p>

<h3>251 情報・エラー・警告を出力したい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>console.log(<span class="synConstant">'ログです'</span>);
console.info(<span class="synConstant">'情報です'</span>);
console.warn(<span class="synConstant">'警告です'</span>);
console.error(<span class="synConstant">'エラーです'</span>);
</pre>


<h3>252 オブジェクトの構造を出力したい</h3>

<p><code>console.dir()</code> はオブジェクト構造を出力できる</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item252_myObject = <span class="synIdentifier">{</span>
  id: 2,
  name: <span class="synConstant">'鈴木'</span>
<span class="synIdentifier">}</span>;
console.dir(item252_myObject);

<span class="synComment">// body要素の構造を出力</span>
console.dir(<span class="synStatement">document</span>.body);
<span class="synComment">// baseURI を出力</span>
console.dir(<span class="synStatement">document</span>.body.baseURI); <span class="synComment">// 結果: http://127.0.0.1:5500/dist/index.html</span>
</pre>


<p><code>console.table()</code> はデータが表組みで表示される</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item252_myArray = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span> id: 100, name: <span class="synConstant">'鈴木'</span>, age: 25 <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> id: 200, name: <span class="synConstant">'田中'</span>, age: 30 <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> id: 300, name: <span class="synConstant">'太郎'</span>, age: 35 <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>;
console.table(item252_myArray);
</pre>


<h3>254 <code>Error</code> オブジェクトを生成したい</h3>

<blockquote><p>エラーはプログラム実行中に自動で発生する他、開発者側で発生させることも可能です。「エラーを投げる（throw error）」と表現します。関数に不正な値が渡された場合やAPIの戻り値が意図せぬ値になった場合などに使用します。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// Error オブジェクトのインスタンス化</span>
<span class="synStatement">const</span> item254_error = <span class="synStatement">new</span> Error(<span class="synConstant">'エラーが発生しました'</span>);
console.log(item254_error.message); <span class="synComment">// 結果: エラーが発生しました</span>
</pre>


<h3>255 エラーを投げたい</h3>

<p>API通信時に不正な値が発見されたらエラー扱いにしたいときなどに使用できる</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">/** 引数value が数値でない場合にエラーを発生させる関数 */</span>
<span class="synIdentifier">function</span> item255_myFunction(value) <span class="synIdentifier">{</span>
  <span class="synStatement">if</span> (<span class="synStatement">typeof</span> value !== <span class="synConstant">'number'</span>) <span class="synIdentifier">{</span>
    <span class="synComment">// エラーを生成する</span>
    <span class="synStatement">const</span> item255_error = <span class="synStatement">new</span> Error(`「$<span class="synIdentifier">{</span>value<span class="synIdentifier">}</span>はNumberではありません」`);
    <span class="synComment">// エラー内容をコンソールで表示する</span>
    console.log(item255_error);
    <span class="synComment">// エラーを投げる</span>
    <span class="synStatement">throw</span> item255_error;
  <span class="synIdentifier">}</span>

  console.log(`「$<span class="synIdentifier">{</span>value<span class="synIdentifier">}</span>」は数値です`);
<span class="synIdentifier">}</span>

<span class="synComment">// 関数に数値を渡す（エラーなし）</span>
item255_myFunction(5); <span class="synComment">// 結果: 「5」は数値です</span>
<span class="synComment">// 関数に文字列を渡す（エラーが発生する）</span>
item255_myFunction(<span class="synConstant">'鈴木'</span>); <span class="synComment">// 結果: Uncaught Error: 「鈴木はNumberではありません」</span>
</pre>


<h3>256 エラー発生時にエラーを検知したい</h3>

<blockquote><p>コンテンツによってはエラーが発生しても処理を中断せず、続けたい場合もあるでしょう。そのような場合に使うのが <code>try catch</code> です。<code>try {}</code> の部分でエラーが発生すると、<code>catch(error) {}</code> 部分が実行されます。<code>catch(error) {}</code> 部分ではErrorオブジェクトを受けとり、エラー内容の表示などが可能です。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item256_a = 10;

<span class="synStatement">try</span> <span class="synIdentifier">{</span>
  item256_a = 20; <span class="synComment">// aへの再代入 エラー</span>
<span class="synIdentifier">}</span> <span class="synStatement">catch</span> (error) <span class="synIdentifier">{</span>
  console.log(`エラーが発生しました: $<span class="synIdentifier">{</span>error.messsage<span class="synIdentifier">}</span>`);
<span class="synIdentifier">}</span>

<span class="synComment">// 中断されることなく実行される</span>
console.log(`定数item256_aの値は$<span class="synIdentifier">{</span>item256_a<span class="synIdentifier">}</span>です`); <span class="synComment">// 結果: 定数item256_aの値は10です</span>
</pre>


<h3>258 エラーの種類について知りたい</h3>

<table>
<thead>
<tr>
<th> 種類             </th>
<th> 意味                                   </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>RangeError</code>     </td>
<td> 値が許容範囲にない                     </td>
</tr>
<tr>
<td> <code>ReferenceError</code> </td>
<td> 宣言されていない変数を読み出そうとした </td>
</tr>
<tr>
<td> <code>SyntaxError</code>    </td>
<td> 言語の構文が不正                       </td>
</tr>
<tr>
<td> <code>TypeErrror</code>     </td>
<td> データ型が不正                         </td>
</tr>
<tr>
<td> <code>URIError</code>       </td>
<td> URIが不正                              </td>
</tr>
</tbody>
</table>


<hr />

<p>最後の2章、</p>

<ul>
<li>Chapter 18 関数やクラスについて詳しく知る</li>
<li>Chapter 19 JavaScriptをより深く知る</li>
</ul>


<p>はちょっと発展的な内容なのでスキップします。</p>

<h2>まとめ</h2>

<p>最後はちょっと飛ばし飛ばしになりましたが、一通り1冊終えることができました。</p>

<p>良かったこととして、</p>

<ul>
<li>JavaScript でできる基本的なことを網羅的に理解ができた。（おそらく）</li>
<li><code>.addEventListener()</code> やアロー関数など、手打ちしていっただの繰り返し書いた記述ものに関しては構文が染み付いた</li>
<li>インデントの使い方など、規約的なところでの標準もなんとなく理解できた（それが正でないにしても）</li>
</ul>


<p>まだまだなこととして、</p>

<ul>
<li>これら学んだ内容を実戦でどの程度使えるようになるのかを具体的に分かっていない</li>
</ul>


<p>ことがあります。</p>

<p>ともかく1番良かったのは、JavaScript に対しての壁が低く感じれるようになったことでした。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】JavaScriptコードレシピ集 その14'
description: ''
publishDate: '04/22/2019 09:52:05'
---

[CONTENTS-START]
<p>JavaScriptコードレシピ集 の学習メモ 続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/"><img src="/images/hatena/20190726111820.jpg" class="hatena-asin-detail-image" alt="JavaScript コードレシピ集" title="JavaScript コードレシピ集"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/">JavaScript コードレシピ集</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 池田泰延,鹿野壮</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/01/25</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297103680/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>Chapter15 ローカルデータの取り扱い</h2>

<h3>244 <code>localStorage</code> を使ってローカルデータを使いたい</h3>

<blockquote><p> <code>localStorage</code> はブラウザー上にデータを保存できる手軽な手段です。<code>window</code> オブジェクトに <code>localStorage</code> オブジェクトが存在するので、直接 <code>localStorage</code> と記述すればどこからでも呼び出せます。<code>localStorage</code> に保存されたデータには保存期間の制限はありません。</p></blockquote>

<p><code>setItem()</code> メソッドを使って保存。第一引数にはキー名を、第二引数には任意のデータを指定。<br/>
<code>getItem()</code> メソッドを使って読み出し。第一引数にには <code>setItem()</code> で用いたキー名を指定する。</p>

<p>だいたい jQuery Cookie と使い方同じで保存期間を指定しないバージョンて感じですね</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item244_localStorage&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item244_input&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item244_btnSave&quot;</span><span class="synIdentifier">&gt;</span>保存する<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item244_btnRead&quot;</span><span class="synIdentifier">&gt;</span>読み出す<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item244_section = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item244_localStorage'</span>);
<span class="synStatement">const</span> item244_btnRead = item244_section.querySelector(<span class="synConstant">'.item244_btnRead'</span>);
<span class="synStatement">const</span> item244_btnSave = item244_section.querySelector(<span class="synConstant">'.item244_btnSave'</span>);
<span class="synStatement">const</span> item244_input = item244_section.querySelector(<span class="synConstant">'.item244_input'</span>);

<span class="synComment">// 「保存する」ボタンをクリックしたとき</span>
item244_btnSave.addEventListener(<span class="synConstant">'click'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// テキスト入力欄の文字列を取得</span>
  <span class="synStatement">const</span> item244_data = item244_input.value;

  <span class="synComment">// ローカルストレージに保存</span>
  localStorage.setItem(<span class="synConstant">'item244_myKey'</span>, item244_data);
<span class="synIdentifier">}</span>);

<span class="synComment">// 「読み出す」ボタンをクリックしたとき</span>
item244_btnRead.addEventListener(<span class="synConstant">'click'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// ローカルストレージから読み出す</span>
  <span class="synStatement">const</span> item244_data = localStorage.getItem(<span class="synConstant">'item244_myKey'</span>);

  <span class="synComment">// テキスト入力欄の文字列に代入</span>
  item244_input.value = item244_data;
<span class="synIdentifier">}</span>);
</pre>


<p>コンソールでは <code>Application &gt; Local Storage</code> からキーと値を確認。<br/>
なおシークレッドウィンドウでの利用の場合はブラウザによって挙動（保存方法など）が異なる。</p>

<p><code>sessionStorage</code> も <code>localStorage</code> と使い方は同じだが、セッションが終わると同時に（ブラウザが閉じられたときに）クリアされる点が異なる。</p>

<h3>245 Storage APIからデータを消したい</h3>

<p>キーを指定して削除する場合は、<code>removeItem()</code>、 全削除（クリア）する場合は、<code>clear()</code></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item245_localStorage&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item245_input&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item245_btnSave&quot;</span><span class="synIdentifier">&gt;</span>保存する<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item245_btnRemove&quot;</span><span class="synIdentifier">&gt;</span>削除する<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item245_btnClear&quot;</span><span class="synIdentifier">&gt;</span>すべてクリアする<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item245_section = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item245_localStorage'</span>);
<span class="synStatement">const</span> item245_btnSave = item245_section.querySelector(<span class="synConstant">'.item245_btnSave'</span>);
<span class="synStatement">const</span> item245_btnRemove = item245_section.querySelector(<span class="synConstant">'.item245_btnRemove'</span>);
<span class="synStatement">const</span> item245_btnClear = item245_section.querySelector(<span class="synConstant">'.item245_btnClear'</span>);
<span class="synStatement">const</span> item245_input = item245_section.querySelector(<span class="synConstant">'.item245_input'</span>);

<span class="synComment">// 「保存する」ボタンをクリックしたとき</span>
item245_btnSave.addEventListener(<span class="synConstant">'click'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// テキスト入力欄の文字列を取得</span>
  <span class="synStatement">const</span> item245_data = item245_input.value;

  <span class="synComment">// ローカルストレージに保存</span>
  localStorage.setItem(<span class="synConstant">'item245_myKey1'</span>, item245_data);
  localStorage.setItem(<span class="synConstant">'item245_myKey2'</span>, item245_data);
<span class="synIdentifier">}</span>);

<span class="synComment">// 「削除する」ボタンをクリックしたとき</span>
item245_btnRemove.addEventListener(<span class="synConstant">'click'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// ローカルストレージから削除する</span>
  localStorage.removeItem(<span class="synConstant">'item245_myKey1'</span>);
<span class="synIdentifier">}</span>);

<span class="synComment">// 「クリアする」ボタンをクリックしたとき</span>
item245_btnClear.addEventListener(<span class="synConstant">'click'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// クリアする</span>
  localStorage.clear();
<span class="synIdentifier">}</span>);
</pre>


<h3>246 Cookieを使ってローカルデータを使いたい</h3>

<h3>247 Cookieからデータを読み出したい</h3>

<p><code>localStorage</code> はデータに 文字列/数値/真偽値/オブジェクト/配列 などさまざまなデータ型を保持できるが、Cookie は1次元の文字列しか保存ができない。<br/>
ただサーバーサイドとも共有して読み込み/書き換えができるため利用することもあるかもしれない。</p>

<p>Cookie の値では、<code>=</code> や <code>;</code> などの特殊記号や日本文字は <code>%82%A0</code> のような形にエンコードして保存しておき、読み出し時にデコードする必要がある。</p>

<h4>Cookie の仕様</h4>

<ul>
<li>Cookie はブラウザーが自動的にウェブサーバーに送る</li>
<li>Cookie は有効期限の設定が可能</li>
<li>消さない限りずっと保持</li>
<li>ドメイン単位で保持。ただし、同一ドメインでも http / https だと別領域に保存</li>
</ul>


<p>コードでの扱い方も載ってますが使うときにみれば分かりそうなのでスキップ</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】JavaScriptコードレシピ集 その13'
description: ''
publishDate: '04/22/2019 09:13:04'
---

[CONTENTS-START]
<p>JavaScriptコードレシピ集 の学習メモ 続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/"><img src="/images/hatena/20190726111820.jpg" class="hatena-asin-detail-image" alt="JavaScript コードレシピ集" title="JavaScript コードレシピ集"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/">JavaScript コードレシピ集</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 池田泰延,鹿野壮</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/01/25</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297103680/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>Chapter14 さまざまなデータの送受信方法</h2>

<h3>229 JSONをパースしたい</h3>

<blockquote><p>文字列をJSONとして解析し、JavaScriptの値やオブジェクトに変換するには <code>JSON.parse()</code> メソッドを使います。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// JSON文字列</span>
<span class="synStatement">const</span> item229_jsonString = `<span class="synIdentifier">{</span>
  <span class="synConstant">&quot;students&quot;</span>: 40,
  <span class="synConstant">&quot;grade&quot;</span>: 4,
  <span class="synConstant">&quot;name&quot;</span>: <span class="synConstant">&quot;C組&quot;</span>
<span class="synIdentifier">}</span>`;

<span class="synComment">// 文字列をJavaScriptのオブジェクトに変換</span>
<span class="synStatement">const</span> item229_data = JSON.parse(item229_jsonString);

console.log(item229_data);          <span class="synComment">// 結果: {students: 40, grade: 4, name: &quot;C組&quot;}</span>
console.log(item229_data.students); <span class="synComment">// 結果: 40</span>
console.log(item229_data.grade);    <span class="synComment">// 結果: 4</span>
console.log(item229_data.name);     <span class="synComment">// 結果: &quot;C組&quot;</span>
</pre>


<h3>230 オブジェクトをJSONに変換したい</h3>

<blockquote><p><code>JSON.stringify()</code> メソッドを使うと、JavaScriptのオブジェクトをJSON文字列に変換できます。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item230_data = <span class="synIdentifier">{</span>
  a: 1000,
  b: <span class="synConstant">'こんにちは、世界'</span>
<span class="synIdentifier">}</span>;
<span class="synStatement">const</span> item230_str = JSON.stringify(item230_data);

console.log(item230_str); <span class="synComment">// 結果: {&quot;a&quot;:1000,&quot;b&quot;:&quot;こんにちは、世界&quot;}</span>
</pre>


<h3>231 JSONの変換時にインデントを付けたい</h3>

<blockquote><p><code>JSON.stringify()</code> メソッドの第三引数はJSON文字列に改行とインデントを挿入するために使います。インデントとして利用したい文字列を指定します。数値を指定した場合はスペースの数になります。</p></blockquote>

<p>数値を指定した場合はスペースの数とか、隠し機能っぽいですね</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item231_data = <span class="synIdentifier">{</span>
  a: 1000,
  b: <span class="synConstant">'こんにちは、世界'</span>
<span class="synIdentifier">}</span>;
<span class="synStatement">const</span> item231_str = JSON.stringify(item231_data, <span class="synStatement">null</span>, <span class="synConstant">'  '</span>);

console.log(item231_str);
<span class="synComment">/* 結果:</span>
<span class="synComment">{</span>
<span class="synComment">  &quot;a&quot;: 1000,</span>
<span class="synComment">  &quot;b&quot;: &quot;こんにちは、世界&quot;</span>
<span class="synComment">}</span>
<span class="synComment">*/</span>
</pre>


<h3>234 <code>fetch()</code>メソッドでJSONを読み込みたい</h3>

<p>ローカルサーバーなりでやる</p>

<blockquote><p><code>await</code>・<code>async</code> は <code>Promise</code> による非同期処理を同期処理のようにわかりやすく書けることが利点です。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// await・async を使って記載した場合</span>
async <span class="synIdentifier">function</span> load() <span class="synIdentifier">{</span>
  <span class="synComment">// ファイルを読み込む</span>
  <span class="synStatement">const</span> item234_data = await fetch(<span class="synConstant">'assets/js/sample.json'</span>);
  <span class="synComment">// JSONとして解析</span>
  <span class="synStatement">const</span> item234_obj = await item234_data.json();
  <span class="synComment">// console.log(item234_obj); // 結果: {name: &quot;別所分校&quot;, classes: Array(2)}</span>
  <span class="synComment">// テキストを出力</span>
  <span class="synStatement">const</span> item234_str = JSON.stringify(item234_obj, <span class="synStatement">null</span>, <span class="synConstant">'  '</span>);
  console.log(item234_str);
<span class="synComment">/* 結果:</span>
<span class="synComment">{</span>
<span class="synComment">  &quot;name&quot;: &quot;別所分校&quot;,</span>
<span class="synComment">  &quot;classes&quot;: [</span>
<span class="synComment">    {</span>
<span class="synComment">      &quot;students&quot;: 40,</span>
<span class="synComment">      &quot;grade&quot;: 4,</span>
<span class="synComment">      &quot;name&quot;: &quot;C組&quot;</span>
<span class="synComment">    },</span>
<span class="synComment">    {</span>
<span class="synComment">      &quot;students&quot;: 20,</span>
<span class="synComment">      &quot;grade&quot;: 2,</span>
<span class="synComment">      &quot;name&quot;: &quot;B組&quot;</span>
<span class="synComment">    }</span>
<span class="synComment">  ]</span>
<span class="synComment">}</span>
<span class="synComment">*/</span>
<span class="synIdentifier">}</span>

load();
</pre>


<p>ここではJSONのみにしましたが、</p>

<ul>
<li>テキスト</li>
<li>XML</li>
<li>バイナリ（画像や3Dデータ）</li>
</ul>


<p>も <code>fetch()</code> で扱える。</p>

<h3>237 <code>fetch()</code>メソッドでデータを送信したい</h3>

<blockquote><p>ウェブサーバーのプログラムにデータを渡したいときにも <code>fetch()</code> メソッドを利用できます。データ送信方法として、<code>GET</code> 方式と <code>POST</code> 方式の2種類があります。</p></blockquote>

<table>
<thead>
<tr>
<th> 方式        </th>
<th> 概要                              </th>
<th> 特徴                                                         </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>GET</code> 方式  </td>
<td> URLにパラメータを付与する方式     </td>
<td> URLでウェブページの結果が一意に決まるような場面で最適  <br />SEOと相性が良い </td>
</tr>
<tr>
<td> <code>POST</code> 方式 </td>
<td> URLにフォームの送信情報が載らない </td>
<td> HTTPSプロトコルで通信している限りは <code>POST</code> の中身は第三者が見れない </td>
</tr>
</tbody>
</table>


<blockquote><p><code>POST</code> で送信する場合はメソッドとヘッダー、ボディー情報を指定します。</p></blockquote>

<h4>JSONフォーマットで送る場合（<code>application/json</code> 方式）</h4>

<p>JSONフォーマットでサーバーにデータを送る方法です。<code>fetch()</code> メソッドの第二引数にオプションを指定します。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// JSONフォーマットで送る場合（`application/json` 方式）</span>
<span class="synStatement">const</span> item237_obj01 = <span class="synIdentifier">{</span> hello: <span class="synConstant">'world'</span> <span class="synIdentifier">}</span>;

<span class="synStatement">const</span> item237_data01 = <span class="synIdentifier">{</span>
  method: <span class="synConstant">'POST'</span>,
  headers: <span class="synIdentifier">{</span>
    <span class="synConstant">'Content-Type'</span>: <span class="synConstant">'application/json'</span>
  <span class="synIdentifier">}</span>,
  body: JSON.stringify(item237_obj01)
<span class="synIdentifier">}</span>;

fetch(<span class="synConstant">'./new01'</span>, item237_data01)
  .then((res) =&gt; res.text())
  .then(console.log);
</pre>




<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synStatement">$</span><span class="synIdentifier">json_string</span> <span class="synStatement">=</span> <span class="synIdentifier">file_get_contents</span><span class="synSpecial">(</span>'<span class="synConstant">php://input</span>'<span class="synSpecial">)</span>; <span class="synComment">## 今回のキモ</span>

<span class="synComment">// PHPで文字列をJSOnデータとして展開する</span>
<span class="synStatement">$</span><span class="synIdentifier">obj</span> <span class="synStatement">=</span> <span class="synIdentifier">json_decode</span><span class="synSpecial">(</span><span class="synStatement">$</span><span class="synIdentifier">json_string</span><span class="synSpecial">)</span>;

<span class="synPreProc">echo</span> <span class="synStatement">$</span><span class="synIdentifier">obj</span><span class="synStatement">-&gt;</span><span class="synSpecial">{</span>&quot;<span class="synConstant">hello</span>&quot;<span class="synSpecial">}</span>;
</pre>


<h4>フォーム方式で送る場合（<code>multipart/form-data</code> 方式）</h4>

<blockquote><p>この方法はPHP側で値を受け取りやすいといったメリットがあります。</p></blockquote>

<p>主に画像やテンプレファイルなどをサーバーにアップロードするときに <code>multipart/form-data</code> 方式が使われることが多い。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// フォーム方式で送る場合（`multipart/form-data方式`）</span>
<span class="synStatement">const</span> item237_body02 = <span class="synStatement">new</span> FormData();
item237_body02.set(<span class="synConstant">'hello'</span>, <span class="synConstant">'world'</span>);

<span class="synStatement">const</span> item237_data02 = <span class="synIdentifier">{</span>
  method: <span class="synConstant">'POST'</span>,
  body: item237_body02
<span class="synIdentifier">}</span>;

fetch(<span class="synConstant">'./new02'</span>, item237_data02)
  .then((res) =&gt; res.text())
  .then(console.log);
</pre>




<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
<span class="synPreProc">echo</span> <span class="synStatement">$</span><span class="synIdentifier">_POST</span><span class="synSpecial">[</span>&quot;<span class="synConstant">hello</span>&quot;<span class="synSpecial">]</span>;
</pre>


<h3>238 XMLHttpRequestでテキストを読み込みたい</h3>

<h3>239 XMLHttpRequestでデータの読み込み状況を取得したい</h3>

<blockquote><p><code>fetch()</code> メソッドよりも昔から存在する機能で <code>XMLHttpRequest</code> というJavaScriptの機能があります。<code>XMLHttpRequest</code> は <code>fetch()</code> メソッドよりも冗長な制御をしなければなりませんんが、低レベルの制御ができたり、古いブラウザーでも利用できたりするといった利点があります。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// XHR を作成</span>
<span class="synStatement">const</span> item238_req = <span class="synStatement">new</span> XMLHttpRequest();
<span class="synComment">// 読み込み完了時のイベント</span>
item238_req.addEventListener(<span class="synConstant">'load'</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// レスポンスを受け取る</span>
  <span class="synStatement">const</span> item238_text = <span class="synStatement">event</span>.target.responseText;

  <span class="synComment">// テキストを出力</span>
  console.log(item238_text);
<span class="synIdentifier">}</span>);

<span class="synComment">// ファイルを指定</span>
item238_req.open(<span class="synConstant">'GET'</span>, <span class="synConstant">'./assets/js/sample.txt'</span>);
<span class="synComment">// 読み込み開始</span>
item238_req.send();
</pre>


<p><code>progress</code> イベントのイベントハンドラーで<code>total</code> プロパティー（総容量）、<code>loaded</code> プロパティー（現在の読み込み量）を取得すると何％のデータが読み込まれたかを取得できる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>item238_req.addEventListener(<span class="synConstant">'progress'</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// 読み込みの割合を算出</span>
  <span class="synStatement">const</span> item238_rate = <span class="synStatement">event</span>.loaded / <span class="synStatement">event</span>.total;
  console.log(`$<span class="synIdentifier">{</span>item238_rate * 100<span class="synIdentifier">}</span>%`);
<span class="synIdentifier">}</span>);
</pre>


<h3>241 バックグランドでスクリプトを実行させたい</h3>

<blockquote><p>JavaScript はメインスレッドで動作しますが、負荷の高い処理を実行すると、その最中は操作不可能となります。JavaScript の処理がUIを担当するメインスレッドを止めてしまうためです。解決する手段のひとつに Web Worker という仕様があります。Web Worker はメインスレッドの JavaScript と分離して処理が実行されます。</p></blockquote>

<p>注意点として、Web Worker はDOM操作ができない。</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item241_wrap&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;number&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;1&quot;</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item241_numA&quot;</span><span class="synIdentifier">&gt;</span> +
  <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;number&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;2&quot;</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item241_numB&quot;</span><span class="synIdentifier">&gt;</span> =
  <span class="synIdentifier">&lt;</span><span class="synStatement">span</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item241_result&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item241_btn&quot;</span><span class="synIdentifier">&gt;</span>計算する<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
</pre>


<p>メインスレッドのJS</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 参照を取得</span>
<span class="synStatement">const</span> item241_numA = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#item241_numA'</span>);
<span class="synStatement">const</span> item241_numB = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#item241_numB'</span>);
<span class="synStatement">const</span> item241_result = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item241_result'</span>);
<span class="synStatement">const</span> item241_btn = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item241_btn'</span>);

<span class="synComment">// ワーカーを作成</span>
<span class="synStatement">const</span> worker = <span class="synStatement">new</span> Worker(<span class="synConstant">'./assets/js/worker.js'</span>);

<span class="synComment">// ボタンをクリックしたとき</span>
item241_btn.addEventListener(<span class="synConstant">'click'</span>, () =&gt; <span class="synIdentifier">{</span>
  worker.postMessage(<span class="synIdentifier">[</span><span class="synType">Number</span>(item241_numA.value), <span class="synType">Number</span>(item241_numB.value)<span class="synIdentifier">]</span>);
  console.log(<span class="synConstant">'[メインスクリプト] ワーカーへメッセージを送信'</span>);
<span class="synIdentifier">}</span>);

<span class="synComment">// ワーカーから受信したとき</span>
worker.onmessage = <span class="synIdentifier">function</span> (e) <span class="synIdentifier">{</span>
  <span class="synComment">// 結果を画面に反映</span>
  item241_result.textContent = e.data;
  console.log(<span class="synConstant">'[メインスクリプト] ワーカーからメッセージを受信'</span>);
<span class="synIdentifier">}</span>;
</pre>


<p>worker.js</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>onmessage = (e) =&gt; <span class="synIdentifier">{</span>
  console.log(<span class="synConstant">'[ワーカー] メインスクリプトからメッセージを受信'</span>);

  <span class="synComment">// 足し算を実行</span>
  <span class="synStatement">const</span> item241_result = e.data<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span> + e.data<span class="synIdentifier">[</span>1<span class="synIdentifier">]</span>;

  console.log(<span class="synConstant">'[ワーカー] メインスクリプトにメッセージを送信'</span>);
  postMessage(item241_result);
<span class="synIdentifier">}</span>
</pre>


<h3>242 バックグランドでサービスワーカーを実行させたい</h3>

<blockquote><p>サービスワーカーは開いているWeb Pageの裏側で常に起動するスクリプトです。Web Worker はページが開いているときのみ実行されるのに対して、サービスワーカーはブラウザーを閉じていても実行できるという利点があります。</p></blockquote>

<p>※ Safari12 はブラウザ終了には Service Worker は動作しない。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">if</span> (<span class="synConstant">'serviceWorker'</span> <span class="synStatement">in</span> navigator) <span class="synIdentifier">{</span>
  navigator.serviceWorker
    .register(<span class="synConstant">'./assets/js/sw.js'</span>)
    .then((registration) =&gt; <span class="synIdentifier">{</span>
      <span class="synComment">// 登録成功</span>
      console.log(<span class="synConstant">'ServiceWorkerの登録に成功'</span>, registration.scope);
    <span class="synIdentifier">}</span>)
    .<span class="synStatement">catch</span>((error) =&gt; <span class="synIdentifier">{</span>
      <span class="synComment">// 登録失敗</span>
      console.log(<span class="synConstant">'ServiceWorkerの登録に失敗'</span>, error);
    <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>
</pre>


<p>sw.js</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">self</span>.addEventListener(<span class="synConstant">'fetch'</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
  console.log(<span class="synConstant">'通信が発生'</span>, <span class="synStatement">event</span>.request);
<span class="synIdentifier">}</span>);
</pre>


<blockquote><p>キャッシュ機能を利用するには Google が提供するライブラリ Workbox を利用するのがいいでしょう。</p></blockquote>

<p><a href="https://developers.google.com/web/tools/workbox/">Workbox  |  Google Developers</a></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】JavaScriptコードレシピ集 その12'
description: ''
publishDate: '04/19/2019 09:04:07'
---

[CONTENTS-START]
<p>JavaScriptコードレシピ集 の学習メモ 続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/"><img src="/images/hatena/20190726111820.jpg" class="hatena-asin-detail-image" alt="JavaScript コードレシピ集" title="JavaScript コードレシピ集"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/">JavaScript コードレシピ集</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 池田泰延,鹿野壮</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/01/25</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297103680/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>Chapter13 処理の実行タイミングを制御する</h2>

<p>Chapter12 の「SVGやcanvas要素を取り扱う」はいまいま実用ではなさそうだったので読んで終わりにします。</p>

<h3>219 一定時間後に処理を行いたい</h3>

<blockquote><p>第一引数には関数を、第二引数にミリ秒を数値で指定します。</p>

<p><code>setTimeout()</code> メソッドと <code>function</code> を使うと <code>this</code> のスコープが変わる場合もあるため、プロパティーの参照がうまくいかないこともあるでしょう。<code>this</code> のスコープがはずれないアロー関数と組み合わせて使うといいでしょう。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>setTimeout(() =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// 任意の処理</span>
  console.log(<span class="synIdentifier">this</span>); <span class="synComment">// このオブジェクト</span>
<span class="synIdentifier">}</span>, 1000);
</pre>


<h3>220 一定時間後の処理を解除したい</h3>

<blockquote><p>キャンセルしたいタイミングで <code>clearTimeout()</code> メソッドにタイマーを渡すことで、<code>setTimeout()</code> メソッドの呼び出しを解除できます。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item220_timerId = setTimeout(item220_timer, 1000); <span class="synComment">// 1000ミリ秒後に実行</span>
<span class="synIdentifier">function</span> item220_timer() <span class="synIdentifier">{</span>
  <span class="synComment">// 任意の処理</span>
  console.log(<span class="synConstant">'clearTimeout()で解除するため出力されません'</span>);
<span class="synIdentifier">}</span>

clearTimeout(item220_timerId); <span class="synComment">// 解除</span>
</pre>


<h3>221 一定時間ごとに処理を行いたい</h3>

<blockquote><p>スコープが変わるため、アロー関数と組み合わせて使うといいでしょう。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>setInterval(() =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// 任意の処理</span>
  console.log(`1000ミリ秒毎に出力されます`);
<span class="synIdentifier">}</span>, 1000);
</pre>


<h3>222 一定時間ごとの処理を解除したい</h3>

<blockquote><p><code>setInterval()</code> メソッドの戻り値は数値となります。この数値を変数に保存しておき、キャンセルしたいタイミングで <code>clearInterval()</code> メソッドにその数値を渡します。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item222_interlvalID = setInterval(item222_timer, 1000); <span class="synComment">// 1000ミリ秒ごとに実行</span>
<span class="synIdentifier">function</span> item222_timer() <span class="synIdentifier">{</span>
  <span class="synComment">// 任意の処理</span>
  console.log(<span class="synConstant">'clearInterval()で解除するため出力されません'</span>);
<span class="synIdentifier">}</span>

clearInterval(item222_interlvalID); <span class="synComment">// 解除</span>
</pre>


<h3>223 非同期処理を行えるPromiseを使いたい</h3>

<blockquote><p><code>Promise</code> オブジェクトは非同期処理を扱える機能です。<code>Promise</code> を使うと非同期処理を扱いやすくなるため、コードの可読性が向上します。</p>

<p><code>Promise</code> のコンストラクター引数には非同期処理を行う関数を指定します。この関数のなかでは、非同期処理の完了としての <code>resolve()</code> メソッドが呼ばれるのを待機します。<code>Promise</code> インスタンスの <code>then()</code> メソッドを使うと、<code>resolve()</code> メソッドが実行された後に続けたい処理を記述できます。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item223_promise = <span class="synStatement">new</span> Promise((resolve) =&gt; <span class="synIdentifier">{</span>
  setTimeout(() =&gt; <span class="synIdentifier">{</span>
    <span class="synComment">// resolve()を呼び出すとPrimiseの処理が完了</span>
    resolve(<span class="synConstant">'orange'</span>);
  <span class="synIdentifier">}</span>, 1000);
<span class="synIdentifier">}</span>);

<span class="synComment">// then() メソッドで続く処理を記述できる</span>
item223_promise.then((value) =&gt; <span class="synIdentifier">{</span>
  console.log(value); <span class="synComment">// 一秒後に実行される 結果: 'orange'</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>224 Promiseで処理の成功時・失敗時の処理を行いたい</h3>

<blockquote><p><code>Promise</code> で失敗時の処理を行いたいときは、コンストラクターの引数に <code>reject</code> を含む関数を指定します。<code>reject</code> は処理が失敗したことを示す処理を割り当てます。<code>reject</code> が実行された場合には、<code>catch()</code> メソッドが呼ばれます。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">let</span> item224_flag01 = <span class="synConstant">false</span>;
<span class="synStatement">const</span> item224_promise01 = <span class="synStatement">new</span> Promise((resolve, reject) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">if</span> (item224_flag01 === <span class="synConstant">true</span>) <span class="synIdentifier">{</span>
    resolve(<span class="synConstant">'orange'</span>);
  <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
    reject(<span class="synConstant">'apple'</span>);
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);

item224_promise01.then((value) =&gt; <span class="synIdentifier">{</span>
  console.log(value); <span class="synComment">// 結果: 'orange'</span>
<span class="synIdentifier">}</span>);
item224_promise01.<span class="synStatement">catch</span>((value) =&gt; <span class="synIdentifier">{</span>
  console.log(value); <span class="synComment">// 結果: 'apple' // item224_flag01 が false なのでこちらが出力される</span>
<span class="synIdentifier">}</span>);
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// メソッドチェーンとして記述できる</span>
<span class="synIdentifier">let</span> item224_flag02 = <span class="synConstant">true</span>;
<span class="synStatement">new</span> Promise((resolve, reject) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">if</span> (item224_flag02 === <span class="synConstant">true</span>) <span class="synIdentifier">{</span>
    resolve(<span class="synConstant">'orange'</span>);
  <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
    reject(<span class="synConstant">'apple'</span>);
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>)
  .then((value) =&gt; <span class="synIdentifier">{</span>
    console.log(value); <span class="synComment">// 結果: 'orange' // item224_flag02 が true なのでこちらが出力される</span>
  <span class="synIdentifier">}</span>)
  .<span class="synStatement">catch</span>((value) =&gt; <span class="synIdentifier">{</span>
    console.log(value); <span class="synComment">// 結果: 'apple'</span>
  <span class="synIdentifier">}</span>);
</pre>


<hr />

<p><code>setTimeout()</code> や <code>setInterval()</code> はいいにしてもほかがむずかしい<br/>
<code>promise</code> / <code>resolve</code> / <code>then</code> / <code>reject</code> / <code>catch</code> など用語は見たことあっても今までコピペだったので実際に手を動かして使うのははじめてなのでさぐりさぐりやってます。</p>

<ul>
<li>225 Promiseで並列処理をしたい</li>
<li>226 Promiseで直列処理をしたい</li>
<li>227 Promiseで動的に直列処理をしたい</li>
</ul>


<p>はスキップ</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】JavaScriptコードレシピ集 その11'
description: ''
publishDate: '04/18/2019 10:00:34'
---

[CONTENTS-START]
<p>JavaScriptコードレシピ集 の学習メモ 続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/"><img src="/images/hatena/20190726111820.jpg" class="hatena-asin-detail-image" alt="JavaScript コードレシピ集" title="JavaScript コードレシピ集"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/">JavaScript コードレシピ集</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 池田泰延,鹿野壮</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/01/25</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297103680/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>Chapter11 画像・音声・動画の取り扱い</h2>

<h3>191 画像をスクリプトで読み込みたい</h3>

<blockquote><p>HTMLの<code>src</code>属性にははじめは値を設定しないでおきます。空文字であってもネットワーク通信が発生するためです。</p></blockquote>

<p>↑ しらんかった</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item191_myImageA&quot;</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item191_myImageA = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#item191_myImageA'</span>);
item191_myImageA.src = <span class="synConstant">'assets/img/photo_a.png'</span>;
</pre>


<h3>192 画像の読み込み完了時に処理を行いたい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item192_myImage = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#item192_myImage'</span>);
item192_myImage.onload = () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// 画像の読み込み完了後の処理</span>
  setTimeout(() =&gt; <span class="synIdentifier">{</span>
    item192_myImage.classList.remove(<span class="synConstant">'loading'</span>);
  <span class="synIdentifier">}</span>,1000);
<span class="synIdentifier">}</span>
item192_myImage.src = <span class="synConstant">'assets/img/photo_a.png'</span>;
item192_myImage.classList.add(<span class="synConstant">'loading'</span>);
</pre>


<h3>193 ウェブページ内の画像を遅延読み込みさせる</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item193_img&quot;</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-</span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;assets/img/photo_a.png&quot;</span><span class="synIdentifier"> </span><span class="synType">width</span><span class="synIdentifier">=</span><span class="synConstant">&quot;144&quot;</span><span class="synIdentifier"> </span><span class="synType">height</span><span class="synIdentifier">=</span><span class="synConstant">&quot;144&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item193_img&quot;</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-</span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;assets/img/photo_b.png&quot;</span><span class="synIdentifier"> </span><span class="synType">width</span><span class="synIdentifier">=</span><span class="synConstant">&quot;144&quot;</span><span class="synIdentifier"> </span><span class="synType">height</span><span class="synIdentifier">=</span><span class="synConstant">&quot;144&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item193_img&quot;</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-</span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;assets/img/photo_c.png&quot;</span><span class="synIdentifier"> </span><span class="synType">width</span><span class="synIdentifier">=</span><span class="synConstant">&quot;144&quot;</span><span class="synIdentifier"> </span><span class="synType">height</span><span class="synIdentifier">=</span><span class="synConstant">&quot;144&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item193_btn&quot;</span><span class="synIdentifier">&gt;</span>読み込む<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 保存用に Map を用意</span>
<span class="synStatement">const</span> item193_srcMap = <span class="synStatement">new</span> Map();
<span class="synStatement">window</span>.addEventListener(<span class="synConstant">'DOMContentLoaded'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// img要素を一括で取得</span>
  <span class="synStatement">const</span> item1193_imgs = <span class="synStatement">document</span>.querySelectorAll(<span class="synConstant">'.item193_img'</span>);
  item1193_imgs.forEach((img) =&gt; <span class="synIdentifier">{</span>
    <span class="synComment">// 各img 要素の data-src属性を Mapに保存</span>
    item193_srcMap.set(img, img.dataset.src);
    <span class="synComment">// 遅延読み込みのため空にしておく</span>
    img.removeAttribute(<span class="synConstant">'src'</span>);
  <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>);

<span class="synStatement">const</span> item193_btn = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item193_btn'</span>);
item193_btn.addEventListener(<span class="synConstant">'click'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// img要素を一括で参照</span>
  <span class="synStatement">const</span> item1193_imgs = <span class="synStatement">document</span>.querySelectorAll(<span class="synConstant">'.item193_img'</span>);
  item1193_imgs.forEach((img) =&gt; <span class="synIdentifier">{</span>
    <span class="synComment">// 保存していたMapからsrcを割り当てる</span>
    <span class="synStatement">const</span> source = item193_srcMap.get(img);
    img.src = source;
  <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>);
</pre>


<hr />

<p>以降の Base64画像/音声/動画/カメラ も読みましたが実際にコード書くときでいいかなという感じでした。<br/>
動画は最近 PCのChrome では自動再生ができなくなったり、ときどきで仕様変わるのでそのあたりはむずかしいですね</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】JavaScriptコードレシピ集 その10'
description: ''
publishDate: '04/18/2019 09:30:39'
---

[CONTENTS-START]
<p>JavaScriptコードレシピ集 の学習メモ 続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/"><img src="/images/hatena/20190726111820.jpg" class="hatena-asin-detail-image" alt="JavaScript コードレシピ集" title="JavaScript コードレシピ集"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/">JavaScript コードレシピ集</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 池田泰延,鹿野壮</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/01/25</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297103680/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>Chapter10 アニメーションの作成</h2>

<h3>181 CSS Transitionsの終了時に処理を行いたい</h3>

<p>CSSの <code>animation</code> ではなく <code>transition</code> の終了を監視する場合、<code>transitionend</code> イベントを用いる</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item181_rect = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item181_rect'</span>);
item181_rect.addEventListener(<span class="synConstant">'transitionend'</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// アニメーション完了時のコード</span>
  console.log(<span class="synConstant">'アニメーションが完了しました'</span>);
<span class="synIdentifier">}</span>);
</pre>


<h3>182 CSS Animationsの終了時に処理を行いたい</h3>

<p>CSSの <code>animation</code> を監視する場合はこちら<br/>
<code>animationstart</code>, <code>animationiteration</code>, <code>animationend</code> を使ってそれぞれのタイミングが取れる</p>

<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">.item182_rect</span> <span class="synIdentifier">{</span>
  <span class="synType">width</span>: <span class="synConstant">40px</span>;
  <span class="synType">height</span>: <span class="synConstant">40px</span>;
  <span class="synType">background</span>: <span class="synConstant">red</span>;
  <span class="synType">animation</span>: infinite <span class="synConstant">1s</span> item<span class="synConstant">182</span>_rotate <span class="synConstant">linear</span>;
<span class="synIdentifier">}</span>

<span class="synComment">@keyframes</span> item182_rotate <span class="synIdentifier">{</span>
  <span class="synConstant">0%</span> <span class="synIdentifier">{</span>
    <span class="synType">transform</span>: <span class="synIdentifier">rotate(</span><span class="synConstant">0deg</span><span class="synIdentifier">)</span>;
  <span class="synIdentifier">}</span>
  <span class="synConstant">100%</span> <span class="synIdentifier">{</span>
    <span class="synType">transform</span>: <span class="synIdentifier">rotate(</span><span class="synConstant">360deg</span><span class="synIdentifier">)</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item182_rect = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item182_rect'</span>);
item182_rect.addEventListener(<span class="synConstant">'animationstart'</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// アニメーションが開始したときのイベント</span>
  console.log(<span class="synConstant">'アニメーションが開始しました。'</span>);
<span class="synIdentifier">}</span>);
item182_rect.addEventListener(<span class="synConstant">'animationiteration'</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// アニメーションで繰り返しが発生したときのイベント（繰り返しが未指定の場合は発生しない）</span>
  console.log(<span class="synConstant">'アニメーションで繰り返しが発生しました。'</span>);
<span class="synIdentifier">}</span>);
item182_rect.addEventListener(<span class="synConstant">'animationend'</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// アニメーションが完了したときのイベント（繰り返しを指定した場合は発生しない）</span>
  console.log(<span class="synConstant">'アニメーションが完了しました。'</span>);
<span class="synIdentifier">}</span>);
</pre>


<h3>183 アニメーションのための「Web Animations API」を使いたい</h3>

<blockquote><p>Web Animations API だと JavaScript だけで管理でき、終了時の判定をしやすいというメリットがあります。<br/>
第一引数には開始値と終了値を含むオブジェクトを、第二引数にはアニメーションの属性を含むオブジェクトを指定します。</p></blockquote>

<p>※ Edge はサポートしていないので使用するには Polyfill が必要 <a href="https://caniuse.com/#feat=web-animation">https://caniuse.com/#feat=web-animation</a><br/>
参考：<a href="https://qiita.com/mizchi/items/4def48e2467ae2b04da3">Web Animations API を使ってみる - Qiita</a></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 要素を取得</span>
<span class="synStatement">const</span> item183_rect = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item183_rect'</span>);
item183_rect.animate(
  <span class="synIdentifier">{</span>
    transform: <span class="synIdentifier">[</span>
      <span class="synConstant">'translate(0px) rotate(0deg)'</span>,    <span class="synComment">// 開始値</span>
      <span class="synConstant">'translate(200px) rotate(360deg)'</span> <span class="synComment">// 終了値</span>
    <span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span>
    duration: 3000,       <span class="synComment">// ミリ秒指定</span>
    iterations: Infinity, <span class="synComment">// 繰り返し回数</span>
    direction: <span class="synConstant">'normal'</span>,  <span class="synComment">// 繰り返し挙動</span>
    easing: <span class="synConstant">'ease'</span>        <span class="synComment">// イージング</span>
  <span class="synIdentifier">}</span>
);
</pre>


<ul>
<li>184 要素の大きさを変えたい</li>
<li>185 要素を移動させたい</li>
<li>186 要素の透明度を変化させたい</li>
<li>187 要素の明度を変化させたい</li>
<li>188 要素の彩度を変化させたい</li>
</ul>


<p>あたりはCSSのプロパティと上記が分かってれば大丈夫そうなのでスキップ</p>

<h3>189 <code>requestAnimationFrame()</code> を使いたい</h3>

<blockquote><p>時間経過で変化し続けるには <code>requestAnimationFrame()</code> メソッドを利用します。<code>requestAnimationFrame()</code> メソッドは再描画の前に関数の呼び出しを要求する命令です。</p>

<p>ウェブのアニメーションでは <code>requestAnimationFrame()</code> メソッドを使うのが、もっともムダがなくなめらかに見せられます。</p>

<p><code>requestAnimationFrame()</code> メソッドは一度しか呼び出されません。アニメーションを実装するには連続して呼び出す必要があるので、関数のなかで自身の関数を呼び出すように予約しておきます。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>tick();
<span class="synIdentifier">function</span> tick() <span class="synIdentifier">{</span>
  requestAnimationFrame(tick);
  <span class="synComment">// アニメーション処理を記述する</span>
<span class="synIdentifier">}</span>
</pre>


<p>関数を止めたい場合は</p>

<ul>
<li><code>requestAnimationFrame()</code> の呼び出しをしない</li>
<li><code>cancelAnimationFrame()</code> を使ってキャンセルする</li>
</ul>


<pre class="code lang-javascript" data-lang="javascript" data-unlink>tick();
<span class="synIdentifier">let</span> requestID;
<span class="synIdentifier">function</span> tick() <span class="synIdentifier">{</span>
  requestID = requestAnimationFrame(tick);
  <span class="synComment">// アニメーション処理を記述する</span>
<span class="synIdentifier">}</span>
cancelAnimationFrame(requestID);
</pre>


<h3>190 <code>requestAnimationFrame()</code> でHTML要素を動かしたい</h3>

<p>これは <code>style</code> 当てる形の例ですが、<code>requestAnimationFrame()</code> は WebGL や Canvas 動かす場面で主に使うそう</p>

<p>CSSの <code>will-change</code> プロパティはじめてみましたが、おまじない的な意味合いだそうであまり気にしなくて良いのかなと<br/>
参考：<a href="https://qiita.com/damele0n/items/71352757d0e6fdf5b184">CSS: will-change指定時の挙動, パフォーマンスへの影響と考察 - Qiita</a></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item190_stoker&quot;</span><span class="synIdentifier">&gt;</span>👻<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">.item190_stoker</span> <span class="synIdentifier">{</span>
  <span class="synType">position</span>: <span class="synConstant">fixed</span>;
  <span class="synType">top</span>: <span class="synConstant">0</span>;
  <span class="synType">left</span>: <span class="synConstant">0</span>;
  will-change: transform;
  <span class="synType">font-size</span>: <span class="synConstant">5rem</span>;
<span class="synIdentifier">}</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// マウスストーカーの要素を取得</span>
<span class="synStatement">const</span> item190_stoker = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item190_stoker'</span>);

<span class="synComment">// マウス座標</span>
<span class="synIdentifier">let</span> mouseX = 0;
<span class="synIdentifier">let</span> mouseY = 0;
<span class="synComment">// ストーカーの座標</span>
<span class="synIdentifier">let</span> currentX = 0;
<span class="synIdentifier">let</span> currentY = 0;
<span class="synComment">// マウス移動時</span>
<span class="synStatement">document</span>.body.addEventListener(<span class="synConstant">'mousemove'</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// マウス座標を保存</span>
  mouseX = <span class="synStatement">event</span>.clientX;
  mouseY = <span class="synStatement">event</span>.clientY;
<span class="synIdentifier">}</span>);

item190_tick();
<span class="synIdentifier">function</span> item190_tick() <span class="synIdentifier">{</span>
  <span class="synComment">// アニメーションフレームを指定</span>
  requestAnimationFrame(item190_tick);

  <span class="synComment">// マウス座標を遅延してストーカーの座標へ反映する</span>
  currentX += (mouseX - currentX) * 0.1;
  currentY += (mouseY - currentY) * 0.1;

  <span class="synComment">// ストーカーの要素へ反映</span>
  item190_stoker.style.transform = `translate($<span class="synIdentifier">{</span>currentX<span class="synIdentifier">}</span>px, $<span class="synIdentifier">{</span>currentY<span class="synIdentifier">}</span>px)`;
<span class="synIdentifier">}</span>
</pre>


<hr />

<p>JavaScript 側でアニメーションさせる（CSS的な要素を指定する）のはなんか好かないのですが、やり方やできること知っておこうと思いました。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】JavaScriptコードレシピ集 その9'
description: ''
publishDate: '04/17/2019 09:39:58'
---

[CONTENTS-START]
<p>JavaScriptコードレシピ集 の学習メモ 続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/"><img src="/images/hatena/20190726111820.jpg" class="hatena-asin-detail-image" alt="JavaScript コードレシピ集" title="JavaScript コードレシピ集"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/">JavaScript コードレシピ集</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 池田泰延,鹿野壮</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/01/25</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297103680/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>Chapter9 フォーム要素の操作方法</h2>

<h3>161 テキストボックスの情報を取得したい</h3>

<h3>162 テキストボックスの変更を検知したい</h3>

<table>
<thead>
<tr>
<th> イベント名 </th>
<th> 意味                            </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>change</code>   </td>
<td> input要素の変更時のイベント     </td>
</tr>
<tr>
<td> <code>input</code>    </td>
<td> input要素のキー入力時のイベント </td>
</tr>
</tbody>
</table>


<p><code>input</code> イベントはキー入力と同時にイベントが発生 <br/>
<code>change</code> イベントは <code>Enter</code> キーを押したときやフォーカスが外れたときにイベントが発生する</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// input要素の参照</span>
<span class="synStatement">const</span> chapter09_text = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#chapter09_text'</span>);
<span class="synComment">// イベントを登録</span>
chapter09_text.addEventListener(<span class="synConstant">'input'</span>, chapter09_text_handleChange);
<span class="synIdentifier">function</span> chapter09_text_handleChange(<span class="synStatement">event</span>) <span class="synIdentifier">{</span>
  <span class="synComment">// 値を取得する</span>
  <span class="synStatement">const</span> chapter09_text_value = <span class="synStatement">event</span>.target.value;
  console.log(chapter09_text_value);
<span class="synIdentifier">}</span>
</pre>


<h3>163 テキストエリアの情報を取得したい</h3>

<h3>164 テキストエリアの変更を検知したい</h3>

<p>こちらも<code>input</code>イベントと<code>chage</code>イベントがある<br/>
 <code>change</code> イベントは少し遅延してイベントが発生する</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// textarea要素の参照</span>
<span class="synStatement">const</span> chapter09_textarea = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#chapter09_textarea'</span>);
<span class="synComment">// イベントを登録</span>
chapter09_textarea.addEventListener(<span class="synConstant">'input'</span>, chapter09_textarea_handleChange);
<span class="synIdentifier">function</span> chapter09_textarea_handleChange(<span class="synStatement">event</span>) <span class="synIdentifier">{</span>
  <span class="synComment">// 値を取得する</span>
  <span class="synStatement">const</span> chapter09_textarea_value = <span class="synStatement">event</span>.target.value;

  <span class="synComment">// 改行コードを改行タグに変換</span>
  <span class="synStatement">const</span> chapter09_textarea_htmlStr = chapter09_textarea_value.split(<span class="synSpecial">'\n'</span>).join(<span class="synConstant">'&lt;br /&gt;'</span>);
  console.log(chapter09_textarea_htmlStr);
<span class="synIdentifier">}</span>
</pre>


<h3>165 チェックボックスの情報を取得したい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> chapter09_cbA = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#chapter09_cbA'</span>);
<span class="synStatement">const</span> chapter09_checkA = chapter09_cbA.checked; <span class="synComment">// 選択状態を確認</span>
console.log(chapter09_checkA); <span class="synComment">// 結果: false</span>

<span class="synStatement">const</span> chapter09_cbB = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#chapter09_cbB'</span>);
<span class="synStatement">const</span> chapter09_checkB = chapter09_cbB.checked; <span class="synComment">// 選択状態を確認</span>
console.log(chapter09_checkB); <span class="synComment">// 結果: true</span>

<span class="synStatement">const</span> chapter09_cbC = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#chapter09_cbC'</span>);
<span class="synStatement">const</span> chapter09_checkC = chapter09_cbC.checked; <span class="synComment">// 選択状態を確認</span>
console.log(chapter09_checkC); <span class="synComment">// 結果: false</span>

<span class="synComment">// チェックボックスの状態を変更する</span>
chapter09_cbC.checked = <span class="synConstant">true</span>;
</pre>


<h3>166 チェックボックスの変更を検知したい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>chapter09_cbA.addEventListener(<span class="synConstant">'change'</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// 選択状態を確認する</span>
  <span class="synStatement">const</span> chapter09_cbA_value = <span class="synStatement">event</span>.target.checked;

  <span class="synStatement">const</span> chapter09_cbA_log = `チェックボックスAは $<span class="synIdentifier">{</span>chapter09_cbA_value<span class="synIdentifier">}</span> になりました`;
  console.log(chapter09_cbA_log); <span class="synComment">// 結果: // チェックボックスAは true/false になりました</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>170 ラジオボタンの情報を取得したい</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter09_radioGroup&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synComment">&lt;!-- 1つ目のラジオボタン群 --&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;fruit&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;apple&quot;</span><span class="synIdentifier"> </span><span class="synType">checked</span><span class="synIdentifier">&gt;</span>apple<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;fruit&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;orange&quot;</span><span class="synIdentifier">&gt;</span>orange<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;fruit&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;grape&quot;</span><span class="synIdentifier">&gt;</span>grape<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synComment">&lt;!-- 2つ目のラジオボタン群 --&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;drink&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;coke&quot;</span><span class="synIdentifier"> </span><span class="synType">checked</span><span class="synIdentifier">&gt;</span>coke<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;drink&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;wine&quot;</span><span class="synIdentifier">&gt;</span>wine<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;drink&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;tea&quot;</span><span class="synIdentifier">&gt;</span>tea<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
</pre>


<p>選択状態取得するとき <code>value</code> はそこにくるのか。。少し気味悪い</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// form要素の参照</span>
<span class="synStatement">const</span> chapter09_radioGroup = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'form#chapter09_radioGroup'</span>);

<span class="synComment">// 現在の選択状態を取得</span>
<span class="synStatement">const</span> chapter09_fruitValue = chapter09_radioGroup.fruit.value;
<span class="synStatement">const</span> chapter09_drinkValue = chapter09_radioGroup.drink.value;

console.log(`fruitの値は $<span class="synIdentifier">{</span>chapter09_fruitValue<span class="synIdentifier">}</span> です`); <span class="synComment">// 結果: fruitの値は apple です</span>
console.log(`drinkの値は $<span class="synIdentifier">{</span>chapter09_drinkValue<span class="synIdentifier">}</span> です`); <span class="synComment">// 結果: drinkの値は coke です</span>
</pre>


<h3>171 ラジオボタンの変更を検知したい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>chapter09_radioGroup.addEventListener(<span class="synConstant">'change'</span>, chapter09_radioGroup_handleChange);
<span class="synIdentifier">function</span> chapter09_radioGroup_handleChange(<span class="synStatement">event</span>) <span class="synIdentifier">{</span>
  <span class="synComment">// 現在の選択状態を取得</span>
  <span class="synStatement">const</span> chapter09_fruitValue = chapter09_radioGroup.fruit.value;
  <span class="synStatement">const</span> chapter09_drinkValue = chapter09_radioGroup.drink.value;
  console.log(`fruitの値は $<span class="synIdentifier">{</span>chapter09_fruitValue<span class="synIdentifier">}</span> です`); <span class="synComment">// 結果: fruitの値は apple です</span>
  console.log(`drinkの値は $<span class="synIdentifier">{</span>chapter09_drinkValue<span class="synIdentifier">}</span> です`); <span class="synComment">// 結果: drinkの値は coke です</span>
<span class="synIdentifier">}</span>
</pre>


<h3>172 ドロップダウンメニューの情報を取得したい</h3>

<h3>173 ドロップダウンメニューの変更を検知したい</h3>

<p>ドロップダウンメニュー = <code>&lt;select&gt;</code> 要素ですね<br/>
やり方はもう他のパーツと一緒ですね</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// select要素の参照</span>
<span class="synStatement">const</span> chapter09_select = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#chapter09_select'</span>);
chapter09_select.addEventListener(<span class="synConstant">'change'</span>, chapter09_select_handleChange);
<span class="synIdentifier">function</span> chapter09_select_handleChange(<span class="synStatement">event</span>) <span class="synIdentifier">{</span>
  <span class="synComment">// 現在の選択状態を取得</span>
  <span class="synStatement">const</span> chapter09_selectValue = chapter09_select.value;
  console.log(`選択されているのは $<span class="synIdentifier">{</span>chapter09_selectValue<span class="synIdentifier">}</span> です`); <span class="synComment">// 結果: fruitの値は apple です</span>
<span class="synIdentifier">}</span>
</pre>


<hr />

<p>ファイル操作系</p>

<ul>
<li>167 ローカルファイルの情報を取得したい</li>
<li>168 ローカルファイルのファイルをテキストとして読み込みたい</li>
<li>169 ローカルファイルのファイルをDataURLデータとして読み込みたい</li>
</ul>


<p>と特殊UI系</p>

<ul>
<li>174 スライダーの情報を取得したい</li>
<li>175 スライダーの変更を検知したい</li>
<li>176 カラーピッカーの情報を取得したい</li>
<li>177 カラーピッカーの変更を検知したい</li>
</ul>


<p>はスキップ</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】JavaScriptコードレシピ集 その8'
description: ''
publishDate: '04/17/2019 08:44:10'
---

[CONTENTS-START]
<p>JavaScriptコードレシピ集 の学習メモ 続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/"><img src="/images/hatena/20190726111820.jpg" class="hatena-asin-detail-image" alt="JavaScript コードレシピ集" title="JavaScript コードレシピ集"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/">JavaScript コードレシピ集</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 池田泰延,鹿野壮</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/01/25</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297103680/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>Chapter8 HTML要素の操作方法</h2>

<p>DOM操作まわりの章です。見れば分かるけど自分でスクラッチで書けるかというと微妙なので一通りやってみました。<br/>
共通で使うHTMLは下記にしました。</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_list&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item01&quot;</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item&quot;</span><span class="synIdentifier">&gt;</span>item01<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item02&quot;</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item&quot;</span><span class="synIdentifier">&gt;</span>item02<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item03&quot;</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item&quot;</span><span class="synIdentifier">&gt;</span>item03<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item04&quot;</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item&quot;</span><span class="synIdentifier">&gt;</span>item04<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item05&quot;</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item&quot;</span><span class="synIdentifier">&gt;</span>item05<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
</pre>


<h3>136 セレクター名に一致する要素をひとつ取得したい</h3>

<blockquote><p><code>document.querySelector()</code> メソッドは、セレクターに合致するHTML要素をひとつ取得するメソッドです。</p></blockquote>

<p>セレクターに合致する、なのでCSSにおける <code>#ID名</code>, <code>.クラス名</code>, <code>:nth-child(番号)</code> などのこと。<br/>
複数合致する場合は最初の要素を返す。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item136_item01 = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.chapter08_item'</span>);
console.log(item136_item01); <span class="synComment">// 結果: &lt;li class=&quot;chapter08_item&quot;&gt;item01&lt;/li&gt;</span>

<span class="synStatement">const</span> item136_item02 = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.chapter08_item:nth-child(2)'</span>);
console.log(item136_item02); <span class="synComment">// 結果: &lt;li class=&quot;chapter08_item&quot;&gt;item02&lt;/li&gt;</span>
</pre>


<h3>137 ID名に一致する要素を取得したい</h3>

<blockquote><p><code>document.getElementById()</code> メソッドは、ID名を指定してHTML要素をひとつ取得するメソッドです。</p></blockquote>

<p>引数にセレクターではなくID名のみを指定する。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item137_item01 = <span class="synStatement">document</span>.getElementById(<span class="synConstant">'chapter08_item01'</span>);
console.log(item137_item01); <span class="synComment">// 結果: &lt;li id=&quot;chapter08_item01&quot; class=&quot;chapter08_item&quot;&gt;item01&lt;/li&gt;</span>
</pre>


<h3>138 セレクター名に該当する要素をまとめて取得したい</h3>

<blockquote><p><code>document.querySelectorAll()</code> メソッドは、セレクターに合致するHTML要素をすべて取得するメソッドです。</p></blockquote>

<p>帰ってくるのは、複数の要素をひとまとめにしたオブジェクト（NodeListオブジェクト）。ひとつひとつを処理するには、<code>forEach</code> もしくは <code>for</code> 文を用いる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item138_nodeList = <span class="synStatement">document</span>.querySelectorAll(<span class="synConstant">'.chapter08_item'</span>);
console.log(item138_nodeList);
<span class="synComment">/* 結果: NodeList(5) [li#chapter08_item01.chapter08_item, li#chapter08_item02.chapter08_item, li#chapter08_item03.chapter08_item, li#chapter08_item04.chapter08_item, li#chapter08_item05.chapter08_item] */</span>

<span class="synComment">// forEach を使う場合</span>
item138_nodeList.forEach((targetList) =&gt; <span class="synIdentifier">{</span>
  console.log(targetList.innerHTML); <span class="synComment">// 結果: item01, item02, item03, item04, item05</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>139 クラス名に一致する要素をすべて取得したい</h3>

<blockquote><p><code>document.getElementsByClassName()</code> メソッドは、クラス名を指定して合致するHTML要素をすべて取得するメソッドです。</p></blockquote>

<p>引数にはセレクターではなくクラス名のみを指定する。<br/>
各要素を処理するには <code>for</code> 文を使う。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item139_item01 = <span class="synStatement">document</span>.getElementsByClassName(<span class="synConstant">'chapter08_item'</span>);
console.log(item139_item01);
<span class="synComment">/* 結果: HTMLCollection(5) [li#chapter08_item01.chapter08_item, li#chapter08_item02.chapter08_item, li#chapter08_item03.chapter08_item, li#chapter08_item04.chapter08_item, li#chapter08_item05.chapter08_item, chapter08_item01: li#chapter08_item01.chapter08_item, chapter08_item02: li#chapter08_item02.chapter08_item, chapter08_item03: li#chapter08_item03.chapter08_item, chapter08_item04: li#chapter08_item04.chapter08_item, chapter08_item05: li#chapter08_item05.chapter08_item] */</span>

<span class="synComment">// 各要素を処理する場合にはfor文を使う</span>
<span class="synStatement">const</span> item139_itemList = <span class="synStatement">document</span>.getElementsByClassName(<span class="synConstant">'chapter08_item'</span>);
<span class="synStatement">const</span> item139_itemLength = item139_itemList.length;

<span class="synStatement">for</span> (<span class="synIdentifier">let</span> item139_index = 0; item139_index &lt; item139_itemLength; item139_index++) <span class="synIdentifier">{</span>
  console.log(item139_itemList<span class="synIdentifier">[</span>item139_index<span class="synIdentifier">]</span>); <span class="synComment">// 結果: &lt;li id=&quot;chapter08_item01&quot; class=&quot;chapter08_item&quot;&gt;item01&lt;/li&gt; ...</span>
<span class="synIdentifier">}</span>
</pre>


<p>jQuery だと <code>$('.hoge')</code> と <code>each()</code> 使ってできちゃうのでちょっとややこしいですが、4つの違いおぼえなきゃですね</p>

<h3>140 <code>&lt;html&gt;</code> 要素や <code>&lt;body&gt;</code> 要素を取得したい</h3>

<table>
<thead>
<tr>
<th> プロパティー               </th>
<th> 意味        </th>
<th> 型          </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>document.documentElement</code> </td>
<td> ルート要素  </td>
<td> <code>html</code> 要素 </td>
</tr>
<tr>
<td> <code>document.head</code>            </td>
<td> <code>head</code> 要素 </td>
<td> <code>head</code> 要素 </td>
</tr>
<tr>
<td> <code>document.body</code>            </td>
<td> <code>body</code> 要素 </td>
<td> <code>body</code> 要素 </td>
</tr>
</tbody>
</table>


<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">document</span>.body.classList.toggle(<span class="synConstant">'theme-dark'</span>);
</pre>


<p>みたいに書く</p>

<h3>141 子要素・前後要素・親要素を取得したい</h3>

<p>jQuery でいうところの <code>parent()</code>,  <code>child()</code>,  <code>prev()</code>,  <code>next()</code> あたりの処理</p>

<table>
<thead>
<tr>
<th> プロパティー                      </th>
<th> 意味             </th>
<th> 型                       </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>親ノード.children</code>               </td>
<td> 子ノード         </td>
<td> 要素郡（HTMLCollection） </td>
</tr>
<tr>
<td> <code>親ノード.firstElementChild</code>      </td>
<td> 最初の子ノード   </td>
<td> 要素（Element）          </td>
</tr>
<tr>
<td> <code>親ノード.lastElementChild</code>       </td>
<td> 最後の子ノード   </td>
<td> 要素（Element）          </td>
</tr>
<tr>
<td> <code>親ノード.nextElementSibling</code>     </td>
<td> 次（弟）のノード </td>
<td> 要素（Element）          </td>
</tr>
<tr>
<td> <code>親ノード.previousElementSibling</code> </td>
<td> 前（兄）のノード </td>
<td> 要素（Element）          </td>
</tr>
<tr>
<td> <code>親ノード.parentNode</code>             </td>
<td> 親のノード       </td>
<td> ノード（Node）           </td>
</tr>
</tbody>
</table>


<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item141_parentElement = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.chapter08_list'</span>);
console.log(item141_parentElement.children);
<span class="synComment">/* 結果: HTMLCollection(5) [li#chapter08_item01.chapter08_item,... */</span>

<span class="synStatement">const</span> item141_firstElementChild = item141_parentElement.firstElementChild;
console.log(item141_firstElementChild); <span class="synComment">// #chapter08_item01</span>
console.log(item141_firstElementChild.nextElementSibling); <span class="synComment">// #chapter08_item02</span>
console.log(item141_firstElementChild.parentNode); <span class="synComment">// .chapter08_list</span>
</pre>


<h3>142 親要素の末尾に要素を追加したい</h3>

<h3>143 指定要素の直前に要素を追加したい</h3>

<h3>144 要素の前後に別の要素を追加したい</h3>

<table>
<thead>
<tr>
<th> メソッド                                       </th>
<th> 意味                                     </th>
<th> 戻り値          </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>親ノード.appendChild(子ノード)</code>               </td>
<td> 親ノード内の末尾に子ノードを追加する     </td>
<td> 要素（Element） </td>
</tr>
<tr>
<td> <code>親ノード.insertBefore(子ノード,直前のノード)</code> </td>
<td> 親ノード内にノードを追加する             </td>
<td> 要素（Element） </td>
</tr>
<tr>
<td> <code>ノード1.before(ノード2)</code>                      </td>
<td> ノード1の前にノード2を追加する           </td>
<td> なし            </td>
</tr>
<tr>
<td> <code>ノード1.after(ノード2)</code>                       </td>
<td> ノード1の後にノード2を追加する           </td>
<td> なし            </td>
</tr>
<tr>
<td> <code>親ノード.hasChild(子ノード)</code>                  </td>
<td> 親ノードに子ノードが存在するかを確認する </td>
<td> 真偽値          </td>
</tr>
</tbody>
</table>


<h3>145 HTMLコードを要素として挿入したい</h3>

<blockquote><p><code>insertAdjacentHTML()</code> メソッドは、第一引数の位置に第二引数の文字列をHTML（またはXML）として挿入するメソッドです。</p></blockquote>

<p>使い方</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item145_container = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.chapter08_list'</span>);
<span class="synComment">// 挿入する .new-element 要素</span>
<span class="synStatement">const</span> item145_newElement = `&lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;new-element&quot;</span>&gt;.<span class="synStatement">new</span>-element要素&lt;/div&gt;`;

setTimeout(() =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// .chapter08_list 要素内先頭に .new-element を挿入する</span>
  item145_container.insertAdjacentHTML(<span class="synConstant">'afterbegin'</span>, item145_newElement);
<span class="synIdentifier">}</span>, 1000);
</pre>


<p>第一引数は4つオプションありそれぞれ下記の位置に挿入する</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!-- beforebegin の位置 --&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_list&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- afterbegin の位置 --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item01&quot;</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item&quot;</span><span class="synIdentifier">&gt;</span>item01<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item02&quot;</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item&quot;</span><span class="synIdentifier">&gt;</span>item02<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item03&quot;</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item&quot;</span><span class="synIdentifier">&gt;</span>item03<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item04&quot;</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item&quot;</span><span class="synIdentifier">&gt;</span>item04<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item05&quot;</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chapter08_item&quot;</span><span class="synIdentifier">&gt;</span>item05<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- beforeend の位置 --&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
<span class="synComment">&lt;!-- afterend の位置 --&gt;</span>
</pre>


<h3>146 要素を動的に削除したい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>setTimeout(() =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> item146_parent = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.chapter08_list'</span>);
  <span class="synStatement">const</span> item146_child = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#chapter08_item01'</span>);
  <span class="synComment">// #chapter08_item01 要素を取り除く</span>
  item146_parent.removeChild(item146_child);
<span class="synIdentifier">}</span>, 3000);
</pre>


<h3>147 自分自身の要素を削除したい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>setTimeout(() =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> item147_child = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#chapter08_item05'</span>);
  <span class="synComment">// #chapter08_item05 要素を取り除く</span>
  item147_child.remove();
<span class="synIdentifier">}</span>, 3000);
</pre>


<h3>148 要素を生成したい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// div要素を生成する</span>
<span class="synStatement">const</span> item148_divElement = <span class="synStatement">document</span>.createElement(<span class="synConstant">'div'</span>);
<span class="synComment">// innerHTMLで内容を生成する</span>
item148_divElement.innerHTML = <span class="synConstant">'これは動的に生成された要素です'</span>;
<span class="synComment">// body 要素の末尾に追加する</span>
<span class="synStatement">document</span>.body.appendChild(item148_divElement);
</pre>


<h3>149 要素を複製したい</h3>

<p>引数に <code>true</code> を渡すと、子ノードも複製します。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>setTimeout(() =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> item149_cloneBox = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#chapter08_item02'</span>).cloneNode(<span class="synConstant">true</span>);
  <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.chapter08_list'</span>).appendChild(item149_cloneBox);
<span class="synIdentifier">}</span>, 3000);
</pre>


<h3>152 要素内のテキストを取得したり、書き換えたりしたい</h3>

<p>jQuery の <code>text()</code></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item152_text = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item152_text'</span>);
console.log(item152_text.textContent); <span class="synComment">// 結果: テキストです。テキストです。</span>

<span class="synComment">// 書き換え</span>
setTimeout(() =&gt; <span class="synIdentifier">{</span>
  item152_text.textContent = <span class="synConstant">'テキストが書き換えされました。'</span>;
<span class="synIdentifier">}</span>, 2000);
</pre>


<h3>153 要素内のHTMLを取得したり、書き換えたりしたい</h3>

<p>jQuery の <code>html()</code><br/>
HTMLタグを含め文字列として取得する</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item153_html = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item153_html'</span>);
console.log(item153_html.innerHTML); <span class="synComment">// 結果: &lt;p&gt;テキストです。テキストです。&lt;/p&gt;</span>

<span class="synComment">// 書き換え</span>
setTimeout(() =&gt; <span class="synIdentifier">{</span>
  item153_html.innerHTML = <span class="synConstant">'&lt;p&gt;&lt;b&gt;HTMLが書き換えされました。&lt;/b&gt;&lt;/p&gt;'</span>;
<span class="synIdentifier">}</span>, 2000);
</pre>


<h3>154 要素（自分自身を含む）のHTMLを取得したり、書き換えたりしたい</h3>

<p>これ jQuery だと一発のメソッドでできないような</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item154_html = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item154_html'</span>);
console.log(item154_html.outerHTML);
<span class="synComment">/* 結果:</span>
<span class="synComment">&lt;div class=&quot;item154_html&quot;&gt;</span>
<span class="synComment">  &lt;p&gt;テキストです。テキストです。&lt;/p&gt;</span>
<span class="synComment">&lt;/div&gt;</span>
<span class="synComment">*/</span>

<span class="synComment">// 書き換え</span>
setTimeout(() =&gt; <span class="synIdentifier">{</span>
  item154_html.outerHTML = `&lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;item154_html&quot;</span>&gt;&lt;p&gt;&lt;b&gt;HTMLが書き換えされました。&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;`;
<span class="synIdentifier">}</span>, 2000);
</pre>


<h3>155 要素の属性を取得したり、書き換えたりしたい</h3>

<p>これは jQuery だと <code>getAttribute</code> と <code>hasAttribute</code> 分ける必要なく  <code>attr()</code> でやっちゃう感じですね。<br/>
<code>hasAttribute</code> は真偽値返すので有り無し判断はこちらを使ったほうが良さそう</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item155_link&quot;</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;example.com&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">リンク</span><span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item155_image&quot;</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;foo.png&quot;</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item155_link = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item155_link'</span>);
console.log(item155_link.getAttribute(<span class="synConstant">'href'</span>)); <span class="synComment">// 結果: example.com</span>
console.log(item155_link.hasAttribute(<span class="synConstant">'href'</span>)); <span class="synComment">// 結果: true</span>

<span class="synStatement">const</span> item155_image = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item155_image'</span>);
<span class="synComment">// img要素のsrcをbar.pngに書き換える</span>
item155_image.setAttribute(<span class="synConstant">'src'</span>, <span class="synConstant">'bar.png'</span>);
</pre>


<h3>157 要素のクラス属性の追加や削除をしたい</h3>

<p><code>addClass()</code>, <code>removeClass()</code>, <code>hasClass()</code> ですね</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item157_item = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#chapter08_item03'</span>);
item157_item.classList.add(<span class="synConstant">'chapter08_item--extend'</span>); <span class="synComment">// chapter08_item--extend クラスを追加</span>
item157_item.classList.remove(<span class="synConstant">'chapter08_item'</span>); <span class="synComment">// chapter08_item クラスを削除</span>

item157_item.classList.add(<span class="synConstant">'hoge'</span>, <span class="synConstant">'fuga'</span>, <span class="synConstant">'piyo'</span>);
item157_item.classList.remove(<span class="synConstant">'fuga'</span>, <span class="synConstant">'piyo'</span>);

<span class="synComment">// 特定のクラスが追加されているかを調べる</span>
console.log(item157_item.classList.contains(<span class="synConstant">'hoge'</span>)); <span class="synComment">// 結果: true</span>
console.log(item157_item.classList.contains(<span class="synConstant">'fuga'</span>)); <span class="synComment">// 結果: false</span>
</pre>


<h3>158 要素のクラスの有無を切り替えたい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item158_item = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#chapter08_item03'</span>);
<span class="synComment">// 1秒ごとにクラスを入れ替える</span>
setInterval(() =&gt; <span class="synIdentifier">{</span>
  item158_item.classList.toggle(<span class="synConstant">'chapter08_item--toggle'</span>);
<span class="synIdentifier">}</span>, 2000);
</pre>


<hr />

<ul>
<li>159 スタイルを変更したい</li>
<li>160 スタイルを取得したい</li>
</ul>


<p>はクラスの着脱ができればほぼ使うことないので飛ばしました。長かった。。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】JavaScriptコードレシピ集 その7'
description: ''
publishDate: '04/15/2019 09:38:37'
---

[CONTENTS-START]
<p>JavaScriptコードレシピ集 の学習メモ 続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/"><img src="/images/hatena/20190726111820.jpg" class="hatena-asin-detail-image" alt="JavaScript コードレシピ集" title="JavaScript コードレシピ集"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/">JavaScript コードレシピ集</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 池田泰延,鹿野壮</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/01/25</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297103680/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>Chapter 7 ユーザーアクションの取り扱い</h2>

<h3>114 ユーザーの操作が起こったときに処理を行いたい</h3>

<p>イベント発生時に関数を呼び出す方法として、</p>

<ul>
<li>アロー関数を使う方法</li>
<li>function宣言を使う方法</li>
<li>関数名を指定する方法</li>
</ul>


<p>がある。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 要素の参照を取得する</span>
<span class="synStatement">const</span> button = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.button'</span>);

<span class="synComment">// アロー関数を使う方法</span>
button.addEventListener(<span class="synConstant">'click'</span>, () =&gt; <span class="synIdentifier">{</span>
  console.log(`ボタンがクリックされました`);
<span class="synIdentifier">}</span>);

<span class="synComment">// function宣言を使う方法</span>
button.addEventListener(<span class="synConstant">'click'</span>, <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
  console.log(`ボタンがクリックされました`);
<span class="synIdentifier">}</span>);

<span class="synComment">// 関数名を指定する方法</span>
button.addEventListener(<span class="synConstant">'click'</span>, onClickButton);
<span class="synIdentifier">function</span> onClickButton() <span class="synIdentifier">{</span>
  console.log(`ボタンがクリックされました`);
<span class="synIdentifier">}</span>
</pre>


<p>イベント発生時に呼び出す関数では、引数としてイベントの情報を受け取ることができる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// イベントの情報を取得する</span>
button.addEventListener(<span class="synConstant">'click'</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// クリックされたボタン要素が出力される</span>
  console.log(<span class="synStatement">event</span>.target);
<span class="synIdentifier">}</span>);
</pre>


<h3>115 イベントリスナーを一度だけ呼び出したい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// オプションを指定</span>
<span class="synStatement">const</span> option = <span class="synIdentifier">{</span>
  once: <span class="synConstant">true</span>
<span class="synIdentifier">}</span>;

<span class="synStatement">document</span>
  .querySelector(<span class="synConstant">'.button'</span>)
  .addEventListener(<span class="synConstant">'click'</span>, onClickButton, option);

<span class="synIdentifier">function</span> onClickButton() <span class="synIdentifier">{</span>
  <span class="synStatement">alert</span>(<span class="synConstant">'ボタンが押されました。'</span>);
<span class="synIdentifier">}</span>
</pre>


<p>これ知らなかったす、たぶんいままで <code>var flag = true;</code> 使ってしていた感じはいらなそう</p>

<table>
<thead>
<tr>
<th> オプション </th>
<th> 意味                                </th>
<th> 型     </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>capture</code>  </td>
<td> キャプチャフェーズで取得するか      </td>
<td> 真偽値 </td>
</tr>
<tr>
<td> <code>once</code>     </td>
<td> リスナーの呼び出しを1回のみにするか </td>
<td> 真偽値 </td>
</tr>
<tr>
<td> <code>passive</code>  </td>
<td> パッシブイベントかどうか            </td>
<td> 真偽値 </td>
</tr>
</tbody>
</table>


<h3>117 ページが表示されたときに処理をしたい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// DOMにアクセスするタイミングで処理を実行する</span>
<span class="synStatement">window</span>.addEventListener(<span class="synConstant">'DOMContentLoaded'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// .box の要素数を取得する</span>
  <span class="synStatement">const</span> boxNum = <span class="synStatement">document</span>.querySelectorAll(<span class="synConstant">'.box'</span>).length;
  <span class="synComment">// ログを出力</span>
  console.log(`.box要素の数は$<span class="synIdentifier">{</span>boxNum<span class="synIdentifier">}</span>です`);
<span class="synIdentifier">}</span>);
</pre>


<p>この処理を行う場合、<code>&lt;script src=""&gt;</code> の <code>defer</code> 属性の設定は不要。<br/>
（<code>defer</code> を使うと、HTMLの解析終了後にスクリプトが実行されるため）</p>

<h3>118 クリック時に処理をしたい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">document</span>.querySelector(<span class="synConstant">'.button'</span>).addEventListener(<span class="synConstant">'click'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">alert</span>(<span class="synConstant">'ボタンがクリックされました'</span>);
<span class="synIdentifier">}</span>);
</pre>


<h3>119 マウスを押したときや動かしたときに処理をしたい</h3>

<table>
<thead>
<tr>
<th> イベント名  </th>
<th> 発生タイミング           </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>mousedown</code> </td>
<td> マウスボタンを押したとき </td>
</tr>
<tr>
<td> <code>mouseup</code>   </td>
<td> マウスボタンを話したとき </td>
</tr>
<tr>
<td> <code>mousemove</code> </td>
<td> マウスを動かしたとき     </td>
</tr>
</tbody>
</table>


<h3>120 マウスオーバー時に処理をしたい</h3>

<h3>121 マウスオーバー時に処理をしたい（バブリングあり）</h3>

<p>マウスオーバー時の処理、 <code>mouseenter</code> / <code>mouseleave</code> と <code>mouseover</code> / <code>mouseout</code> の違いはイベントがバブリングするかどうか。</p>

<blockquote><p>バブリングとは、ある要素で発生したイベントが親要素や先祖要素に伝わることです。</p></blockquote>

<p><code>mouseover</code> / <code>mouseout</code> はバブリングが発生するイベントなので、親要素・小要素で <code>mouseover</code> / <code>mouseout</code>  のイベントリスナーを設定していた場合、小要素で発生したイベントが親要素にも発生し、親要素のイベントリスナーが実行される。</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item120_box&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item120_inner&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item120_box'</span>).addEventListener(<span class="synConstant">'mouseover'</span>, () =&gt; <span class="synIdentifier">{</span>
  console.log(<span class="synConstant">'.item120_box 要素にマウスが乗った'</span>);
<span class="synIdentifier">}</span>);

<span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item120_inner'</span>).addEventListener(<span class="synConstant">'mouseover'</span>, () =&gt; <span class="synIdentifier">{</span>
  console.log(<span class="synConstant">'.item120_inner 要素にマウスが乗った'</span>);
<span class="synIdentifier">}</span>);
</pre>


<p>と書いたとき、<code>.item120_inner</code> をマウスオーバーすると、ログには</p>

<pre class="code" data-lang="" data-unlink>.item120_inner 要素にマウスが乗った
.item120_box 要素にマウスが乗った</pre>


<p>と inner要素のイベントに加えて box要素のイベントも発生する。</p>

<h3>122 マウス操作時の座標を取得したい</h3>

<table>
<thead>
<tr>
<th> プロパティー    </th>
<th> 内容                          </th>
<th> 型   </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>event.clientX</code> </td>
<td> ブラウザ左上を基準としたX座標 </td>
<td> 数値 </td>
</tr>
<tr>
<td> <code>event.clientY</code> </td>
<td> ブラウザ左上を基準としたY座標 </td>
<td> 数値 </td>
</tr>
<tr>
<td> <code>event.offsetX</code> </td>
<td> 要素左上を基準としたX座標     </td>
<td> 数値 </td>
</tr>
<tr>
<td> <code>event.offsetY</code> </td>
<td> 要素左上を基準としたY座標     </td>
<td> 数値 </td>
</tr>
<tr>
<td> <code>event.pageX</code>   </td>
<td> ページ左上を基準としたX座標   </td>
<td> 数値 </td>
</tr>
<tr>
<td> <code>event.pageY</code>   </td>
<td> ページ左上を基準としたY座標   </td>
<td> 数値 </td>
</tr>
<tr>
<td> <code>event.screenX</code> </td>
<td> デバイス左上を基準としたX座標 </td>
<td> 数値 </td>
</tr>
<tr>
<td> <code>event.screenY</code> </td>
<td> デバイス左上を基準としたY座標 </td>
<td> 数値 </td>
</tr>
</tbody>
</table>


<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">window</span>.addEventListener(<span class="synConstant">'mousemove'</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
  console.log(<span class="synStatement">event</span>.clientX, <span class="synStatement">event</span>.clientY);
<span class="synIdentifier">}</span>);
</pre>


<h3>123 スクロール時に処理をしたい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">window</span>.addEventListener(<span class="synConstant">'scroll'</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
  console.log(<span class="synStatement">window</span>.scrollX, <span class="synStatement">window</span>.scrollY);
<span class="synIdentifier">}</span>);
</pre>


<h3>124 テキスト選択時に処理をしたい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item124_paragraph'</span>).addEventListener(<span class="synConstant">'selectstart'</span>, () =&gt; <span class="synIdentifier">{</span>
  console.log(<span class="synConstant">'テキストが選択された'</span>);
<span class="synIdentifier">}</span>);
</pre>


<p>Medium とかのツールチップ表示はこれなどを使っているのですね。<br/>
実用ではサンプルである通り、選択された文字列が1文字以上あるかなど調べて処理するなどするので少し複雑そうです。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 選択されている文字列を取得する</span>
<span class="synStatement">const</span> selectionCharactors = windowGetSelection().toString();
</pre>


<p><code>windowGetSelection()</code> は選択範囲を返す処理。</p>

<h3>125 タッチ操作時に処理をしたい</h3>

<table>
<thead>
<tr>
<th> イベント名   </th>
<th> 発生タイミング               </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>touchstart</code> </td>
<td> タッチを開始したとき         </td>
</tr>
<tr>
<td> <code>touchmove</code>  </td>
<td> タッチポイントを動かしたとき </td>
</tr>
<tr>
<td> <code>touchend</code>   </td>
<td> タッチを終了したとき         </td>
</tr>
</tbody>
</table>


<h3>126 タッチ操作時のイベントの発生情報を取得したい</h3>

<p>タッチイベントは複数のタッチイベントが発生する可能性がある（親指と人差指で同時にタッチした際など）<br/>
<code>event.changeTouches</code> とすることでタッチ情報を配列で複数取得ができる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item126_box = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item126_box'</span>);
item126_box.addEventListener(<span class="synConstant">'touchstart'</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// タッチ情報のリスト</span>
  console.log(<span class="synStatement">event</span>.changeTouches);
<span class="synIdentifier">}</span>);
</pre>


<h3>129 タブがバックグラウンドになったときに処理をしたい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">document</span>.addEventListener(<span class="synConstant">'visibilitychange'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">if</span> (<span class="synStatement">document</span>.visibilityState === <span class="synConstant">'visible'</span>) <span class="synIdentifier">{</span>
    console.log(<span class="synConstant">'コンテンツが表示されました'</span>);
    <span class="synStatement">return</span>;
  <span class="synIdentifier">}</span>

  <span class="synStatement">if</span> (<span class="synStatement">document</span>.visibilityState === <span class="synConstant">'hidden'</span>) <span class="synIdentifier">{</span>
    console.log(<span class="synConstant">'コンテンツがバックグラウンドになりました'</span>);
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>「110 ページにフォーカスされているか調べたい」の <code>focus</code> / <code>blur</code> とは違ってブラウザのタブが選択状態か否かの判断となる。こちらのほうが実用的ですかね</p>

<h3>130 画面サイズが変更になったときに処理をしたい</h3>

<p>「097 ウインドウサイズを調べたい」のときに触れた、リサイズ毎の処理、<code>setTimeout()</code> を使う方法</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 1秒後にリサイズ処理を実行するタイマー</span>
<span class="synIdentifier">let</span> resizeTimer;

<span class="synStatement">window</span>.addEventListener(<span class="synConstant">'resize'</span>, () =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// resizeTimer があればタイマーを解除</span>
  <span class="synStatement">if</span> (resizeTimer != <span class="synStatement">null</span>) <span class="synIdentifier">{</span>
    clearTimeout(resizeTimer);
  <span class="synIdentifier">}</span>

  <span class="synComment">// 1000ミリ秒後に onResize() を実行する</span>
  resizeTimer = setTimeout(() =&gt; <span class="synIdentifier">{</span>
    onResize();
  <span class="synIdentifier">}</span>,1000)
<span class="synIdentifier">}</span>);

<span class="synComment">// リサイズ時の処理</span>
<span class="synIdentifier">function</span> onResize() <span class="synIdentifier">{</span>
  console.log(<span class="synConstant">'ウィンドウがリサイズされました'</span>);
<span class="synIdentifier">}</span>
</pre>


<h3>131 画面サイズがブレークポイントを超えたときに処理をしたい</h3>

<p>これ全く知らなかったです。↑のウィンドウサイズでやることってだいたいメディアクエリでできることのような気がするので今後これを使うべきかも？</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> mediaQueryList = matchMedia(<span class="synConstant">'(min-width: 500px'</span>);
console.log(mediaQueryList);
<span class="synComment">/* 結果:</span>
<span class="synComment">matches: true</span>
<span class="synComment">media: &quot;(min-width: 500px)&quot;</span>
<span class="synComment">onchange: null</span>
<span class="synComment">*/</span>
</pre>


<blockquote><p><code>matchMedia()</code> メソッドは、引数に応じたメディアクエリの情報を返します。</p>

<p><code>matches</code> プロパティーはメディアクエリに一致するかどうかの真偽値であり、<code>media</code> プロパティーはブラウザーが評価したクエリ文字列です。</p></blockquote>

<p><code>matches</code> プロパティーを用いて、ブラウザーウィンドウのサイズがメディアクエリに一致するかどうかを調べられます。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// ウィンドウサイズが300px以下ならばtrue</span>
<span class="synStatement">const</span> mediaQueryMacth01 = matchMedia(<span class="synConstant">'(max-width: 500px'</span>).matches;
console.log(mediaQueryMacth01);

<span class="synComment">// ウィンドウサイズが100px以上700px以下ならばtrue</span>
<span class="synStatement">const</span> mediaQueryMacth02 = matchMedia(<span class="synConstant">'(min-width: 100px) and (max-width: 700px'</span>).matches;
console.log(mediaQueryMacth02);
</pre>


<p>スマートフォンの縦向き・横向き変更を検知したいときなど、メディアクエリの変化タイミングで処理を行いたいケースには、次のようにコールバック処理を設定できます。コールバックはメディアクエリの状態が変更されるタイミングで実行されます。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// (orientation: portrait)は横持ちを示す</span>
<span class="synStatement">const</span> mediaQueryList02 = matchMedia(<span class="synConstant">'(orientation: portrait'</span>);

mediaQueryList02.eventListener(() =&gt; <span class="synIdentifier">{</span>
  console.log(<span class="synConstant">'デバイスの向きが変更された'</span>);
<span class="synIdentifier">}</span>);
</pre>


<p>クラス着脱の例</p>

<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">.item131_rectangle</span> <span class="synIdentifier">{</span>
  <span class="synType">width</span>: <span class="synConstant">200px</span>;
  <span class="synType">height</span>: <span class="synConstant">200px</span>;
  <span class="synType">background</span>: <span class="synConstant">blue</span>;
<span class="synIdentifier">}</span>

<span class="synIdentifier">.item131_rectangle.big-size</span> <span class="synIdentifier">{</span>
  <span class="synType">background</span>: <span class="synConstant">red</span>;
<span class="synIdentifier">}</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> rectAngle = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item131_rectangle'</span>);

<span class="synComment">// メディアクエリ情報</span>
<span class="synStatement">const</span> mediaQueryList03 = matchMedia(<span class="synConstant">'(min-width: 600px'</span>);

<span class="synComment">// メディアクエリが変更されたタイミングで処理</span>
mediaQueryList03.addListener(onMediaQueryChange);

<span class="synComment">// メディアクエリが変更された際に実行される関数</span>
<span class="synIdentifier">function</span> onMediaQueryChange(mediaQueryList03) <span class="synIdentifier">{</span>
  <span class="synStatement">if</span> (mediaQueryList03.matches === <span class="synConstant">true</span>) <span class="synIdentifier">{</span>
    rectAngle.classList.add(<span class="synConstant">'big-size'</span>);
    console.log(<span class="synConstant">'ウィンドウサイズが600pxを超えました'</span>);
  <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
    rectAngle.classList.remove(<span class="synConstant">'big-size'</span>);
    console.log(<span class="synConstant">'ウィンドウサイズが600pxを下回りました'</span>);
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>

<span class="synComment">// ページ表示時に一度 onMediaQueryChange() を実行しておく</span>
onMediaQueryChange(mediaQueryList03);
</pre>


<h3>132 イベントを発火させたい</h3>

<p>これも知らなかった。使えるかどうか微妙ですが</p>

<blockquote><p><code>dispatchEvent()</code> メソッドは、イベントターゲットに対して任意のイベントを発生させます。</p></blockquote>

<p>下記の例は、クリックしなくても1秒後に <code>クリックされました</code> とHTMLが仕込まれるというもの。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item132_boxElement = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'#item132_myBox'</span>);

item132_boxElement.addEventListener(<span class="synConstant">'click'</span>, () =&gt; <span class="synIdentifier">{</span>
  item132_boxElement.innerHTML = <span class="synConstant">'クリックされました'</span>;
<span class="synIdentifier">}</span>);

setTimeout(() =&gt; <span class="synIdentifier">{</span>
  item132_boxElement.dispatchEvent(<span class="synStatement">new</span> Event(<span class="synConstant">'click'</span>));
<span class="synIdentifier">}</span>, 1000);
</pre>


<h3>133 デフォルトのイベントをキャンセルしたい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// マウスホイールを無効化する</span>
<span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item133_foo'</span>).addEventListener(<span class="synConstant">'wheel'</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">event</span>.preventDefault();
<span class="synIdentifier">}</span>);

<span class="synComment">// タッチ開始処理を無効化</span>
<span class="synStatement">document</span>.documentElement.addEventListener(<span class="synConstant">'touchstart'</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">event</span>.preventDefault();
<span class="synIdentifier">}</span>);
</pre>


<hr />

<p>132,133 あたりのイベントの発火やキャンセルって結構苦手で実戦ではまた苦戦するのだろうなとも思いますがこういう機会に学べてよかったです</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】JavaScriptコードレシピ集 その6'
description: ''
publishDate: '04/12/2019 09:31:38'
---

[CONTENTS-START]
<p>JavaScriptコードレシピ集 の学習メモ 続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/"><img src="/images/hatena/20190726111820.jpg" class="hatena-asin-detail-image" alt="JavaScript コードレシピ集" title="JavaScript コードレシピ集"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/">JavaScript コードレシピ集</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 池田泰延,鹿野壮</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/01/25</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297103680/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>Chapter 6 ブラウザーの操作方法</h2>

<p>jQuery でばかりやってきたこと中心で、ピュアな JavaScript でも見れば分かるけど自分でも書けなきゃなと思いました。<br/>
後半のほう（全画面表示やオンライン/オフラインの出し分け）はWebアプリ化するときに使えそうなテクニックでした。</p>

<h3>094 アラートを表示したい</h3>

<p>いちおう基本形なので</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// ボタンの参照</span>
<span class="synStatement">const</span> item94_btn = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item94_button'</span>);

<span class="synComment">// ボタンをクリックしたとき</span>
item94_btn.addEventListener(<span class="synConstant">'click'</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// アラートを表示</span>
  <span class="synStatement">alert</span>(<span class="synConstant">'こんにちは。</span><span class="synSpecial">\n</span><span class="synConstant">今日の天気は晴れです。'</span>);
<span class="synIdentifier">}</span>);
</pre>


<h3>097 ウインドウサイズを調べたい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">window</span>.addEventListener(<span class="synConstant">'resize'</span>, resizeHandler);
resizeHandler(<span class="synStatement">event</span>);

<span class="synIdentifier">function</span> resizeHandler(<span class="synStatement">event</span>) <span class="synIdentifier">{</span>
  <span class="synComment">// 画面幅</span>
  <span class="synStatement">const</span> w = innerWidth;
  <span class="synComment">// 画面高さ</span>
  <span class="synStatement">const</span> h = innerHeight;

  console.log(`横幅は$<span class="synIdentifier">{</span>w<span class="synIdentifier">}</span>pxです`);
  console.log(`高さは$<span class="synIdentifier">{</span>h<span class="synIdentifier">}</span>pxです`);
<span class="synIdentifier">}</span>
</pre>


<p>実際は <code>setTimeOut()</code> 噛ませて何秒おきとかにしなきゃですね</p>

<h3>105 ハッシュ（#）の変更を検知したい</h3>

<p><code>hashchange</code> というイベントがあるようで、それでハッシュの監視が可能。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// ハッシュの変更のイベントを監視</span>
<span class="synStatement">window</span>.addEventListener(<span class="synConstant">'hashchange'</span>, handleHashChange);
handleHashChange();

<span class="synIdentifier">function</span> handleHashChange() <span class="synIdentifier">{</span>
  <span class="synComment">// 変更後のハッシュの値</span>
  <span class="synStatement">const</span> hash = <span class="synStatement">location</span>.hash;
  <span class="synStatement">if</span> (hash) <span class="synIdentifier">{</span>
    console.log(`現在のアンカーは「$<span class="synIdentifier">{</span>hash<span class="synIdentifier">}</span>」です`);
  <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
    console.log(`アンカーはありません`);
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<h3>110 ページにフォーカスされているか調べたい</h3>

<p>使うかどうかわからんですが、これ知りませんでした</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">window</span>.addEventListener(<span class="synConstant">'focus'</span>, () =&gt; <span class="synIdentifier">{</span>
  console.log(`フォーカスがあたっている`);
<span class="synIdentifier">}</span>);

<span class="synStatement">window</span>.addEventListener(<span class="synConstant">'blur'</span>, () =&gt; <span class="synIdentifier">{</span>
  console.log(`フォーカスがはずれている`);
<span class="synIdentifier">}</span>);
</pre>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】JavaScriptコードレシピ集 その5'
description: ''
publishDate: '04/12/2019 08:55:11'
---

[CONTENTS-START]
<p>JavaScriptコードレシピ集 の学習メモ 続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/"><img src="/images/hatena/20190726111820.jpg" class="hatena-asin-detail-image" alt="JavaScript コードレシピ集" title="JavaScript コードレシピ集"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/">JavaScript コードレシピ集</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 池田泰延,鹿野壮</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/01/25</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297103680/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>Chapter 5 日付や時間の取り扱い</h2>

<h3>085 曜日を取得したい</h3>

<p><code>getDay()</code> メソッドは曜日を数値で返す。戻り値が <code>0</code> のときは日曜日、<code>6</code> のときは土曜日に対応する。<br/>
こんなおしゃれな書き方ができるんですね。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item85_date    = <span class="synStatement">new</span> <span class="synType">Date</span>();
<span class="synStatement">const</span> item85_day     = item85_date.getDay();
<span class="synStatement">const</span> item85_dayList = <span class="synIdentifier">[</span><span class="synConstant">'日'</span>, <span class="synConstant">'月'</span>, <span class="synConstant">'火'</span>, <span class="synConstant">'水'</span>, <span class="synConstant">'木'</span>, <span class="synConstant">'金'</span>, <span class="synConstant">'土'</span><span class="synIdentifier">]</span>;
<span class="synStatement">const</span> item85_label   = item85_dayList<span class="synIdentifier">[</span>item85_day<span class="synIdentifier">]</span>;

console.log(`今日は$<span class="synIdentifier">{</span>item85_label<span class="synIdentifier">}</span>曜日です`); <span class="synComment">// 結果: '今日は金曜日です'</span>
</pre>


<h3>093 アナログ時計を表示したい</h3>

<p>今度使うかもしれないのでやってみた。</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!-- HTML --&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;clock&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;line lineHour&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;line lineMin&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;line lineSec&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-css" data-lang="css" data-unlink><span class="synComment">/* CSS */</span>
<span class="synIdentifier">.clock</span> <span class="synIdentifier">{</span>
  <span class="synType">margin-top</span>: <span class="synConstant">20px</span>;
  <span class="synType">width</span>: <span class="synConstant">400px</span>;
  <span class="synType">height</span>: <span class="synConstant">400px</span>;
  <span class="synType">background</span>: <span class="synIdentifier">rgba(</span><span class="synConstant">0</span><span class="synIdentifier">,</span><span class="synConstant">0</span><span class="synIdentifier">,</span><span class="synConstant">0</span><span class="synIdentifier">,</span><span class="synConstant">.1</span><span class="synIdentifier">)</span>;
  <span class="synType">border-radius</span>: <span class="synConstant">50%</span>;
  <span class="synType">border</span>: <span class="synConstant">#000</span> <span class="synConstant">3px</span> <span class="synConstant">solid</span>;
  <span class="synType">position</span>: <span class="synConstant">relative</span>;
<span class="synIdentifier">}</span>
<span class="synIdentifier">.line</span> <span class="synIdentifier">{</span>
  <span class="synType">position</span>: <span class="synConstant">absolute</span>;
  <span class="synType">transform-origin</span>: <span class="synConstant">bottom</span>;
  <span class="synType">border-radius</span>: <span class="synConstant">9999px</span>;
<span class="synIdentifier">}</span>
<span class="synIdentifier">.lineHour</span> <span class="synIdentifier">{</span>
  <span class="synType">width</span>: <span class="synConstant">10px</span>;
  <span class="synType">height</span>: <span class="synConstant">150px</span>;
  <span class="synType">top</span>: calc(<span class="synConstant">50%</span> - <span class="synConstant">150px</span>);
  <span class="synType">left</span>: calc(<span class="synConstant">50%</span> - <span class="synConstant">5px</span>);
  <span class="synType">background</span>: <span class="synConstant">#000</span>;
<span class="synIdentifier">}</span>
<span class="synIdentifier">.lineMin</span> <span class="synIdentifier">{</span>
  <span class="synType">width</span>: <span class="synConstant">4px</span>;
  <span class="synType">height</span>: <span class="synConstant">200px</span>;
  <span class="synType">top</span>: calc(<span class="synConstant">50%</span> - <span class="synConstant">200px</span>);
  <span class="synType">left</span>: calc(<span class="synConstant">50%</span> - <span class="synConstant">2px</span>);
  <span class="synType">background</span>: <span class="synConstant">#000</span>;
<span class="synIdentifier">}</span>
<span class="synIdentifier">.lineSec</span> <span class="synIdentifier">{</span>
  <span class="synType">width</span>: <span class="synConstant">2px</span>;
  <span class="synType">height</span>: <span class="synConstant">200px</span>;
  <span class="synType">top</span>: calc(<span class="synConstant">50%</span> - <span class="synConstant">200px</span>);
  <span class="synType">left</span>: calc(<span class="synConstant">50%</span> - <span class="synConstant">1px</span>);
  <span class="synType">background</span>: <span class="synConstant">#aaa</span>;
<span class="synIdentifier">}</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// JavaScript</span>
setInterval(() =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// 現在時刻を取得</span>
  <span class="synStatement">const</span> now = <span class="synStatement">new</span> <span class="synType">Date</span>();

  <span class="synComment">// 時間の数値を取得</span>
  <span class="synStatement">const</span> h = now.getHours();   <span class="synComment">// 時間（0〜23）</span>
  <span class="synStatement">const</span> m = now.getMinutes(); <span class="synComment">// 分（0〜59）</span>
  <span class="synStatement">const</span> s = now.getSeconds(); <span class="synComment">// 秒（0〜59）</span>

  <span class="synComment">// 針の角度に反映する</span>

  <span class="synComment">// 短針（時間だけでなく分も角度に考慮する）</span>
  <span class="synStatement">const</span> degH = h * (360 / 12) + m * (360 / 12 / 60);
  <span class="synComment">// 分針</span>
  <span class="synStatement">const</span> degM = m * (360 / 60);
  <span class="synComment">// 秒針</span>
  <span class="synStatement">const</span> degS = s * (360 / 60);

  <span class="synStatement">const</span> elementH = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.lineHour'</span>);
  <span class="synStatement">const</span> elementM = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.lineMin'</span>);
  <span class="synStatement">const</span> elementS = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.lineSec'</span>);

  elementH.style.transform = `rotate($<span class="synIdentifier">{</span>degH<span class="synIdentifier">}</span>deg)`;
  elementM.style.transform = `rotate($<span class="synIdentifier">{</span>degM<span class="synIdentifier">}</span>deg)`;
  elementS.style.transform = `rotate($<span class="synIdentifier">{</span>degS<span class="synIdentifier">}</span>deg)`;
<span class="synIdentifier">}</span>, 50);
</pre>


<hr />

<p>日付関連のほかは</p>

<ul>
<li>西暦/日付/時刻を取得する</li>
<li>日本式の表記の時刻を取得する</li>
<li>日付文字列からタイムスタンプ値を取得する</li>
<li>Dateインスタンスに別の日時を設定する</li>
<li>日付・時刻値を加算・減算する</li>
<li>日付・時刻の差分を計算する</li>
<li>経過時間を調べる</li>
<li>カウントダウン処理をする</li>
</ul>


<p>ですが全部暗記は難しそうなのでできること知っておいて、あとで引っ張り出せればよいかなと思いました。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】JavaScriptコードレシピ集 その4'
description: ''
publishDate: '04/11/2019 21:30:00'
---

[CONTENTS-START]
<p>JavaScriptコードレシピ集 の学習メモ 続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/"><img src="/images/hatena/20190726111820.jpg" class="hatena-asin-detail-image" alt="JavaScript コードレシピ集" title="JavaScript コードレシピ集"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/">JavaScript コードレシピ集</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 池田泰延,鹿野壮</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/01/25</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297103680/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>Chapter 4 データについて深く知る</h2>

<p>データ ＝ 主に型について、種類や調べ方が中心でした。</p>

<h3>076 データの型を調べたい</h3>

<p><code>typeof</code> を用いて調べる</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>console.log(<span class="synStatement">typeof</span> <span class="synConstant">true</span>);                    <span class="synComment">// 結果: 'boolean'</span>
console.log(<span class="synStatement">typeof</span> 10);                      <span class="synComment">// 結果: 'number'</span>
console.log(<span class="synStatement">typeof</span> <span class="synConstant">'鈴木'</span>);                   <span class="synComment">// 結果: 'string'</span>
console.log(<span class="synStatement">typeof</span> <span class="synStatement">null</span>);                    <span class="synComment">// 結果: 'symbol'</span>
console.log(<span class="synStatement">typeof</span> <span class="synStatement">undefined</span>);               <span class="synComment">// 結果: 'undefined'</span>
console.log(<span class="synStatement">typeof</span> Symbol());                <span class="synComment">// 結果: 'symbol'</span>
console.log(<span class="synStatement">typeof</span> <span class="synIdentifier">[</span>1, 2, 3<span class="synIdentifier">]</span>);               <span class="synComment">// 結果: 'object'</span>
console.log(<span class="synStatement">typeof</span> <span class="synIdentifier">{</span> id: 10, name: <span class="synConstant">'田中'</span> <span class="synIdentifier">}</span>); <span class="synComment">// 結果: 'object'</span>
console.log(
  <span class="synStatement">typeof</span> <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    console.log(<span class="synConstant">'test'</span>);
  <span class="synIdentifier">}</span>
); <span class="synComment">// 結果: 'function'</span>
console.log(<span class="synStatement">typeof</span> <span class="synStatement">class</span> myClass <span class="synIdentifier">{</span> <span class="synIdentifier">}</span>); <span class="synComment">// 結果: 'function'</span>
</pre>


<h3>079 型を変換したい</h3>

<table>
<thead>
<tr>
<th> メソッド                </th>
<th> 意味                                   </th>
<th> 戻り値 </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>Boolean</code> （値）        </td>
<td> 値を真偽値に変換する                   </td>
<td> 真偽値 </td>
</tr>
<tr>
<td> <code>String</code> （値）         </td>
<td> 値を文字列に変換する                   </td>
<td> 文字列 </td>
</tr>
<tr>
<td> <code>Number</code> （値）         </td>
<td> 値を数値型に変換する                   </td>
<td> 数値   </td>
</tr>
<tr>
<td> <code>parseInt</code> （値）       </td>
<td> 文字列を数値型（整数）に変換する       </td>
<td> 数値   </td>
</tr>
<tr>
<td> <code>parseFloat</code> （文字列） </td>
<td> 文字列を数値型（浮動小数点）に変換する </td>
<td> 数値   </td>
</tr>
</tbody>
</table>


<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item79_result = 100 + <span class="synType">Number</span>(<span class="synConstant">'200'</span>);
console.log(item79_result); <span class="synComment">// 結果: 300</span>
</pre>


<blockquote><p><code>Boolean()</code> や <code>String()</code> などを用いて値の型を明示的に変更することを、「明示的な型変換」といいます。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>console.log(<span class="synType">Boolean</span>(1));     <span class="synComment">// 結果: true</span>
console.log(<span class="synType">Boolean</span>(0));     <span class="synComment">// 結果: false</span>
console.log(<span class="synType">Boolean</span>(<span class="synConstant">'鈴木'</span>)); <span class="synComment">// 結果: true</span>
console.log(<span class="synType">Boolean</span>(<span class="synConstant">''</span>));    <span class="synComment">// 結果: false</span>

console.log(<span class="synType">String</span>(1)); <span class="synComment">// 結果: &quot;1&quot;</span>

console.log(<span class="synType">Number</span>(<span class="synConstant">'1'</span>));   <span class="synComment">// 結果: 1</span>
console.log(<span class="synType">Number</span>(<span class="synConstant">''</span>));    <span class="synComment">// 結果: 0</span>
console.log(<span class="synType">Number</span>(<span class="synConstant">'鈴木'</span>)); <span class="synComment">// 結果: NaN</span>
console.log(<span class="synType">Number</span>(<span class="synConstant">true</span>));  <span class="synComment">// 結果: 1</span>
console.log(<span class="synType">Number</span>(<span class="synConstant">false</span>)); <span class="synComment">// 結果: 0</span>
</pre>


<p>逆に「暗黙の型変換」というのもある</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>console.log(100 + <span class="synConstant">'200'</span>); <span class="synComment">// 結果: '100200'</span>
console.log(<span class="synConstant">'200'</span> - 100); <span class="synComment">// 結果: 100</span>
</pre>


<p>上記のように数値型と文字列型を + で組み合わせた場合でも、どちらが前後にきているかで結果が変わる。<br/>
この性質を覚える必要はなく、異なる肩をひとつの式で扱う際は「明示的な型変換」を行うべき、とのこと。</p>

<hr />

<p>このあたりは暗記しているわけではないけど、初見のようなことも見当たらなかったのでサクッと終わります。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】JavaScriptコードレシピ集 その3'
description: ''
publishDate: '04/11/2019 21:00:00'
---

[CONTENTS-START]
<p>JavaScriptコードレシピ集 の学習メモ 続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/"><img src="/images/hatena/20190726111820.jpg" class="hatena-asin-detail-image" alt="JavaScript コードレシピ集" title="JavaScript コードレシピ集"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/">JavaScript コードレシピ集</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 池田泰延,鹿野壮</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/01/25</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297103680/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>Chapter 3 複数データの取り扱い</h2>

<p>複数データ = 主に配列の処理のことですね。ちょっと長くなってしまいましたが配列処理関係でこれ見れば大丈夫って感じになればよいなと思いました。</p>

<h3>045 配列を定義したい</h3>

<blockquote><p>配列の定義には、<code>[]</code> を用いる以外にも、<code>new Array()</code> を用いる方法があります。</p>

<p>現在の JavaScript の書き方として、主流で使われているのは <code>[]</code> の書き方です。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// new Array() を用いて配列を作成する例</span>
<span class="synStatement">const</span> item45_array7 = <span class="synStatement">new</span> <span class="synType">Array</span>(<span class="synConstant">'鈴木'</span>, <span class="synConstant">'高橋'</span>);
console.log(item45_array7<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>); <span class="synComment">// 結果: &quot;鈴木&quot;</span>
</pre>


<p>やっぱり普通に  <code>array = ['鈴木', '高橋']</code> みたいにするほうが主流なんですね</p>

<h3>047 配列の各要素に対して処理を行いたい①</h3>

<blockquote><p><code>forEach()</code> メソッドは、引数に渡したコールバック関数を用いて要素を順に処理します。コールバック関数は、処理している要素、インデックス、元の配列を取得します。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item47_array = <span class="synIdentifier">[</span><span class="synConstant">'いちご'</span>, <span class="synConstant">'みかん'</span>, <span class="synConstant">'りんご'</span><span class="synIdentifier">]</span>;
item47_array.forEach((value, index) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// インデックスと値を順に出力</span>
  console.log(index, value); <span class="synComment">// 結果: 0 &quot;いちご&quot;, 1 &quot;みかん&quot;, 2 &quot;りんご&quot; が順に出力</span>
<span class="synIdentifier">}</span>);
</pre>


<p>API等から取得したユーザーデータの配列をループ処理する例</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// API等から出力するユーザーデータの配列</span>
<span class="synStatement">const</span> item47_userList = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span> id: 1, name: <span class="synConstant">'田中'</span>, address: <span class="synConstant">'東京'</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> id: 2, name: <span class="synConstant">'鈴木'</span>, address: <span class="synConstant">'宮城'</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> id: 3, name: <span class="synConstant">'高橋'</span>, address: <span class="synConstant">'福岡'</span> <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>;

<span class="synComment">// コンテナー</span>
<span class="synStatement">const</span> item47_container = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item47_container'</span>);

<span class="synComment">// userListの配列の各要素についてループ</span>
item47_userList.forEach((userData) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// 各要素を書き出す</span>
  item47_container.innerHTML += `
    &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;card&quot;</span>&gt;
      &lt;p&gt;name: $<span class="synIdentifier">{</span>userData.name<span class="synIdentifier">}</span>&lt;/p&gt;
      &lt;p&gt;address: $<span class="synIdentifier">{</span>userData.address<span class="synIdentifier">}</span>&lt;/p&gt;
    &lt;/div&gt;
  `;
<span class="synIdentifier">}</span>);
</pre>


<p>Vue.js 使っていじるときに使いますが、こうみると簡単っぽくみえますね</p>

<h3>048 配列の各要素に対して処理を行いたい②</h3>

<p>配列のループ処理で、要素のインデックスが不要なとき</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item48_array = <span class="synIdentifier">[</span><span class="synConstant">'いちご'</span>, <span class="synConstant">'みかん'</span>, <span class="synConstant">'りんご'</span><span class="synIdentifier">]</span>;

<span class="synComment">// 配列の各要素についてループ</span>
<span class="synStatement">for</span> (<span class="synStatement">const</span> value of item48_array) <span class="synIdentifier">{</span>
  console.log(value); <span class="synComment">// 結果:&quot;いちご&quot;, &quot;みかん&quot;, &quot;りんご&quot; が順に出力</span>
<span class="synIdentifier">}</span>
</pre>


<h3>049 配列の各要素に対して処理を行いたい③</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item49_array = <span class="synIdentifier">[</span><span class="synConstant">'いちご'</span>, <span class="synConstant">'みかん'</span>, <span class="synConstant">'りんご'</span><span class="synIdentifier">]</span>;

<span class="synComment">// 配列の長さを取得する</span>
<span class="synStatement">const</span> item49_arrayLength = item49_array.length;

<span class="synComment">// 配列の各値について処理</span>
<span class="synStatement">for</span> (<span class="synIdentifier">let</span> i = 0; i &lt; item49_arrayLength; i++) <span class="synIdentifier">{</span>
  <span class="synComment">// インデックス i の要素を出力</span>
  console.log(item49_array<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>); <span class="synComment">// 結果:&quot;いちご&quot;, &quot;みかん&quot;, &quot;りんご&quot; が順に出力</span>
<span class="synIdentifier">}</span>
</pre>


<h3>050 要素を追加したい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 先頭に要素を追加する</span>
<span class="synStatement">const</span> item50_array1 = <span class="synIdentifier">[</span><span class="synConstant">'りんご'</span>, <span class="synConstant">'みかん'</span><span class="synIdentifier">]</span>;
item50_array1.unshift(<span class="synConstant">'バナナ'</span>);
console.log(item50_array1); <span class="synComment">// 結果: [&quot;バナナ&quot;, &quot;りんご&quot;, &quot;みかん&quot;]</span>

<span class="synComment">// 末尾に要素を追加する</span>
<span class="synStatement">const</span> item50_array2 = <span class="synIdentifier">[</span><span class="synConstant">'りんご'</span>, <span class="synConstant">'みかん'</span><span class="synIdentifier">]</span>;
item50_array2.push(<span class="synConstant">'バナナ'</span>, <span class="synConstant">'いちご'</span>);
console.log(item50_array2); <span class="synComment">// 結果: [&quot;りんご&quot;, &quot;みかん&quot;, &quot;バナナ&quot;, &quot;いちご&quot;]</span>
</pre>


<h3>051 要素を削除したい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 先頭の要素を取り除く</span>
<span class="synStatement">const</span> item51_array1 = <span class="synIdentifier">[</span><span class="synConstant">&quot;りんご&quot;</span>, <span class="synConstant">&quot;みかん&quot;</span>, <span class="synConstant">&quot;バナナ&quot;</span><span class="synIdentifier">]</span>;
<span class="synStatement">const</span> shiftedValue = item51_array1.shift();
console.log(shiftedValue);  <span class="synComment">// 結果: &quot;りんご&quot;（取り除かれた要素）</span>
console.log(item51_array1); <span class="synComment">// 結果: [&quot;みかん&quot;, &quot;バナナ&quot;]（操作後の配列）</span>
<span class="synComment">// 末尾の要素を取り除く</span>
<span class="synStatement">const</span> item51_array2 = <span class="synIdentifier">[</span><span class="synConstant">&quot;りんご&quot;</span>, <span class="synConstant">&quot;みかん&quot;</span>, <span class="synConstant">&quot;バナナ&quot;</span><span class="synIdentifier">]</span>;
<span class="synStatement">const</span> poppedValue2 = item51_array2.pop();
console.log(poppedValue2);  <span class="synComment">// 結果: &quot;バナナ&quot;（取り除かれた要素）</span>
console.log(item51_array2); <span class="synComment">// 結果: [&quot;りんご&quot;, &quot;みかん&quot;]（操作後の配列）</span>
<span class="synComment">// 削除可能な要素がない場合、 undefinedが返る（エラーは発生しない）</span>
<span class="synStatement">const</span> item51_array3 = <span class="synIdentifier">[]</span>;
<span class="synStatement">const</span> poppedValue3 = item51_array3.pop();
console.log(poppedValue3); <span class="synComment">// 結果: undefined</span>
</pre>


<h3>052 要素の一部を置き換えたい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 指定位置から要素を取り出しつつ、要素を追加する</span>
<span class="synStatement">const</span> item52_array3 = <span class="synIdentifier">[</span><span class="synConstant">&quot;りんご&quot;</span>, <span class="synConstant">&quot;みかん&quot;</span><span class="synIdentifier">]</span>;
item52_array3.splice(1, 0, <span class="synConstant">&quot;バナナ&quot;</span>); <span class="synComment">// インデックス1の位置で、0個取り除きつつバナナを追加する</span>
console.log(item52_array3); <span class="synComment">// 結果: [&quot;りんご&quot;, &quot;バナナ&quot;, &quot;みかん&quot;]</span>

<span class="synStatement">const</span> item52_array4 = <span class="synIdentifier">[</span><span class="synConstant">&quot;りんご&quot;</span>, <span class="synConstant">&quot;みかん&quot;</span><span class="synIdentifier">]</span>;
item52_array4.splice(1, 1, <span class="synConstant">&quot;バナナ&quot;</span>, <span class="synConstant">&quot;いちご&quot;</span>); <span class="synComment">// インデックス1の位置で、0個取り除きつつバナナを追加する</span>
console.log(item52_array4); <span class="synComment">// 結果: [&quot;りんご&quot;, &quot;バナナ&quot;, &quot;いちご&quot;]</span>
</pre>


<h3>053 配列を連結したい</h3>

<p><code>concat()</code> を用いる場合と、スプレッド演算子 <code>(...)</code> を用いる方法でも展開した配列が得られる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// concat() を用いる場合</span>
<span class="synStatement">const</span> item53_array1 = <span class="synIdentifier">[</span><span class="synConstant">&quot;鈴木&quot;</span>, <span class="synConstant">&quot;佐藤&quot;</span><span class="synIdentifier">]</span>;
<span class="synStatement">const</span> item53_array2 = <span class="synIdentifier">[</span><span class="synConstant">&quot;田中&quot;</span><span class="synIdentifier">]</span>;
<span class="synStatement">const</span> item53_array3 = item53_array1.concat(item53_array2);
console.log(item53_array3); <span class="synComment">// 結果:  [&quot;鈴木&quot;, &quot;佐藤&quot;, &quot;田中&quot;]</span>

<span class="synComment">// スプレッド演算子を用いる場合</span>
<span class="synStatement">const</span> item53_array5 = <span class="synIdentifier">[</span><span class="synConstant">&quot;鈴木&quot;</span>, <span class="synConstant">&quot;佐藤&quot;</span><span class="synIdentifier">]</span>;
<span class="synStatement">const</span> item53_array6 = <span class="synIdentifier">[</span><span class="synConstant">&quot;田中&quot;</span><span class="synIdentifier">]</span>;
<span class="synStatement">const</span> item53_array7 = <span class="synIdentifier">[</span>...item53_array5, ...item53_array6<span class="synIdentifier">]</span>;
console.log(item53_array7); <span class="synComment">// 結果:  [&quot;鈴木&quot;, &quot;佐藤&quot;, &quot;田中&quot;]</span>
</pre>


<h3>054 配列の要素を結合して文字列にしたい</h3>

<p>引数を省略するとコンマで結合される</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item54_array1 = <span class="synIdentifier">[</span>2, 4, 10<span class="synIdentifier">]</span>;
console.log(item54_array1.join()); <span class="synComment">// 結果: 2,4,10</span>

<span class="synStatement">const</span> item54_array2 = <span class="synIdentifier">[</span><span class="synConstant">'a'</span>, <span class="synConstant">'b'</span>, <span class="synConstant">'c'</span><span class="synIdentifier">]</span>;
console.log(item54_array2.join(<span class="synConstant">''</span>)); <span class="synComment">// 結果: abc</span>
</pre>


<h3>055 要素を検索したい</h3>

<p><code>indexOf()</code> と <code>lastIndexOf()</code> は要素の見つかる位置、<code>includes()</code> は配列内に要素が含まれているかどうかを返す</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>console.log(<span class="synIdentifier">[</span><span class="synConstant">'りんご'</span>, <span class="synConstant">'バナナ'</span>, <span class="synConstant">'みかん'</span><span class="synIdentifier">]</span>.indexOf(<span class="synConstant">'みかん'</span>)); <span class="synComment">// 結果: 2</span>
console.log(<span class="synIdentifier">[</span>0, 2, 4, 6, 4, 2, 0<span class="synIdentifier">]</span>.lastIndexOf(4));       <span class="synComment">// 結果: 4</span>

console.log(<span class="synIdentifier">[</span><span class="synConstant">'りんご'</span>, <span class="synConstant">'バナナ'</span>, <span class="synConstant">'みかん'</span><span class="synIdentifier">]</span>.includes(<span class="synConstant">'みかん'</span>)); <span class="synComment">// 結果: 2</span>
console.log(<span class="synIdentifier">[</span>0, 2, 4, 6, 4, 2, 0<span class="synIdentifier">]</span>.includes(3));           <span class="synComment">// 結果: 4</span>
</pre>


<p>要素があったらどうこうする際に <code>includes()</code> 使えるなと思ったのですが、そういう処理的な場合は後述の <code>filter()</code> などを使ったほうがよさそう</p>

<h3>056 配列から条件を満たす要素を取得したい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item56_array1 = <span class="synIdentifier">[</span><span class="synConstant">'鈴木'</span>, <span class="synConstant">'田中'</span>, <span class="synConstant">'高橋'</span>, <span class="synConstant">'後藤'</span><span class="synIdentifier">]</span>;

<span class="synComment">// 配列から「田中」を取得</span>
<span class="synStatement">const</span> item56_targetUser = item56_array1.find(element =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> element === <span class="synConstant">'田中'</span>
<span class="synIdentifier">}</span>);

console.log(item56_targetUser); <span class="synComment">// 結果: '田中'</span>
</pre>


<h3>058 配列をソートしたい</h3>

<blockquote><p><code>soer()</code> メソッドは、配列を比較関数にしたがってソートします。</p></blockquote>

<p>比較関数とは：</p>

<blockquote><p>比較のためのふたつの要素（a、b）を受け取り、戻り値の数値の大小によって順番を決定付けます。</p></blockquote>

<p>...分からない。。<br/>
<a href="https://teratail.com/questions/80029">JavaScript - javascript の比較関数がわからない｜teratail</a> をみてもちょっと？でした。とりあえずイディオム的なものと考えます。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item58_array1 = <span class="synIdentifier">[</span>1, 2, 3, 3, 4, 5<span class="synIdentifier">]</span>;

item58_array1.sort((a, b) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// aがbより小さいならば、a,bの順に並べる</span>
  <span class="synStatement">if</span> (a &lt; b) <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> 1;
  <span class="synIdentifier">}</span>

  <span class="synComment">// aとbが等しければ、順番はそのまま</span>
  <span class="synStatement">if</span> (a === b) <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> 0;
  <span class="synIdentifier">}</span>

  <span class="synComment">// aがbより大きければ、b,aの順に並べる</span>
  <span class="synStatement">if</span> (a &gt; b) <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> -1;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);

console.log(item58_array1); <span class="synComment">// 結果: [5, 4, 3, 3, 2, 1]</span>
</pre>


<h3>059 オブジェクトを含む配列をソートしたい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item59_userDataList = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span> id: 2, name: <span class="synConstant">'鈴木'</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> id: 10, name: <span class="synConstant">'田中'</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> id: 4, name: <span class="synConstant">'佐藤'</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> id: 29, name: <span class="synConstant">'高橋'</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> id: 101, name: <span class="synConstant">'小笠原'</span> <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>;
</pre>


<p>のようなオブジェクトのユーザーデータがある場合、<br/>
昇順にソートするには、</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 昇順にソート</span>
<span class="synIdentifier">function</span> sortByAsc() <span class="synIdentifier">{</span>
  item59_userDataList.sort((a, b) =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> a.id - b.id;
  <span class="synIdentifier">}</span>);
  console.log(item59_userDataList);
<span class="synIdentifier">}</span>
sortByAsc(); <span class="synComment">// idの昇順にソート</span>
</pre>


<p>として、降順にソートするには下記のようにする。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 降順にソート</span>
<span class="synIdentifier">function</span> sortByDesc() <span class="synIdentifier">{</span>
  item59_userDataList.sort((a, b) =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> b.id - a.id;
  <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>
sortByDesc(); <span class="synComment">// idの降順にソート</span>
</pre>


<h3>061 ある配列から別の配列を作りたい</h3>

<blockquote><p><code>map()</code> メソッドは、ある配列を元に新しい配列を生成します。</p>

<p><code>map()</code> メソッドは <code>forEach()</code> メソッドと似ていますが、<code>forEach()</code> は戻り値がなく実行するだけのメソッドに対して、<code>map()</code> メソッドは実行後の結果を配列として返す点で異なっています。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item61_idList1 = <span class="synIdentifier">[</span>4, 10, 20<span class="synIdentifier">]</span>;

<span class="synStatement">const</span> item61_userIdList1 = item61_idList1.map(value =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> `userid_$<span class="synIdentifier">{</span>value<span class="synIdentifier">}</span>`;
<span class="synIdentifier">}</span>);

console.log(item61_userIdList1); <span class="synComment">// 結果: [&quot;userid_4&quot;, &quot;userid_10&quot;, &quot;userid_20&quot;]</span>
</pre>


<p>コールバック関数は、要素の他にインデックスや元の配列を受け取る</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item61_idList2 = <span class="synIdentifier">[</span>3, 8, 12<span class="synIdentifier">]</span>;

<span class="synStatement">const</span> item61_userIdList2 = item61_idList2.map((value, index) =&gt;
  `userid_$<span class="synIdentifier">{</span>index + 1<span class="synIdentifier">}</span>_$<span class="synIdentifier">{</span>value<span class="synIdentifier">}</span>`
);

console.log(item61_userIdList2); <span class="synComment">// 結果: [&quot;userid_1_3&quot;, &quot;userid_2_8&quot;, &quot;userid_3_12&quot;]</span>
</pre>


<p>IDと名前を持つオブジェクトの配列からIDだけの配列を作成するサンプル</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item61_apiResponseData = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span> id: 10, name: <span class="synConstant">'鈴木'</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> id: 21, name: <span class="synConstant">'田中'</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> id: 31, name: <span class="synConstant">'高橋'</span> <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>;

<span class="synStatement">const</span> item61_idList3 = item61_apiResponseData.map(value =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> value.id;
<span class="synIdentifier">}</span>);

console.log(item61_idList3); <span class="synComment">// 結果: [10, 21, 31]</span>
</pre>


<h3>062 ある配列から条件を満たす別の配列を作りたい</h3>

<blockquote><p><code>filter()</code> メソッドは、コールバックに合格した要素からなる新しい配列を生成します。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item62_newArray = <span class="synIdentifier">[</span>10, 20, 30, 40<span class="synIdentifier">]</span>.filter((value) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> value &gt;= 30;
<span class="synIdentifier">}</span>);

console.log(item62_newArray); <span class="synComment">// 結果: [30, 40]</span>
</pre>


<p>20歳以上、30歳以上、40歳以上というラベルのボタンを作成し、クリックしたボタンに応じてユーザー一覧を出力するサンプル</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item62_userDataList = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span> name: <span class="synConstant">'鈴木'</span>, age: 18 <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">'田中'</span>, age: 27 <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">'佐藤'</span>, age: 32 <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">'高橋'</span>, age: 41 <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">'小笠原'</span>, age: 56 <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>

<span class="synComment">// .button 要素についてイベント設定</span>
<span class="synStatement">document</span>.querySelectorAll(<span class="synConstant">'.button'</span>).forEach((element) =&gt; <span class="synIdentifier">{</span>
  element.addEventListener(<span class="synConstant">'click'</span>, (<span class="synStatement">event</span>) =&gt; <span class="synIdentifier">{</span>
    onClickButton(<span class="synStatement">event</span>);
  <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>);

<span class="synComment">// ボタンがクリックされたときの処理</span>
<span class="synIdentifier">function</span> onClickButton(<span class="synStatement">event</span>) <span class="synIdentifier">{</span>
  <span class="synComment">// クリックされたボタン要素</span>
  <span class="synStatement">const</span> button = <span class="synStatement">event</span>.target;
  <span class="synComment">// ボタン要素から `data-age` の値を取得</span>
  <span class="synStatement">const</span> targetAge = button.dataset.age;
  <span class="synComment">// targetAge 以上のユーザー配列を生成する</span>
  <span class="synStatement">const</span> filterdList = item62_userDataList.filter((data) =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> data.age &gt;= targetAge;
    <span class="synComment">// 配列を出力する</span>
  <span class="synIdentifier">}</span>);
  updateList(filterdList);
<span class="synIdentifier">}</span>

<span class="synComment">// ユーザー配列を出力する</span>
<span class="synIdentifier">function</span> updateList(filterdList) <span class="synIdentifier">{</span>
  <span class="synIdentifier">let</span> listHtml = <span class="synConstant">''</span>;
  <span class="synStatement">for</span> (<span class="synStatement">const</span> data of filterdList) <span class="synIdentifier">{</span>
    listHtml += `&lt;li&gt;$<span class="synIdentifier">{</span>data.name<span class="synIdentifier">}</span> : $<span class="synIdentifier">{</span>data.age<span class="synIdentifier">}</span>歳&lt;/li&gt;`;
  <span class="synIdentifier">}</span>
  <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item62_user-list'</span>).innerHTML = listHtml;
<span class="synIdentifier">}</span>
</pre>


<h3>063 各要素から単一の値を作りたい</h3>

<blockquote><p><code>reduce()</code> メソッドは、配列を元に単一の値を生成します。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 3つの値段を格納した配列</span>
<span class="synStatement">const</span> item63_priceList = <span class="synIdentifier">[</span>100, 500, 900<span class="synIdentifier">]</span>;

<span class="synComment">// 合計値を計算</span>
<span class="synStatement">const</span> item63_sum = item63_priceList.reduce((previous, current) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> previous + current;
<span class="synIdentifier">}</span>);
</pre>


<p>「単一の値」とは、↑のような合計値だったり、↓のような2次元配列 → 1次元配列 のことを指すようです</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 2次元配列を1次元配列にする（フラット化する）というケースでも使えます。</span>
<span class="synStatement">const</span> item63_array = <span class="synIdentifier">[[</span><span class="synConstant">'バナナ'</span>, <span class="synConstant">'りんご'</span>, <span class="synConstant">'いちご'</span><span class="synIdentifier">]</span>, <span class="synIdentifier">[</span><span class="synConstant">'みかん'</span>, <span class="synConstant">'ぶどう'</span><span class="synIdentifier">]]</span>;

<span class="synStatement">const</span> item63_flattenedArray = item63_array.reduce((previousValue, currentValue) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> previousValue.concat(currentValue);
<span class="synIdentifier">}</span>);

console.log(item63_flattenedArray); <span class="synComment">// 結果: [&quot;バナナ&quot;, &quot;りんご&quot;, &quot;いちご&quot;, &quot;みかん&quot;, &quot;ぶどう&quot;]</span>
</pre>


<h3>064 配列に似たオブジェクトを配列に変換したい</h3>

<p>配列に似たオブジェクト ＝ ArrayLikeオブジェクトという。<br/>
例えば、<code>document.querySelectorAll()</code> で取得したセレクタ要素がこれにあたり、これは配列に似たオブジェクトだが配列そのものではない。</p>

<p>スプレッド演算子（<code>...</code>）を用いると、ArrayLikeオブジェクトを配列に変換できる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item64_allDivElementList = <span class="synStatement">document</span>.querySelectorAll(<span class="synConstant">'div'</span>);

<span class="synComment">// 配列に変換する</span>
<span class="synStatement">const</span> item64_elementsArray = <span class="synIdentifier">[</span>...item64_allDivElementList<span class="synIdentifier">]</span>;

<span class="synComment">// 配列に変換されたので、配列用メソッド filter() が使える</span>
item64_elementsArray.filter((element) =&gt; <span class="synIdentifier">{</span>
  console.log(element.classList.contains(<span class="synConstant">'wrapper'</span>)); <span class="synComment">// 結果: true, false, false...</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>065 複数の値をまとめて代入したい（分割代入）</h3>

<p>前にやったけどすっかり忘れてる。。これはコード見るより説明読んだほうが分かる系ですね。</p>

<blockquote><p><code>[変数1, 変数2, 変数3] = [値1, 値2, 値3]</code> 各変数に値を代入する<br/>
左辺の配列の各変数に、右辺の配列の各値を代入するための記法</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">let</span> item65_a;
<span class="synIdentifier">let</span> item65_b;
<span class="synIdentifier">let</span> item65_c;
<span class="synIdentifier">[</span>item65_a, item65_b, item65_c<span class="synIdentifier">]</span> = <span class="synIdentifier">[</span>1, 2, 3<span class="synIdentifier">]</span>; <span class="synComment">// 分割代入</span>
console.log(item65_a, item65_b, item65_c);  <span class="synComment">// 結果: 1 2 3</span>
</pre>


<h3>066 配列をシャッフルしたい</h3>

<p>「Fisher-Yates（フィッシャーイェーツ）のアルゴリズム」というアルゴリズムがあるのでそれを使う。<br/>
<a href="https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A3%E3%83%83%E3%82%B7%E3%83%A3%E3%83%BC%E2%80%93%E3%82%A4%E3%82%A7%E3%83%BC%E3%83%84%E3%81%AE%E3%82%B7%E3%83%A3%E3%83%83%E3%83%95%E3%83%AB">Wikipedia</a> にもありますが、なんかロマンがありますね。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item66_array1 = <span class="synIdentifier">[</span>1, 2, 3, 4, 5, 6, 7, 8, 9, 10<span class="synIdentifier">]</span>;
<span class="synStatement">const</span> item66_shuffled1 = shuffleArray(item66_array1);
console.log(item66_shuffled1); <span class="synComment">// 結果（例）: [7, 3, 9, 5, 8, 10, 4, 6, 2, 1]</span>

<span class="synStatement">const</span> item66_array2 = <span class="synIdentifier">[</span><span class="synConstant">&quot;田中&quot;</span>, <span class="synConstant">&quot;鈴木&quot;</span>, <span class="synConstant">&quot;吉田&quot;</span>, <span class="synConstant">&quot;後藤&quot;</span>, <span class="synConstant">&quot;辻&quot;</span><span class="synIdentifier">]</span>;
<span class="synStatement">const</span> item66_shuffled2 = shuffleArray(item66_array2);
console.log(item66_shuffled2); <span class="synComment">// 結果（例）: [&quot;吉田&quot;, &quot;辻&quot;, &quot;鈴木&quot;, &quot;後藤&quot;, &quot;田中&quot;]</span>

<span class="synComment">/**</span>
<span class="synComment"> * 配列をシャッフルします。</span>
<span class="synComment"> * 元の配列は変更せず、新しい配列を返します。</span>
<span class="synComment"> * @param sourceArr 元の配列</span>
<span class="synComment"> * @returns シャッフルされた配列</span>
<span class="synComment"> */</span>
<span class="synIdentifier">function</span> shuffleArray(sourceArr) <span class="synIdentifier">{</span>
  <span class="synComment">// 元の配列の複製を作成</span>
  <span class="synStatement">const</span> array = sourceArr.concat();
  <span class="synComment">// Fisher-Yates のアルゴリズム</span>
  <span class="synStatement">const</span> arrayLength = array.length;
  <span class="synStatement">for</span> (<span class="synIdentifier">let</span> i = arrayLength - 1; i &gt;= 0; i--) <span class="synIdentifier">{</span>
    <span class="synStatement">const</span> randomIndex = Math.floor(Math.random() * (i + 1));
    <span class="synIdentifier">[</span>array<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>, array<span class="synIdentifier">[</span>randomIndex<span class="synIdentifier">]]</span> = <span class="synIdentifier">[</span>array<span class="synIdentifier">[</span>randomIndex<span class="synIdentifier">]</span>, array<span class="synIdentifier">[</span>i<span class="synIdentifier">]]</span>;
  <span class="synIdentifier">}</span>

  <span class="synStatement">return</span> array;
<span class="synIdentifier">}</span>
</pre>


<h3>068 オブジェクトの定義、値の取得、値の更新を行いたい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item68_response = <span class="synIdentifier">{</span>
  result: <span class="synConstant">true</span>,
  list: <span class="synIdentifier">[</span>
    <span class="synIdentifier">{</span> id: 1, name: <span class="synConstant">&quot;田中&quot;</span>, age: 26 <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span> id: 2, name: <span class="synConstant">&quot;鈴木&quot;</span>, age: 32 <span class="synIdentifier">}</span>
  <span class="synIdentifier">]</span>
<span class="synIdentifier">}</span>;

<span class="synComment">// 値を取得</span>
console.log(item68_response.list<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>.name); <span class="synComment">// 結果: &quot;田中&quot;</span>

<span class="synComment">// 値を更新</span>
item68_response.list<span class="synIdentifier">[</span>1<span class="synIdentifier">]</span>.age = 51;
console.log(item68_response.list<span class="synIdentifier">[</span>1<span class="synIdentifier">]</span>.age); <span class="synComment">// 結果: 51</span>
</pre>


<h3>069 オブジェクトを複製したい</h3>

<p><code>Object.assign();</code> を用いる方法と、スプレッド演算子（<code>...</code>）を用いる方法がある。<br/>
注意点として、コピーされたオブジェクトは、シャローコピーとなる。</p>

<p>シャローは「浅い」という意味で浅い感じのコピーということで、コピー元とコピー先のオブジェクト同じデータを参照するコピーのこと。（ディープコピーという用語もある）<br/>
参考：<a href="http://top-men.hatenablog.com/entry/2018/10/03/213627">JavaScriptにおけるシャローコピーとディープコピーについて - よちよち開発の日々</a></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// Object.assign(); を用いる場合</span>
<span class="synStatement">const</span> item69_object1 = <span class="synIdentifier">{</span>
  result: <span class="synConstant">true</span>,
  list: <span class="synIdentifier">[</span>
    <span class="synIdentifier">{</span> id: 1, name: <span class="synConstant">&quot;田中&quot;</span>, age: 26 <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span> id: 2, name: <span class="synConstant">&quot;鈴木&quot;</span>, age: 32 <span class="synIdentifier">}</span>
  <span class="synIdentifier">]</span>
<span class="synIdentifier">}</span>;

<span class="synComment">// オブジェクトのコピー</span>
<span class="synStatement">const</span> item69_copiedObject1 = <span class="synType">Object</span>.assign(<span class="synIdentifier">{}</span>, item69_object1);
console.log(item69_copiedObject1); <span class="synComment">// 結果: `item69_object1` と同じ内容</span>

<span class="synComment">// スプレッド演算子（...）を用いる場合</span>
<span class="synStatement">const</span> item69_object2 = <span class="synIdentifier">{</span>
  result: <span class="synConstant">true</span>,
  list: <span class="synIdentifier">[</span>
    <span class="synIdentifier">{</span> id: 1, name: <span class="synConstant">&quot;田中&quot;</span>, age: 26 <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span> id: 2, name: <span class="synConstant">&quot;鈴木&quot;</span>, age: 32 <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span> id: 3, name: <span class="synConstant">&quot;山田&quot;</span>, age: 56 <span class="synIdentifier">}</span>
  <span class="synIdentifier">]</span>
<span class="synIdentifier">}</span>;

<span class="synComment">// オブジェクトのコピー</span>
<span class="synStatement">const</span> item69_copiedObject2 = <span class="synIdentifier">{</span> ...item69_object2 <span class="synIdentifier">}</span>;
console.log(item69_copiedObject2); <span class="synComment">// 結果: `item69_object2` と同じ内容</span>
</pre>


<h3>070 オブジェクトのプロパティがあるかどうかを調べたい</h3>

<p><code>hasOwnProperty()</code> もしくは、<code>キー名 in オブジェクト</code> を使う</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item70_userData = <span class="synIdentifier">{</span>
  id: 1,
  name: <span class="synConstant">&quot;田中&quot;</span>,
  age: 26
<span class="synIdentifier">}</span>

console.log(item70_userData.hasOwnProperty(<span class="synConstant">'id'</span>));     <span class="synComment">// 結果: true</span>
console.log(item70_userData.hasOwnProperty(<span class="synConstant">'adress'</span>)); <span class="synComment">// 結果: false</span>
console.log(<span class="synConstant">'id'</span> <span class="synStatement">in</span> item70_userData);                  <span class="synComment">// 結果: true</span>
</pre>


<p>あるいは、 <code>null</code> や <code>undefined</code> ではないかを調べる方法も</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>console.log(item70_userData.id != <span class="synStatement">null</span>);     <span class="synComment">// 結果: true</span>
console.log(item70_userData.adress != <span class="synStatement">null</span>); <span class="synComment">// 結果: false</span>
</pre>


<h3>071 オブジェクトの各値について処理をしたい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item71_userData = <span class="synIdentifier">{</span>
  id: 1,
  name: <span class="synConstant">&quot;田中&quot;</span>,
  age: 26
<span class="synIdentifier">}</span>

<span class="synComment">// キー毎にループ</span>
console.log(<span class="synType">Object</span>.keys(item71_userData)); <span class="synComment">// 結果: [&quot;id&quot;, &quot;name&quot;, &quot;age&quot;]</span>

<span class="synComment">// 値毎にループ</span>
console.log(<span class="synType">Object</span>.values(item71_userData)); <span class="synComment">// 結果: [1, &quot;田中&quot;, 26]</span>

<span class="synComment">// プロパティー毎にループ</span>
console.log(<span class="synType">Object</span>.entries(item71_userData)); <span class="synComment">// 結果: [[&quot;id&quot;, 1], [&quot;name&quot;, &quot;田中&quot;], [&quot;age&quot;, 26]]</span>
</pre>


<h3>072 複数の変数にまとめて値を代入したい（分割代入）</h3>

<p>これは便利ってわかりやすいですね</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item72_userData = <span class="synIdentifier">{</span>
  id: 1,
  name: <span class="synConstant">&quot;田中&quot;</span>,
  age: 26
<span class="synIdentifier">}</span>;

<span class="synStatement">const</span> <span class="synIdentifier">{</span> id, name, age <span class="synIdentifier">}</span> = item72_userData; <span class="synComment">// 変数の定義順は順不同</span>
console.log(id);   <span class="synComment">// 結果: 1</span>
console.log(name); <span class="synComment">// 結果: &quot;田中&quot;</span>
console.log(age);  <span class="synComment">// 結果: 26</span>

<span class="synComment">// 変数を別名で指定する場合</span>
<span class="synStatement">const</span> <span class="synIdentifier">{</span> id: item72_id, name: item72_name, age: item72_age <span class="synIdentifier">}</span> = item72_userData; <span class="synComment">// 変数の定義順は順不同</span>
console.log(item72_id);   <span class="synComment">// 結果: 1</span>
console.log(item72_name); <span class="synComment">// 結果: &quot;田中&quot;</span>
console.log(item72_age);  <span class="synComment">// 結果: 26</span>
</pre>


<hr />

<p>MDNはリファレンスではあるのだけれど、具体例が少ない（実践でどのように使えばよいか分かりづらい）、最適解が分からないなどあるので、この本に載っていることはマスターして色々応用を効かせれるようにしたいなと思います。</p>

<p>分割代入に関しては実践で使えないような理解度なので、どこかでまとめて学習する時間をつくりたいと思います。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】JavaScriptコードレシピ集 その2'
description: ''
publishDate: '04/10/2019 09:19:24'
---

[CONTENTS-START]
<p>JavaScriptコードレシピ集 の学習メモ 続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/"><img src="/images/hatena/20190726111820.jpg" class="hatena-asin-detail-image" alt="JavaScript コードレシピ集" title="JavaScript コードレシピ集"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/">JavaScript コードレシピ集</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 池田泰延,鹿野壮</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/01/25</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297103680/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>Chapter 2 真偽値や数値や文字の取り扱い</h2>

<h3>022 四捨五入、切り捨て、切り上げをしたい</h3>

<p>いろいろ処理あるけど、<code>round()</code> <code>floor()</code> <code>ceil()</code> <code>trunc()</code> の4つの使い方があると頭の片隅に入っていればよいような気がする</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>console.log(Math.round(6.24)); <span class="synComment">// 結果: 6 &lt;- 四捨五入する</span>
console.log(Math.floor(6.24)); <span class="synComment">// 結果: 6 &lt;- 切り捨てる（数値以下の最大の整数を返す）</span>
console.log(Math.ceil(6.24));  <span class="synComment">// 結果: 7 &lt;- 切り上げる（数値以上の最小の整数を返す）</span>
console.log(Math.trunc(6.24)); <span class="synComment">// 結果: 6 &lt;- 数値の整数部分を返す</span>

console.log(Math.round(7.8));  <span class="synComment">// 結果: 8 &lt;- 四捨五入する</span>
console.log(Math.floor(7.8));  <span class="synComment">// 結果: 7 &lt;- 切り捨てる（数値以下の最大の整数を返す）</span>
console.log(Math.ceil(7.8));   <span class="synComment">// 結果: 8 &lt;- 切り上げる（数値以上の最小の整数を返す）</span>
console.log(Math.trunc(7.8));  <span class="synComment">// 結果: 7 &lt;- 数値の整数部分を返す</span>
</pre>


<h3>023 ランダムな数を使いたい</h3>

<p>ボタンをクリックする度に、ランダムにグラデーション色を変えるサンプル</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item23_button&quot;</span><span class="synIdentifier">&gt;</span>カラー変更<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item23_rectangle&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">.item23_rectangle</span> <span class="synIdentifier">{</span>
    <span class="synType">width</span>: <span class="synConstant">420px</span>;
    <span class="synType">height</span>: <span class="synConstant">200px</span>;
    --start: <span class="synIdentifier">hsl(</span><span class="synConstant">0</span><span class="synIdentifier">,</span><span class="synConstant"> 100%</span><span class="synIdentifier">,</span><span class="synConstant"> 50%</span><span class="synIdentifier">)</span>;
    --end: <span class="synIdentifier">hsl(</span><span class="synConstant">322</span><span class="synIdentifier">,</span><span class="synConstant"> 100%</span><span class="synIdentifier">,</span><span class="synConstant"> 50%</span><span class="synIdentifier">)</span>;
    <span class="synType">background-image</span>: <span class="synIdentifier">linear-gradient(</span><span class="synConstant">-135deg</span><span class="synIdentifier">,</span><span class="synConstant"> var(--start</span><span class="synIdentifier">)</span><span class="synSpecial">,</span> var(--<span class="synConstant">end</span>));
  <span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">/** 長方形 */</span>
<span class="synStatement">const</span> rectangle = <span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item23_rectangle'</span>);

<span class="synComment">// ボタンをクリックしたら onClickButton を実行する</span>
<span class="synStatement">document</span>.querySelector(<span class="synConstant">'.item23_button'</span>).addEventListener(<span class="synConstant">'click'</span>, onClickButton);

<span class="synComment">/** ボタンをクリックする度に、長方形のグラデーション色を変える */</span>
<span class="synIdentifier">function</span> onClickButton() <span class="synIdentifier">{</span>
  <span class="synComment">// 0〜359 の間のランダムな数を取得する</span>
  <span class="synStatement">const</span> randomHue = Math.trunc(Math.random() * 360);
  <span class="synComment">// グラデーションの開始色と終了色を決定</span>
  <span class="synStatement">const</span> randomColorStart = `hsl($<span class="synIdentifier">{</span>randomHue<span class="synIdentifier">}</span>, 100%, 50%)`;
  <span class="synStatement">const</span> randomColorEnd = `hsl($<span class="synIdentifier">{</span>randomHue + 40<span class="synIdentifier">}</span>, 100%, 50%)`;

  <span class="synComment">// 長方形のグラデーションのための変数（--start と --end）を変更</span>
  rectangle.style.setProperty(<span class="synConstant">'--start'</span>, randomColorStart);
  rectangle.style.setProperty(<span class="synConstant">'--end'</span>, randomColorEnd);
<span class="synIdentifier">}</span>
</pre>


<p>これだけで、けっこういろいろできそうなイメージ湧きますね。<br/>
関係ないですが、CSS変数というの見たことある気もしますがはじめて使いました。。こういう JavaScript の処理によって値を入れ替える系だと使えそうですね。</p>

<h3>027 文字列の長さを取得したい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>console.log(<span class="synConstant">'abc'</span>.length);  <span class="synComment">// 結果: 3</span>
console.log(<span class="synConstant">'あいう'</span>.length); <span class="synComment">// 結果: 3</span>
console.log(<span class="synConstant">'🐮'</span>.length);   <span class="synComment">// 結果: 2</span>
</pre>


<p>最後の 🐮 は、サロゲートペア（4バイトとして表現される特殊な文字や絵文字）<br/>
1文字としてカウントするには、</p>

<pre class="code javas" data-lang="javas" data-unlink>console.log(Array.from(&#39;🐮&#39;).length); // 結果: 1</pre>


<p>のように <code>Array.from()</code> を使う。</p>

<h3>029 文字列を検索したい①（インデックスを調べる）</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item29_myString = <span class="synConstant">'JavaScriptを覚えよう'</span>;

<span class="synComment">// 含まれる場合</span>
<span class="synStatement">const</span> item29_a1 = item29_myString.indexOf(<span class="synConstant">'JavaScript'</span>);
console.log(item29_a1); <span class="synComment">// 結果: 0</span>

<span class="synStatement">const</span> item29_a2 = item29_myString.indexOf(<span class="synConstant">'覚えよう'</span>);
console.log(item29_a2); <span class="synComment">// 結果: 11</span>

<span class="synStatement">const</span> item29_a3 = item29_myString.lastIndexOf(<span class="synConstant">'a'</span>);
console.log(item29_a3); <span class="synComment">// 結果: 3</span>

<span class="synComment">// 含まれない場合</span>
<span class="synStatement">const</span> item29_b1 = item29_myString.indexOf(<span class="synConstant">'HTML'</span>);
console.log(item29_b1); <span class="synComment">// 結果: -1</span>

<span class="synStatement">const</span> item29_b2 = item29_myString.indexOf(<span class="synConstant">'j'</span>);
console.log(item29_b2); <span class="synComment">// 結果: -1（大文字・小文字区別のため）</span>

<span class="synComment">// 検索開始インデックスを指定すると、そのインデックスから文字列を検索します。（省略した場合は0が検索開始インデックスになる）</span>
<span class="synStatement">const</span> item29_c1 = item29_myString.indexOf(<span class="synConstant">'JavaScript'</span>,4);
console.log(item29_c1); <span class="synComment">// 結果: -1</span>

<span class="synStatement">const</span> item29_c2 = item29_myString.indexOf(<span class="synConstant">'覚えよう'</span>, 10);
console.log(item29_c2); <span class="synComment">// 結果: 11</span>
</pre>


<h3>030 文字列を検索したい②（含まれているかを調べる）</h3>

<p>これ定数宣言している意味ない気がするので誤植かもしれないと思いました</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> item30_myString = <span class="synConstant">'JavaScriptを覚えよう'</span>;

<span class="synComment">// 文字列が含まれているかどうか</span>
<span class="synStatement">const</span> item30_a1 = <span class="synConstant">'JavaScriptを覚えよう'</span>.includes(<span class="synConstant">'JavaScript'</span>);
console.log(item30_a1); <span class="synComment">// 結果: ture</span>

<span class="synComment">// 文字列で始まるかどうか</span>
<span class="synStatement">const</span> item30_a2 = <span class="synConstant">'JavaScriptを覚えよう'</span>.startsWith(<span class="synConstant">'覚えよう'</span>);
console.log(item30_a2); <span class="synComment">// 結果: false</span>

<span class="synComment">// 文字列で終わるかどうか</span>
<span class="synStatement">const</span> item30_a3 = <span class="synConstant">'JavaScriptを覚えよう'</span>.endsWith(<span class="synConstant">'覚えよう'</span>);
console.log(item30_a3); <span class="synComment">// 結果: true</span>
</pre>


<h3>031 文字列を取り出したい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 指定した場所の文字列を取り出すとき</span>
console.log(<span class="synConstant">'JavaScript'</span>.charAt(3)); <span class="synComment">// 結果: a</span>
console.log(<span class="synConstant">'JavaScript'</span>.charAt());  <span class="synComment">// 結果: J（引数省略時は0のインデックス）</span>
</pre>


<h3>032 ○文字目～○文字目までの文字列を取り出したい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>console.log(<span class="synConstant">'JavaScript'</span>.slice(0, 4));     <span class="synComment">// 結果: Java</span>
console.log(<span class="synConstant">'JavaScript'</span>.slice(0));        <span class="synComment">// 結果: JavaScript（引数省略時は全文字を返す）</span>
console.log(<span class="synConstant">'JavaScript'</span>.substring(0, 4)); <span class="synComment">// 結果: Java</span>
console.log(<span class="synConstant">'JavaScript'</span>.substring(0));    <span class="synComment">// 結果: JavaScript（引数省略時は全文字を返す）</span>
</pre>


<blockquote><p><code>slice()</code> メソッドのインデックスには負の値も指定可能で、末尾から文字列を取り出したいときに役立ちます。インデックスが負の場合、「文字列の長さ-1」が開始インデックスとなります。</p>

<p>対して、<code>substring()</code> のインデックスに負の値を指定するとその値は0とみなされます。よって、末尾から文字列を取り出したいときは <code>substring()</code> は使えません。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 引数にのインデックスを負の値を指定したとき</span>
console.log(<span class="synConstant">'JavaScript'</span>.slice(3, -4));      <span class="synComment">// 結果: aSc</span>
console.log(<span class="synConstant">'JavaScript'</span>.slice(-4, -1));     <span class="synComment">// 結果: rip</span>
console.log(<span class="synConstant">'JavaScript'</span>.substring(3, -3));  <span class="synComment">// 結果: Jav `substring(3, 0)`と同じ</span>
console.log(<span class="synConstant">'JavaScript'</span>.substring(-4, -1)); <span class="synComment">// 結果: 空   `substring(0, 0)`と同じ</span>
</pre>


<h3>033 ○文字目から○文字だけ取り出したい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 4を開始インデックスとして、そこから6文字だけ取り出す</span>
console.log(<span class="synConstant">'JavaScript'</span>.substr(4, 6)); <span class="synComment">// 結果: Script</span>
</pre>


<h3>034 文字列を別の文字に置き換えたい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// image1.png を image.png に置き換え</span>
<span class="synStatement">const</span> imageName = <span class="synConstant">'image1.png'</span>;
console.log(imageName.replace(<span class="synConstant">'1.png'</span>, <span class="synConstant">'2.png'</span>)); <span class="synComment">// 結果: image2.png</span>

<span class="synComment">// 文字列内の改行コードを削除</span>
<span class="synStatement">const</span> inputText = <span class="synConstant">'鈴木</span><span class="synSpecial">\n</span><span class="synConstant">一郎'</span>;
console.log(inputText.replace(<span class="synSpecial">'\n'</span>, <span class="synConstant">''</span>)); <span class="synComment">// 結果: 鈴木一郎</span>
</pre>


<p>文字列削除で <code>.replace('hogehoge', '')</code> ってあまりしっくりきてなかったのですが、やっぱりやり方的にこれで良いっぽいですね。</p>

<p>電話番号からハイフンを除く場合など削除対象が複数の場合は正規表現を使う</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">let</span> phoneNumber = <span class="synConstant">'090-1234-5678'</span>;
console.log(phoneNumber.replace(<span class="synConstant">'-'</span>, <span class="synConstant">''</span>)); <span class="synComment">// 結果: 0901234-5678（すべてのハイフンは取り除けない）</span>
<span class="synComment">// 正規表現を用い、gオプション（文字列全体のマッチ）を指定することで、複数文字の置き換えが可能になります。</span>
console.log(phoneNumber.replace(<span class="synConstant">/-/g</span>, <span class="synConstant">''</span>)); <span class="synComment">// 結果: 09012345678</span>
</pre>


<p>正規表現の場合は <code>''</code> はいらないのですね</p>

<h3>035 文字列を分割したい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> myUrl = <span class="synConstant">'http://example.com/?id=12345&amp;name=Suzuki&amp;age=28'</span>;
console.log(myUrl.split(<span class="synConstant">'&amp;'</span>));    <span class="synComment">// 結果: [&quot;http://example.com/?id=12345&quot;, &quot;name=Suzuki&quot;, &quot;age=28&quot;]</span>
console.log(myUrl.split(<span class="synConstant">/&amp;|\?/</span>)); <span class="synComment">// 結果: [&quot;http://example.com/&quot;, &quot;id=12345&quot;, &quot;name=Suzuki&quot;, &quot;age=28&quot;]</span>

<span class="synComment">// 引数が空指定の場合、1文字ずつ格納された配列になる</span>
console.log(<span class="synConstant">'JavaScript'</span>.split(<span class="synConstant">''</span>)); <span class="synComment">// 結果: [&quot;J&quot;, &quot;a&quot;, &quot;v&quot;, &quot;a&quot;, &quot;S&quot;, &quot;c&quot;, &quot;r&quot;, &quot;i&quot;, &quot;p&quot;, &quot;t&quot;]</span>
<span class="synComment">// 引数を省略した場合、配列の1要素に全文字が含まれる</span>
console.log(<span class="synConstant">'JavaScript'</span>.split());   <span class="synComment">// 結果: [&quot;JavaScript&quot;]</span>
</pre>


<h3>039 正規表現を使いたい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 正規表現を使った場合</span>
<span class="synStatement">if</span> (<span class="synConstant">/iPhone|iPod|iPad/</span>.test(navigator.userAgent)) <span class="synIdentifier">{</span>
  console.log(<span class="synConstant">'アクセスしているブラウザーはiOS端末です'</span>);
<span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
  console.log(<span class="synConstant">'アクセスしているブラウザーはiOS端末ではありません'</span>);
<span class="synIdentifier">}</span>

<span class="synComment">// 正規表現を使わなかった場合</span>
<span class="synStatement">if</span> (
  navigator.userAgent.includes(<span class="synConstant">'iPhone'</span>) ||
  navigator.userAgent.includes(<span class="synConstant">'iPod'</span>) ||
  navigator.userAgent.includes(<span class="synConstant">'iPad'</span>)
) <span class="synIdentifier">{</span>
  console.log(<span class="synConstant">'アクセスしているブラウザーはiOS端末です'</span>);
<span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
  console.log(<span class="synConstant">'アクセスしているブラウザーはiOS端末ではありません'</span>);
<span class="synIdentifier">}</span>
</pre>


<h3>040 特定の文字が含まれているか、正規表現で調べたい</h3>

<blockquote><p>ある文字列が、パターンにマッチするかどうかを調べるには、正規表現の <code>test()</code> メソッドを次のように使います。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 「J」が「JavaScript」に含まれているかどうか。</span>
console.log(<span class="synConstant">/J/</span>.test(<span class="synConstant">'JavaScript'</span>)); <span class="synComment">// 結果: true</span>
<span class="synComment">// 「iPhone」が「iP」で始まっているかどうか。</span>
console.log(<span class="synConstant">/^iP/</span>.test(<span class="synConstant">'iPhone'</span>)); <span class="synComment">// 結果: true</span>
<span class="synComment">// 「鈴木」に数字が含まれているかどうか。</span>
console.log(<span class="synConstant">/\d/</span>.test(<span class="synConstant">'鈴木'</span>)); <span class="synComment">// 結果: false</span>
<span class="synComment">// 「Jav」の後に「a」が0回以上続くかどうか。</span>
console.log(<span class="synConstant">/Java.*/</span>.test(<span class="synConstant">'JavaScript'</span>)); <span class="synComment">// 結果: true</span>
<span class="synComment">// 「鈴郎」または「鈴」と「郎」の愛大に文字が含まれるかどうか。</span>
console.log(<span class="synConstant">/鈴.*郎/</span>.test(<span class="synConstant">'鈴木一郎'</span>)); <span class="synComment">// 結果: true</span>
<span class="synComment">// 「数字-数字-数字」という形かどうか。</span>
console.log(<span class="synConstant">/\d+-\d+-\d+/</span>.test(<span class="synConstant">'090-1234-5678'</span>)); <span class="synComment">// 結果: true</span>
</pre>


<hr />

<p>下記は難しい（しばらく使わなそう）のでスキップ。</p>

<ul>
<li>024 数学的な計算を行いたい</li>
<li>025 三角関数を使いたい</li>
</ul>


<p>ほか、文字の結合、テンプレート文字列、エンコード/デコードもできることが分かる感じでした。</p>

<p>読んでいて、各項目で「利用シーン」というどういうシーンを想定して利用するか、というものがあるのですが、それ頭に入れながら読まないと、あまり実践での使い方がイメージできずなんとなく読んでしまうなと思いました。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】JavaScriptコードレシピ集 その1'
description: ''
publishDate: '04/09/2019 08:26:54'
---

[CONTENTS-START]
<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/"><img src="/images/hatena/20190726111820.jpg" class="hatena-asin-detail-image" alt="JavaScript コードレシピ集" title="JavaScript コードレシピ集"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297103680/hatena-blog-22/">JavaScript コードレシピ集</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 池田泰延,鹿野壮</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/01/25</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297103680/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>株式会社ICSというフロントエンドに強い会社の方2名が著者の本です。<br/>
コードレシピ集という本のタイトル通り、JavaScriptで「〜をしたい」ときの、コードサンプルがES2015以降の文法で278個用意されています。<br/>
冒頭や <a href="https://ics.media/entry/19765/">「JavaScriptコードレシピ集」を執筆しました！ - ICS MEDIA</a> でも書かれている通り、最初からステップバイステップで学んでいくにも、気になった項目や調べたい項目をリファレンス的に使うのもOKという構成内容です。</p>

<p>自分の場合は、超初心者というわけではないのですが、jQuery は分かるけれどピュアな JavaScript に関してはそこそこ分からないので、一から学びたいというのもあり最初からステップバイステップで読んで実際にエディタとブラウザ上で試していく方法で読み進めています。<br/>
この本を買った目的でもあるのですが、著者がフロントエンド界隈でも有名で情報を発信し続けている方々なので、その人が書いている内容なら間違いないというか、これまでこの書き方でOKなのかな？のような JavaScript の書き方のある程度「正解」を求めて購入しました。</p>

<p>またいつもの通りにこれまで知らなかったこと、勉強になったことを中心にメモしていきます。<br/>
<a href="https://github.com/yuheijotaki/book-javascript_code_recipe">GitHubにリポジトリ</a> も作ったので、そちらにも残せるようにしています。</p>

<h2>Chapter 1 JavaScriptの基礎</h2>

<h3>009 ふたつの値を比較したい（比較演算子）</h3>

<table>
<thead>
<tr>
<th> 構文          </th>
<th> 意味                                           </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>値1 == 値2</code>  </td>
<td> 値1と値2が等しいかどうか                       </td>
</tr>
<tr>
<td> <code>値1 === 値2</code> </td>
<td> 値1と値2が等しく、型も同じかどうか             </td>
</tr>
<tr>
<td> <code>値1 != 値2</code>  </td>
<td> 値1と値2が等しくないかどうか                   </td>
</tr>
<tr>
<td> <code>値1 !== 値2</code> </td>
<td> 値1と値2が等しくない、または型が異なるかどうか </td>
</tr>
</tbody>
</table>


<p>基本的な所と思うのですが、なんとなく <code>==</code> より <code>===</code> のほうが良い、という認識だったのですが、型が同じかそうでないかで使い分ける、その上でミス少なくするように <code>===</code> を使うほうがよい。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>console.log(10 == <span class="synConstant">'10'</span>);  <span class="synComment">// true</span>
console.log(10 === <span class="synConstant">'10'</span>); <span class="synComment">// false</span>
console.log(20 != <span class="synConstant">'20'</span>);  <span class="synComment">// false</span>
console.log(20 !== <span class="synConstant">'20'</span>); <span class="synComment">// true</span>
</pre>


<h3>010 複合代入演算子を使いたい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">let</span> a = 10;
<span class="synIdentifier">let</span> b = 20;
a += b;         <span class="synComment">// a = a + b と同じ意味</span>
console.log(a); <span class="synComment">// 結果: 30</span>

<span class="synIdentifier">let</span> c = <span class="synConstant">'鈴木'</span>;
<span class="synIdentifier">let</span> d = <span class="synConstant">'一郎'</span>;
c += d;         <span class="synComment">// c = c + d と同じ意味</span>
console.log(c); <span class="synComment">// 結果: '鈴木一郎'</span>
</pre>


<p>用語を知らなかったのですが <code>a += b;</code> のような演算子を複合代入演算子というのですね。</p>

<h3>012 アロー関数（<code>=&gt;</code>）で関数を定義したい</h3>

<blockquote><p>引数が1個の場合は <code>()</code> を省略できます。次の関数は、引数1を受け取り、「a+2」の結果を返します。引数が0個か、2個以上のときは省略できません。1個のときのみ省略できます。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 関数の宣言</span>
<span class="synStatement">const</span> myFunction1 = (a) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> a + 2;
<span class="synIdentifier">}</span>;

<span class="synComment">// 関数の宣言（カッコを省略）</span>
<span class="synStatement">const</span> myFunction2 = a =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> a + 2;
<span class="synIdentifier">}</span>

<span class="synComment">// アロー関数内の処理が1行のときは、{}とreturnを省略できる</span>
<span class="synStatement">const</span> myFunction3 = (a) =&gt; a + 2;
console.log(myFunction3(10)); <span class="synComment">// 結果: 12</span>
</pre>


<h3>013 関数に渡す値の初期値を設定したい</h3>

<p>これも用語を覚えれてない</p>

<blockquote><p>関数の引数では、「値＝初期値」とすることで初期値を定義できます。<br/>
初期値が設定されている引数は省略可能で、省略された場合は初期値が使われます。「デフォルト引数」といいます。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">/**</span>
<span class="synComment"> * 税込みの値段を返す関数</span>
<span class="synComment"> * @param price 価格</span>
<span class="synComment"> * @param tax 税率</span>
<span class="synComment"> */</span>
<span class="synIdentifier">function</span> calcFunction(price, tax = 0.08) <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> result = price + price * tax;
  <span class="synStatement">return</span> result;
<span class="synIdentifier">}</span>

<span class="synComment">// tax の引数を省略すると、初期値の0.08が使用される</span>
<span class="synStatement">const</span> result1 = calcFunction(100);
console.log(result1); <span class="synComment">// 結果: 108</span>

<span class="synComment">// tax の引数を指定すると、その値が使用される</span>
<span class="synStatement">const</span> result2 = calcFunction(100, 0.1);
console.log(result2); <span class="synComment">// 結果: 110</span>
</pre>


<p>定義コメントの <code>@param</code> というのは、こういう引数定義のときに使われるのですね。</p>

<h3>014 関数に任意の数の引数を渡したい</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">/**</span>
<span class="synComment"> * 引数の合計値を返す関数</span>
<span class="synComment"> * @param price</span>
<span class="synComment"> * @returns {number}</span>
<span class="synComment"> */</span>
<span class="synIdentifier">function</span> calcSum(...prices) <span class="synIdentifier">{</span>
  <span class="synIdentifier">let</span> result = 0;
  <span class="synStatement">for</span> (<span class="synStatement">const</span> value of prices) <span class="synIdentifier">{</span>
    result += value;
  <span class="synIdentifier">}</span>
  <span class="synStatement">return</span> result;
<span class="synIdentifier">}</span>

<span class="synComment">// 引数が2個の場合</span>
<span class="synStatement">const</span> result3 = calcSum(10, 20);
console.log(result3); <span class="synComment">// 結果: 30</span>

<span class="synComment">// 引数が3個の場合</span>
<span class="synStatement">const</span> result4 = calcSum(10, 20, 30);
console.log(result4); <span class="synComment">// 結果: 60</span>
</pre>


<h2>016 条件に応じて処理を分けたい（switch文）</h2>

<blockquote><p><strong>switchの式は厳密な等価</strong></p></blockquote>

<p>switch 式ほぼほぼ見たことも使ったこともないのですが、ということを知らなかったです。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 文字列の'100'</span>
<span class="synStatement">const</span> myValue = <span class="synConstant">'100'</span>;

<span class="synStatement">switch</span> (myValue) <span class="synIdentifier">{</span>
  <span class="synStatement">case</span> 100:
    <span class="synComment">// 文字列の'100'ではないので実行されない</span>
    console.log(<span class="synConstant">'数字の100です'</span>);
    <span class="synStatement">break</span>;
  <span class="synStatement">default</span>:
    console.log(<span class="synConstant">'数字の100ではありません'</span>);
    <span class="synStatement">break</span>;
<span class="synIdentifier">}</span>
</pre>


<h3>019 反復処理をスキップしたい</h3>

<p>これ知らなかったです。<code>for</code> でも <code>while</code> でも使える。<code>if</code> をネストせずにコードの見通しを良く処理を行える。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">for</span> (<span class="synIdentifier">let</span> index = 0; index &lt; 10; index++) <span class="synIdentifier">{</span>
  <span class="synStatement">if</span> (index % 2 === 0) <span class="synIdentifier">{</span>
    <span class="synComment">// index が偶数（2で割った余りが0）の場合は、これ以降の処理はスキップされる。</span>
    <span class="synStatement">continue</span>;
  <span class="synIdentifier">}</span>

  <span class="synComment">// 奇数のみが出力される</span>
  console.log(index);
<span class="synIdentifier">}</span>

<span class="synComment">// ループが終了したら実行される</span>
console.log(<span class="synConstant">'ループ終了'</span>);
</pre>


<hr />

<p>Chapter1 までみてみて（全部でChapter 19まであるのでこのペースでいくと大変。。）、まずは基礎的な内容なので、そこまでつまずかずに読み進められました。<br/>
初見の発見もいい意味であまりなくそれでも説明が丁寧なので、半年くらいから勉強してきたことが少しずつ身になっていて理解度の向上につながる印象もありそこはうれしく感じます。</p>

<p>内容とは全く関係ないですが、本のコードを手打ちしているので分厚い本の割に本を折りやすい？（置いて読みやすい）のがいいです。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】Vue.js のツボとコツがゼッタイにわかる本 その3'
description: ''
publishDate: '04/05/2019 10:19:51'
---

[CONTENTS-START]
<p>Vue.js のツボとコツがゼッタイにわかる本 の学習メモ続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798056499/hatena-blog-22/"><img src="/images/hatena/20190726111922.jpg" class="hatena-asin-detail-image" alt="Vue.jsのツボとコツがゼッタイにわかる本" title="Vue.jsのツボとコツがゼッタイにわかる本"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798056499/hatena-blog-22/">Vue.jsのツボとコツがゼッタイにわかる本</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 中田亨</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 秀和システム</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/03/21</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li><li><a href="http://d.hatena.ne.jp/asin/4798056499/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>第3章全体で作成した商品一覧、6-2. でコンポーネント化をして、6-5. で単一ファイルコンポーネント（SFC）での構築説明があったので、それに倣ってデータの中身を変えて作ってみました。</p>

<p>GitHub Pages：<a href="https://yuheijotaki.github.io/book-points_and_tips_of_vuejs/">https://yuheijotaki.github.io/book-points_and_tips_of_vuejs/</a><br/>
リポジトリ：<a href="https://github.com/yuheijotaki/book-points_and_tips_of_vuejs/">https://github.com/yuheijotaki/book-points_and_tips_of_vuejs/</a></p>

<h2>第6章 Vue.js のコンポーネントをモジュール化してみよう！</h2>

<h3>6-5 商品一覧を単一ファイルコンポーネントで再構築する</h3>

<p><strong>ファイル構成</strong></p>

<pre class="code" data-lang="" data-unlink>/src/
└ App.vue
└ main.js
└ /components/
  └ product-list.vue
  └ product-header.vue
  └ product.vue
  └ filter.js
└ /assets/
  └ /product/
    └ 01.jpg
    └ ...</pre>


<p><strong>各機能</strong></p>

<table>
<thead>
<tr>
<th> コンポーネント                   </th>
<th> データ     </th>
<th> 定義場所           </th>
<th> 備考                                               </th>
</tr>
</thead>
<tbody>
<tr>
<td> ルート（<code>App.vue</code>）              </td>
<td> 商品データ </td>
<td> <code>data</code> オプション  </td>
<td> 実際のアプリケーションでは外部から受け取る         </td>
</tr>
<tr>
<td> 商品一覧（<code>products-list.vue</code>）  </td>
<td> 商品データ </td>
<td> <code>props</code> オプション </td>
<td> 親コンポーネント（<code>App.vue</code>）から受け取る          </td>
</tr>
<tr>
<td> 商品一覧（<code>products-list.vue</code>）  </td>
<td> 検索条件   </td>
<td> <code>data</code> オプション  </td>
<td> 子コンポーネント（<code>product.header.vue</code>）に渡す     </td>
</tr>
<tr>
<td> ヘッダー（<code>product-header.vue</code>） </td>
<td> 検索条件   </td>
<td> <code>props</code> オプション </td>
<td> 親コンポーネント（<code>product-list.vue</code>）から受け取る </td>
</tr>
<tr>
<td> ヘッダー（<code>product-header.vue</code>） </td>
<td> 表示件数   </td>
<td> <code>props</code> オプション </td>
<td> 親コンポーネント（<code>product-list.vue</code>）から受け取る </td>
</tr>
<tr>
<td> 商品（<code>products.vue</code>）           </td>
<td> 商品データ </td>
<td> <code>props</code> オプション </td>
<td> 親コンポーネント（<code>product-list.vue</code>）から受け取る </td>
</tr>
</tbody>
</table>


<h4><code>App.vue</code></h4>

<p>ルートのファイルにあたる。このファイルに商品のデータをもたす。（本運用の場合はJSON取得）</p>

<p><details><summary><strong>App.vue を展開する</strong></summary><div></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span>product-list<span class="synIdentifier"> v-bind:products=</span><span class="synConstant">&quot;products&quot;</span><span class="synIdentifier">&gt;&lt;/</span>product-list<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synStatement">import</span><span class="synSpecial"> productList from </span><span class="synConstant">'./components/product-list.vue'</span><span class="synSpecial">;</span>

<span class="synStatement">export</span><span class="synSpecial"> </span><span class="synStatement">default</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">  name: </span><span class="synConstant">'App'</span><span class="synSpecial">,</span>
<span class="synSpecial">  components: </span><span class="synIdentifier">{</span>
<span class="synSpecial">    </span><span class="synConstant">'product-list'</span><span class="synSpecial">: productList</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">  data: </span><span class="synIdentifier">function</span><span class="synSpecial"> </span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">    </span><span class="synStatement">return</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      </span><span class="synComment">// 商品リスト</span>
<span class="synSpecial">      products: </span><span class="synIdentifier">[</span>
<span class="synSpecial">        </span><span class="synIdentifier">{</span>
<span class="synSpecial">          id: </span><span class="synConstant">'01'</span><span class="synSpecial">,</span>
<span class="synSpecial">          name: </span><span class="synConstant">'紫いものビスケット'</span><span class="synSpecial">,</span>
<span class="synSpecial">          price: </span>1580<span class="synSpecial">,</span>
<span class="synSpecial">          image: require</span>(<span class="synConstant">&quot;./assets/product/01.jpg&quot;</span>)<span class="synSpecial">,</span>
<span class="synSpecial">          delv: </span>0<span class="synSpecial">,</span>
<span class="synSpecial">          isSale: </span><span class="synConstant">true</span>
<span class="synSpecial">        </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">        </span><span class="synIdentifier">{</span>
<span class="synSpecial">          id: </span><span class="synConstant">'02'</span><span class="synSpecial">,</span>
<span class="synSpecial">           ...</span>
</pre>


<p></div></details></p>

<h4><code>product-list.vue</code></h4>

<p>ヘッダーと商品リストを含めたラッパー的なコンポーネント。絞り込み後の商品リストを表示する算出プロパティなどを置く。</p>

<p><details><summary><strong>product-list.vue を展開する</strong></summary><div></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;wrapper&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span>product-header
<span class="synIdentifier">      v-bind:count=</span><span class="synConstant">&quot;filteredList.length&quot;</span>
<span class="synIdentifier">      v-bind:showSaleItem=</span><span class="synConstant">&quot;showSaleItem&quot;</span>
<span class="synIdentifier">      v-bind:showDelvFree=</span><span class="synConstant">&quot;showDelvFree&quot;</span>
<span class="synIdentifier">      v-bind:sortOrder=</span><span class="synConstant">&quot;sortOrder&quot;</span>
<span class="synIdentifier">      v-on:showSaleItemChanged=</span><span class="synConstant">&quot;showSaleItem=!showSaleItem&quot;</span>
<span class="synIdentifier">      v-on:showDelvFreeChanged=</span><span class="synConstant">&quot;showDelvFree=!showDelvFree&quot;</span>
<span class="synIdentifier">      v-on:sortOrderChanged=</span><span class="synConstant">&quot;sortOrderChanged&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span>product-header<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;list&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span>product
<span class="synIdentifier">        v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;product in filteredList&quot;</span>
<span class="synIdentifier">        v-bind:product=</span><span class="synConstant">&quot;product&quot;</span>
<span class="synIdentifier">        v-bind:key=</span><span class="synConstant">&quot;product.id&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span>product<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">  ...</span>
</pre>


<p></div></details></p>

<h4><code>product-header.vue</code></h4>

<p>ヘッダーのコンポーネント。<br/>
<code>['count','showSaleItem','showDelvFree','sortOrder']</code> の各データは <code>props</code> で <code>product-list.vue</code> へ受け渡す。</p>

<p><details><summary><strong>product-header.vue を展開する</strong></summary><div></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>header<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;result&quot;</span><span class="synIdentifier">&gt;</span>
      検索結果：<span class="synIdentifier">&lt;</span><span class="synStatement">span</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;count&quot;</span><span class="synIdentifier">&gt;</span>{{count}}<span class="synIdentifier">&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span> 件
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;condition&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;target&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;checkbox&quot;</span>
<span class="synIdentifier">            v-bind:</span><span class="synType">checked</span><span class="synIdentifier">=</span><span class="synConstant">&quot;showSaleItem&quot;</span>
<span class="synIdentifier">            v-on:change=</span><span class="synConstant">&quot;$emit('showSaleItemChanged')&quot;</span>
<span class="synIdentifier">          &gt;</span> セール対象 <span class="synIdentifier">&lt;</span><span class="synStatement">code</span><span class="synIdentifier">&gt;</span>{{showSaleItem}}<span class="synIdentifier">&lt;/</span><span class="synStatement">code</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;checkbox&quot;</span>
<span class="synIdentifier">            v-bind:</span><span class="synType">checked</span><span class="synIdentifier">=</span><span class="synConstant">&quot;showDelvFree&quot;</span>
<span class="synIdentifier">            v-on:change=</span><span class="synConstant">&quot;$emit('showDelvFreeChanged')&quot;</span>
<span class="synIdentifier">          &gt;</span> 送料無料 <span class="synIdentifier">&lt;</span><span class="synStatement">code</span><span class="synIdentifier">&gt;</span>{{showDelvFree}}<span class="synIdentifier">&lt;/</span><span class="synStatement">code</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;sort&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;sort&quot;</span><span class="synIdentifier">&gt;</span>並び替え <span class="synIdentifier">&lt;</span><span class="synStatement">code</span><span class="synIdentifier">&gt;</span>{{sortOrder}}<span class="synIdentifier">&lt;/</span><span class="synStatement">code</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">select</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;sort&quot;</span>
<span class="synIdentifier">          v-bind:</span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;sortOrder&quot;</span>
<span class="synIdentifier">          v-on:change=</span><span class="synConstant">&quot;$emit('sortOrderChanged',parseInt($event.target.value))&quot;</span>
<span class="synIdentifier">        &gt;</span>
          <span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;1&quot;</span><span class="synIdentifier">&gt;</span>標準<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;2&quot;</span><span class="synIdentifier">&gt;</span>価格が安い順<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;/</span><span class="synStatement">select</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span>header<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synStatement">export</span><span class="synSpecial"> </span><span class="synStatement">default</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">  name: </span><span class="synConstant">'productHeader'</span><span class="synSpecial">,</span>
<span class="synSpecial">  props: </span><span class="synIdentifier">[</span><span class="synConstant">'count'</span><span class="synSpecial">,</span><span class="synConstant">'showSaleItem'</span><span class="synSpecial">,</span><span class="synConstant">'showDelvFree'</span><span class="synSpecial">,</span><span class="synConstant">'sortOrder'</span><span class="synIdentifier">]</span>
<span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>

...
</pre>


<p></div></details></p>

<h4><code>product.vue</code></h4>

<p>商品一覧の各アイテムひとつひとつのコンポーネント。<code>product-list.vue</code> から受け取った <code>product</code> を使って商品情報を描画する。</p>

<p><details><summary><strong>product.vue を展開する</strong></summary><div></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;icon&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span>template<span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;product.isSale&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;sale&quot;</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span>SALE<span class="synIdentifier">&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span>template<span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;product.delv == 0&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;delv&quot;</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span>送料無料<span class="synIdentifier">&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span>template<span class="synIdentifier"> v-else&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;delv&quot;</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span>送料 ¥{{product.delv | number_format}}<span class="synIdentifier">&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span>figure<span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> v-bind:</span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;product.image&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span>figure<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;meta&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier"> v-html=</span><span class="synConstant">&quot;product.name&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">h3</span><span class="synIdentifier">&gt;</span>¥{{product.price | number_format}}<span class="synIdentifier">&lt;/</span><span class="synStatement">h3</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synStatement">import</span><span class="synSpecial"> </span><span class="synConstant">'./filter.js'</span><span class="synSpecial">;</span>

<span class="synStatement">export</span><span class="synSpecial"> </span><span class="synStatement">default</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">  name: </span><span class="synConstant">'product'</span><span class="synSpecial">,</span>
<span class="synSpecial">  props: </span><span class="synIdentifier">[</span><span class="synConstant">'product'</span><span class="synIdentifier">]</span>
<span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>

...
</pre>


<p></div></details></p>

<h2>まとめ</h2>

<p>本のはじめから Vue CLI を使って組んでいましたが、コンポーネントに分けずに1ファイルでしてしまったので、実際に分けている説明みるとなるほどなぁと思いました。<br/>
さっぱりに近かったコンポーネント間の受け渡しについても少し分かったので、これを応用すれば、前回のポートフォリオのもコンポーネントに分けてできるような気がします。</p>

<p>Vue.js に関しては本の内容の難易度が簡単になっていってしまっていますが、また体系的にやれたのでもう一度自分で作ってみるモチベーションが湧いた（少し）ので、その点が良かったかなと思います。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】Vue.js のツボとコツがゼッタイにわかる本 その2'
description: ''
publishDate: '04/02/2019 09:37:36'
---

[CONTENTS-START]
<p>Vue.js のツボとコツがゼッタイにわかる本 の学習メモ続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798056499/hatena-blog-22/"><img src="/images/hatena/20190726111922.jpg" class="hatena-asin-detail-image" alt="Vue.jsのツボとコツがゼッタイにわかる本" title="Vue.jsのツボとコツがゼッタイにわかる本"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798056499/hatena-blog-22/">Vue.jsのツボとコツがゼッタイにわかる本</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 中田亨</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 秀和システム</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/03/21</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li><li><a href="http://d.hatena.ne.jp/asin/4798056499/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>第3章 Vue.js で商品一覧を描画してみよう！</h2>

<p>この章ではデモのECサイトを構築する、という内容で商品一覧ページの商品画像・価格の一覧、セール対象・送料無料のチェック、並び替えの実装をまずピュアな HTML/CSS で構築後に JavaScript で実装する流れで説明されます。</p>

<p>Vue.js での組み込みは 3-3 あたりの後半からなので、最初のほうは助走といった感じと思います。</p>

<h3>3-3 商品データをアプリケーションに結び付ける</h3>

<h4>Vue.js を組み込む準備</h4>

<h4><code>data</code> オプションにデータを定義する</h4>

<blockquote><p>コンポーネントの <code>data</code> オプションに、どのようなデータをどのような形式で持たせる必要があるかを考えます。</p></blockquote>

<h5>データの持たせ方を決める</h5>

<blockquote><p>ここで、データ型（数値、文字列、真偽値、配列、オブジェクト）や、変数名をどうするのが適切かを考えます。<br/>
表示中の商品数、チェックボックスやセレクトボクスの入力値は、互いに独立したデータなので、単独の変数にするとよいでしょう。一方、商品名や価格、商品画像のパスなど、1つ1つの商品に関するデータは、オブジェクト形式にまとめたものを配列に詰め込むと、管理しやすいでしょう。</p></blockquote>

<table>
<thead>
<tr>
<th> No.  </th>
<th> 変数名         </th>
<th> データ型 </th>
<th> 値      </th>
<th> 説明                                              </th>
</tr>
</thead>
<tbody>
<tr>
<td> 1    </td>
<td> <code>count</code>        </td>
<td> 数値     </td>
<td>         </td>
<td> 表示中の商品数                                    </td>
</tr>
<tr>
<td> 2    </td>
<td> <code>showSaleItem</code> </td>
<td> 真偽値   </td>
<td> <code>true</code>  </td>
<td> セール対象の商品のみ表示する                      </td>
</tr>
<tr>
<td> 2    </td>
<td> <code>showSaleItem</code> </td>
<td> 真偽値   </td>
<td> <code>false</code> </td>
<td> セール対象外の商品も表示する                      </td>
</tr>
<tr>
<td> 5    </td>
<td> <code>products</code>     </td>
<td> 配列     </td>
<td>         </td>
<td> 商品リスト（No.6〜No.10を持つオブジェクトの配列） </td>
</tr>
<tr>
<td> 6    </td>
<td> <code>name</code>         </td>
<td> 文字列   </td>
<td>         </td>
<td> 商品名                                            </td>
</tr>
</tbody>
</table>


<p>データの持たせ方、として上記のような持たせ方（一部省略）が書いてあるのですが、これがWordPressのカスタムフィールドのフィールド名とバリューの持たせ方に結構似てるのかなと思いました。<br/>
ACF側で画像だったらID出すか、真偽値かテキスト出すかとか予めぼんやりとでも想像しながらやっていたことを思い出したので、発想がなんとなく変えれるきっかけになるかもと感じます。</p>

<p>5章の自動見積フォームについても同じようにデータの持たせ方の表組みがあるのですが、こういう設計コード書く前に決めておけばAPI開発もスムーズにいくのかなあという印象です。</p>

<hr />

<p>本の内容とは関係ないですが1個詰まったメモ</p>

<h5><code>&lt;img v-bind:src=""&gt;</code> がうまくいかないとき</h5>

<p>Vue CLI（webpack）を使っている場合だとBase64に変換されるので、<code>require()</code> が必要</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>data () <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    ...
    products: <span class="synIdentifier">[</span>
      <span class="synIdentifier">{</span>
        ...
        image: <span class="synConstant">'../assets/logo.png'</span>,
        ...
      <span class="synIdentifier">}</span>,
        ...
</pre>


<p>ではなく、</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>           ...
        image: require(<span class="synConstant">&quot;../assets/logo.png&quot;</span>),
      ...
</pre>


<p>とする。</p>

<p>参考： <a href="http://tk2000ex.blogspot.com/2017/11/vue.html">Vue.jsでimgタグのsrcをバインドさせる際の注意点</a></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】Vue.js のツボとコツがゼッタイにわかる本 その1'
description: ''
publishDate: '04/01/2019 09:38:55'
---

[CONTENTS-START]
<p>Vue.js のツボとコツがゼッタイにわかる本 という本を読んでいます。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798056499/hatena-blog-22/"><img src="/images/hatena/20190726111922.jpg" class="hatena-asin-detail-image" alt="Vue.jsのツボとコツがゼッタイにわかる本" title="Vue.jsのツボとコツがゼッタイにわかる本"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798056499/hatena-blog-22/">Vue.jsのツボとコツがゼッタイにわかる本</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 中田亨</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 秀和システム</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/03/21</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li><li><a href="http://d.hatena.ne.jp/asin/4798056499/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>Amazon でググってて把握したのですが、このシリーズって技術本に限らず簿記とか民法とかいろいろでているんですね。<br/>
イラストはカエルがでてくるので、カエル本？🐸 といえばいいでしょうか。</p>

<ul>
<li>Vue.js の特徴</li>
<li>これまでバックエンド側が担った役割をフロントエンド側が担うようになった流れ</li>
<li>データバインディングとは</li>
<li>MVCモデル、MVVMモデルとは</li>
<li>オブジェクトの概念</li>
</ul>


<p>的な話から第1〜2章で扱っていて、JavaScript にこれまで触れてこなかった層にもアプローチする内容が他の本とは違う点かなと思います。</p>

<p>難易度的にはタイトルから想像つく通り他のほんと比べても簡単な内容だと思います。順番してはこれまで読んだ本では難易度の高い順に、</p>

<ol>
<li><a href="https://yuheijotaki.hatenablog.com/entry/2019/01/24/210417">Vue.js入門 基礎から実践アプリケーション開発まで</a></li>
<li><a href="https://yuheijotaki.hatenablog.com/entry/2018/12/27/140716">基礎から学ぶ Vue.js（ネコ本）</a></li>
<li><a href="https://yuheijotaki.hatenablog.com/entry/2019/01/14/120742">動かして学ぶ！Vue.js 開発入門（イヌ本）</a></li>
<li>Vue.js のツボとコツがゼッタイにわかる本（カエル本・この本）</li>
</ol>


<p>となるのかなという印象です。</p>

<p>気になった箇所、覚えたい箇所をメモしていきます。</p>

<h2>第2章 Vue.js をはじめよう！</h2>

<h3>2-4 レンダリング（ページを描画する）</h3>

<h4>リストデータをバインドする</h4>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">table</span><span class="synIdentifier"> </span><span class="synType">border</span><span class="synIdentifier">=</span><span class="synConstant">&quot;1&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">tr</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">th</span><span class="synIdentifier">&gt;</span>商品コード<span class="synIdentifier">&lt;/</span><span class="synStatement">th</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">th</span><span class="synIdentifier">&gt;</span>商品名<span class="synIdentifier">&lt;/</span><span class="synStatement">th</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">tr</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">tr</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in products&quot;</span><span class="synIdentifier"> v-bind:key=</span><span class="synConstant">&quot;item.code&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">td</span><span class="synIdentifier">&gt;</span>{{item.code}}<span class="synIdentifier">&lt;/</span><span class="synStatement">td</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">td</span><span class="synIdentifier">&gt;</span>{{item.name}}<span class="synIdentifier">&lt;/</span><span class="synStatement">td</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">tr</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">table</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">'App'</span>,
  data () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      products: <span class="synIdentifier">[</span>
        <span class="synIdentifier">{</span>
          code: <span class="synConstant">'A01'</span>,
          name: <span class="synConstant">'プロダクトA'</span>,
        <span class="synIdentifier">}</span>,
        <span class="synIdentifier">{</span>
          code: <span class="synConstant">'B01'</span>,
          name: <span class="synConstant">'プロダクトB'</span>,
        <span class="synIdentifier">}</span>,
        <span class="synIdentifier">{</span>
          code: <span class="synConstant">'C01'</span>,
          name: <span class="synConstant">'プロダクトC'</span>,
        <span class="synIdentifier">}</span>
      <span class="synIdentifier">]</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>一般的なループですが、これまで触ってきてはっきりしていなかった部分2つに解説がありました。</p>

<h5><code>v-for</code> の「配列要素を代入する変数名」は何でもよい</h5>

<blockquote><p><code>v-for</code> の一つ目の変数（リスト6では <code>item</code>）には、繰り返しのたびに自動的に配列要素が代入されるので、変数名と同じ名前のプロパティをdataオプションに定義しておく必要はありませｎ。そのため、一つ目の変数名は何でもよいことになります。<br/>
一般的には、<code>item</code> や <code>element</code> 、<code>ele</code> のように、それが配列要素であることがわかる抽象的な変数名が使われることが多いようです。配列変数に複数形を表す <code>s</code> を付けている場合は、<code>s</code> を外した変数名を使ってもよいでしょう。例）<code>v-for="product in products"</code></p></blockquote>

<p>決まりがないことは知っていましたが、何でもよい、と言われると気がラクですね。</p>

<h5>繰り返す要素にはキー（<code>key</code>）を指定しよう</h5>

<blockquote><p>例えば画面に削除ボタンがあって、1件目の商品データをユーザーが削除したとします。するとどうなるでしょうか？商品コード「A01」の行がDOMから削除されると予想されますが、実際の挙動は異なります。Vue.js は、「A01」のノードへ「B01」のデータを移し替え、「B01」のノードへ「C01」のデータを移し替えます。そして最後に「C01」のノードだけを削除します。つまり、効率的に描画するために、ノードの移動や削除を抑えて、なるべく使いまわそうとするのです。<br/>
その結果、バインドしている配列の要素番号（インデックス）とDOMノードがずれてしまい、配列要素の並び替えや追加を行ったとき正しく動作しない原因になります。<br/>
この問題を回避するために、<code>v-for</code> で繰り返す1つ1つの配列要素を区別できる値を、<code>key</code> という名前の属性を使ってバインドすることがVue.js公式ガイドで強く推奨されています。</p></blockquote>

<p>これ「強く推奨」と書いてある通り、Vue.js の ES Lint を入れている場合 <code>key</code> がないとエラーになってしまうんですよね。</p>

<pre class="code" data-lang="" data-unlink>[vue/require-v-for-key] Elements in iteration expect to have &#39;v-bind:key&#39; directives.eslint-plugin-vue</pre>


<p>ググってなんとなく <code>key</code> をいれていたのですが、あまり理由を分かっておらずだったのでスッキリしました。</p>

<h3>2-7 イベントハンドリング（ユーザーの操作を検知する）</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>ウィンドウの横幅：{{width}}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>ウィンドウの高さ：{{height}}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">'app'</span>,
  data () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      width: <span class="synStatement">window</span>.innerWidth,
      height: <span class="synStatement">window</span>.innerHeight
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  created: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synComment">// イベントハンドラを登録</span>
    addEventListener(<span class="synConstant">'resize'</span>, <span class="synIdentifier">this</span>.resizeHandler);
  <span class="synIdentifier">}</span>,
  beforeDestroy: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synComment">// イベントハンドラを削除</span>
    removeEventListener(<span class="synConstant">'resize'</span>, <span class="synIdentifier">this</span>.resizeHandler);
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    <span class="synComment">// イベントハンドラ</span>
    resizeHandler: <span class="synIdentifier">function</span>($<span class="synStatement">event</span>) <span class="synIdentifier">{</span>
      <span class="synComment">// 現在のウィンドウサイズでプロパティを更新</span>
      <span class="synIdentifier">this</span>.width = $<span class="synStatement">event</span>.target.innerWidth;
      <span class="synIdentifier">this</span>.height = $<span class="synStatement">event</span>.target.innerHeight;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
<span class="synIdentifier">}</span>
</pre>


<p>これも結構な勘違いだったのですが、こういうイベントごとの検知は名前からしてウォッチオプション（<code>watch: {}</code>）を使うと思ってたのですが、Vue.js に頼らずともできるということなのですね。<br/>
その代わり Vue.js を介さずに登録したイベントハンドラは、不要になったタイミング（<code>beforeDestroy</code> ライフサイクルハックなど）で <code>removeEventListener</code> 関数を呼び出して解除する必要があるとのこと。</p>

<h3>2-8 ウォッチャ（データの変更を監視する）</h3>

<h4>ウォッチャとは？</h4>

<p>そしたらウォッチャとは何なのか？ということになりますが、ちゃんと説明されていました。</p>

<blockquote><p>感覚的には 2-7節 のイベントハンドリングと似ていますが、ハンドラが呼び出されるタイミングがイベントではなくデータの変更である点が異なります。</p></blockquote>

<p>要は、</p>

<ul>
<li>イベントによる検知 => <code>addEventListener('hogehoge'...)</code> を使う</li>
<li>データの変更による検知 => <code>watch: {}</code> を使う</li>
</ul>


<p>ということですね。</p>

<h4>算出プロパティとウォッチャの使い分け</h4>

<blockquote><p>対象とするプロパティが返すデータを、アプリケーションに保持された他のデータの状態に応じて切り替えたい場合には、算出プロパティを使ってもよいでしょう。<br/>
しかし、返したいデータをアプロケーションの外部から取得しなければならない場合、算出プロパティではハンドラが処理を終えるまで再描画されないので、ユーザーを待たせてしまいます。ウォッチャなら、Ajax と呼ばれる非同期通信を使ってユーザーの待ち時間を軽減したり、ブラウザに重い負荷がかからないようにハンドラの実行頻度を調整したりできるので、より快適なインターフェースを提供できます。</p></blockquote>

<p><code>computed: {}</code>  か <code>watch: {}</code> かいつも迷うんですが、これで分かったような、分からないような。。<br/>
イメージ的に、<code>computed</code> でできることは <code>watch</code> でもできることで、できる限りは <code>computed</code> を使う、というイメージでいるのですが。。</p>

<hr />

<p>基本的に内容のおさらいなので第2章までで気になった箇所はこのくらいで、ほかはこんなんあったなーと読みすすめていました。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2019年3月 振り返り'
description: ''
publishDate: '04/01/2019 08:17:39'
---

[CONTENTS-START]
<h2>結果</h2>

<h3>ブログ</h3>

<p><strong>目標：月 12 回（週 3 回）更新</strong><br/>
<strong>結果：月 14 回 更新</strong></p>

<h3>読書</h3>

<p><strong>目標：月 1 冊</strong><br/>
<strong>結果：月 3 冊</strong></p>

<h2>反省点など</h2>

<p>Vue.js を月末に久々に触るくらい、中旬にかけて触らなくなってしまった。<br/>
そこまで忘れてなかったので良かったけれど定期的に触らなければいけない。</p>

<p>仕事が忙しい日に1日だけやらなくなると、その後2,3日続けてモチベーション落ちて学習に向かなくなることもあるのでコツコツと1日10分でもいいから触るようにしたい。</p>

<p>読書は、</p>

<ul>
<li>マイクロインタラクション</li>
<li>リーダブルコード</li>
<li>UIデザインの教科書</li>
</ul>


<p>3冊読んだが、偏りすぎというか、もう少し実務 or 技術的にスキルアップに直結する本を月1冊は読むべきかなと思った。<br/>
ただ通勤などの合間で読んでいくと案外1冊すぐ読み終えれるなど、なんとなくのペース感はつかめてきた気がする。</p>

<h2>来月に向けて</h2>

<p>Vue.js のツボとコツがゼッタイにわかる本 というそれっぽい本を買ったので、前半に終わらせる。<br/>
後半から、前に jQuery で作った <a href="https://yuheijotaki.com/demo/type_tester/1.1/">type tester</a> のようなアプリをつくり始めたい。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】リーダブルコード その4'
description: ''
publishDate: '03/27/2019 09:51:12'
---

[CONTENTS-START]
<p>リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック 最終回です。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873115655/hatena-blog-22/"><img src="/images/hatena/20190726111902.jpg" class="hatena-asin-detail-image" alt="リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)" title="リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873115655/hatena-blog-22/">リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> Dustin Boswell,Trevor Foucher,須藤功平,角征典</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> オライリージャパン</li><li><span class="hatena-asin-detail-label">発売日:</span> 2012/06/23</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><span class="hatena-asin-detail-label">購入</span>: 68人 <span class="hatena-asin-detail-label">クリック</span>: 1,802回</li><li><a href="http://d.hatena.ne.jp/asin/4873115655/hatena-blog-22" target="_blank">この商品を含むブログ (140件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>8章 巨大な式を分割する</h2>

<blockquote><p><strong>巨大な式は飲み込みやすい大きさに分割する</strong></p></blockquote>

<h3>8.1 説明変数</h3>

<blockquote><p>式を簡単に分割するには、式を表す変数を使えばいい。この変数を「説明変数」と呼ぶこともある。式の意味を説明してくれるからだ。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> str = <span class="synConstant">'root:'</span>
<span class="synStatement">if</span> (str.replace(<span class="synConstant">':'</span>,<span class="synConstant">''</span>) === <span class="synConstant">'root'</span>) <span class="synIdentifier">{</span>
  ...
<span class="synIdentifier">}</span>

<span class="synComment">// ↓↓↓ 説明変数を使う</span>

  <span class="synIdentifier">var</span> str = <span class="synConstant">'root:'</span>
<span class="synIdentifier">var</span> username = str.replace(<span class="synConstant">':'</span>,<span class="synConstant">''</span>);
<span class="synStatement">if</span> (username === <span class="synConstant">'root'</span>) <span class="synIdentifier">{</span>
  ...
<span class="synIdentifier">}</span>
</pre>


<p>これを使うと、</p>

<blockquote><ul>
<li>巨大な式を分割できる。</li>
<li>簡潔な名前で式を説明することで、コードを文書化できる。</li>
<li>コードの主要な「概念」を読み手が認識しやすくなる。</li>
</ul>
</blockquote>

<h3>8.2 要約変数</h3>

<blockquote><p>式を説明する必要がない場合でも、式を変数に代入しておくと便利だ。大きなコードの塊を小さな名前に置き換えて、管理や把握を簡単にする変数のことを要約変数と呼ぶ。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">if</span> (request.user.id === <span class="synStatement">document</span>.owner_id) <span class="synIdentifier">{</span>
<span class="synIdentifier">}</span>

<span class="synComment">// ↓↓↓ 要約変数を使う</span>

<span class="synIdentifier">var</span> userOwnDocument = request.user.id === <span class="synStatement">document</span>.owner_id;
<span class="synStatement">if</span> (userOwnDocument) <span class="synIdentifier">{</span>
  ...
<span class="synIdentifier">}</span>
</pre>


<h3>8.6 巨大な文を分割する</h3>

<blockquote><ul>
<li>タイプミスを減らすのに役立つ</li>
<li>横幅が縮まるのでコードが読みやすくなる。</li>
<li>クラス名を変更することになれば、一箇所を変更すればいい。</li>
</ul>
</blockquote>

<p>これまでに無意識でやるときとやらない時がありましたが、ちゃんとやろうと思いました。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> update_highlight = <span class="synIdentifier">function</span> (message_num) <span class="synIdentifier">{</span>
  <span class="synStatement">if</span>($(<span class="synConstant">&quot;#vote_value&quot;</span> + message_num).html() === <span class="synConstant">&quot;Up&quot;</span>) <span class="synIdentifier">{</span>
    $(<span class="synConstant">&quot;#thumbs_up&quot;</span> + message_num).addClass(<span class="synConstant">&quot;highlighted&quot;</span>);
    $(<span class="synConstant">&quot;#thumbs_down&quot;</span> + message_num).removeClass(<span class="synConstant">&quot;highlighted&quot;</span>);
  <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synStatement">if</span> ($(<span class="synConstant">&quot;#vote_value&quot;</span> + message_num).html() === <span class="synConstant">&quot;Down&quot;</span>) <span class="synIdentifier">{</span>
    ...
<span class="synIdentifier">}</span>;

<span class="synComment">// ↓↓↓ 同じ式は要約変数として関数の最上部に抽出する</span>

<span class="synIdentifier">var</span> update_highlight = <span class="synIdentifier">function</span> (message_num) <span class="synIdentifier">{</span>
  <span class="synIdentifier">var</span> thumbs_up = $(<span class="synConstant">&quot;#thumbs_up&quot;</span> + message_num);
  <span class="synIdentifier">var</span> thumbs_down = $(<span class="synConstant">&quot;#thumbs_down&quot;</span> + message_num);
  <span class="synIdentifier">var</span> vote_value = $(<span class="synConstant">&quot;#vote_value&quot;</span> + message_num).html();
  <span class="synIdentifier">var</span> hi = <span class="synConstant">&quot;highlighted&quot;</span>;

  <span class="synStatement">if</span>(vote_value === <span class="synConstant">&quot;Up&quot;</span>) <span class="synIdentifier">{</span>
    thumbs_up.addClass(hi);
    thumbs_down.removeClass(hi);
  <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synStatement">if</span> (vote_value === <span class="synConstant">&quot;Down&quot;</span>) <span class="synIdentifier">{</span>
    ...
<span class="synIdentifier">}</span>;
</pre>


<h2>9章 変数と読みやすさ</h2>

<blockquote><ol>
<li>変数が多いと変数を追跡するのが難しくなる。</li>
<li>変数のスコープが大きいとスコープを把握する時間が長くなる。</li>
<li>変数が頻繁に変更されると現在の値を把握するのが難しくなる。</li>
</ol>
</blockquote>

<h3>9.1 変数を削除する</h3>

<p>8章で <code>説明変数</code> や <code>要約変数</code> を使って巨大な式を分割して説明文のようにしたため、読みやすくなった。<br/>
逆に、複雑な処理を分割していない変数などは変数にする必要はない。</p>

<pre class="code" data-lang="" data-unlink>now = datetime.datetime.now()
root_message.last_view_time = now</pre>


<blockquote><p>この <code>now</code> を使う意味があるだろうか？意味がない理由を以下に挙げよう。</p>

<ul>
<li>複雑な式を分割していない。</li>
<li>より明確になっていない。 <code>datetime.datetime.now()</code> のままでも十分に明確だ。</li>
<li>一度しか使っていないので、重複コードの削除になっていない。</li>
</ul>
</blockquote>

<h3>9.2 変数のスコープを縮める</h3>

<blockquote><p><strong>変数のことが見えるコード行数をできるだけ減らす</strong></p></blockquote>

<p>これあんまり理解できなかったのですが、</p>

<ul>
<li>グローバル変数は避ける</li>
<li>アクセスはできるだけ制限して、変数のことが「見えてしまう」コードを減らすのがいいとされている。</li>
</ul>


<blockquote><p>変数を操作する場所が増えると、現在地の判断が難しくなる。</p></blockquote>

<p>で触れられている</p>

<blockquote><p><strong>変数は一度だけ書き込む</strong></p></blockquote>

<p>というルールは、ES5では <code>const</code> と <code>let</code> でだいぶ解決されたのかなと思う。</p>

<h2>10章 無関係の下位問題を抽出する</h2>

<blockquote><p>エンジニアリングとは、大きな問題を小さな問題に分割して、それぞれの解決策を組み立てることに他ならない。</p>

<p>本章のアドバイスは、<strong>無関係の下位問題を積極的に見つけて抽出する</strong> ことだ。</p>

<ol>
<li>関数やコードブロックを見て「このコードの高レベルの目標は何か？」と自問する。</li>
<li>コードの各行に対して「高レベルの目標に直接的に効果があるのか？あるいは、無関係の下位問題を解決しているのか？」を自問する。</li>
<li>無関係の下位問題を解決しているコードが相当量あれば、それらを抽出して別の関数にする。</li>
</ol>
</blockquote>

<p>という技法で大幅にコードを改善できる。<br/>
とのこと。あまり上位/下位問題など考えたことなかったので新しい発見です。</p>

<h3>10.3 その他の汎用コード</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>ajax_post(<span class="synIdentifier">{</span>
  url: <span class="synConstant">''</span>,
  data: data,
  on_success: <span class="synIdentifier">function</span> (response_data) <span class="synIdentifier">{</span>
    <span class="synIdentifier">var</span> str = <span class="synConstant">&quot;{&quot;</span>;
    <span class="synStatement">for</span>(<span class="synIdentifier">var</span> key <span class="synStatement">in</span> response_data) <span class="synIdentifier">{</span>
      str += <span class="synConstant">&quot; &quot;</span> + key + <span class="synConstant">&quot; = &quot;</span> + response_data<span class="synIdentifier">[</span>key<span class="synIdentifier">]</span> + <span class="synConstant">&quot;¥n&quot;</span>;
    <span class="synIdentifier">}</span>
    <span class="synStatement">alert</span>(str + <span class="synConstant">&quot;}&quot;</span>);
    <span class="synComment">// 引き続き response_dataの処理</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>このコードの高レベルの目標は<strong>「サーバをAjaxで呼び出してレスポンスを処理する」</strong>である。<br/>
でも、このコードの大部分は<strong>「ディクショナリをキレイに印字（<code>pretty print</code>する）」</strong>という「無関係の下位問題」を解決しようとしている。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> format_pretty = <span class="synIdentifier">function</span>(obj) <span class="synIdentifier">{</span>
  <span class="synIdentifier">var</span> str = <span class="synConstant">&quot;{&quot;</span>;
  <span class="synStatement">for</span>(<span class="synIdentifier">var</span> key <span class="synStatement">in</span> response_data) <span class="synIdentifier">{</span>
    str += <span class="synConstant">&quot; &quot;</span> + key + <span class="synConstant">&quot; = &quot;</span> + response_data<span class="synIdentifier">[</span>key<span class="synIdentifier">]</span> + <span class="synConstant">&quot;¥n&quot;</span>;
  <span class="synIdentifier">}</span>
  <span class="synStatement">return</span> str + <span class="synConstant">&quot;}&quot;</span>;
<span class="synIdentifier">}</span>
</pre>


<p>こうすると、</p>

<ul>
<li>呼び出し側のコードが簡潔になる</li>
<li><code>format_pretty()</code> をあとから再利用できる</li>
<li><strong>コードが独立していれば、<code>format_pretty()</code> の改善が楽になる</strong></li>
</ul>


<p>という恩恵を受けることができる。（特に最後の「改善が楽になる」が大事）</p>

<hr />

<p>11章〜15章は省略。。</p>

<h2>全体の感想など</h2>

<p>これまで全く意識していなかったこと、少しは意識していたけど言語化できなかったり、論理的に考えていなかったことが発見できて良かったです。</p>

<p>まだ勉強不足で読んでもしっくりこない箇所もありましたが、これからのコーディングをしていくなかでの指針みたいなもの（困ったらすがるもの）ができたので、そこが一番よかったことかなと思います。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】リーダブルコード その3'
description: ''
publishDate: '03/25/2019 09:24:26'
---

[CONTENTS-START]
<p>リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック 前回の続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873115655/hatena-blog-22/"><img src="/images/hatena/20190726111902.jpg" class="hatena-asin-detail-image" alt="リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)" title="リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873115655/hatena-blog-22/">リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> Dustin Boswell,Trevor Foucher,須藤功平,角征典</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> オライリージャパン</li><li><span class="hatena-asin-detail-label">発売日:</span> 2012/06/23</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><span class="hatena-asin-detail-label">購入</span>: 68人 <span class="hatena-asin-detail-label">クリック</span>: 1,802回</li><li><a href="http://d.hatena.ne.jp/asin/4873115655/hatena-blog-22" target="_blank">この商品を含むブログ (140件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>5章 コメントすべきことを知る</h2>

<blockquote><p><strong>コメントの目的は、書き手の意図を読み手に知らせることである。</strong></p></blockquote>

<h3>5.1 コメントするべきでは「ない」こと</h3>

<blockquote><p><strong>コードからすぐにわかることをコメントに書かない。</strong></p></blockquote>

<p>下記はその悪い例</p>

<pre class="code lang-c" data-lang="c" data-unlink><span class="synComment">// Account クラスの定義</span>
class Account {
  <span class="synStatement">public</span>:
  <span class="synComment">// コンストラクタ</span>
  Account();

  <span class="synComment">// profit に新しい値を設定する</span>
  <span class="synType">void</span> SetProfit(<span class="synType">double</span> profit);

  <span class="synComment">// この Account から profit を返す</span>
  <span class="synType">double</span> GetProfit();
}
</pre>


<ul>
<li>コードからすぐに抽出できること</li>
<li>ひどいコード（例えば、ひどい名前の関数）を補う「補助的なコメント」。<br/>
コメントを書くのではなくコードを修正する。</li>
</ul>


<h3>5.2 自分の考えを記録する</h3>

<blockquote><p>優れたコメントというのは「考えを記録する」ためのものである。コードを書いているときに持っている「大切な考え」のことだ。</p>

<p>映画のDVDにはよく「監督のコメンタリー」がついてくる。映画の製作者が自分の考えや物語について語ってくれるので、作品がどのように作られたのかを理解するのに役立つ。これと同じように、コメントにはコードに対する大切な考えを記録しなければならない。<br/>
例えば、こんな感じだ。</p></blockquote>

<pre class="code" data-lang="" data-unlink>// このデータだとハッシュテーブルよりもバイナリツリーのほうが40%速かった。
// 左右の比較よりもハッシュの計算コストのほうが高いようだ。</pre>




<pre class="code" data-lang="" data-unlink>// このクラスは汚くなってきている。
// サブクラス `ResourceNode` を作って整理したほうがいいかもしれない。</pre>


<h4>コードの欠陥にコメントをつける</h4>

<blockquote><p>コードは絶えず進化しているので、その過程で欠陥を生む運命にある。その欠陥を文書化することを恥ずかしがってはいけない。例えば、改善が必要なときは以下のように書いておこう。</p></blockquote>

<pre class="code" data-lang="" data-unlink>// TODO: もっと高速なアルゴリズムを使う</pre>




<pre class="code" data-lang="" data-unlink>// TODO: JPEG 以外のフォーマットに対応する</pre>


<table>
<thead>
<tr>
<th> 記法     </th>
<th> 典型的な意味               </th>
</tr>
</thead>
<tbody>
<tr>
<td> <code>TODO:</code>  </td>
<td> あとで手をつける           </td>
</tr>
<tr>
<td> <code>FIXME:</code> </td>
<td> 既知の不具合があるコード   </td>
</tr>
<tr>
<td> <code>HACK:</code>  </td>
<td> あまりキレイじゃない解決策 </td>
</tr>
<tr>
<td> <code>XXX:</code>   </td>
<td> 危険！ 大きな問題がある    </td>
</tr>
</tbody>
</table>


<h4>定数にコメントをつける</h4>

<blockquote><p>定数を定義するときには、その定数が何をするのか、なぜその値を持っているのかという「背景」が存在する場合が多い。</p></blockquote>

<pre class="code" data-lang="" data-unlink>const image_quality = 0.72; // 0.72 ならユーザはファイルサイズを品質の面で妥協できる</pre>


<h3>5.3 読み手の立場になって考える</h3>

<blockquote><p>本書で使っている技法は、他の人にコードがどのように見えるかを想像するものだ。<strong>「他の人」というのは、プロジェクトのことを君のように熟知していない人のことである。</strong></p></blockquote>

<ul>
<li>質問されそうなことを想像する</li>
<li>ハマりそうな罠を告知する</li>
<li>「全体像」のコメント

<ul>
<li><code>// このファイルには、ファイルシステムに関する便利なインターフェースを提供するヘルパー関数が含まれています。</code></li>
</ul>
</li>
<li>要約コメント</li>
</ul>


<h3>5.4 ライダーズブロックを乗り越える</h3>

<blockquote><p>例えば、ある関数を作っていて、<strong>「ヤバい、これはリストに重複があったら面倒なことになる」</strong>と思ったとする。それをそのまま書き出せばいい。</p>

<p><code>
// ヤバい、これはリストに重複があったら面倒なことになる
↓↓↓ 言い回しをもっと詳細な言葉に置き換えるともっといい
// 注意：このコードはリストの重複を処理できません（実装が難しいので）。
</code></p></blockquote>

<p>コメントを書くという作業の手順は以下3つに分解できる。</p>

<blockquote><ul>
<li>頭のなかにあるコメントをとにかく書き出す。</li>
<li>コメントを読んで（どちらかと言えば）改善が必要なものを見つける。</li>
<li>改善する</li>
</ul>
</blockquote>

<h2>6章 コメントは正確で簡潔に</h2>

<p>ここは具体例多くあまり話入ってこなかったのでまとめだけ</p>

<blockquote><ul>
<li>複数のものを指す可能性がある「それ」や「これ」などの代名詞を避ける。</li>
<li>関数の動作はできるだけ正確に説明する。</li>
<li>コードの意図は、詳細レベルではなく、高レベルで記述する。</li>
</ul>
</blockquote>

<h2>7章 制御フローを読みやすくする</h2>

<blockquote><p><strong>条件やループなどの制御フローはできるだけ「自然」にする。コードの読み手が立ち止まったり読み返したりしないように書く。</strong></p></blockquote>

<h4>7.1 条件式の引数の並び順</h4>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">if</span> (length &gt;= 10)
<span class="synComment">// または</span>
<span class="synStatement">if</span> (10 &lt;= length)
</pre>


<p>最初のほうが読みやすいが、それはなぜか？</p>

<table>
<thead>
<tr>
<th> 左側                         </th>
<th> 右側                                 </th>
</tr>
</thead>
<tbody>
<tr>
<td> 「調査対象」の式。変化する。 </td>
<td> 「比較対象」の式。あまり変化しない。 </td>
</tr>
</tbody>
</table>


<p>英語の用法と同じで、</p>

<p><strong>自然</strong></p>

<ul>
<li>「もし君が1年間で10万ドル以上稼げるならば」</li>
<li>「もし君が18歳以上ならば」</li>
</ul>


<p><strong>不自然</strong></p>

<ul>
<li>「もし10万ドルが君が1年間で稼げる金額以下ならば」</li>
<li>「もし18年が君の年齢以下ならば」</li>
</ul>


<p>この<strong>自然</strong>な用法に従ってコードも書くと理解がしやすい。</p>

<h4><code>if/else</code> ブロックの並び順</h4>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">if</span> (a == b) <span class="synIdentifier">{</span>
  <span class="synComment">// 第1のケース</span>
<span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
  <span class="synComment">// 第2のケース</span>
<span class="synIdentifier">}</span>
</pre>


<p>と</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">if</span> (a != b) <span class="synIdentifier">{</span>
  <span class="synComment">// 第2のケース</span>
<span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
  <span class="synComment">// 第1のケース</span>
<span class="synIdentifier">}</span>
</pre>


<p>と書くのは同じことだが、この並び順には優劣がある。</p>

<blockquote><ul>
<li>条件は否定形よりも肯定形を使う。例えば、<code>if (!debug)</code> ではなく、<code>if (debug)</code> を使う。</li>
<li>単純な条件を先に書く。<code>if</code> と <code>else</code> が同じ画面に表示されるので見やすい。</li>
<li>関心を引く条件や目立つ条件を先に書く。</li>
</ul>


<p>この優劣は衝突することもあるので、そのときは自分で判断しなければいけない。でも、優先度は明確に決まることが多い。</p></blockquote>

<h3>7.3 三項演算子</h3>

<blockquote><p><strong>行数を短くするよりも、他の人が理解するのにかかる時間を短くする</strong></p>

<p><strong>基本的には <code>if/else</code> を使おう。三項演算子はそれによって簡潔になるときにだけ使おう。</strong></p></blockquote>

<hr />

<p>第7章から第二部でコードの具体例書かれてきてだんだん理解が追いつかなくなってきました。。<br/>
最後のまとめは読めそうなので、読めそうな所だけ読むようにしたいと思います。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】リーダブルコード その2'
description: ''
publishDate: '03/20/2019 09:25:12'
---

[CONTENTS-START]
<p>リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック 前回の続きです。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873115655/hatena-blog-22/"><img src="/images/hatena/20190726111902.jpg" class="hatena-asin-detail-image" alt="リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)" title="リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873115655/hatena-blog-22/">リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> Dustin Boswell,Trevor Foucher,須藤功平,角征典</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> オライリージャパン</li><li><span class="hatena-asin-detail-label">発売日:</span> 2012/06/23</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><span class="hatena-asin-detail-label">購入</span>: 68人 <span class="hatena-asin-detail-label">クリック</span>: 1,802回</li><li><a href="http://d.hatena.ne.jp/asin/4873115655/hatena-blog-22" target="_blank">この商品を含むブログ (140件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>3章 誤解されない名前</h2>

<blockquote><p><strong>名前が「他の意味と間違えられることはないだろうか？」と何度も自問自答する。</strong></p></blockquote>

<h3>3.1 例：<code>filter()</code></h3>

<pre class="code" data-lang="" data-unlink>results = Database.all_objects.filter(&#34;year &lt;= 2011&#34;)</pre>


<blockquote><p>この <code>results</code> には何が含まれているだろうか？</p>

<ul>
<li><code>year &lt;= 2011</code> のオブジェクト</li>
<li><code>year &lt;= 2011</code> <strong>ではない</strong> オブジェクト</li>
</ul>


<p>どちらかよくわからないのは、<code>filter</code> があいまいな言葉だからだ。</p>

<p>「選択する」のであれば、<code>select()</code> にしたほうがいい。「除外する」のであれば、<code>exclude()</code> にしたほうがいい。</p></blockquote>

<h3>3.2 例：<code>Clip(text, length)</code></h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> clip = (text, length) =&gt; <span class="synIdentifier">{</span>
↓↓↓
<span class="synStatement">const</span> truncate = (text, maxChars) =&gt; <span class="synIdentifier">{</span>
</pre>


<p>上記と同じ考え方で読み手に疑問を抱かせないようにする。<br/>
最後から <code>length</code> 文字を削除するなら、<code>remove</code><br/>
最大 <code>length</code> 文字まで切り詰めるなら、<code>truncate</code></p>

<p><code>length</code> も</p>

<ul>
<li>バイト数</li>
<li>文字数</li>
<li>単語数</li>
</ul>


<p>なのかが明確でなく、名前に単位をつけたほうがいいので、<code>maxChars</code> にするとよい。</p>

<h3>3.3 限界値を含めるときは <code>min</code> と <code>max</code> を使う</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> cartTooBigLimit = 10; <span class="synComment">//「未満」か「以下」かわかりづらい</span>
↓↓↓
<span class="synStatement">const</span> maxItemsInCart  = 10;  <span class="synComment">// min や max を使うとわかりやすい</span>
</pre>


<h3>3.4 範囲を指定するときは <code>first</code> と <code>last</code> を使う</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> integerRangeStart  = 2;
<span class="synStatement">const</span> integerRangeEnd    = 4; <span class="synComment">// 終端を範囲に含めるのかが分かりづらい</span>
↓↓↓
<span class="synStatement">const</span> integerRangeStart  = 2;
<span class="synStatement">const</span> integerRangeLast   = 4; <span class="synComment">// End ではなく Last を使う</span>
</pre>


<h3>3.6 ブール値の名前</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">let</span> readPassword        = <span class="synConstant">true</span>; <span class="synComment">// 「これから読み取るか」「すでに読み取っているか」分かりづらい</span>
↓↓↓
<span class="synIdentifier">let</span> needPassword        = <span class="synConstant">true</span>; <span class="synComment">// or</span>
<span class="synIdentifier">let</span> userIsAuthenticated = <span class="synConstant">true</span>; <span class="synComment">// こちらでもよさそう</span>
</pre>


<blockquote><p>ブール値の変数名は、頭に <code>is</code> <code>has</code> <code>can</code> <code>should</code> などをつけてわかりやすくすることが多い。</p></blockquote>

<p>例：<code>spaceLeft()</code> => <code>hasSpaceLeft()</code></p>

<blockquote><p>それから、名前を否定形にするのは避けたほうがいい。例えば、</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>disableSSL = <span class="synConstant">false</span>;
↓↓↓
useSSL     = <span class="synConstant">true</span>; <span class="synComment">// 肯定形にしたほうが声に出して読みやすい</span>
</pre>


<h3>3.7 ユーザの期待に合わせる</h3>

<p><code>get()</code> や <code>size()</code> には軽量なメソッドがユーザに期待されている。</p>

<h2>4章 美しさ</h2>

<blockquote><p>優れたソースコードは「目に優しい」ものでなければいけない。</p>

<ul>
<li>読み手が慣れているパターンと一貫性のあるレイアウトを使う。</li>
<li>似ているコードは似ているように見せる。</li>
<li>関連するコードをまとめてブロックにする。</li>
</ul>
</blockquote>

<h3>4.4 縦の線をまっすぐにする</h3>

<blockquote><p>列を「整列」させれば、コードが読みやすくなることがある。</p></blockquote>

<p><strong>整列すべきなのか？</strong></p>

<blockquote><p>ぼくたちの経験では、プログラマが心配するほどの手間にはならない。もし手間になるようだったら、そのときは止めればいい。</p></blockquote>

<h3>4.5 一貫性と意味のある並び</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> details  = <span class="synConstant">'詳細情報'</span>;
<span class="synStatement">const</span> <span class="synStatement">location</span> = <span class="synConstant">'場所'</span>;
<span class="synStatement">const</span> phone    = <span class="synConstant">'電話番号'</span>;
<span class="synStatement">const</span> email    = <span class="synConstant">'Eメール'</span>;
<span class="synStatement">const</span> url      = <span class="synConstant">'URL'</span>;
</pre>


<blockquote><p>であれば、ランダムに並べるのではなく、意味のある順番に並べるといい。例えば、こんな感じだ。</p>

<ul>
<li>対応するHTMLフォームの <code>&lt;input&gt;</code> フィールドと同じ並び順にする。</li>
<li>「最重要」なものから重要度順に並べる。</li>
<li>アルファベット順に並べる。</li>
</ul>
</blockquote>

<h3>4.7 コードを「段落」に分割する</h3>

<blockquote><p>文章は複数の段落に分割されている。それは、</p>

<ul>
<li>似ている考えをグループにまとめて、他の考えと分けるためだ。</li>
<li>視覚的な「踏み石」を提供できるからだ。これがなければ、ページのなかで自分の場所を見失ってしまう。</li>
<li>段落単位で移動できるようになるからだ。</li>
</ul>


<p>これと同じ理由で、コードも「段落」に分けるべきだ。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> suggestNewFriends = (user, emailPassword) =&gt; <span class="synIdentifier">{</span>
  <span class="synComment">// ユーザーの友達のメールアドレスを取得する</span>
  ...

  <span class="synComment">// ユーザーのメールアカウントからすべてのメールアドレスをインポートする。</span>
  ...

  <span class="synComment">// まだ友達になっていないユーザを探す。</span>
  ...

  <span class="synComment">// それをページに表示する</span>
  ...
<span class="synIdentifier">}</span>
</pre>


<h3>4.8 個人的な好みと一貫性</h3>

<blockquote><p>最終的には個人の好みになってしまうこともある。例えば、クラス定義の開き括弧の位置がそうだ。</p></blockquote>

<pre class="code" data-lang="" data-unlink>class Logger {
    ...
};</pre>


<p>または、</p>

<pre class="code" data-lang="" data-unlink>class Logger
{
    ...
};</pre>


<blockquote><p>どちらを選んだとしても、コードの読みやすさに大きな影響はない。でも、この2つのスタイルを混ぜてしまうと、すごい読みにくいものになってしまう。</p>

<p><strong>一貫性のあるスタイルは「正しい」スタイルよりも大切だ</strong></p></blockquote>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】リーダブルコード その1'
description: ''
publishDate: '03/19/2019 09:07:18'
---

[CONTENTS-START]
<p>リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック を読んでいます。<br/>
忘れそうなので、何回かに分けて書き留めていこうと思います。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873115655/hatena-blog-22/"><img src="/images/hatena/20190726111902.jpg" class="hatena-asin-detail-image" alt="リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)" title="リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873115655/hatena-blog-22/">リーダブルコード ―より良いコードを書くためのシンプルで実践的なテクニック (Theory in practice)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> Dustin Boswell,Trevor Foucher,須藤功平,角征典</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> オライリージャパン</li><li><span class="hatena-asin-detail-label">発売日:</span> 2012/06/23</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><span class="hatena-asin-detail-label">購入</span>: 68人 <span class="hatena-asin-detail-label">クリック</span>: 1,802回</li><li><a href="http://d.hatena.ne.jp/asin/4873115655/hatena-blog-22" target="_blank">この商品を含むブログ (140件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<h2>1章 理解しやすいコード</h2>

<blockquote><p><strong>コードは理解しやすくなければいけない。</strong><br/>
これがコードを書く上でいちばん大切な原則だ。</p></blockquote>

<h3>1.2 読みやすさの基本定理</h3>

<blockquote><p><strong>コードは他の人が最短時間で理解できるように書かなければならない。</strong><br/>
これってどういう意味だと思う？ そのまんまの意味だ。 例えば、同僚にコードを読んでもらって、彼が理解するまでにかかる時間を計測するとしよう。この「理解するまでにかかる時間」という数値を最短にするってことだ。</p>

<p>「他の人」というのは、自分のコードに見覚えのない6ヶ月後の<strong>「君自身」</strong>かもしれない。</p></blockquote>

<h3>1.3 小さなことは絶対にいいこと？</h3>

<blockquote><p>コードは短くしたほうがいい。だけど、「理解するまでにかかる時間」を短くするほうが大切だ。</p></blockquote>

<h2>2章 名前に情報を詰め込む</h2>

<blockquote><p><strong>名前に情報を詰め込む</strong></p>

<p><code>size</code> や <code>get</code> みたいに一見すると問題がなさそうな名前であっても、情報が含まれていないことがある。</p></blockquote>

<p>情報を詰め込んだ名前のつけ方のテーマ</p>

<ul>
<li>明確な単語を選ぶ</li>
<li>汎用的な名前を避ける（あるいは、使う状況を選ぶ）</li>
<li>抽象的な名前よりも具体的な名前を使う</li>
<li>接尾辞や接頭辞を使って情報を追加する</li>
<li>名前の長さを決める</li>
<li>名前のフォーマットで情報を伝える</li>
</ul>


<h3>2.1 明確な単語を選ぶ</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>getPage(url);
</pre>


<p>この <code>"get"</code> という単語はあまり明確ではない。もし、インターネットから <code>"get"</code> するのであれば、</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>fetchPage(url);
<span class="synComment">// もしくは</span>
downloadPage(url);
</pre>


<p>のほうが明確である。</p>

<h3>2.2 <code>tmp</code> や <code>retval</code> などの汎用的な名前を避ける</h3>

<blockquote><p><strong>エンティティの値や目的を表した名前を選ぼう。</strong></p>

<p>いい名前というのは、変数の目的や値を表すものだ。</p></blockquote>

<p>ただ情報の一時的な保管や、生存期間が少ない行数の変数名には、<code>tmp</code> という名前で全く問題ない。</p>

<h3>2.3 抽象的な名前よりも具体的な名前を使う</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>ServerCanStart()
</pre>


<p>というメソッドよりも</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>CanListenOnPort()
</pre>


<p>のほうが具体的でメソッドの動作をそのまま表している。</p>

<h3>2.4 名前に情報を追加する</h3>

<blockquote><p>時間やバイト数のように計測できるものであれば、変数名に単語を入れるといいだろう。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>delay =&gt; delay_secs
size  =&gt; size_mb
limit =&gt; max_kbps
angle =&gt; degrees_cw
</pre>


<h3>2.5 名前の長さを決める</h3>

<blockquote><p>長期休暇よりも短期でどこかへ行くときのほうが荷物は少ないはずだ。それと同じで識別子の「スコープ」（その名前が「見える」コードの行数）が小さければ、多くの情報を詰め込む必要はない。すべての情報（変数の型・初期値・破棄方法など）が見えるので、変数の名前は短くていい。</p></blockquote>

<h4>頭文字と省略形</h4>

<blockquote><p>プロジェクト固有の省略形はダメだ。</p>

<p><strong>新しいチームメイトはその名前の意味を理解できるだろうか？</strong> 理解できるなら問題ない。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>evaluation =&gt; eval
<span class="synStatement">document</span>   =&gt; doc
string     =&gt; str
</pre>


<p>をプログラマは普段から使うから、新しいチームメイトも <code>formatStr()</code> の意味は理解できる。</p>

<h4>不要な単語を投げ捨てる</h4>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>convertToString() =&gt; toString()
doServeLoop()     =&gt; serveLoop()
</pre>


<p>に変えても明確さは同じ。</p>

<hr />

<p>結構カジュアルというか、口語的に内容が展開されているのですがそれが読みやすいです。<br/>
また次回覚えておきたいことをメモしていきたいと思います。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue CLI（Webpack）と vue-router を使ったプロジェクトを GitHub Pages で公開する'
description: ''
publishDate: '03/18/2019 22:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190315114020.png" alt="f:id:jotaki:20190315114020p:plain" title="f:id:jotaki:20190315114020p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p><a href="https://yuheijotaki.hatenablog.com/entry/2019/03/15/220000">前回の続き</a> で、vue-router のパス設定（ <code>path: "/about"</code> みたいなの）を変更すると思ったのですが、違いました。<br/>
<a href="https://qiita.com/uriuriuriu/items/dc5ece0189c518c2e046">vue-routerのgithub-pages用設定 - Qiita</a> に書いてある通りなのですが、</p>

<ul>
<li>config/dev.env.js</li>
<li>config/prod.env.js</li>
<li>src/router/router.js</li>
</ul>


<p>を編集する必要がありました。</p>

<p>作成した GitHub Pages のURLは <a href="https://yuheijotaki.github.io/works/">https://yuheijotaki.github.io/works/</a> なので、</p>

<p><code>config/dev.env.js</code></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
module.exports = merge(prodEnv, <span class="synIdentifier">{</span>
  NODE_ENV: <span class="synConstant">'&quot;development&quot;'</span>,
  ROOT_BASE: <span class="synConstant">'&quot;&quot;'</span> <span class="synComment">// Vue router を GitHub Pages で動かす用の設定</span>
<span class="synIdentifier">}</span>)
</pre>


<p><code>config/prod.env.js</code></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
module.exports = <span class="synIdentifier">{</span>
  NODE_ENV: <span class="synConstant">'&quot;production&quot;'</span>,
  ROOT_BASE: <span class="synConstant">'&quot;works/&quot;'</span> <span class="synComment">// Vue router を GitHub Pages で動かす用の設定</span>
<span class="synIdentifier">}</span>
</pre>


<p><code>src/router/router.js</code></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synStatement">new</span> Router(<span class="synIdentifier">{</span>
    mode: <span class="synConstant">'history'</span>,
  base: process.env.ROOT_BASE, <span class="synComment">// Vue router を GitHub Pages で動かす用の設定</span>
  routes: <span class="synIdentifier">[</span>
    ...
</pre>


<p>としてからビルド → デプロイでできました。<br/>
ただやっぱり、 <a href="https://yuheijotaki.github.io/works/about/">https://yuheijotaki.github.io/works/about/</a> など直接ルート設定したページのリンクを踏むとダメそう。。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】UIデザインの教科書［新版］ マルチデバイス時代のインターフェース設計'
description: ''
publishDate: '03/18/2019 08:54:42'
---

[CONTENTS-START]
<p><a href="https://yuheijotaki.hatenablog.com/entry/2019/03/11/101643">マイクロインタラクション</a> に続いて、UI/UX 関係の本ということで「UIデザインの教科書」という本を読みました。<br /> このようなジャンルの本をあまり読んだことがない自分とっては、体系的に学べてかつ基礎的なことは網羅されていると感じました。後半は実例メインだったのでディレクター/デザイナーの人にはもちろんですが、エンジニアにとっても良い内容だったと思います。</p>
<div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798155454/hatena-blog-22/"><img src="/images/hatena/20190726111908.jpg" class="hatena-asin-detail-image" alt="UIデザインの教科書［新版］ マルチデバイス時代のインターフェース設計" title="UIデザインの教科書［新版］ マルチデバイス時代のインターフェース設計" /></a>
<div class="hatena-asin-detail-info">
<p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798155454/hatena-blog-22/">UIデザインの教科書［新版］ マルチデバイス時代のインターフェース設計</a></p>
<ul>
<li><span class="hatena-asin-detail-label">作者:</span> 原田秀司</li>
<li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 翔泳社</li>
<li><span class="hatena-asin-detail-label">発売日:</span> 2019/01/21</li>
<li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li>
<li><a href="http://d.hatena.ne.jp/asin/4798155454/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li>
</ul>
</div>
<div class="hatena-asin-detail-foot"> </div>
</div>
<h2>概要</h2>
<ul>
<li>第1章 デザインの目的とUI/UX</li>
<li>第2章 物理的な制約</li>
<li>第3章 ソフトウェアの影響</li>
<li>第4章 人間の認知特性</li>
<li>第5章 階層と構造</li>
<li>第6章 ナビゲーションとインタラクション</li>
<li>第7章 デザインを形にする</li>
</ul>
<p>最初にUIとUXの違いなど概念的な説明。次に昨今のデバイス事情と絡めて、どのような制約/特長があるか。<br /> ソフト側がもたらす制約などが書かれている3章くらいまでが全体的な話で、4章以降から実例や具体例が多くなっていきます。</p>
<h2>ポイント</h2>
<h3>2-3：画面の違い</h3>
<blockquote>
<p>インターフェースに影響を及ぼす最初の要因は、画面までの「距離」です。</p>
<p>デバイスを使うときには適切な距離を保持する必要があり、その距離による影響がデザイン上の制約となります。つまり、画面上の大きさ（実サイズ）と、実際に感じる文字の大きさ（体感サイズ）は、画面との距離によって変化します。</p>
</blockquote>
<h3>4-2：インタラクションコスト</h3>
<blockquote>
<p>ユーザーが受ける負担がインタラクションコストであり、ユーザビリティ（サービスの使いやすさ）の良し悪しを測る指標です。</p>
<p>支払う労力には頭脳的なものもあれば、肉体的なものもあります。</p>
<p>これらの両者の労力を合算したものはインタラクションコスト（Interaction Cost）と呼ばれ、サービスの使いやすさ（ユーザビリティ）の指標とされています。</p>
</blockquote>
<h5>精神的な負荷</h5>
<p>アタマが支払うエネルギーのこと<br /> テキストが読みづらい、リンクやボタンがそれと認識しづらい</p>
<h5>身体的な負荷</h5>
<p>カラダが支払うエネルギーのこと<br /> 画面をスクロールする、クリックする、タップする、など</p>
<h4>インタラクションコストを下げる方法</h4>
<p>人間の認知特性に基づく普遍的なアプローチとして、</p>
<ul>
<li>一貫性</li>
<li>シンプルさ</li>
<li>共通概念</li>
</ul>
<p>の3つがあげられる。</p>
<h5>一貫性</h5>
<blockquote>
<p>ある規則性にのっとって、サービス内のデザイン要素すべてがその基準にしたがっているということです。</p>
</blockquote>
<p>一貫性を保つことのメリットとして、</p>
<ul>
<li>デザインの意味や操作をユーザーが予測できるようになる</li>
<li>機能の追加や改善が簡単になる</li>
<li>信頼性が生まれる</li>
</ul>
<h5>シンプルさ</h5>
<blockquote>
<p>「明快」あるいは「簡潔」な状態のことを指します。</p>
<p>シンプルにするとは、<strong>「単純にする」ではなく「明快にする」</strong> ということであり、何が起こっているかを即座に理解でき、次にどうするか自信を持って決定できる女王体にすることです。</p>
</blockquote>
<h5>共通概念</h5>
<blockquote>
<p>私たちの日常生活では、誰もが知っているサインやルールを利用することで、何ができてどう動くかを我々は知ることができます。</p>
</blockquote>
<p>インターフェースでも同様で、</p>
<ul>
<li>青文字はリンク</li>
<li>星はお気に入りか評価</li>
</ul>
<p>などもこれまで既知となった共通概念が利用されている例。<br /> これらをうまく持ち込むことで、ユーザーはルールを新しく学習しなおす余計な認知コスト（負荷）を少なくすることもできる。</p>
<h2>良かった点</h2>
<ul>
<li>書いてある内容が難しくない。（難しい言い回しなどもなく読み易い）</li>
<li>UIとUXの違い、さまざまなデバイスやOSの説明からはじまり、人間の認知的な習性など、それぞれの章で深くはないが体系的に学べた。</li>
<li>図も多く、また新版なのもあり最近のWebサイトやアプリのインターフェイスが参考にあげられていてわかりやすい。</li>
<li>例えばUIデザインやインタラクションにおいて「シンプルなほうがよい」とか「アニメーションがあったほうがとりあえず良い」などは根拠があまり語られないまま認識されがちだが、それの「なぜ？」に関して今までぼんやり思っていたことが言語化されているので説得力がある内容だった。</li>
<li>5章の「階層と構造」、階層構造をなるだけ区別しないこと、現在地を分かりやすく認知させること<br /> 6章の「ナビゲーションとインタラクション」スクロール自動読み込みの弊害（戻るボタン押下時の挙動）など、日頃考えていたことにも共感ができた。</li>
</ul>
<h2>惜しかった点</h2>
<p>特にありませんが、各章の内容に焦点を当てた他の本が出ているはずなので、それぞれ興味を持った分野を掘り上げる前に読む本という感じがします。</p>
<p>例）人間の認知特性に興味を持ったら → <a href="https://www.amazon.co.jp/dp/4873115574/">インタフェースデザインの心理学</a> など</p>
<h2>まとめ</h2>
<p>前回のマイクロインタラクション本よりは実践と絡めて使える知識が多かったように思います。<br /> 次はどの本読もうか悩みます。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue CLI（Webpack） を使ったプロジェクトを GitHub Pages で公開する'
description: ''
publishDate: '03/15/2019 22:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190315114020.png" alt="f:id:jotaki:20190315114020p:plain" title="f:id:jotaki:20190315114020p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>主に <a href="https://www.shookuro.com/entry/2019/02/02/174655">Vue で作成した Web アプリを GitHub Pages で公開 - 山崎屋の技術メモ</a> を参考にさせてもらいました。</p>

<p>テストサイト：<br/>
<a href="https://yuheijotaki.github.io/github-pages-test_20190315/#/">https://yuheijotaki.github.io/github-pages-test_20190315/#/</a></p>

<h3>リポジトリ作成</h3>

<p>リポジトリを GitHub から作成します。特に変わったことはせずにOK。</p>

<p>どのファイルを見るかのソース設定で</p>

<ul>
<li><code>master</code> ブランチを表示上のルート階層にする</li>
<li><code>/docs/</code> フォルダを見るようにする</li>
</ul>


<p>が設定できる。今回は <code>/docs/</code> にするがフォルダ作ってから出ないと選択できないのでのちほど設定する。</p>

<h3>Vue CLI のインストール</h3>

<p>リポジトリをクローンして Vue CLI をインストールする。これもインストールは特に変わったことはせずにOK。</p>

<h5><code>/config/index.js</code> の調整</h5>

<p>インストール後、<code>/config/index.js</code> の下記箇所を変更する。<br/>
（ビルドファイルのパスを 絶対パス => 相対パス指定 にするため）</p>

<pre class="code" data-lang="" data-unlink>...
  build: {
    // Template for index.html
    index: path.resolve(__dirname, &#39;../docs/index.html&#39;), // `dist` =&gt; `docs` へ変更

    // Paths
    assetsRoot: path.resolve(__dirname, &#39;../docs&#39;), // `dist` =&gt; `docs` へ変更
    assetsSubDirectory: &#39;static&#39;,
    assetsPublicPath: &#39;./&#39;, // `/` =&gt; `./` へ変更（ピリオドを追加）
...</pre>


<p> vue.config.js を新規作成する必要があるという記事もあったのですが、自分の場合は作成せずにできちゃいました。<br/>
<code>/dist/</code> をビルドの出力フォルダのままにする場合は、<code>.gitignore</code> の除外を解除しておく。</p>

<h3>ビルド</h3>

<pre class="code" data-lang="" data-unlink>$ npm run build</pre>


<p><code>/docs/</code> フォルダに静的ファイルが格納されているか確認。</p>

<h3><code>master</code> へプッシュ</h3>

<p><code>master</code> ブランチにプッシュする。</p>

<h3>オプション変更とページ確認</h3>

<p>GitHub の GitHub Pages 設定を変更、確認する。</p>

<h5>ソース設定変更</h5>

<p>リポジトリ内の <code>Settings</code> => <code>Options</code> => <code>GitHub Pages</code> => <code>Source</code> を <strong><code>master branch /docs folder</code></strong> にしておく。</p>

<h5>ページ確認</h5>

<p> <code>Your site is published at &lt;https://yuheijotaki.github.io/github-pages-test_20190315/&gt;</code> みたいなURLがおいてあるのでURLを確認する。</p>

<h3>おわりに</h3>

<p>比較的簡単に公開URLつくれてデプロイできるので次の勉強リポジトリからこれを使おうと思います。 <br/>
Vue Router も <code>path</code> は相対パスにしないとダメそうなど、少し懸念点もあり。</p>

<p><iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fpages.github.com%2F" title="GitHub Pages" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;"></iframe><cite class="hatena-citation"><a href="https://pages.github.com/">pages.github.com</a></cite></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js / JSON から情報を引っ張ってくる その12'
description: ''
publishDate: '03/15/2019 09:56:40'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>やること</h2>

<ul>
<li>Qiita の API から投稿を描画する。</li>
<li>結果がない場合のエラー表示</li>
<li>デフォルトで <code>vue.js</code> を <code>&lt;input type="text"&gt;</code> にいれておく。</li>
<li>タグの一覧から選択したタグの記事一覧を表示</li>
</ul>


<h4>結果がない場合のエラー表示</h4>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;search_area&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;tag&quot;</span><span class="synIdentifier"> v-on:input=</span><span class="synConstant">&quot;filterTag()&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier"> placeholder=</span><span class="synConstant">&quot;tag search&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-show=</span><span class="synConstant">&quot;error&quot;</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;state error&quot;</span><span class="synIdentifier">&gt;</span>There is no tagged &quot;{{tag}}&quot; posts.<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">'myPosts'</span>,
  data () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      ...
      error: <span class="synConstant">false</span>,
      ...
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    ...
    filterTag: <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
      axios.get( `https:<span class="synComment">//qiita.com/api/v2/tags/${this.tag}/items` )</span>
      .then( response =&gt; <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.error = <span class="synConstant">false</span>; <span class="synComment">// error を非表示にする</span>
        <span class="synIdentifier">this</span>.loading = <span class="synConstant">false</span>; <span class="synComment">// loading を非表示にする</span>
        <span class="synIdentifier">this</span>.posts = response.data;
      <span class="synIdentifier">}</span>)
      .<span class="synStatement">catch</span>( error =&gt; <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.posts = <span class="synIdentifier">[]</span>;
        <span class="synIdentifier">this</span>.error = <span class="synConstant">true</span>; <span class="synComment">// error を表示する</span>
        console.log(error);
      <span class="synIdentifier">}</span>);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<h4>デフォルトで <code>vue.js</code> を <code>&lt;input type="text"&gt;</code> にいれておく。</h4>

<p>JavaScript 側で取得・書き換えする必要あるのと思い込んでいましたが、<code>data</code> の初期値に設定しておくだけでOK...</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>  data () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      ...
      tag: <span class="synConstant">'vue.js'</span>,
      ...
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
</pre>


<h4>タグの一覧から選択したタグの記事一覧を表示</h4>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;(recommendTag,index) in recommendTags&quot;</span><span class="synIdentifier"> :key=</span><span class="synConstant">&quot;index&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;javascript:void(0);&quot;</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;placeInput&quot;</span><span class="synIdentifier"> :</span><span class="synType">data</span><span class="synIdentifier">-tag=</span><span class="synConstant">&quot;recommendTag&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">{{recommendTag}}</span><span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">'myPosts'</span>,
  data () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      ...
      recommendTags: <span class="synIdentifier">[</span><span class="synConstant">'html'</span>,<span class="synConstant">'css'</span>,<span class="synConstant">'javascript'</span>,<span class="synConstant">'php'</span><span class="synIdentifier">]</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  ...
  methods: <span class="synIdentifier">{</span>
    ...
    placeInput: <span class="synIdentifier">function</span>(<span class="synStatement">event</span>) <span class="synIdentifier">{</span>
      <span class="synStatement">const</span> clickedTag = <span class="synStatement">event</span>.currentTarget.getAttribute(<span class="synConstant">'data-tag'</span>); <span class="synComment">// クリックしたタグの取得</span>
      <span class="synStatement">document</span>.getElementById(<span class="synConstant">'search_field'</span>).value = clickedTag; <span class="synComment">// クリックしたタグをinputに入れる</span>
      <span class="synIdentifier">this</span>.tag = clickedTag; <span class="synComment">// クリックしたタグを `this.tag` に定義</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<h2>まとめ</h2>

<p><a href="https://github.com/yuheijotaki/vue-study_20190312"><strong>Github</strong></a></p>

<ul>
<li>やりたいこと ＜ キレイにおさめること<br/>
優先してしまってあまり勉強するべきことできていない気がするので反省しています。</li>
<li>次回やることはこれの続きか、ちょっと考えてみようと思います。</li>
</ul>


<h5>本当はやりたいこと</h5>

<ul>
<li>タグを選択したタイミングで検索が走るようにしたい</li>
<li>ページングをつける</li>
<li>（タグの掛け合わせ検索）</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js / JSON から情報を引っ張ってくる その11'
description: ''
publishDate: '03/12/2019 22:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>やること</h2>

<ul>
<li>Qiita の API から投稿を描画する。</li>
<li>ユーザー取得できていないものの調整</li>
<li>検索テキストフィールドを用意してフィルター</li>
</ul>


<h4>Qiitaのユーザー取得について</h4>

<p>見落としていただけなのですが、<code>user.name</code> は全ユーザーにあるわけではないようだったので、 <code>user.id</code> に変更しました。</p>

<pre class="code" data-lang="" data-unlink>by: &lt;a :href=&#34;`https://qiita.com/${post.user.id}`&#34; target=&#34;_blank&#34;&gt;@{{post.user.id}}&lt;/a&gt;</pre>


<h4>入力したフィールドのテキストをもとにフィルター</h4>

<p>この <a href="https://qiita.com/kobu_tomo/items/6f6e86f1226ab0651813">Qiita</a> の記事通りなのですが、</p>

<pre class="code lang-html" data-lang="html" data-unlink>... 省略
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;search_area&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;tag&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;button&quot;</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;filterTag()&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;search&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
... 省略
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink>data () <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      <span class="synComment">// ... 省略</span>
    tag: <span class="synConstant">''</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>,
methods: <span class="synIdentifier">{</span>
  <span class="synComment">// ... 省略</span>
  filterTag: <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
    axios.get( `https:<span class="synComment">//qiita.com/api/v2/tags/${this.tag}/items` )</span>
      .then( response =&gt; <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.loading = <span class="synConstant">false</span>; <span class="synComment">// loading を非表示にする</span>
      <span class="synIdentifier">this</span>.posts = response.data;
    <span class="synIdentifier">}</span>)
      .<span class="synStatement">catch</span>( error =&gt; <span class="synIdentifier">{</span>
      console.log(error);
    <span class="synIdentifier">}</span>);
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>とすると、ボタンが押された際に入力されているテキストのタグが含まれる記事を出力してあげる。</p>

<h2>まとめ</h2>

<p><a href="https://github.com/yuheijotaki/vue-study_20190312"><strong>Github</strong></a></p>

<ul>
<li>ブラウザリロード入れていると、結構すぐに <a href="http://service.sakuraweb.com/fuyutiger/blog/2010/07/apiapi-rate-limit.html">API Rate Limit</a> なるものに引っかかっちゃいますね。。</li>
<li>サクサクで動くのですげーってなりますね。</li>
</ul>


<h4>残りやること</h4>

<ul>
<li>結果がない場合のエラー表示</li>
<li>タグの一覧から選択したタグの記事一覧を表示</li>
<li>ページングをつける</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js / JSON から情報を引っ張ってくる その10'
description: ''
publishDate: '03/12/2019 09:32:49'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>やること</h2>

<ul>
<li>Qiita の API から投稿を描画する。</li>
</ul>


<h4>Qiita のAPIから記事を引っ張ってくる</h4>

<p>今回はとりあえず <code>vue.js</code> というタグがついた記事を引っ張るようにしたので、<br/>
WordPress の REST API の際と一緒で、<code>axios</code> を使って、<code>https://qiita.com/api/v2/tags/vue.js/items</code> のエンドポイントを指定する。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
request: <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
  axios.get( <span class="synConstant">'https://qiita.com/api/v2/tags/vue.js/items'</span> )
    .then( response =&gt; <span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.posts = response.data;
  <span class="synIdentifier">}</span>)
<span class="synIdentifier">}</span>
...
</pre>


<p>参考：</p>

<ul>
<li><a href="https://qiita.com/api/v2/docs#get-apiv2tags">Qiita API v2ドキュメント - Qiita:Developer</a></li>
<li><a href="https://qiita.com/kobu_tomo/items/6f6e86f1226ab0651813">Vue.js+axiosでQiitaの投稿を取得、表示してGitHub Pagesで公開しました - Qiita</a></li>
</ul>


<h4><code>v-bind:</code> 内でデータと文字列を連結する</h4>

<p>Qiita のユーザーページのリンクを描画したい場合、<code>https://qiita.com/[USERNAME]</code> のURLになる。<br/>
<code>https://qiita.com/</code> と <code>post.user.id</code> を連結させたいので、</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> :</span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;`https://qiita.com/${post.user.id}`&quot;</span><span class="synIdentifier"> </span><span class="synType">target</span><span class="synIdentifier">=</span><span class="synConstant">&quot;_blank&quot;</span><span class="synIdentifier">&gt;</span>
</pre>


<p>と <code>v-bind:</code> 内にテンプレートリテラルを用いて書くと文字列の連結が可能。</p>

<p>参考：<a href="https://uyamazak.hatenablog.com/entry/2018/11/08/160714">Vueのテンプレートのv-bind内でもJavaScriptのテンプレートリテラルが使えた - GAミント至上主義</a></p>

<h2>まとめ</h2>

<p><a href="https://github.com/yuheijotaki/vue-study_20190312"><strong>Github</strong></a></p>

<ul>
<li>ユーザー取得できていない記事があるのでもう少し調べる。</li>
<li>環境構築（Vue CLI のインストールだけですが）は時間かからなくなってきて慣れた感があります。</li>
<li>タグの一覧から選択したタグの記事一覧を表示を次はやってみる</li>
<li>ページング（or LOAD MORE）もつけてみたい</li>
</ul>


<h4>参考</h4>

<ul>
<li><a href="https://qiita.com/MariMurotani/items/a8576974deeabf9daf6e">Vue.jsでAPI通信 - Qiita</a></li>
<li><a href="https://qiita.com/You_name_is_YU/items/8c83e4c4c3f9c273b704">axios＋Vue.js＋Qiita API v2を利用して自分の投稿記事と閲覧件数（views）などを一覧表示してみる - Qiita</a></li>
<li><a href="https://qiita.com/kobu_tomo/items/6f6e86f1226ab0651813">Vue.js+axiosでQiitaの投稿を取得、表示してGitHub Pagesで公開しました - Qiita</a></li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】マイクロインタラクション: UI/UXデザインの神が宿る細部'
description: ''
publishDate: '03/11/2019 10:16:43'
---

[CONTENTS-START]
<p>UI/UX 関係の本を読みたいと思って「マイクロインタラクション: UI/UXデザインの神が宿る細部」を読みました。</p>
<div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116597/hatena-blog-22/"><img src="/images/hatena/20190726111858.jpg" class="hatena-asin-detail-image" alt="マイクロインタラクション ―UI/UXデザインの神が宿る細部" title="マイクロインタラクション ―UI/UXデザインの神が宿る細部" /></a>
<div class="hatena-asin-detail-info">
<p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116597/hatena-blog-22/">マイクロインタラクション ―UI/UXデザインの神が宿る細部</a></p>
<ul>
<li><span class="hatena-asin-detail-label">作者:</span> Dan Saffer,武舎広幸,武舎るみ</li>
<li><span class="hatena-asin-detail-label">出版社/メーカー:</span> オライリージャパン</li>
<li><span class="hatena-asin-detail-label">発売日:</span> 2014/03/19</li>
<li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li>
<li><a href="http://d.hatena.ne.jp/asin/4873116597/hatena-blog-22" target="_blank">この商品を含むブログ (5件) を見る</a></li>
</ul>
</div>
<div class="hatena-asin-detail-foot"> </div>
</div>
<h2><strong>概要</strong></h2>
<p><strong><code>マイクロインタラクション</code></strong> という言葉の定義について。自分はWebサイトやサービス、アプリ上のとにかく<strong>細かい機能や動き</strong>のことをマイクロインタラクションと考えていましたが、本の中ではそういった外見上のことではなく、</p>
<blockquote>
<p><strong>単一のシナリオに基づいて一つの作業だけをこなす最小単位のインタラクション</strong></p>
</blockquote>
<p>として扱っています。 そして、その範囲においては、</p>
<blockquote>
<p><strong>ひとつのアプリや製品を構成しているケースもあれば、（こちらのほうが多いのですが）大規模な製品の一部分である場合や大規模な製品と並立している場合もあります。</strong></p>
</blockquote>
<p>とのことで、一般で用いられるマイクロインタラクションと自分が考えていたものに大きな違いがあることに最初に気付かされました。</p>
<p>マイクロインタラクションの具体例として、本中には多くの例が上げられていますが、<a href="http://littlebigdetails.com/">Little Big Details</a> に掲載されている例も多かったです。このサイトを以前はフォローしていて、<a href="https://slate.com/technology/2014/07/facebook-notifications-icon-globe-changes-with-location-as-american-users-become-minority.html">Facebookの地球儀アイコンがユーザーの住んでいる地域によって異なる</a> などもこのサイトで知りました。<br /> ただこのサイトで取り扱っている内容はシナリオ的な話は少ない印象で、ひとつのインタラクションにのみ焦点が当たりがちなので、これを見ていればマイクロインタラクションが分かるというのはまた別な話なのかと思いました。</p>
<p>この本では、マイクロインタラクションの構造（フロー）としてある</p>
<ol>
<li><strong>トリガー</strong>（マイクロインタラクション起動のためのスイッチ）</li>
<li><strong>ルール</strong>（トリガーが起動する条件と、マイクロインタラクションの動作の仕様）</li>
<li><strong>フィードバック</strong>（ルールが実践された際にユーザーに与えられるもの）</li>
<li><strong>ループとモード</strong>（ルールのルール、マイクロインタラクションが長期的にみてどう動くか）</li>
</ol>
<p>を各章に分けて説明、最後に実践例が記されています。</p>
<h2><strong>ポイント</strong></h2>
<p>記憶しておいたほうが良さそうなポイントを主にまとめから引用します。</p>
<h4>トリガー</h4>
<ul>
<li>トリガーとは、マイクロインタラクションを開始するものすべてを指す。</li>
<li>トリガーには手動トリガーとシステムトリガーがあり、前者はユーザーが起動し、後者はシステムが起動する。</li>
<li>コンテキスト（その場の状況）を考慮してユーザーがトリガーだと認識できるものをトリガーとする。（NYメトロ券売機の例）</li>
<li>データを前面に出すことを検討する。</li>
<li>
<p>視覚的なシグニファイアを無視しない。（ボタンであればボタンらしく振る舞う）<br /> （シグニファイアとは、人間にとって知覚可能なデザイン上の手掛かり）</p>
</li>
<li>
<p>トリガーだけでは必要な情報をすべて伝達できない時はラベルを追加する。</p>
</li>
</ul>
<h4>ルール</h4>
<ul>
<li>ルールを使って、マイクロインタラクションの機能を専門家でなくとも分かるように説明するモデルを作る。ルールによってどのような順番で何ができて、何ができないかが決まる。</li>
<li>ルールには制約が反映されなければならない。ビジネス上の制約、コンテキストからくる制約、技術的な制約をうまく処理しなければならない。</li>
<li>ゼロから始めないこと。ユーザー、プラットフォーム、環境についてすでに知っていることを利用してマイクロインタラクションを改善する。</li>
<li>複雑さを取り除くこと。ユーザーによる制御は最小限にする。</li>
<li>選択肢を減らし賢いデフォルトを用意する。</li>
<li>ルールを利用してエラーを防止する。ヒューマンエラーが起こりえないようにする。</li>
<li>言葉は簡潔に。ラベルで十分な場合は説明的な文章は使わない。</li>
</ul>
<h4>フィードバック</h4>
<ul>
<li>ユーザーが知る必要のある情報はなにか、それをいつ知る必要があるのかを理解する。フィードバックの良し悪しはこの理解にかかっている。</li>
<li>フィードバックはマイクロインタラクションを理解してもらうためのものである。フィードバックに値するルールはどれかを十分に検討する。</li>
<li>フィードバックで伝えたい内容を決めてから、それにふさわしい方法、手段を選ぶ。</li>
<li>人間的なフィードバックにする。</li>
<li>できるだけ既存のUI要素を使ってフィードバックを伝える。</li>
<li>ランダムなフィードバックは避ける。</li>
<li>ユーザーによる動作に対してはできるかぎり視覚的フィードバックを出すようにする。</li>
</ul>
<h4>ループとモード</h4>
<ul>
<li>モードを設けるのは、実行頻度の低い操作があって、モードを使わなければマイクロインタラクションが煩雑になるような場合に限るべきである。</li>
<li>モードを設けなければならない場合は、できればそのモード専用の画面を用意する。</li>
<li>マイクロインタラクションの継続期間を延ばすにはループを使う。</li>
</ul>
<h4>サエないマイクロインタラクションを改善する方法</h4>
<ul>
<li>「記憶に残る瞬間」にする必要があるか</li>
<li>ゼロから始めようとしているのか？</li>
<li>このマイクロインタラクションの中にあるデータでいちばん重要なものは何か、そしてそれは前面に出せるか？</li>
<li>カスタムコントロール（独自のUI）が適しているか？</li>
<li>ヒューマンエラーを予防できるか？</li>
<li>見落とされ見落とされがちなものを活用しているか？</li>
<li>テキストやアイコンは自然か？</li>
<li>アニメーションを加えれば、もっと表情や動きが出せるだろうか？</li>
<li>他に加えるべきフィードバックや手段はないか？</li>
<li>ユーザーがこのマイクロインタラクションに2回目に接したとき何が起こるか？100回目には？</li>
</ul>
<h2><strong>良かった点</strong></h2>
<ul>
<li>マイクロインタラクションというものがどういうものかが理解できたこと。</li>
<li>今後Webサイトやアプリを使うなかで出くわすマイクロインタラクションに対して、本中で言われているパターン的なものに当てはめて考えることができ、今までより詳しく分析などができそうな気がすること。</li>
<li>これからマイクロインタラクションやUI関連に興味を持てそうという感触を得られたこと。</li>
</ul>
<h2><strong>惜しかった点</strong></h2>
<ul>
<li>マイクロインタラクションにこだわればこだわるほど、多くのトレードオフ（コードが多くなる/動作が重くなる/工数がかかる/運用コストがかかる）が発生しそうなものだが、そことどう折り合いをつけるのかみたいな話があまりない。</li>
<li>資料（本中のキャプチャ）が若干古い。</li>
</ul>
<p>どちらとも本の趣旨、数年前に出版されたものなのでしょうがないと思いますが。。</p>
<h2><strong>まとめ</strong></h2>
<p>自分は苦手なオライリーの本なので、若干くどい導入や細かい言い回しもあったのですが、1冊読み切れて良かったです。<br /> 手頃なサイズなので電車のなかでも読みやすかったです。</p>
<p>これをどう活かすか、的な部分でもう少し具体例が欲しいところですが、こういう分野にふたたび興味を持てたのでその点が一番良かったことかなと思っています。</p>
<h3><strong>そのほか読んだ記事など</strong></h3>
<ul>
<li><a href="https://goodpatch.com/blog/ui-micro-interaction/">より良いUIのためのマイクロインタラクション入門 | Goodpatch Blog</a></li>
<li><a href="https://webdesign-trends.net/entry/7583">マイクロインタラクションとは？注意すべきポイントや事例を徹底解説！ | Web Design Trends</a></li>
<li><a href="https://ferret-plus.com/5474">マイクロインタラクションとは？UXに取り入れる際の5つのポイント｜ferret</a></li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Sass で random'
description: ''
publishDate: '03/08/2019 16:18:08'
---

[CONTENTS-START]
<p>.scss でランダム処理をする機会があり使ってみたのでメモしておきます。</p>

<p><code>random()</code> という関数で、コンパイル時にランダム数値が書き出される。<br/>
（なので表示上は異なるユーザー/端末でも同じ値）</p>

<pre class="code lang-css" data-lang="css" data-unlink>random(10)
</pre>


<p>とすると <code>1〜10</code> の間で整数をランダムにとってくる。</p>

<pre class="code lang-css" data-lang="css" data-unlink>random(10)<span class="synSpecial">+</span>10
</pre>


<p>とすると <code>11〜20</code> の間で整数をランダムにとってくる。</p>

<pre class="code lang-css" data-lang="css" data-unlink>percentage((random(10)) / 100)
</pre>


<p>とすると <code>1%〜10%</code> の値になる。<br/>
実際の使い方的には、ランダムに移動するオブジェクトを複数個つくる場合、</p>

<p>.html</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;object01&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;object02&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>.scss</p>

<pre class="code lang-css" data-lang="css" data-unlink>$objects: object01<span class="synSpecial">,</span> object02; // 各クラスを登録
// 各クラスごとに移動距離とキーフレームを作成 ループで回す
@each $<span class="synStatement">object</span> in $objects <span class="synIdentifier">{</span>
  $animationDistance<span class="synConstant">01</span>: percentage((random(<span class="synConstant">10</span>)<span class="synConstant">+5</span>) / <span class="synConstant">100</span>); // `<span class="synConstant">5%</span>〜<span class="synConstant">15%</span>` のあいだ
  $animationDistance<span class="synConstant">02</span>: percentage((random(<span class="synConstant">10</span>)<span class="synConstant">+5</span>) / <span class="synConstant">100</span>);
  .#<span class="synIdentifier">{</span>$object<span class="synIdentifier">}</span> <span class="synIdentifier">{</span>
    <span class="synType">animation</span>: rotateAnimation--#{$object<span class="synIdentifier">}</span> 1s linear infinite;
  <span class="synError">}</span>
  <span class="synComment">@keyframes</span> rotateAnimation--#<span class="synIdentifier">{</span>$object<span class="synIdentifier">}</span> <span class="synIdentifier">{</span>
    <span class="synConstant">0%</span>  <span class="synIdentifier">{</span> <span class="synType">transform</span>: <span class="synIdentifier">translate(</span><span class="synConstant">0</span><span class="synIdentifier">,</span><span class="synConstant"> 0</span><span class="synIdentifier">)</span>; <span class="synIdentifier">}</span>
    100% <span class="synIdentifier">{</span> <span class="synType">transform</span>: <span class="synIdentifier">translate(</span><span class="synConstant">$animationDistance01</span><span class="synIdentifier">,</span><span class="synConstant"> $animationDistance02</span><span class="synIdentifier">)</span>; <span class="synIdentifier">}</span>
  <span class="synError">}</span>
<span class="synError">}</span>
</pre>


<p>.css 出力例</p>

<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">.object01</span> <span class="synIdentifier">{</span>
  <span class="synType">animation</span>: rotateAnimation--object<span class="synConstant">01</span> <span class="synConstant">1s</span> <span class="synConstant">linear</span> infinite;
<span class="synIdentifier">}</span>
<span class="synComment">@keyframes</span> rotateAnimation--object01 <span class="synIdentifier">{</span>
  <span class="synConstant">0%</span> <span class="synIdentifier">{</span>
    <span class="synType">transform</span>: <span class="synIdentifier">translate(</span><span class="synConstant">0</span><span class="synIdentifier">,</span><span class="synConstant"> 0</span><span class="synIdentifier">)</span>;
  <span class="synIdentifier">}</span>
  <span class="synConstant">100%</span> <span class="synIdentifier">{</span>
    <span class="synType">transform</span>: <span class="synIdentifier">translate(</span><span class="synConstant">13%</span><span class="synIdentifier">,</span><span class="synConstant"> 6%</span><span class="synIdentifier">)</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
<span class="synIdentifier">.object02</span> <span class="synIdentifier">{</span>
  <span class="synType">animation</span>: rotateAnimation--object<span class="synConstant">02</span> <span class="synConstant">1s</span> <span class="synConstant">linear</span> infinite;
<span class="synIdentifier">}</span>
<span class="synComment">@keyframes</span> rotateAnimation--object02 <span class="synIdentifier">{</span>
  <span class="synConstant">0%</span> <span class="synIdentifier">{</span>
    <span class="synType">transform</span>: <span class="synIdentifier">translate(</span><span class="synConstant">0</span><span class="synIdentifier">,</span><span class="synConstant"> 0</span><span class="synIdentifier">)</span>;
  <span class="synIdentifier">}</span>
  <span class="synConstant">100%</span> <span class="synIdentifier">{</span>
    <span class="synType">transform</span>: <span class="synIdentifier">translate(</span><span class="synConstant">8%</span><span class="synIdentifier">,</span><span class="synConstant"> 12%</span><span class="synIdentifier">)</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p><code>duration</code> もランダムにしたらもっとランダムになりそうです。</p>

<p>参考：<a href="https://stackoverflow.com/questions/48708052/how-to-randomize-float-and-percentage-in-sass">css - How to randomize float and percentage in SASS? - Stack Overflow</a></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js / JSON から情報を引っ張ってくる その9'
description: ''
publishDate: '03/08/2019 09:33:51'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>やること</h2>

<ul>
<li>WordPress で運用している <a href="https://works.yuheijotaki.com">ポートフォリオサイト</a> と同様の機能を持ったサイトを Vue.js で実装する。</li>
<li>Vue Router を使用して History モードでページ遷移を行う。</li>
</ul>


<h4>HTML5 History モード</h4>

<p>今回は <a href="https://router.vuejs.org/ja/guide/essentials/history-mode.html#%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%81%AE%E8%A8%AD%E5%AE%9A%E4%BE%8B">HTML5 History モード | Vue Router</a> を使用してみた。<br/>
<code>/router/index.js</code> で <code>mode: 'history'</code> の指定を追加。<br/>
参考：<a href="https://teratail.com/questions/112717">Vue.js - vue-routerの、hashモードと、historyモードの役割の違いについて｜teratail</a></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synStatement">new</span> Router(<span class="synIdentifier">{</span>
  mode: <span class="synConstant">'history'</span>,
  routes: <span class="synIdentifier">[</span>
    <span class="synIdentifier">{</span>
      path: <span class="synConstant">&quot;/&quot;</span>,
      name: <span class="synConstant">'top'</span>,
      component: <span class="synStatement">top</span>
    <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span>
      path: <span class="synConstant">&quot;/about&quot;</span>,
      name: <span class="synConstant">'about'</span>,
      component: about
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">]</span>
<span class="synIdentifier">}</span>)
</pre>


<h4>vue-router 使用時の現在地ナビ（カレント表示）</h4>

<p>現在いるページのナビゲーション <code>&lt;a&gt;</code> 要素にはデフォルトで <code>.router-link-exact-active</code> というクラスが付与されるが、それを変更したい場合</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;&lt;</span>router-<span class="synStatement">link</span><span class="synIdentifier"> to=</span><span class="synConstant">&quot;/&quot;</span><span class="synIdentifier"> exact-active-</span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;is-selected&quot;</span><span class="synIdentifier">&gt;</span>Top<span class="synIdentifier">&lt;/</span>router-<span class="synStatement">link</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;&lt;</span>router-<span class="synStatement">link</span><span class="synIdentifier"> to=</span><span class="synConstant">&quot;/about&quot;</span><span class="synIdentifier"> exact-active-</span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;is-selected&quot;</span><span class="synIdentifier">&gt;</span>About<span class="synIdentifier">&lt;/</span>router-<span class="synStatement">link</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
</pre>


<p>のように <code>exact-active-class="is-selected"</code> としてあげる</p>

<p>参考：<a href="https://router.vuejs.org/api/#event">API Reference | Vue Router</a><br/>
参考：<a href="https://qiita.com/kimullaa/items/a75a47f504c75058081f">Vuejs vue-routerはアクティブなリンクに自動でクラスを振ってくれる - Qiita</a></p>

<h2>まとめ</h2>

<p><a href="https://github.com/yuheijotaki/vue-study_20190304"><strong>Github</strong></a></p>

<ul>
<li><p>カテゴリー選択した際のフィルターは、配列取得してfor文でマッチする投稿を出し分けしていますが、<code>filter</code> などを使えばもっとスマートに書けそう。</p></li>
<li><p>各投稿をカテゴリーごとに出力する箇所、結局 <code>$emit</code> や <code>props</code> を使わずに カテゴリー一覧と投稿出力のコンポーネントを分けるのは断念した。そもそもできるものなのかも不明ですが、このあたりも自由にできたら楽しいだろうなと思う。</p></li>
<li>やっとサイトっぽくなったのはよかったかなと思います。</li>
</ul>


<h5>次回やること</h5>

<ul>
<li>WordPress 以外のAPIをいじってみる。（Instagram や Pocket など）</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js / JSON から情報を引っ張ってくる その8'
description: ''
publishDate: '03/01/2019 10:20:50'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>やること</h2>

<ul>
<li>Vue Router を使用してコンポーネント間のメソッドの受け渡しする。</li>
</ul>


<h4>ファイル構成</h4>

<p><code>myButton.vue</code> で仕込んだクリックイベントを <code>App.vue</code> へ渡す。</p>

<pre class="code" data-lang="" data-unlink>.
├── index.js
├── App.vue
├── /router/
|   └── index.js
└── /components/
    └── /page/
    |   ├── top.vue
    |   └── about.vue
    └── /common/
    |   ├── myHeader.vue
    |   └── myFooter.vue
    └── /element/
        └── /button/
            └── myButton.vue</pre>


<h4><code>index.js</code></h4>

<p>受け渡しとはあまり関係ないですが、Vue Router を使う</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> Vue from <span class="synConstant">'vue'</span>
<span class="synStatement">import</span> Router from <span class="synConstant">'vue-router'</span>
<span class="synStatement">import</span> <span class="synStatement">top</span> from <span class="synConstant">'@/components/page/top'</span>
<span class="synStatement">import</span> about from <span class="synConstant">'@/components/page/about'</span>
Vue.use(Router)

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synStatement">new</span> Router(<span class="synIdentifier">{</span>
  routes: <span class="synIdentifier">[</span>
    <span class="synIdentifier">{</span>
      path: <span class="synConstant">&quot;/&quot;</span>,
      name: <span class="synConstant">'top'</span>,
      component: <span class="synStatement">top</span>
    <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span>
      path: <span class="synConstant">&quot;/about&quot;</span>,
      name: <span class="synConstant">'about'</span>,
      component: about
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">]</span>
<span class="synIdentifier">}</span>)
</pre>


<h4><code>App.vue</code></h4>

<p><code>myButton.vue</code> で仕込んだ　<code>'event-test'</code>  のメソッドを <code>myButton</code> のクリックイベントとして登録</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;div id=<span class="synConstant">&quot;app&quot;</span>&gt;
    &lt;myHeader&gt;&lt;/myHeader&gt;
    &lt;main&gt;
      &lt;router-view&gt;&lt;/router-view&gt;
      &lt;myButton @<span class="synStatement">event</span>-test=<span class="synConstant">&quot;clickAlert&quot;</span>&gt;&lt;/myButton&gt;
    &lt;/main&gt;
    &lt;myFooter&gt;&lt;/myFooter&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">import</span> <span class="synConstant">&quot;normalize.css&quot;</span>;
<span class="synStatement">import</span> myHeader from <span class="synConstant">'./components/common/myHeader.vue'</span>;
<span class="synStatement">import</span> myFooter from <span class="synConstant">'./components/common/myFooter.vue'</span>;
<span class="synStatement">import</span> myButton from <span class="synConstant">'./components/element/button/myButton.vue'</span>;

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">'App'</span>,
  components: <span class="synIdentifier">{</span>
    myHeader,
    myFooter,
    myButton
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    clickAlert: <span class="synIdentifier">function</span>(<span class="synStatement">event</span>) <span class="synIdentifier">{</span>
      <span class="synStatement">alert</span>(<span class="synConstant">'event test'</span>);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<h4><code>myButton.vue</code></h4>

<p><code>'event-test'</code> を <code>$emit</code> しておく</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;button @click=<span class="synConstant">&quot;emitEventTest&quot;</span>&gt;Button&lt;/button&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">'myButton'</span>,
  methods: <span class="synIdentifier">{</span>
    emitEventTest () <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.$emit(<span class="synConstant">'event-test'</span>,<span class="synStatement">event</span>)
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<h2>まとめ</h2>

<p><a href="https://github.com/yuheijotaki/vue-study_20190222"><strong>Github</strong></a></p>

<ul>
<li>やること簡単にしようと思ってたらJSONは関係のない内容になってしまった。（前回の引き継いだ結果、ちょっと複雑になりすぎたので、簡単なコンテンツ内容にして進めるようにしました。）</li>
<li>次回はこれをベースにポートフォリオのサイトを作るの目標にします。ふつうのWebサイトなら Vue.js 使って構築できそうな気がしてきました。</li>
<li>コンポーネントについては、<a href="https://www.hypertextcandy.com/vuejs-components-introduction-environment-setting">Vue.jsコンポーネント入門 | Hypertext Candy</a> がわかりやすそうです。</li>
</ul>


<p><strong>ほか参考にした記事など</strong></p>

<ul>
<li><a href="https://www.tohuandkonsome.site/entry/2017/10/09/004525">3連休だしVue.jsをはじめよう：コンポーネントを使ってみる - 豆腐とコンソメ</a></li>
<li><a href="https://qiita.com/sasarkyz/items/347bcedec8e20d4fdd76">vue.js でコンポーネント間でデータ受け渡しとイベント発行周り - Qiita</a></li>
<li>[【Vue.jsでSPAへの移行】コンポーネントを使ってみよう | orizuru](</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2019年2月 振り返り'
description: ''
publishDate: '02/28/2019 08:45:40'
---

[CONTENTS-START]
<h2>結果</h2>

<h3>ブログ</h3>

<p><strong>目標：月 12 回（週 3 回）更新</strong><br/>
<strong>結果：月 15 回 更新</strong></p>

<h3>読書</h3>

<p><strong>目標：月 1 冊</strong><br/>
<strong>結果：月 2 冊</strong></p>

<h2>反省点など</h2>

<p>学習のアウトプット（主にVue.js）に関して、今月から技術本の写経ではなく、自分の作りたいものをゼロベースで実装してみる形に変えてみた。<br/>
やってみるとやっぱり課題が結構多くて、これまで本に出てきた内容に関してそれぞれの使い所が分かっていないこと、素の JavaScript の知識不足な面が特に大きくて、なかなかしんどいなぁ。。となってしまっている部分もある。</p>

<p>ただこれも慣れが必要で、考えてみたら jQuery を覚えるにも最初はそのような感じだったと思うし、どちらかというと時間かかったほうだと思うので、ストレスは溜め込まないように、ただ焦るところは焦ってやっていければと思う。</p>

<p>2月も月末にかけて学習／読書のペースが失速気味になってしまった。</p>

<h2>来月に向けて</h2>

<p>Vue.js は引き続き自分のポートフォリオサイトをベースに機能を追加していく。</p>

<p>読書は技術本を読まない代わりに UI/UX に関する本を2冊読む。</p>

<p>学習や読書のペースは1月も2月も月末はペース保ちづらいということがわかったので、それを念頭にいれつつ月初で使える時間を無駄にせずやっていければと思う。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js / JSON から情報を引っ張ってくる その7'
description: ''
publishDate: '02/22/2019 10:26:33'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>やること</h2>

<ul>
<li>前回のファイルを引き継いで Vue Router を使用して新しいページ（ <code>/about/</code> ）を作成する。</li>
</ul>


<h3>ページごとにファイルを分ける</h3>

<h4><code>/src/router/index.js</code></h4>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">import</span> Vue from <span class="synConstant">'vue'</span>
<span class="synStatement">import</span> Router from <span class="synConstant">'vue-router'</span>
<span class="synStatement">import</span> <span class="synStatement">top</span> from <span class="synConstant">'@/components/top'</span>
<span class="synStatement">import</span> about from <span class="synConstant">'@/components/about'</span>
Vue.use(Router)
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synStatement">new</span> Router(<span class="synIdentifier">{</span>
  routes: <span class="synIdentifier">[</span>
    <span class="synIdentifier">{</span>
      path: <span class="synConstant">&quot;/&quot;</span>,
      name: <span class="synConstant">'top'</span>,
      component: <span class="synStatement">top</span>
    <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span>
      path: <span class="synConstant">&quot;/about&quot;</span>,
      name: <span class="synConstant">'about'</span>,
      component: about
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">]</span>
<span class="synIdentifier">}</span>)
</pre>


<h4><code>/src/App.vue</code></h4>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;div id=<span class="synConstant">&quot;app&quot;</span>&gt;
    &lt;header&gt;
      &lt;h1&gt;&lt;router-link to=<span class="synConstant">&quot;/&quot;</span>&gt;works.yuheijotaki.com&lt;/router-link&gt;&lt;/h1&gt;
      &lt;nav&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;router-link to=<span class="synConstant">&quot;/about&quot;</span>&gt;About&lt;/router-link&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/nav&gt;
    &lt;/header&gt;
    &lt;main&gt;
      &lt;router-view&gt;&lt;/router-view&gt;
    &lt;/main&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synComment">// normalize.css を読み込む</span>
<span class="synStatement">import</span> <span class="synConstant">&quot;normalize.css&quot;</span>;
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">'App'</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<h4><code>/src/components/top.vue</code></h4>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;!-- トップページの `&lt;router-view&gt;` にいれる内容 --&gt;
  &lt;p&gt;トップページです。&lt;/p&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">'top'</span>,
  data () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      ...
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    ...
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<h4><code>/src/components/about.vue</code></h4>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;!-- アバウトページの `&lt;router-view&gt;` にいれる内容 --&gt;
  &lt;p&gt;アバウトページです。&lt;/p&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">'about'</span>,
  data () <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      ...
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    ...
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
&lt;/script&gt;
</pre>


<h2>まとめ</h2>

<p><a href="https://github.com/yuheijotaki/vue-study_20190222"><strong>Github</strong></a></p>

<ul>
<li><code>props</code> , <code>$emit</code> などを使ってコンポーネント間のデータの受け渡しを実装する</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js / JSON から情報を引っ張ってくる その6'
description: ''
publishDate: '02/20/2019 10:00:20'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>やること</h2>

<ul>
<li><a href="https://works.yuheijotaki.com">ポートフォリオページ</a> のコンテンツのエンドポイントを WP REST API を用いて作成</li>
<li>カテゴリー絞り込みを実装する</li>
</ul>


<h3>WordPress側（functions.php）でのAPIへのフィールド追加</h3>

<p> <code>display</code> という自前のデータを <code>v-show:</code> を使って判定させるため下記をfunctions.phpに追加。</p>

<pre class="code lang-php" data-lang="php" data-unlink>// ---------------
// `customData.display` のAPI登録
// ---------------
function register_my_custom_data() {
    register_rest_field(
        'post',
        'customData',
        array(
            'get_callback'    =<span class="synError">&gt;</span> 'get_my_custom_data',
            'update_callback' =<span class="synError">&gt;</span> null,
            'schema'          =<span class="synError">&gt;</span> null,
        )
    );
}
add_action( 'rest_api_init', 'register_my_custom_data' );

function get_my_custom_data() {
    return array(
        'display'  =<span class="synError">&gt;</span> true
    );
}
</pre>


<p>これでJSON側には</p>

<pre class="code lang-json" data-lang="json" data-unlink>&quot;<span class="synStatement">customData</span>&quot;:<span class="synSpecial">{</span>
  &quot;<span class="synStatement">display</span>&quot;:<span class="synConstant">true</span>
<span class="synSpecial">}</span>
</pre>


<p>のように出力される。</p>

<h3>静的なクラスと動的なクラス</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> :</span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;['naviLink' , { 'is-selected': category.selected }]&quot;</span><span class="synIdentifier">&gt;</span>...<span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
</pre>


<p>とすると、 <code>.naviLink</code> というクラスは付きつつも、<code>.is-selected</code> は <code>selected</code> は <code>true</code> の場合だけつくようになる。</p>

<h2>App.vue</h2>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;div id=<span class="synConstant">&quot;app&quot;</span>&gt;
    &lt;header&gt;
      &lt;h1&gt;works.yuheijotaki.com&lt;/h1&gt;
      &lt;nav&gt;
        &lt;ul&gt;
          &lt;li v-<span class="synStatement">for</span>=<span class="synConstant">&quot;(category,index) in categories&quot;</span> :key=<span class="synConstant">&quot;index&quot;</span>&gt;
            &lt;a href=<span class="synConstant">&quot;javascript:void(0);&quot;</span> @click=<span class="synConstant">&quot;filterCategory&quot;</span> :data-category=<span class="synConstant">&quot;category.name&quot;</span> :<span class="synStatement">class</span>=<span class="synConstant">&quot;['naviLink' , { 'is-selected': category.selected }]&quot;</span>&gt;<span class="synIdentifier">{{</span>category.name<span class="synIdentifier">}}</span>&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/nav&gt;
    &lt;/header&gt;
    &lt;main&gt;
      &lt;ul&gt;
        &lt;li v-<span class="synStatement">for</span>=<span class="synConstant">&quot;(post,index) in posts&quot;</span> :key=<span class="synConstant">&quot;index&quot;</span> v-show=<span class="synConstant">&quot;post.customData.display&quot;</span>&gt;
          &lt;a :href=<span class="synConstant">&quot;post.acf.post_url&quot;</span> target=<span class="synConstant">&quot;_blank&quot;</span>&gt;
            &lt;figure&gt;&lt;img :src=<span class="synConstant">&quot;post.images.full&quot;</span> :alt=<span class="synConstant">&quot;post.title.rendered&quot;</span>&gt;&lt;/figure&gt;
            &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;wrap&quot;</span> :style=<span class="synConstant">&quot;{ color: post.acf.post_color_letter, background: post.acf.post_color_bg }&quot;</span>&gt;
              &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;inner&quot;</span>&gt;
                &lt;h2&gt;<span class="synIdentifier">{{</span>post.title.rendered<span class="synIdentifier">}}</span>&lt;/h2&gt;
                &lt;p&gt;<span class="synIdentifier">{{</span>post.category_name<span class="synIdentifier">}}</span>&lt;/p&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/main&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synComment">// normalize.css を読み込む</span>
<span class="synStatement">import</span> <span class="synConstant">&quot;normalize.css&quot;</span>;
<span class="synComment">// Ajax通信ライブラリ</span>
<span class="synStatement">import</span> axios from <span class="synConstant">&quot;axios&quot;</span>;

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">&quot;App&quot;</span>,
  data() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      categories: <span class="synIdentifier">[</span>
        <span class="synIdentifier">{</span>
          name: <span class="synConstant">'All'</span>,
          selected: <span class="synConstant">true</span>
        <span class="synIdentifier">}</span>,
        <span class="synIdentifier">{</span>
          name: <span class="synConstant">'Front-end'</span>,
          selected: <span class="synConstant">false</span>
        <span class="synIdentifier">}</span>,
        <span class="synIdentifier">{</span>
          name: <span class="synConstant">'WordPress'</span>,
          selected: <span class="synConstant">false</span>
        <span class="synIdentifier">}</span>,
        <span class="synIdentifier">{</span>
          name: <span class="synConstant">'Web Design'</span>,
          selected: <span class="synConstant">false</span>
        <span class="synIdentifier">}</span>,
        <span class="synIdentifier">{</span>
          name: <span class="synConstant">'Tumblr'</span>,
          selected: <span class="synConstant">false</span>
        <span class="synIdentifier">}</span>
      <span class="synIdentifier">]</span>,
      posts: <span class="synIdentifier">[]</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  created: <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.request();
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    request: <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
      axios.get( <span class="synConstant">'https://works.yuheijotaki.com/wp-json/wp/v2/posts?per_page=100'</span> )
      .then( response =&gt; <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.posts = response.data;
        <span class="synComment">// console.log(this.posts);</span>
      <span class="synIdentifier">}</span>)
      .<span class="synStatement">catch</span>( error =&gt; <span class="synIdentifier">{</span>
        console.log(error);
      <span class="synIdentifier">}</span>);
    <span class="synIdentifier">}</span>,
    filterCategory: <span class="synIdentifier">function</span>(<span class="synStatement">event</span>) <span class="synIdentifier">{</span> <span class="synComment">// カテゴリーがクリックされたとき用のメソッド</span>
      <span class="synComment">// 全体のナビゲーションのクラス削除</span>
      <span class="synIdentifier">var</span> targetElements = <span class="synStatement">document</span>.getElementsByClassName(<span class="synConstant">'naviLink'</span>);
      <span class="synIdentifier">[]</span>.forEach.call(targetElements, <span class="synIdentifier">function</span>(elem) <span class="synIdentifier">{</span>
        elem.classList.remove(<span class="synConstant">'is-selected'</span>);
      <span class="synIdentifier">}</span>);
      <span class="synComment">// 選択したナビゲーションのクラス付与</span>
      <span class="synStatement">event</span>.currentTarget.classList.add(<span class="synConstant">'is-selected'</span>);
      <span class="synComment">// 投稿の取得</span>
      <span class="synStatement">const</span> posts = <span class="synIdentifier">this</span>.posts;
      <span class="synStatement">const</span> selectedCategory = <span class="synStatement">event</span>.currentTarget.getAttribute(<span class="synConstant">'data-category'</span>); <span class="synComment">// クリックしたカテゴリーの取得</span>
      <span class="synStatement">if</span> ( selectedCategory !== <span class="synConstant">'All'</span> ) <span class="synIdentifier">{</span>
        <span class="synComment">// `All` 以外を選択した場合</span>
        <span class="synStatement">for</span> (<span class="synIdentifier">var</span> i = 0; i &lt; posts.length; i++) <span class="synIdentifier">{</span> <span class="synComment">// 投稿ごとのループ</span>
          <span class="synStatement">const</span> categories = posts<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>.category_name; <span class="synComment">// 投稿のカテゴリーを取得</span>
          <span class="synStatement">const</span> categoriesArray = categories.split(<span class="synConstant">' ,'</span>); <span class="synComment">// 取得したカテゴリーを配列に変換</span>
          <span class="synStatement">for</span> (<span class="synIdentifier">var</span> j = 0; j &lt; categoriesArray.length; j++) <span class="synIdentifier">{</span> <span class="synComment">// 投稿内のカテゴリーごとのループ</span>
            <span class="synStatement">if</span> ( categoriesArray.indexOf(selectedCategory) &gt;= 0 ) <span class="synIdentifier">{</span> <span class="synComment">// 投稿に属するカテゴリーが含まれる場合</span>
              posts<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>.customData.display = <span class="synConstant">true</span>;
              <span class="synStatement">break</span>;
            <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span> <span class="synComment">// マッチしない場合</span>
              posts<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>.customData.display = <span class="synConstant">false</span>;
            <span class="synIdentifier">}</span>
          <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>
      <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
        <span class="synComment">// `All` を選択した場合</span>
        <span class="synStatement">for</span> (<span class="synIdentifier">var</span> i = 0; i &lt; posts.length; i++) <span class="synIdentifier">{</span> <span class="synComment">// 投稿ごとのループ</span>
          posts<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>.customData.display = <span class="synConstant">true</span>; <span class="synComment">// すべての投稿の `display` を `true` に</span>
        <span class="synIdentifier">}</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
&lt;/script&gt;
</pre>


<h2>まとめ</h2>

<p><a href="https://github.com/yuheijotaki/vue-study_20190219"><strong>Github</strong></a></p>

<ul>
<li>基本的な構文への慣れはだいぶできた気がする。理解して使いこなせているかというとまだまだですが。。</li>
<li>やっぱりドキュメントは公式のが一番いいですね。ベースは公式を参考して発展的な使い方はググるのがいまのところ近道な気がします。</li>
<li>カテゴリーのクラス付与/削除はいまクラスの <code>.add</code> と  <code>.remove</code> でやってしまってますが、本来は <code>categories.selected</code> の値をいじるほうがよさそう。</li>
<li>URLが変更しないので変更できるようにしたい。</li>
</ul>


<p>そのほか参考リンク</p>

<ul>
<li><a href="https://jp.vuejs.org/v2/guide/class-and-style.html">クラスとスタイルのバインディング — Vue.js</a></li>
<li><a href="https://webman-japan.com/playground/vue-simple-filiter/">Vue.js で要素をフィルタリングするシンプルなUIを作ってみた | WEBMAN</a></li>
<li><a href="https://qiita.com/kinshist/items/c131a1ec9cedb34f54ec">Wordpress REST API の出力結果を整形して絞り込む方法 - Qiita</a></li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js / JSON から情報を引っ張ってくる その5'
description: ''
publishDate: '02/18/2019 10:19:16'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>やること</h2>

<ul>
<li><a href="https://works.yuheijotaki.com">ポートフォリオページ</a> のコンテンツのエンドポイントを WP REST API を用いて作成</li>
<li>記事タイトルやサムネイル、ACF で登録している値を Vue.js で描画</li>
</ul>


<h3>画面読み込み時に <code>methods</code> のfunctionをレンダリングする</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
created: <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
  <span class="synIdentifier">this</span>.request();
<span class="synIdentifier">}</span>,
methods: <span class="synIdentifier">{</span>
  request: <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
  ...
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>,
...
</pre>


<p>参考</p>

<ul>
<li><p><a href="https://teratail.com/questions/110810">API - WP REST API（axios で読み込み）でページ読み込みと同時にレンダリングする｜ teratail</a></p></li>
<li><p><a href="https://www.tam-tam.co.jp/tipsnote/cms/post10274.html">WordPress REST API で投稿の取得から新規投稿を行う ｜ Tips Note by TAM</a></p></li>
</ul>


<h3>REST API で Advanced Custom Fields を使う</h3>

<p><a href="https://ja.wp-api.org/">WP REST API</a> に加えて、<a href="https://ja.wordpress.org/plugins/acf-to-rest-api/">ACF to REST API | WordPress.org</a> を入れると、<code>https://works.yuheijotaki.com/wp-json/wp/v2/posts</code> で出力される JSON に下記のように登録されている各 <code>acf</code> のオブジェクトが入る。</p>

<pre class="code lang-json" data-lang="json" data-unlink>&quot;<span class="synStatement">acf</span>&quot;: <span class="synSpecial">{</span>
  &quot;<span class="synStatement">post_color_bg</span>&quot;:&quot;<span class="synConstant">#ffffff</span>&quot;,
  &quot;<span class="synStatement">post_color_letter</span>&quot;:&quot;<span class="synConstant">#000000</span>&quot;,
  &quot;<span class="synStatement">post_custom_title</span>&quot;:&quot;&quot;,
  &quot;<span class="synStatement">post_url</span>&quot;:&quot;<span class="synConstant">https:</span><span class="synSpecial">\/\/</span><span class="synConstant">tatsuhikoniijima.com</span><span class="synSpecial">\/</span>&quot;,
  &quot;<span class="synStatement">post_archive</span>&quot;:<span class="synConstant">false</span>,
  &quot;<span class="synStatement">post_thumbnail</span>&quot;:<span class="synConstant">173</span>
<span class="synSpecial">}</span>
</pre>


<p>Vue.js 側では、</p>

<p><code>{post.acf.post_url}</code> のようにする。</p>

<h3>REST API で投稿ごとのカテゴリーを取得する</h3>

<p>投稿ごとのカテゴリー名を取得するにはWordPressのテーマ側（functions.php）を編集する必要がありそう。</p>

<p>functions.php</p>

<pre class="code lang-php" data-lang="php" data-unlink>// 個別投稿毎にカテゴリ名を取得する
add_action( 'rest_api_init', 'register_category_name' );
function register_category_name() {
    //register_rest_field関数を用いget_category_name関数からカテゴリ名を取得し、追加する
    register_rest_field( 'post',
        'category_name',
        array(
            'get_callback' =<span class="synError">&gt;</span> 'get_category_name'
        )
    );
}

// $objectは現在の投稿の詳細データが入る
function get_category_name( $object ) {
    $formatted_categories = array();
    $categories = get_the_category( $object['id'] );
    foreach ($categories as $category) {
        $formatted_categories[] = $category-<span class="synError">&gt;</span>name;
    }
    $formatted_categories = implode(' ,', $formatted_categories); // カテゴリー配列をカンマ区切りに変換
    return $formatted_categories;
}
</pre>


<p>これで JSON には</p>

<pre class="code lang-json" data-lang="json" data-unlink>&quot;<span class="synStatement">category_name</span>&quot;: &quot;<span class="synError">Front</span>-<span class="synError">end</span>,<span class="synError">WordPress</span>&quot;
</pre>


<p>のようにカテゴリー名が出力される。<br/>
本当は App.vue 側でカンマ区切りにしたほうが良さげでしたが詰まって見送りにしました。。</p>

<p>Vue.js 側では、</p>

<p><code>{{post.category_name}}</code> のようにする。</p>

<p>参考</p>

<ul>
<li><a href="https://qiita.com/yumayamada1029/items/c40e40200899330f957b">WP-REST APIで個別投稿毎にカテゴリ名を取得する - Qiita</a></li>
<li><a href="https://wordpress.stackexchange.com/questions/287931/get-the-category-name-instead-of-id-from-wp-api">custom post types - Get the Category Name instead of ID from WP-API - WordPress Development Stack Exchange</a></li>
</ul>


<h3>REST API で画像URLを取得する</h3>

<p>もともとACFで画像ID出力にしているフィールドの画像URLを出力させるのも functions.php に追記</p>

<p>functions.php</p>

<pre class="code lang-php" data-lang="php" data-unlink>function ws_register_images_field() {
    register_rest_field(
        'post',
        'images',
        array(
            'get_callback'    =<span class="synError">&gt;</span> 'ws_get_images_urls',
            'update_callback' =<span class="synError">&gt;</span> null,
            'schema'          =<span class="synError">&gt;</span> null,
        )
    );
}
add_action( 'rest_api_init', 'ws_register_images_field' );

function ws_get_images_urls( $object, $field_name, $request ) {
    $full = wp_get_attachment_image_src( get_field( 'post_thumbnail', $object-<span class="synError">&gt;</span>id ), 'full' );
    $full_url = $full['0'];
    return array(
        'full'  =<span class="synError">&gt;</span> $full_url,
    );
}
</pre>


<p>これで JSON には、</p>

<pre class="code lang-json" data-lang="json" data-unlink>...
&quot;<span class="synStatement">images</span>&quot;:<span class="synSpecial">{</span>
    &quot;<span class="synStatement">full</span>&quot;:&quot;<span class="synConstant">https:</span><span class="synSpecial">\/\/</span><span class="synConstant">works.yuheijotaki.com</span><span class="synSpecial">\/</span><span class="synConstant">wwyjp</span><span class="synSpecial">\/</span><span class="synConstant">wp-content</span><span class="synSpecial">\/</span><span class="synConstant">uploads</span><span class="synSpecial">\/</span><span class="synConstant">2018</span><span class="synSpecial">\/</span><span class="synConstant">09</span><span class="synSpecial">\/</span><span class="synConstant">tatsuhikoniijima.jpg</span>&quot;
    <span class="synSpecial">}</span>
...
</pre>


<p>のように画像URLが出力される。</p>

<p>Vue.js 側では、</p>

<p><code>&lt;img v-bind:src="post.images.full"&gt;</code> のようにする。</p>

<p>参考</p>

<ul>
<li><a href="https://wordpress.stackexchange.com/questions/271448/get-image-url-instead-of-attachment-id-in-rest-api">json - Get Image URL instead of Attachment Id in Rest API - WordPress Development Stack Exchange</a></li>
</ul>


<h2>App.vue</h2>

<p>一部省略</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;div id=<span class="synConstant">&quot;app&quot;</span>&gt;
    &lt;header&gt;
      &lt;h1&gt;works.yuheijotaki.com&lt;/h1&gt;
    &lt;/header&gt;
    &lt;main&gt;
      &lt;ul&gt;
        &lt;li v-<span class="synStatement">for</span>=<span class="synConstant">&quot;(post,index) in posts&quot;</span> :key=<span class="synConstant">&quot;index&quot;</span>&gt;
          &lt;a v-bind:href=<span class="synConstant">&quot;post.acf.post_url&quot;</span> target=<span class="synConstant">&quot;_blank&quot;</span>&gt;
            &lt;figure&gt;&lt;img v-bind:src=<span class="synConstant">&quot;post.images.full&quot;</span> v-bind:alt=<span class="synConstant">&quot;post.title.rendered&quot;</span>&gt;&lt;/figure&gt;
            &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;wrap&quot;</span> v-bind:style=<span class="synConstant">&quot;{ color: post.acf.post_color_letter, background: post.acf.post_color_bg }&quot;</span>&gt;
              &lt;div <span class="synStatement">class</span>=<span class="synConstant">&quot;inner&quot;</span>&gt;
                &lt;h2&gt;<span class="synIdentifier">{{</span>post.title.rendered<span class="synIdentifier">}}</span>&lt;/h2&gt;
                &lt;p&gt;<span class="synIdentifier">{{</span>post.category_name<span class="synIdentifier">}}</span>&lt;/p&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/main&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synComment">// normalize.css を読み込む</span>
<span class="synStatement">import</span> <span class="synConstant">&quot;normalize.css&quot;</span>;
<span class="synComment">// Ajax通信ライブラリ</span>
<span class="synStatement">import</span> axios from <span class="synConstant">&quot;axios&quot;</span>;

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">&quot;App&quot;</span>,
  data() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      posts: <span class="synIdentifier">[]</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  created: <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.request();
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    request: <span class="synIdentifier">function</span>()<span class="synIdentifier">{</span>
      axios.get( <span class="synConstant">'https://works.yuheijotaki.com/wp-json/wp/v2/posts?per_page=100'</span> )
      .then( response =&gt; <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.posts = response.data;
        <span class="synComment">// console.log(this.posts);</span>
      <span class="synIdentifier">}</span>)
      .<span class="synStatement">catch</span>( error =&gt; <span class="synIdentifier">{</span>
        console.log(error);
      <span class="synIdentifier">}</span>);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
&lt;/script&gt;
</pre>


<h2>まとめ</h2>

<p><strong><a href="https://github.com/yuheijotaki/vue-study_20190215">GitHub</a></strong></p>

<ul>
<li>投稿の情報引っ張ってくるのだけなので前回よりはつまづかずにできた。</li>
<li>カテゴリーの JSON 格納形式など REST APIの出力を自分でいじれるからいいのですが、Vue.js 側で変換などしてあげる処理はいちいちつまづく。。JavaScript の問題なのか、Vue.js の問題なのかを区別して対処が必要と思う。</li>
<li>次は元サイトと同じようにカテゴリーのフィルターをつくる。</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】学びを結果に変えるアウトプット大全'
description: ''
publishDate: '02/15/2019 08:58:30'
---

[CONTENTS-START]
<p>今年はブログ書いたりアウトプットを習慣にしようと思っていたので、Amazon で評価の良かったこの本を読みました。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4801400558/hatena-blog-22/"><img src="/images/hatena/20190726111918.jpg" class="hatena-asin-detail-image" alt="学びを結果に変えるアウトプット大全 (Sanctuary books)" title="学びを結果に変えるアウトプット大全 (Sanctuary books)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4801400558/hatena-blog-22/">学びを結果に変えるアウトプット大全 (Sanctuary books)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 樺沢紫苑</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> サンクチュアリ出版</li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/08/03</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4801400558/hatena-blog-22" target="_blank">この商品を含むブログ (1件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>ボリュームはそこまで多くなく、全 5 章のなかでルールが計 80 個あるので気になったルールのみ読むなどの読み方もできると思います。</p>

<p>筆者の樺沢さんという方は精神科医で、方向性的には最初のルール 1 で「『現実』はアウトプットでしか変わらない」と書いており、アウトプットこそ最大の自己成長につながること、筆者もアウトプットによって本を何冊も執筆し自己成長につながった、というアウトプット賛美的な内容。</p>

<p>広い読者層のために本の中で使われる「自己成長」というものが何かしっくり来ていなかったのですが、最後のまとめに下記のように書いてありました。</p>

<blockquote><p>本書のアウトプット術を実行すれば、あなたの魅力・能力が多くの人に広がり、あなたは適切な評価を請け、信頼され、人間関係は豊かになり、楽しい人生になることは間違いないでしょう。</p></blockquote>

<p>このようなことを「自己成長」と一般的に言うのだなと最後に気づきつつも気になった箇所、何度も書かれていたことをメモしておきます。</p>

<ul>
<li>インプット：アウトプット の比率は 3:7 が理想</li>
<li>「アウトプット」と一言でいっても話す、書く、感想を言う、笑う、泣くなどいろいろな種類がある</li>
<li>デジタルよりアナログのほうが脳的によい</li>
<li>マルチタスクは基本できない。できても 3 つでパンパン</li>
<li>睡眠 7 時間以上取らないと学習能力下がります</li>
<li>一日のルーティーンを決めてスキマ時間を有効活用する</li>
<li>時間や期限を決めて集中する</li>
<li>1 時間だらだらやるより 15 分集中してやったほうがよい</li>
<li>アウトプットを習慣化することが大事</li>
<li>教えることが自身の学習や知識向上につながる</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js / JSON から情報を引っ張ってくる その4'
description: ''
publishDate: '02/15/2019 08:29:52'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>やること</h2>

<p><a href="https://yuheijotaki.hatenablog.com/entry/2019/02/12/100744">前回</a>の続き</p>

<blockquote><ul>
<li>WordPress の記事一覧を WP REST API を用いてエンドポイントを作成</li>
<li>Vue.js で、カテゴリー一覧、記事タイトルの一覧を表示させる</li>
<li>Vue.js で、カテゴリーごとの投稿一覧を表示する</li>
</ul>
</blockquote>

<p><a href="https://github.com/yuheijotaki/vue-study_20190212"><strong>GitHub</strong></a></p>

<h4>App.vue</h4>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>&lt;template&gt;
  &lt;div id=<span class="synConstant">&quot;app&quot;</span>&gt;
    &lt;header&gt;
      &lt;h1&gt;blog.yuheijotaki.com&lt;/h1&gt;
      &lt;nav&gt;
        &lt;ul <span class="synStatement">class</span>=<span class="synConstant">&quot;category_list&quot;</span>&gt;
          &lt;li v-<span class="synStatement">for</span>=<span class="synConstant">&quot;cat in categories&quot;</span> :key=<span class="synConstant">&quot;cat.name.rendered&quot;</span>&gt;
            &lt;a href=<span class="synConstant">&quot;#&quot;</span> v-bind:data-category-id=<span class="synConstant">&quot;cat.id&quot;</span> @click=<span class="synConstant">&quot;filterCategory&quot;</span>&gt;<span class="synIdentifier">{{</span>cat.name<span class="synIdentifier">}}</span>&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/nav&gt;
    &lt;/header&gt;
    &lt;main&gt;
      &lt;ul <span class="synStatement">class</span>=<span class="synConstant">&quot;post_list&quot;</span>&gt;
        &lt;li v-<span class="synStatement">for</span>=<span class="synConstant">&quot;post in posts&quot;</span> :key=<span class="synConstant">&quot;post.title.rendered&quot;</span>&gt;
          &lt;a :href=<span class="synConstant">&quot;post.link&quot;</span> v-html=<span class="synConstant">&quot;post.title.rendered&quot;</span>&gt;&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;button
        <span class="synStatement">class</span>=<span class="synConstant">&quot;button&quot;</span>
        :<span class="synStatement">class</span>=<span class="synConstant">&quot;[{ 'is-loading': loading, 'is-disabled': disabled }]&quot;</span>
        :disabled=<span class="synConstant">&quot;disabled&quot;</span>
        @click=<span class="synConstant">&quot;load&quot;</span>&gt;次の記事を読み込む&lt;/button&gt;
    &lt;/main&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
<span class="synComment">// normalize.css を読み込む</span>
<span class="synStatement">import</span> <span class="synConstant">&quot;normalize.css&quot;</span>;
<span class="synComment">// Ajax通信ライブラリ</span>
<span class="synStatement">import</span> axios from <span class="synConstant">&quot;axios&quot;</span>;

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">&quot;App&quot;</span>,
  data() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      posts: <span class="synIdentifier">[]</span>,
      loading: <span class="synConstant">false</span>,
      disabled: <span class="synConstant">false</span>,
      categories: <span class="synConstant">''</span>, <span class="synComment">//[WIP] ここひとつにまとめれそう</span>
      category: <span class="synConstant">''</span>, <span class="synComment">//[WIP] ここひとつにまとめれそう</span>
      categoryArray: <span class="synIdentifier">[</span> <span class="synComment">//[WIP] ここは連想配列でなくてオブジェクトでできないか。 `data` の `category` もなくてもできそう。</span>
        <span class="synIdentifier">{</span>
          id: 2,
          slug: <span class="synConstant">'develop'</span>,
          page: 0
        <span class="synIdentifier">}</span>,
        <span class="synIdentifier">{</span>
          id: 3,
          slug: <span class="synConstant">'design'</span>,
          page: 0
        <span class="synIdentifier">}</span>,
        <span class="synIdentifier">{</span>
          id: 4,
          slug: <span class="synConstant">'others'</span>,
          page: 0
        <span class="synIdentifier">}</span>
      <span class="synIdentifier">]</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  mounted() <span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.getCategories();
    <span class="synIdentifier">this</span>.category = 2; <span class="synComment">// 初期はDevelopカテゴリー</span>
    <span class="synIdentifier">this</span>.categoryArray<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>.page = 1; <span class="synComment">// 初期はDevelopカテゴリーの1ページ目</span>
  <span class="synIdentifier">}</span>,
  watch: <span class="synIdentifier">{</span>
    categoryArray: <span class="synIdentifier">{</span>
      handler: <span class="synIdentifier">function</span>(val)<span class="synIdentifier">{</span>
        <span class="synStatement">if</span> ( <span class="synIdentifier">this</span>.category === 2 ) <span class="synIdentifier">{</span>
          <span class="synIdentifier">var</span> categoryPage = <span class="synIdentifier">this</span>.categoryArray<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>.page;
        <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synStatement">if</span> ( <span class="synIdentifier">this</span>.category === 3 ) <span class="synIdentifier">{</span>
          <span class="synIdentifier">var</span> categoryPage = <span class="synIdentifier">this</span>.categoryArray<span class="synIdentifier">[</span>1<span class="synIdentifier">]</span>.page;
        <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synStatement">if</span> ( <span class="synIdentifier">this</span>.category === 4 ) <span class="synIdentifier">{</span>
          <span class="synIdentifier">var</span> categoryPage = <span class="synIdentifier">this</span>.categoryArray<span class="synIdentifier">[</span>2<span class="synIdentifier">]</span>.page;
        <span class="synIdentifier">}</span>
        <span class="synStatement">const</span> url = `https:<span class="synComment">//blog.yuheijotaki.com/wp-json/wp/v2/posts?categories=${this.category}&amp;per_page=10&amp;page=${categoryPage}`;</span>
        <span class="synComment">// console.log(url);</span>
        <span class="synComment">// 非同期でJSON URLから投稿を取得</span>
        (async () =&gt; <span class="synIdentifier">{</span>
          <span class="synStatement">try</span> <span class="synIdentifier">{</span>
            <span class="synStatement">const</span> res = await axios.get(url);
            <span class="synIdentifier">this</span>.posts = <span class="synIdentifier">this</span>.posts.concat(res.data);
            <span class="synIdentifier">this</span>.loading = <span class="synConstant">false</span>;
          <span class="synIdentifier">}</span> <span class="synStatement">catch</span> (error) <span class="synIdentifier">{</span>
            <span class="synComment">// alert('取得できませんでした。')</span>
            console.log(error);
            <span class="synIdentifier">this</span>.empty();
          <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>)();
      <span class="synIdentifier">}</span>,
      deep: <span class="synConstant">true</span>,
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    getCategories: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synStatement">const</span> categoryUrl = `https:<span class="synComment">//blog.yuheijotaki.com/wp-json/wp/v2/categories`;</span>
      <span class="synComment">// 非同期でJSON URLから投稿を取得</span>
      (async () =&gt; <span class="synIdentifier">{</span>
        <span class="synStatement">try</span> <span class="synIdentifier">{</span>
          <span class="synStatement">const</span> res = await axios.get(categoryUrl);
          <span class="synStatement">const</span> categories = res.data;
          categories.shift(); <span class="synComment">// [WIP] 先頭の配列（`未分類`）を削除 ただし先頭が`未分類`と限らないので要修正</span>
          <span class="synComment">// オブジェクト `categories.page` の追加</span>
          <span class="synStatement">for</span> ( <span class="synIdentifier">var</span> i = 0; i &lt; categories.length; ++i ) <span class="synIdentifier">{</span>
            categories<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>.page = 0;
          <span class="synIdentifier">}</span>
          <span class="synComment">// console.log(categories);</span>
          <span class="synIdentifier">this</span>.categories = categories;
        <span class="synIdentifier">}</span> <span class="synStatement">catch</span> (error) <span class="synIdentifier">{</span>
          console.log(error);
        <span class="synIdentifier">}</span>
      <span class="synIdentifier">}</span>)();
    <span class="synIdentifier">}</span>,
    load() <span class="synIdentifier">{</span> <span class="synComment">// `次の記事を読み込む` ボタンが押されたとき用のメソッド</span>
      <span class="synComment">// this.category = this.category; // カテゴリーは `this.category` のままになる</span>
      <span class="synIdentifier">this</span>.loading = <span class="synConstant">true</span>;
      <span class="synStatement">if</span> ( <span class="synIdentifier">this</span>.category === 2 ) <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.categoryArray<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>.page++;
      <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synStatement">if</span> ( <span class="synIdentifier">this</span>.category === 3 ) <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.categoryArray<span class="synIdentifier">[</span>1<span class="synIdentifier">]</span>.page++;
      <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synStatement">if</span> ( <span class="synIdentifier">this</span>.category === 4 ) <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.categoryArray<span class="synIdentifier">[</span>2<span class="synIdentifier">]</span>.page++;
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>,
    empty() <span class="synIdentifier">{</span> <span class="synComment">// 記事がない or 通信エラーのとき用のメソッド</span>
      <span class="synIdentifier">this</span>.loading = <span class="synConstant">false</span>;
      <span class="synIdentifier">this</span>.disabled = <span class="synConstant">true</span>;
    <span class="synIdentifier">}</span>,
    filterCategory: <span class="synIdentifier">function</span>(<span class="synStatement">event</span>) <span class="synIdentifier">{</span> <span class="synComment">// カテゴリーがクリックされたとき用のメソッド</span>
      <span class="synComment">// カテゴリーが選択された場合は一度投稿を削除してから該当の一覧を表示させる</span>
      <span class="synIdentifier">this</span>.loading = <span class="synConstant">true</span>;
      <span class="synIdentifier">this</span>.disabled = <span class="synConstant">false</span>;
      <span class="synIdentifier">this</span>.posts.splice(0, 9999); <span class="synComment">//[WIP] 0記事目から9999記事目まで削除 決め打ちなので要修正</span>
      <span class="synStatement">const</span> categoryId = <span class="synStatement">event</span>.currentTarget.getAttribute(<span class="synConstant">'data-category-id'</span>); <span class="synComment">// クリックしたカテゴリーの取得</span>
      <span class="synIdentifier">this</span>.category = <span class="synType">Number</span>(categoryId); <span class="synComment">// `string` から `number` に変換</span>
      <span class="synStatement">if</span> ( <span class="synIdentifier">this</span>.category === 2 ) <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.categoryArray<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>.page = 0; <span class="synComment">//[WIP] 一度 `0` に戻して `1` に増加させないと `watch` が効かない</span>
        <span class="synIdentifier">this</span>.categoryArray<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>.page = 1;
      <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synStatement">if</span> ( <span class="synIdentifier">this</span>.category === 3 ) <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.categoryArray<span class="synIdentifier">[</span>1<span class="synIdentifier">]</span>.page = 0;
        <span class="synIdentifier">this</span>.categoryArray<span class="synIdentifier">[</span>1<span class="synIdentifier">]</span>.page = 1;
      <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synStatement">if</span> ( <span class="synIdentifier">this</span>.category === 4 ) <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.categoryArray<span class="synIdentifier">[</span>2<span class="synIdentifier">]</span>.page = 0;
        <span class="synIdentifier">this</span>.categoryArray<span class="synIdentifier">[</span>2<span class="synIdentifier">]</span>.page = 1;
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
<span class="synIdentifier">}</span>;
&lt;/script&gt;
</pre>


<h2>つまづいたところ</h2>

<h4><code>watch</code> で配列のデータを監視</h4>

<p>前回で <code>watch</code> の仕組みは <code>data</code> に変更があった際の常時監視、実行ということが分かったのですが、<code>data</code> が配列の場合はうまくいってなさそうだったのですが、ちょっとひと手間加える必要がありました。</p>

<blockquote><p>連想配列の Object を丸ごと監視したい場合は、処理は <code>handler: function(){},</code> の方に記述して、<code>deep: true,</code> が必要です。
連想配列の <code>Object</code> を個々に監視したい場合は、<code>watch</code> のキーをクォーテーションで囲って <code>'individuallyObj.aaa'</code> のようにします。</p></blockquote>

<p>ここでは <code>categoryArray</code> という配列を監視するために使う。</p>

<p>参考：<a href="http://motomichi-works.hatenablog.com/entry/2017/04/08/164548">vue.js 2.x その 0009 watch で配列(array)や連想配列(object)を監視する - Motomichi Works Blog</a></p>

<h4>メソッドを <code>mounted</code> 時に走らせる</h4>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>...
mounted() <span class="synIdentifier">{</span>
  <span class="synIdentifier">this</span>.methodFunctionName();
<span class="synIdentifier">}</span>,
...
</pre>


<p>ここでは <code>loadCategory()</code> でカテゴリー一覧を取得して読み込み時に表示する。</p>

<p>参考：<a href="https://stackoverflow.com/questions/46427612/vuejs-syntax-running-method-on-mount">javascript - VueJS Syntax: Running method on mount - Stack Overflow</a></p>

<h4>WordPress の カテゴリーの取得</h4>

<p><code>https://blog.yuheijotaki.com/wp-json/wp/v2/categories</code> のように <code>.../wp-json/wp/v2/categories</code> がカテゴリー一覧の JSON URL になる。</p>

<p>参考：<a href="https://wheelchair-coder.com/sample/list-js/008/">【Vue.js】No.007 Vue.js から WP REST API にアクセスし、カテゴリーを取得してみた</a></p>

<h2>まとめ</h2>

<ul>
<li>Vue.js もそうですが JavaScript の オブジェクトや配列の操作や扱いでつまづいた。。<br/>
オブジェクトのキー取得、<code>splice</code> などのメソッドも覚える必要あり。</li>
<li><code>watch</code> と <code>computed</code> の違いがやっぱりいまいち分からない。今回の <code>computed</code> でもできそう。</li>
<li><code>this</code> の使い方がぼんやりなのでここも覚える必要がある。</li>
</ul>


<hr />

<p><strong><code>[WIP]</code></strong> でコメント入れたように課題はたくさんありますが、触わり飽きたので次回は別の WordPress REST API を叩いてやってみようと思います。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js / JSON から情報を引っ張ってくる その3'
description: ''
publishDate: '02/12/2019 10:07:44'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>やること</h2>

<ul>
<li>WordPress の記事一覧を WP REST API を用いてエンドポイントを作成</li>
<li>Vue.js で、カテゴリー一覧、記事タイトルの一覧を表示させる</li>
<li>Vue.js で、カテゴリーごとの投稿一覧を表示する</li>
</ul>


<h2>セットアップ</h2>

<p><a href="https://yuheijotaki.hatenablog.com/entry/2019/02/08/095922">前回</a>と同じ</p>

<h2>Vue.js 側の処理</h2>

<p>クリックした <code>&lt;a&gt;</code> 要素の <code>data</code> 属性を取得する<br/>
<a href="https://stackoverflow.com/questions/44324869/vue-js-on-click-get-html5-attribute">javascript - Vue js on click get html5 attribute - Stack Overflow</a></p>

<h4>App.vue</h4>

<p>一部省略</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span>header<span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>blog.yuheijotaki.com<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span>nav<span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;category_list&quot;</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-category-</span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;2&quot;</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;filterCategory&quot;</span>
<span class="synIdentifier">              &gt;</span><span class="synUnderlined">Develop</span><span class="synIdentifier">&lt;/</span><span class="synStatement">a</span>
<span class="synIdentifier">            &gt;</span>
          <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-category-</span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;3&quot;</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;filterCategory&quot;</span>
<span class="synIdentifier">              &gt;</span><span class="synUnderlined">Design</span><span class="synIdentifier">&lt;/</span><span class="synStatement">a</span>
<span class="synIdentifier">            &gt;</span>
          <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
            <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;#&quot;</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-category-</span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;4&quot;</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;filterCategory&quot;</span>
<span class="synIdentifier">              &gt;</span><span class="synUnderlined">Others</span><span class="synIdentifier">&lt;/</span><span class="synStatement">a</span>
<span class="synIdentifier">            &gt;</span>
          <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span>nav<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span>header<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span>main<span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;post_list&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;post in posts&quot;</span><span class="synIdentifier"> :key=</span><span class="synConstant">&quot;post.title.rendered&quot;</span><span class="synIdentifier">&gt;</span>
          <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> :</span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;post.link&quot;</span><span class="synIdentifier"> v-html=</span><span class="synConstant">&quot;post.title.rendered&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span>main<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">  </span><span class="synComment">// normalize.css を読み込む</span>
<span class="synSpecial">  </span><span class="synStatement">import</span><span class="synSpecial"> </span><span class="synConstant">&quot;normalize.css&quot;</span><span class="synSpecial">;</span>
<span class="synSpecial">  </span><span class="synComment">// Ajax通信ライブラリ</span>
<span class="synSpecial">  </span><span class="synStatement">import</span><span class="synSpecial"> axios from </span><span class="synConstant">&quot;axios&quot;</span><span class="synSpecial">;</span>
<span class="synSpecial">  </span><span class="synComment">// AjaxのURL定義</span>
<span class="synSpecial">  </span><span class="synStatement">const</span><span class="synSpecial"> url = `https:</span><span class="synComment">//blog.yuheijotaki.com/wp-json/wp/v2/posts?per_page=20&amp;categories=2`;</span>

<span class="synSpecial">  </span><span class="synStatement">export</span><span class="synSpecial"> </span><span class="synStatement">default</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">    name: </span><span class="synConstant">&quot;App&quot;</span><span class="synSpecial">,</span>
<span class="synSpecial">    data</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      </span><span class="synStatement">return</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">        posts: </span><span class="synIdentifier">[]</span><span class="synSpecial">,</span>
<span class="synSpecial">        page: </span>0
<span class="synSpecial">      </span><span class="synIdentifier">}</span><span class="synSpecial">;</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">    mounted</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      </span><span class="synIdentifier">this</span><span class="synSpecial">.page = </span>1<span class="synSpecial">;</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">    watch: </span><span class="synIdentifier">{</span>
<span class="synSpecial">      page</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">        </span>(<span class="synSpecial">async </span>()<span class="synSpecial"> =&gt; </span><span class="synIdentifier">{</span>
<span class="synSpecial">          </span><span class="synStatement">try</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">            </span><span class="synStatement">const</span><span class="synSpecial"> res = await axios.get</span>(<span class="synSpecial">url</span>)<span class="synSpecial">;</span>
<span class="synSpecial">            </span><span class="synIdentifier">this</span><span class="synSpecial">.posts = </span><span class="synIdentifier">this</span><span class="synSpecial">.posts.concat</span>(<span class="synSpecial">res.data</span>)<span class="synSpecial">;</span>
<span class="synSpecial">          </span><span class="synIdentifier">}</span><span class="synSpecial"> </span><span class="synStatement">catch</span><span class="synSpecial"> </span>(<span class="synSpecial">error</span>)<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">            </span><span class="synStatement">alert</span>(<span class="synConstant">&quot;取得できませんでした。&quot;</span>)<span class="synSpecial">;</span>
<span class="synSpecial">          </span><span class="synIdentifier">}</span>
<span class="synSpecial">        </span><span class="synIdentifier">}</span>)()<span class="synSpecial">;</span>
<span class="synSpecial">      </span><span class="synIdentifier">}</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">    methods: </span><span class="synIdentifier">{</span>
<span class="synSpecial">      filterCategory: </span><span class="synIdentifier">function</span>(<span class="synStatement">event</span>)<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">        </span><span class="synIdentifier">this</span><span class="synSpecial">.page = </span>1<span class="synSpecial">;</span>
<span class="synSpecial">        </span><span class="synIdentifier">this</span><span class="synSpecial">.posts.splice</span>(0<span class="synSpecial">, </span>20)<span class="synSpecial">; </span><span class="synComment">// 投稿をすべて削除</span>
<span class="synSpecial">        </span><span class="synStatement">const</span><span class="synSpecial"> cateogoryId = </span><span class="synStatement">event</span><span class="synSpecial">.currentTarget.getAttribute</span>(
<span class="synSpecial">          </span><span class="synConstant">&quot;data-category-id&quot;</span>
<span class="synSpecial">        </span>)<span class="synSpecial">; </span><span class="synComment">// カテゴリーの取得</span>
<span class="synSpecial">        </span><span class="synStatement">const</span><span class="synSpecial"> updatedUrl = url + </span><span class="synConstant">&quot;&amp;categories=&quot;</span><span class="synSpecial"> + cateogoryId; </span><span class="synComment">// JSON URLのアップデート</span>
<span class="synSpecial">        </span><span class="synComment">// console.log(updatedUrl);</span>
<span class="synSpecial">        </span>(<span class="synSpecial">async </span>()<span class="synSpecial"> =&gt; </span><span class="synIdentifier">{</span>
<span class="synSpecial">          </span><span class="synStatement">try</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">            </span><span class="synStatement">const</span><span class="synSpecial"> res = await axios.get</span>(<span class="synSpecial">updatedUrl</span>)<span class="synSpecial">;</span>
<span class="synSpecial">            </span><span class="synIdentifier">this</span><span class="synSpecial">.posts = </span><span class="synIdentifier">this</span><span class="synSpecial">.posts.concat</span>(<span class="synSpecial">res.data</span>)<span class="synSpecial">;</span>
<span class="synSpecial">            </span><span class="synStatement">event</span><span class="synSpecial">.target.className += </span><span class="synConstant">&quot; is-current&quot;</span><span class="synSpecial">;</span>
<span class="synSpecial">          </span><span class="synIdentifier">}</span><span class="synSpecial"> </span><span class="synStatement">catch</span><span class="synSpecial"> </span>(<span class="synSpecial">error</span>)<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">            </span><span class="synStatement">alert</span>(<span class="synConstant">&quot;取得できませんでした。&quot;</span>)<span class="synSpecial">;</span>
<span class="synSpecial">          </span><span class="synIdentifier">}</span>
<span class="synSpecial">        </span><span class="synIdentifier">}</span>)()<span class="synSpecial">;</span>
<span class="synSpecial">      </span><span class="synIdentifier">}</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span><span class="synSpecial">;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<h2>まとめ</h2>

<p><a href="https://github.com/yuheijotaki/vue-study_20190212"><strong>GitHub</strong></a></p>

<h4>感想</h4>

<ul>
<li>カテゴリーリンクを押して該当の記事の表示するまではできましたが、やっぱり自分で書くと不明点が多いです</li>
<li><code>watch</code> と <code>methods</code> の <code>(async () =&gt; { ...</code> はひとつにまとめれるのかな</li>
<li>変数 <code>url</code> と <code>updatedUrl</code> の扱い方が謎...</li>
<li><code>page</code> と <code>page()</code> の扱いも謎...</li>
</ul>


<h4>次回以降やること</h4>

<ul>
<li>カテゴリーを動的に取得</li>
<li>カテゴリーの現在地（クラスの付与・解除）</li>
<li>次の記事を読み込む機能の追加</li>
<li>ナビと投稿一覧のテンプレートを分ける</li>
</ul>


<h2>Vue CLI（webpack）で使うコマンド</h2>

<p>毎回見直すのでメモしておきます。</p>

<pre class="code" data-lang="" data-unlink># プロジェクト作成
$ vue init webpack my-app # vue init [テンプレート名] [プロジェクト名]

# 質問
? Project name my-app # プロジェクトの名前
? Project description A Vue.js project # プロジェクトの説明
? Author Yuhei Jotaki &lt;yuheijotaki@gmail.com&gt; # 作者の名前とメールアドレス
? Vue build standalone # テンプレートの定義に「.vue」ファイルのみを使用するなら「Runtime-only」を選択可能
? Install vue-router? Yes # Vue Router をインストールするか否か
? Use ESLint to lint your code? No # ESLint をインストールするか否か
? Set up unit tests No # 自動テストツール をインストールするか否か
? Setup e2e tests with Nightwatch? No # Nightwatch.jsのE2Eテストフレームワークをインストールするか否か
? Should we run `npm install` for you after the project has been created? (recommended) npm # npmを使って自動インストール

# axios / sass-loader / node-sass / normalize.css のインストール
npm install -D axios sass-loader node-sass normalize.css

# 実行
npm run dev

# ビルド
npm run build</pre>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AMPでアニメーション `amp-fx-collection`'
description: ''
publishDate: '02/08/2019 22:52:16'
---

[CONTENTS-START]
<p>AMP サイトでアニメーションを実装する機会がありましたが、<code>amp-animation</code> だったり、<code>amp-fx-collection</code> や <code>amp-story</code> というコンポーネントまであり、こんがらがったのでまとめをしておきます。</p>

<h3><code>amp-animation</code> とは</h3>

<p><a href="https://www.w3.org/TR/web-animations/">Web Animations API</a>に依存した、JSON で定義してアニメーションを実行する機能。</p>

<p>公式の例：</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>amp-animation<span class="synIdentifier"> layout=</span><span class="synConstant">&quot;nodisplay&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;application/json&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">    </span><span class="synIdentifier">{</span>
<span class="synSpecial">      </span><span class="synComment">// Timing properties</span>
<span class="synSpecial">      ...</span>
<span class="synSpecial">      </span><span class="synConstant">&quot;animations&quot;</span><span class="synSpecial">: </span><span class="synIdentifier">[</span>
<span class="synSpecial">        </span><span class="synIdentifier">{</span>
<span class="synSpecial">          </span><span class="synComment">// Animation 1</span>
<span class="synSpecial">        </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">        ...</span>
<span class="synSpecial">        </span><span class="synIdentifier">{</span>
<span class="synSpecial">          </span><span class="synComment">// Animation N</span>
<span class="synSpecial">        </span><span class="synIdentifier">}</span>
<span class="synSpecial">      </span><span class="synIdentifier">]</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>amp-animation<span class="synIdentifier">&gt;</span>
</pre>


<p>これは <a href="https://yuheijotaki.hatenablog.com/entry/2019/01/27/165136">前に</a> 少し触ったやつですね。</p>

<h3><code>amp-fx-collection</code> とは</h3>

<p>HTML 内の属性指定にて要素のフェードイン、パララックスなどのプリセットのエフェクトを実現できるコレクション。</p>

<p>公式の例：</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier"> amp-fx=</span><span class="synConstant">&quot;parallax&quot;</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-parallax-factor=</span><span class="synConstant">&quot;1.5&quot;</span><span class="synIdentifier">&gt;</span>
  A title that moves faster than other content.
<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
</pre>


<p>これを実際に使用することになりそうなので、少し詳しく書いておきます。</p>

<pre class="code lang-html" data-lang="html" data-unlink>...
<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> async custom-element=</span><span class="synConstant">&quot;amp-fx-collection&quot;</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://cdn.ampproject.org/v0/amp-fx-collection-0.1.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">body</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- `01`と`02` のレイヤー背景にパララックス効果 --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;bg_layer&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;bg_layer_01&quot;</span>
<span class="synIdentifier">          amp-fx=</span><span class="synConstant">&quot;parallax&quot;</span>
<span class="synIdentifier">          </span><span class="synType">data</span><span class="synIdentifier">-parallax-factor=</span><span class="synConstant">&quot;1.4</span>
<span class="synConstant">      &quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;bg_layer&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;bg_layer_02&quot;</span>
<span class="synIdentifier">          amp-fx=</span><span class="synConstant">&quot;parallax&quot;</span>
<span class="synIdentifier">          </span><span class="synType">data</span><span class="synIdentifier">-parallax-factor=</span><span class="synConstant">&quot;1.2&quot;</span>
<span class="synIdentifier">      &gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>

  <span class="synIdentifier">&lt;</span>main<span class="synIdentifier">&gt;</span>
    <span class="synComment">&lt;!-- 左から右へスライドイン --&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;img_object&quot;</span>
<span class="synIdentifier">        amp-fx=</span><span class="synConstant">&quot;fly-in-left&quot;</span>
<span class="synIdentifier">        </span><span class="synType">data</span><span class="synIdentifier">-fly-in-distance=</span><span class="synConstant">&quot;50%&quot;</span>
<span class="synIdentifier">        </span><span class="synType">data</span><span class="synIdentifier">-duration=</span><span class="synConstant">&quot;1500ms&quot;</span>
<span class="synIdentifier">        </span><span class="synType">data</span><span class="synIdentifier">-easing=</span><span class="synConstant">&quot;ease-out&quot;</span>
<span class="synIdentifier">    &gt;</span>
      <span class="synIdentifier">&lt;</span>amp-<span class="synStatement">img</span><span class="synIdentifier">&gt;&lt;/</span>amp-<span class="synStatement">img</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
    <span class="synComment">&lt;!-- 下から上にフェードイン --&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;txt_object&quot;</span>
<span class="synIdentifier">        amp-fx=</span><span class="synConstant">&quot;fade-in fly-in-bottom&quot;</span>
<span class="synIdentifier">        </span><span class="synType">data</span><span class="synIdentifier">-fly-in-distance=</span><span class="synConstant">&quot;10%&quot;</span>
<span class="synIdentifier">        </span><span class="synType">data</span><span class="synIdentifier">-duration=</span><span class="synConstant">&quot;1000ms&quot;</span>
<span class="synIdentifier">        </span><span class="synType">data</span><span class="synIdentifier">-easing=</span><span class="synConstant">&quot;ease-out&quot;</span>
<span class="synIdentifier">    &gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span>main<span class="synIdentifier">&gt;</span>
...
</pre>


<p>種類やオプションは <a href="https://www.ampproject.org/ja/docs/reference/components/amp-fx-collection">公式</a> が詳しく、デモは <a href="https://ampbyexample.com/components/amp-fx-collection/">AMP by Example</a> が豊富です。</p>

<p>留意事項などに関しては、</p>

<h5>アニメーション開始のトリガー</h5>

<p>基本的にスクロールされた領域を自動で判定してくれた上で各種アニメーションを行ってくれる。（その領域にスクロールされたらアニメーション開始）</p>

<h5>CSS の指定</h5>

<p><code>amp-fx-collection</code> を指定する HTML 要素に対して、CSS 側で <code>position: absolute;</code> の指定などしている際に思い通りに動かない場合がある。<br/>
上記のサンプルコードの <code>.bg_layer</code> に関して言うと、下記のような CSS 指定の場合、アニメーションが動作しました。</p>

<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">.bg_layer</span> <span class="synIdentifier">{</span>
  <span class="synType">position</span>: <span class="synConstant">absolute</span>;
  <span class="synType">left</span>: <span class="synConstant">50%</span>;
  <span class="synType">transform</span>: <span class="synIdentifier">translateX(</span><span class="synConstant">-50%</span><span class="synIdentifier">)</span>;
  <span class="synType">width</span>: <span class="synConstant">100%</span>;
  <span class="synType">height</span>: <span class="synConstant">100%</span>;
<span class="synIdentifier">}</span>
<span class="synIdentifier">.bg_layer_01</span> <span class="synIdentifier">{</span>
  <span class="synType">width</span>: <span class="synConstant">100%</span>;
  <span class="synType">height</span>: <span class="synConstant">100%</span>;
  <span class="synType">background</span>: <span class="synIdentifier">url(</span><span class="synConstant">bg_layer_01.png</span><span class="synIdentifier">)</span> <span class="synConstant">repeat-y</span> <span class="synConstant">left</span> <span class="synConstant">50%</span> <span class="synConstant">top</span> <span class="synConstant">0</span> / <span class="synConstant">1600px</span> <span class="synConstant">auto</span>;
<span class="synIdentifier">}</span>
</pre>


<p>※ラッパーの <code>.bg_layer</code> に <code>amp-fx-collection</code> オプションを指定するとうまく動作しなかった</p>

<h3><code>amp-story</code> とは</h3>

<p>Instagram のストーリーなどのような、</p>

<ul>
<li>全画面表示</li>
<li>複数レイヤーを 1 つのページに視覚効果を与える</li>
<li>リッチなアニメーション</li>
<li>音声の追加</li>
</ul>


<p>などに特化した機能をもつコンポーネントのこと。<br/>
今の所、<strong>試験運用コンポーネント</strong> 。<br/>
<a href="https://www.ampproject.org/ja/stories/">公式の概要</a></p>

<p>構成のイメージとしては <a href="https://www.ampproject.org/ja/docs/getting_started/visual_story/parts_of_story">AMP ストーリーのパーツについて</a> の図が分かりやすかったです。<br/>
この <code>amp-story</code> のコンポーネントの中で使用できるアニメーションはまた別で（併用可能？）<a href="https://www.ampproject.org/ja/docs/getting_started/visual_story/animating_elements">こちら</a> に一覧があります。</p>

<p>これまでの 2 つのコンポーネントとは違い、構成の枠組み的なコンポーネントという認識になったので今回は使用は見送りました。</p>

<h3>参考にしたページなど</h3>

<h5><code>amp-animation</code></h5>

<ul>
<li><a href="https://www.ampproject.org/docs/reference/components/amp-animation">amp-animation – AMP</a></li>
<li><a href="https://ampbyexample.com/visual_effects/animated_snackbar/">Animated Snackbar - AMP by Example</a></li>
</ul>


<h5><code>amp-fx-collection</code></h5>

<ul>
<li><a href="https://www.ampproject.org/docs/reference/components/amp-fx-collection">amp-fx-collection – AMP</a></li>
<li><a href="https://ampbyexample.com/components/amp-fx-collection/#scroll-triggered-fade-in">amp-fx-collection - AMP by Example</a></li>
<li><a href="https://www.tantan-biyori.info/blog/2018/12/amp-story.html">amp-story を使ってストーリーページを作る(基本編) - 淡々日和 - 備忘録</a></li>
<li><a href="https://www.tantan-biyori.info/blog/2018/12/story-design.html">amp-story を使ってストーリーページを作る(応用編) - 淡々日和 - 備忘録</a></li>
<li><a href="https://chaos-boy.tokyo/posts/2018-06-08/amp_amp_fx_collection/">AMP で fade や parallax を簡単に実現できる amp-fx-collection の使い方 | カオスボーイ・トーキョー @カオスボーイの憂鬱</a></li>
</ul>


<h5><code>amp-story</code></h5>

<ul>
<li><a href="https://www.ampproject.org/ja/stories/">Stories – AMP</a></li>
<li><a href="https://www.ampproject.org/ja/docs/getting_started/visual_story">ビジュアルに訴える AMP ストーリーを作成する（スタートガイド） – AMP</a></li>
<li><a href="https://ampbyexample.com/stories/introduction/amp_story_hello_world/">Stories in AMP AMP by Example</a></li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Sass の `map-get`'
description: ''
publishDate: '02/08/2019 12:23:48'
---

[CONTENTS-START]
<p>例えば、</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;object object_01&quot;</span><span class="synIdentifier">&gt;&lt;</span>amp-<span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier">&gt;&lt;/</span>amp-<span class="synStatement">img</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;object object_02&quot;</span><span class="synIdentifier">&gt;&lt;</span>amp-<span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier">&gt;&lt;/</span>amp-<span class="synStatement">img</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;object object_03&quot;</span><span class="synIdentifier">&gt;&lt;</span>amp-<span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier">&gt;&lt;/</span>amp-<span class="synStatement">img</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;object object_04&quot;</span><span class="synIdentifier">&gt;&lt;</span>amp-<span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier">&gt;&lt;/</span>amp-<span class="synStatement">img</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;object object_05&quot;</span><span class="synIdentifier">&gt;&lt;</span>amp-<span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier">&gt;&lt;/</span>amp-<span class="synStatement">img</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
...
</pre>


<p>のような HTML があって、</p>

<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">.object</span> <span class="synIdentifier">{</span>
  &amp;.object<span class="synComment">_</span><span class="synConstant">01</span> <span class="synIdentifier">{</span>
    <span class="synType">top</span>: <span class="synConstant">240px</span>;
    <span class="synType">bottom</span>: <span class="synConstant">120px</span>;
    <span class="synType">width</span>: <span class="synConstant">80px</span>;
    <span class="synType">height</span>: <span class="synConstant">40px</span>;
    amp-img <span class="synIdentifier">{</span>
      <span class="synType">width</span>: <span class="synConstant">80px</span>;
      <span class="synType">height</span>: <span class="synConstant">40px</span>;
    <span class="synIdentifier">}</span>
  <span class="synError">}</span>
  &amp;<span class="synIdentifier">.object_02</span> <span class="synIdentifier">{</span>
  ...
<span class="synIdentifier">}</span>
</pre>


<p>のような CSS を書きたいとき、SCSS で <code>map-get</code> を用いると、</p>

<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">.object</span> <span class="synIdentifier">{</span>
  $objectList: (
    object_<span class="synConstant">01</span>: (
      object-<span class="synConstant">top</span>: <span class="synConstant">240px</span><span class="synSpecial">,</span>
      object-<span class="synConstant">right</span>: <span class="synConstant">120px</span><span class="synSpecial">,</span>
      object-width: <span class="synConstant">80px</span><span class="synSpecial">,</span>
      object-height: <span class="synConstant">40px</span>
    )<span class="synSpecial">,</span>
    object_<span class="synConstant">02</span>: (
      object-<span class="synConstant">top</span>: <span class="synConstant">160px</span><span class="synSpecial">,</span>
      object-<span class="synConstant">right</span>: <span class="synConstant">220px</span><span class="synSpecial">,</span>
      object-width: <span class="synConstant">20px</span><span class="synSpecial">,</span>
      object-height: <span class="synConstant">100px</span>
    )<span class="synSpecial">,</span>
    ...
  );
  @each $objectNum, $property in $objectList <span class="synIdentifier">{</span>
    &amp;.#<span class="synIdentifier">{</span>$objectNum<span class="synIdentifier">}</span> <span class="synIdentifier">{</span>
      <span class="synType">top</span>: map-get($property<span class="synSpecial">,</span> object-<span class="synConstant">top</span>);
      <span class="synType">right</span>: map-get($property<span class="synSpecial">,</span> object-<span class="synConstant">right</span>);
      <span class="synType">bottom</span>: map-get($property<span class="synSpecial">,</span> object-<span class="synConstant">bottom</span>);
      <span class="synType">left</span>: map-get($property<span class="synSpecial">,</span> object-<span class="synConstant">left</span>);
      <span class="synType">width</span>: map-get($property<span class="synSpecial">,</span> object-width);
      <span class="synType">height</span>: map-get($property<span class="synSpecial">,</span> object-height);
      amp-img <span class="synIdentifier">{</span>
        <span class="synType">width</span>: map-get($property<span class="synSpecial">,</span> object-width);
        <span class="synType">height</span>: map-get($property<span class="synSpecial">,</span> object-height);
      <span class="synIdentifier">}</span>
    <span class="synError">}</span>
  <span class="synError">}</span>
<span class="synError">}</span>
</pre>


<p>とすると連想配列的な配列を処理できる。<br/>
少し冗長な気もしますが、、</p>

<p><strong>参考</strong></p>

<ul>
<li><a href="https://blog-and-destroy.com/8221">【Sass】Map の値が連想配列となるデータを、each ループ内で map-get()を使い取得</a></li>
<li><a href="https://blog.wadackel.me/2016/sass-map-functions/">Sass の map 操作をおさらいする+便利な関数をいくつか - wadackel.me</a></li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js / JSON から情報を引っ張ってくる その2'
description: ''
publishDate: '02/08/2019 09:59:22'
---

[CONTENTS-START]
<h2>やること</h2>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190212100544.png" alt="f:id:jotaki:20190212100544p:plain" title="f:id:jotaki:20190212100544p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<ul>
<li>WordPress の記事一覧を WP REST API を用いてエンドポイントを作成</li>
<li>Vue.js で記事タイトルの一覧を表示させる</li>
</ul>


<h2>セットアップ</h2>

<p>Vue CLI を使用。<a href="https://yuheijotaki.hatenablog.com/entry/2018/12/28/025438">前回</a>と同じ工程。</p>

<h2>エンドポイント</h2>

<p>こちらも前回と同様に WordPress の <code>wp-json</code> を使用します。</p>

<h4>REST API の有効化</h4>

<p>投稿にフィルターをかけてエンドポイントを作れるように、<a href="https://wordpress.org/plugins/rest-api/">WordPress REST API</a> プラグインをインストールします。</p>

<p>特定のカテゴリーの一覧記事を取得する場合、 <code>filter[]=</code> は以前のバージョンの仕様ということなのっで、<a href="https://developer.wordpress.org/rest-api/reference/">REST API Handbook</a> を眺めつつ下記も参考にしました。<br/>
<a href="https://blog.cosnomi.com/archives/1068">WP REST API でブログからお知らせカテゴリ記事を取得してみる【WordPress】【Python】 | Cosnomi Blog</a></p>

<h4>エンドポイントの JSON URL</h4>

<p><a href="https://blog.yuheijotaki.com/">https://blog.yuheijotaki.com/</a> の <code>Develop</code> カテゴリー一覧記事は、 <code>https://blog.yuheijotaki.com/wp-json/wp/v2/posts?categories=2</code> となります。<br/>
これに <code>per_page</code> で表示件数を変更したり、いろいろできる。<br/>
参考：<a href="https://developer.wordpress.org/rest-api/reference/posts/#arguments">REST API Handbook | Posts | Arguments</a></p>

<h2>Vue.js 側の処理</h2>

<p>下記にやってみたいことがだいたいありました。<br/>
<a href="https://qiita.com/uto-usui/items/4eb21aec704b888936d0">《WordPress》2017 年末に WP REST API で取得して Vue.js で描画するまでのまとめ。 - Qiita</a></p>

<h4>App.vue</h4>

<p>一部省略</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;post in posts&quot;</span><span class="synIdentifier"> :key=</span><span class="synConstant">&quot;post.title.rendered&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> :</span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;post.link&quot;</span><span class="synIdentifier"> v-html=</span><span class="synConstant">&quot;post.title.rendered&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;</span>
        <span class="synComment">&lt;!-- &lt;pre v-html=&quot;post.content.rendered&quot;&gt;&lt;/pre&gt; --&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>次の記事を読み込む<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">  </span><span class="synStatement">export</span><span class="synSpecial"> </span><span class="synStatement">default</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">    name: </span><span class="synConstant">&quot;App&quot;</span><span class="synSpecial">,</span>
<span class="synSpecial">    data</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      </span><span class="synStatement">return</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">        posts: </span><span class="synIdentifier">[]</span><span class="synSpecial">,</span>
<span class="synSpecial">        page: </span>0<span class="synSpecial">,</span>
<span class="synSpecial">        loading: </span><span class="synConstant">false</span><span class="synSpecial">,</span>
<span class="synSpecial">        disabled: </span><span class="synConstant">false</span>
<span class="synSpecial">      </span><span class="synIdentifier">}</span><span class="synSpecial">;</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">    mounted</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      </span><span class="synIdentifier">this</span><span class="synSpecial">.page = </span>1<span class="synSpecial">;</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">    watch: </span><span class="synIdentifier">{</span>
<span class="synSpecial">      page</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">        </span><span class="synStatement">const</span><span class="synSpecial"> url = `https:</span><span class="synComment">//blog.yuheijotaki.com/wp-json/wp/v2/posts?categories=2&amp;page=${</span>
<span class="synSpecial">          </span><span class="synIdentifier">this</span><span class="synSpecial">.page</span>
<span class="synSpecial">        </span><span class="synIdentifier">}</span><span class="synSpecial">`;</span>
<span class="synSpecial">        </span>(<span class="synSpecial">async </span>()<span class="synSpecial"> =&gt; </span><span class="synIdentifier">{</span>
<span class="synSpecial">          </span><span class="synStatement">try</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">            </span><span class="synStatement">const</span><span class="synSpecial"> res = await axios.get</span>(<span class="synSpecial">url</span>)<span class="synSpecial">;</span>
<span class="synSpecial">            </span><span class="synIdentifier">this</span><span class="synSpecial">.posts = </span><span class="synIdentifier">this</span><span class="synSpecial">.posts.concat</span>(<span class="synSpecial">res.data</span>)<span class="synSpecial">;</span>
<span class="synSpecial">            </span><span class="synIdentifier">this</span><span class="synSpecial">.loading = </span><span class="synConstant">false</span><span class="synSpecial">;</span>
<span class="synSpecial">          </span><span class="synIdentifier">}</span><span class="synSpecial"> </span><span class="synStatement">catch</span><span class="synSpecial"> </span>(<span class="synSpecial">error</span>)<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">            console.log</span>(<span class="synSpecial">error</span>)<span class="synSpecial">;</span>
<span class="synSpecial">            </span><span class="synIdentifier">this</span><span class="synSpecial">.empty</span>()<span class="synSpecial">;</span>
<span class="synSpecial">          </span><span class="synIdentifier">}</span>
<span class="synSpecial">        </span><span class="synIdentifier">}</span>)()<span class="synSpecial">;</span>
<span class="synSpecial">      </span><span class="synIdentifier">}</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">    methods: </span><span class="synIdentifier">{</span>
<span class="synSpecial">      load</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">        </span><span class="synIdentifier">this</span><span class="synSpecial">.loading = </span><span class="synConstant">true</span><span class="synSpecial">;</span>
<span class="synSpecial">        </span><span class="synIdentifier">this</span><span class="synSpecial">.page++;</span>
<span class="synSpecial">      </span><span class="synIdentifier">}</span><span class="synSpecial">,</span>
<span class="synSpecial">      empty</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">        </span><span class="synIdentifier">this</span><span class="synSpecial">.loading = </span><span class="synConstant">false</span><span class="synSpecial">;</span>
<span class="synSpecial">        </span><span class="synIdentifier">this</span><span class="synSpecial">.disabled = </span><span class="synConstant">true</span><span class="synSpecial">;</span>
<span class="synSpecial">      </span><span class="synIdentifier">}</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span><span class="synSpecial">;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190208095725.png" alt="f:id:jotaki:20190208095725p:plain" title="f:id:jotaki:20190208095725p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>まとめ</h2>

<p><a href="https://github.com/yuheijotaki/vue-study_20190208"><strong>GitHub</strong></a></p>

<ul>
<li>.vue ファイルの編集は Qiita の参考記事を元に少しいじった程度なのでスクラッチで自分が書くのは難しい。。</li>
<li>なので Vue.js より REST API のほうが詰まった。ただ <code>const res = await axios.get(url);</code> あたりは定型文的なものなのかなと思いました。</li>
<li>次回はカテゴリー一覧出力してクリックしたら記事一覧を表示をやる。</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】Vue.js入門 基礎から実践アプリケーション開発まで その6'
description: ''
publishDate: '02/07/2019 10:14:44'
---

[CONTENTS-START]
<h2>7 Vuex によるデータフローの設計・状態管理</h2>

<p>もスキップ。ざっくり読みましたが、データをどう持たせて処理するのが良いのかの参考になりました。</p>

<h2>8 中規模・大規模向けのアプリケーション開発</h2>

<ul>
<li>① 開発環境のセットアップ</li>
<li>② 設計</li>
<li>③ 実装</li>
</ul>


<p>を実際に手を動かさず流し読みしましたが、設計というのはこういうことかと勉強に...<br/>
これまで WordPress 開発などでモジュール化して開発する際も、なんとなく全体は見てから開発を始めてその都度パーツ（コンポーネント）を作成してという形だったので、確かに前もってどの機能ごとに分けて命名決めて、処理すること明確にするべきだと感じました。<br/>
もう少し学習してからこのタスク管理アプリは写経できたらなと思います。</p>

<h2>Appendix A jQuery からの移行</h2>

<h3>A.2 jQuery で実装していた機能の Vue.js による実装</h3>

<h4>A.2.1 イベントリスナー</h4>

<p><strong>jQuery</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;btn&quot;</span><span class="synIdentifier">&gt;</span>Click<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// jQuery</span>
$(<span class="synConstant">&quot;#btn&quot;</span>).on(<span class="synConstant">&quot;click&quot;</span>, <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
  <span class="synStatement">alert</span>(<span class="synConstant">&quot;Hi&quot;</span>);
<span class="synIdentifier">}</span>);
</pre>


<p><strong>Vue.js</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;sayHi&quot;</span><span class="synIdentifier">&gt;</span>Click<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- &lt;button @click=&quot;sayHi&quot;&gt;Click&lt;/button&gt; でもOK --&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// Vue のマウント</span>
<span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  methods: <span class="synIdentifier">{</span>
    sayHi: <span class="synIdentifier">function</span>(<span class="synStatement">event</span>) <span class="synIdentifier">{</span>
      <span class="synComment">// デフォルトで引数にイベントオブジェクトが渡される</span>
      <span class="synStatement">alert</span>(<span class="synConstant">&quot;Hi&quot;</span>);
      console.log(<span class="synStatement">event</span>);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h4>A.2.2 表示の切り替え</h4>

<p><strong>jQuery</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;on&quot;</span><span class="synIdentifier">&gt;</span>オン<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;off&quot;</span><span class="synIdentifier">&gt;</span>オフ<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>ON/OFF切り替え<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// jQuery</span>
<span class="synStatement">const</span> $on = $(<span class="synConstant">&quot;#on&quot;</span>);
<span class="synStatement">const</span> $off = $(<span class="synConstant">&quot;#off&quot;</span>);
<span class="synIdentifier">let</span> isOn = <span class="synConstant">false</span>;
$on.hide();
$(<span class="synConstant">&quot;button&quot;</span>).on(<span class="synConstant">&quot;click&quot;</span>, <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
  isOn = !isOn;
  <span class="synStatement">if</span> (isOn) <span class="synIdentifier">{</span>
    $on.show();
    $off.hide();
  <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
    $on.hide();
    $off.show();
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p><strong>Vue.js</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-show=</span><span class="synConstant">&quot;isOn&quot;</span><span class="synIdentifier">&gt;</span>オン<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-show=</span><span class="synConstant">&quot;!isOn&quot;</span><span class="synIdentifier">&gt;</span>オフ<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;toggle&quot;</span><span class="synIdentifier">&gt;</span>ON/OFF切り替え<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      isOn: <span class="synConstant">false</span>
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    toggle: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.isOn = !<span class="synIdentifier">this</span>.isOn;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<blockquote><p>jQuery と Vue.js の違いは、イベントリスナー（イベントハンドラ）で明示的に表示の切り替え（DOM 操作）を行うか否かです。jQuery はイベントリスナーで jQuery オブジェクトを通して明示的に要素の表示を切り替えますが、Vue.js は事前にテンプレートでデータと要素の表示・非表示の関係を記述した上で、イベントハラではデータの更新を行うだけです。</p></blockquote>

<h4>A.2.3 要素の挿入・削除</h4>

<p><strong>jQuery</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;loading&quot;</span><span class="synIdentifier">&gt;</span>ロードしています...<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// jQuery</span>
<span class="synStatement">const</span> $loading = $(<span class="synConstant">&quot;#loading&quot;</span>);
<span class="synStatement">const</span> $app = $(<span class="synConstant">&quot;#app&quot;</span>);
setTimeout(<span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> $loaded = $(<span class="synConstant">&quot;&lt;p&gt;ロードが完了しました&lt;/p&gt;&quot;</span>);
  $loading.remove();
  $app.append($loaded);
<span class="synIdentifier">}</span>, 1000);
</pre>


<p><strong>Vue.js</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;isLoading&quot;</span><span class="synIdentifier">&gt;</span>ロードしています...<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-else&gt;</span>ロードが完了しました<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      isLoading: <span class="synConstant">true</span>
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>,
  mounted: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    setTimeout(() =&gt; <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.isLoading = <span class="synConstant">false</span>;
    <span class="synIdentifier">}</span>, 1000);
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h4>A.2.4 属性値の変更</h4>

<p><strong>jQuery</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">disabled</span><span class="synIdentifier"> /&gt;&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>入力欄を有効にする<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// jQuery</span>
<span class="synStatement">const</span> $input = $(<span class="synConstant">&quot;input&quot;</span>);
<span class="synStatement">const</span> $button = $(<span class="synConstant">&quot;button&quot;</span>);
<span class="synIdentifier">let</span> disabled = <span class="synConstant">true</span>;
$button.on(<span class="synConstant">&quot;click&quot;</span>, <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
  disabled = !disabled;
  $input.prop(<span class="synConstant">&quot;disabled&quot;</span>, disabled);
  <span class="synStatement">if</span> (disabled) <span class="synIdentifier">{</span>
    $button.text(<span class="synConstant">&quot;入力欄を有効にする&quot;</span>);
  <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
    $button.text(<span class="synConstant">&quot;入力欄を無効にする&quot;</span>);
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p><strong>Vue.js</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> :</span><span class="synType">disabled</span><span class="synIdentifier">=</span><span class="synConstant">&quot;disabled&quot;</span><span class="synIdentifier"> /&gt;&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;toggleDisabled&quot;</span><span class="synIdentifier">&gt;</span>{{ buttonText }}<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      disabled: <span class="synConstant">true</span>
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>,
  computed: <span class="synIdentifier">{</span>
    buttonText: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synStatement">if</span> (<span class="synIdentifier">this</span>.disabled) <span class="synIdentifier">{</span>
        <span class="synStatement">return</span> <span class="synConstant">&quot;入力欄を有効にする&quot;</span>;
      <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
        <span class="synStatement">return</span> <span class="synConstant">&quot;入力欄を無効にする&quot;</span>;
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    toggleDisabled: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.disabled = !<span class="synIdentifier">this</span>.disabled;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h4>A.2.5 クラスの変更</h4>

<p><strong>jQuery</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">.message</span> <span class="synIdentifier">{</span>
    <span class="synType">font-weight</span>: <span class="synConstant">bold</span>;
  <span class="synIdentifier">}</span>
  <span class="synIdentifier">.message.is-red</span> <span class="synIdentifier">{</span>
    <span class="synType">color</span>: <span class="synConstant">red</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;message&quot;</span><span class="synIdentifier">&gt;</span>メッセージ<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>文字色を切り替える<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// jQuery</span>
<span class="synStatement">const</span> $message = $(<span class="synConstant">&quot;.message&quot;</span>);
$(<span class="synConstant">&quot;button&quot;</span>).on(<span class="synConstant">&quot;click&quot;</span>, <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
  $message.toggleClass(<span class="synConstant">&quot;is-red&quot;</span>);
<span class="synIdentifier">}</span>);
</pre>


<p><strong>Vue.js</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">.message</span> <span class="synIdentifier">{</span>
    <span class="synType">font-weight</span>: <span class="synConstant">bold</span>;
  <span class="synIdentifier">}</span>
  <span class="synIdentifier">.message.is-red</span> <span class="synIdentifier">{</span>
    <span class="synType">color</span>: <span class="synConstant">red</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;message&quot;</span><span class="synIdentifier"> :</span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{'is-red': isRed}&quot;</span><span class="synIdentifier">&gt;</span>メッセージ<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;toggleColor&quot;</span><span class="synIdentifier">&gt;</span>文字色を切り替える<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      isRed: <span class="synConstant">false</span>
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    toggleColor: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.isRed = !<span class="synIdentifier">this</span>.isRed;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p><strong>Vue.js（算出プロパティによるクラス付与）</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">.message</span> <span class="synIdentifier">{</span>
    <span class="synType">font-weight</span>: <span class="synConstant">bold</span>;
  <span class="synIdentifier">}</span>
  <span class="synIdentifier">.message.is-red</span> <span class="synIdentifier">{</span>
    <span class="synType">color</span>: <span class="synConstant">red</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;message&quot;</span><span class="synIdentifier"> :</span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;messageClasses&quot;</span><span class="synIdentifier">&gt;</span>メッセージ<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;toggleColor&quot;</span><span class="synIdentifier">&gt;</span>文字色を切り替える<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      isRed: <span class="synConstant">false</span>
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>,
  computed: <span class="synIdentifier">{</span>
    messageClasses: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span>
        <span class="synConstant">&quot;is-red&quot;</span>: <span class="synIdentifier">this</span>.isRed
      <span class="synIdentifier">}</span>;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    toggleColor: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.isRed = !<span class="synIdentifier">this</span>.isRed;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h4>A.2.6 スタイルの変更</h4>

<p><strong>jQuery</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;message&quot;</span><span class="synIdentifier">&gt;</span>メッセージ<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-</span><span class="synType">color</span><span class="synIdentifier">-</span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;red&quot;</span><span class="synIdentifier">&gt;</span>赤色<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-</span><span class="synType">color</span><span class="synIdentifier">-</span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;yellow&quot;</span><span class="synIdentifier">&gt;</span>黄色<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">data</span><span class="synIdentifier">-</span><span class="synType">color</span><span class="synIdentifier">-</span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;blue&quot;</span><span class="synIdentifier">&gt;</span>青色<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// jQuery</span>
<span class="synStatement">const</span> $message = $(<span class="synConstant">&quot;.message&quot;</span>);
$(<span class="synConstant">&quot;button&quot;</span>).on(<span class="synConstant">&quot;click&quot;</span>, <span class="synIdentifier">function</span>(<span class="synStatement">event</span>) <span class="synIdentifier">{</span>
  $message.css(<span class="synConstant">&quot;color&quot;</span>, $(<span class="synStatement">event</span>.currentTarget).attr(<span class="synConstant">&quot;data-color-name&quot;</span>));
<span class="synIdentifier">}</span>);
</pre>


<p><strong>Vue.js</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;message&quot;</span><span class="synIdentifier"> :</span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{color: color}&quot;</span><span class="synIdentifier">&gt;</span>メッセージ<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;changeColor('red')&quot;</span><span class="synIdentifier">&gt;</span>赤色<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;changeColor('yellow')&quot;</span><span class="synIdentifier">&gt;</span>黄色<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> @click=</span><span class="synConstant">&quot;changeColor('blue')&quot;</span><span class="synIdentifier">&gt;</span>青色<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      color: <span class="synConstant">&quot;&quot;</span>
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    changeColor: <span class="synIdentifier">function</span>(color) <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.color = color;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h4>A.2.6 スタイルの変更</h4>

<p>入力された値を取得する。送信時に入力内容を確認するダイアログを表示して、</p>

<ul>
<li>「OK」が押されればそのまま送信</li>
<li>「キャンセル」が押されれば中止</li>
</ul>


<p><strong>jQuery</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier"> </span><span class="synType">method</span><span class="synIdentifier">=</span><span class="synConstant">&quot;post&quot;</span><span class="synIdentifier"> </span><span class="synType">action</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/questionaire&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;name&quot;</span><span class="synIdentifier">&gt;</span>名前<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;name&quot;</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;name&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier"> /&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;age&quot;</span><span class="synIdentifier">&gt;</span>年齢<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;number&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;age&quot;</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;age&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier"> /&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;submit&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;送信&quot;</span><span class="synIdentifier"> /&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// jQuery</span>
<span class="synStatement">const</span> $nameInput = $(<span class="synConstant">&quot;#name&quot;</span>);
<span class="synStatement">const</span> $ageInput = $(<span class="synConstant">&quot;#age&quot;</span>);
<span class="synStatement">const</span> $form = $(<span class="synConstant">&quot;form&quot;</span>);
$form.on(<span class="synConstant">&quot;submit&quot;</span>, <span class="synIdentifier">function</span>(e) <span class="synIdentifier">{</span>
  <span class="synIdentifier">let</span> message = <span class="synIdentifier">[</span>
    <span class="synConstant">&quot;名前: &quot;</span> + $nameInput.val(),
    <span class="synConstant">&quot;年齢: &quot;</span> + $ageInput.val(),
    <span class="synConstant">&quot;この内容で送信しますか？&quot;</span>
  <span class="synIdentifier">]</span>.join(<span class="synConstant">&quot;</span><span class="synSpecial">\n</span><span class="synConstant">&quot;</span>);
  <span class="synStatement">if</span> (!<span class="synStatement">window</span>.<span class="synStatement">confirm</span>(message)) <span class="synIdentifier">{</span>
    e.preventDefault();
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p><strong>Vue.js</strong></p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">form</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier"> @submit=</span><span class="synConstant">&quot;confirm&quot;</span><span class="synIdentifier"> </span><span class="synType">method</span><span class="synIdentifier">=</span><span class="synConstant">&quot;post&quot;</span><span class="synIdentifier"> </span><span class="synType">action</span><span class="synIdentifier">=</span><span class="synConstant">&quot;/questionaire&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;name&quot;</span><span class="synIdentifier">&gt;</span>名前<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;name&quot;</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;name&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;name&quot;</span><span class="synIdentifier"> /&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier"> </span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;age&quot;</span><span class="synIdentifier">&gt;</span>年齢<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;number&quot;</span><span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;age&quot;</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;age&quot;</span><span class="synIdentifier"> v-model.number=</span><span class="synConstant">&quot;age&quot;</span><span class="synIdentifier"> /&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;submit&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;送信&quot;</span><span class="synIdentifier"> /&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">form</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      name: <span class="synStatement">null</span>,
      age: <span class="synStatement">null</span>
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    <span class="synStatement">confirm</span>: <span class="synIdentifier">function</span>(e) <span class="synIdentifier">{</span>
      <span class="synIdentifier">let</span> message = <span class="synIdentifier">[</span>
        <span class="synConstant">&quot;名前: &quot;</span> + <span class="synIdentifier">this</span>.name,
        <span class="synConstant">&quot;年齢: &quot;</span> + <span class="synIdentifier">this</span>.age,
        <span class="synConstant">&quot;この内容で送信しますか？&quot;</span>
      <span class="synIdentifier">]</span>.join(<span class="synConstant">&quot;</span><span class="synSpecial">\n</span><span class="synConstant">&quot;</span>);
      <span class="synStatement">if</span> (!<span class="synStatement">window</span>.<span class="synStatement">confirm</span>(message)) <span class="synIdentifier">{</span>
        e.preventDefault();
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h5><code>v-model</code> の振る舞い</h5>

<p><strong><code>number</code> 修飾子</strong></p>

<p>入力を数値に変換します。</p>

<p><strong><code>lazy</code> 修飾子</strong></p>

<p><code>lazy</code> ディレクティブは、同期のタイミングを指定します。<br/>
同期のタイミングを <code>change</code> イベントが発火したタイミングに変更できます。<br/>
（入力が完了して、<code>input</code>要素のフォーカスが外れたタイミング）</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【WordPress】詰まったこと、使ったこと その1'
description: ''
publishDate: '02/06/2019 10:55:34'
---

[CONTENTS-START]
<p>最近 WordPress で詰まったこと、使ったことをメモしておきます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190206105446.png" alt="f:id:jotaki:20190206105446p:plain" title="f:id:jotaki:20190206105446p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>page.php で <code>pre_get_posts</code> のクエリ書き換えがうまくいかない</h2>

<p>固定ページである投稿タイプの一覧出して、ページ送りも実装して、としたかったのですが、仕様的に難しそう。</p>

<blockquote><p>pre_get_posts は単一の固定ページのリクエスト（ページテンプレート）に対するクエリを変更するのに用いるべきではありません。なぜなら 'is_page'、'is_singular'、'pagename' および他のプロパティ（pretty パーマリンクを使っているかどうかによる）が parse_query() メソッドによってセットされた後だからです。</p></blockquote>

<p>参考: <a href="https://wpdocs.osdn.jp/%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3_API/%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%95%E3%83%83%E3%82%AF%E4%B8%80%E8%A6%A7/pre_get_posts">プラグイン API/アクションフック一覧/pre get posts - WordPress Codex 日本語版</a></p>

<p>知らなかった。。また、</p>

<blockquote><p>これと同様に、pre_get_posts はテンプレートファイル（例えば archive.php）内では動作しません。なぜならクエリが完了した後だからです。</p></blockquote>

<p>とのことで、archive.php 等で扱う際にも注意が必要。</p>

<h2>固定ページでページ送りを動作させる</h2>

<p>という訳で、固定ページでページ送りを動作させる場合。<br/>
下記でうまくいきました。
参考: <a href="http://program-designer.xyz/wordpress%E5%B0%8F%E6%8A%80%E9%9B%86-pagenavi%E3%82%92%E5%9B%BA%E5%AE%9A%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%A7%E4%BD%BF%E3%81%86/">WordPress 小技集 – PageNavi を固定ページで使う –</a></p>

<p>page.php</p>

<pre class="code lang-php" data-lang="php" data-unlink><span class="synSpecial">&lt;?php</span>
  <span class="synStatement">$</span><span class="synIdentifier">paged</span> <span class="synStatement">=</span> get_query_var<span class="synSpecial">(</span>'<span class="synConstant">paged</span>'<span class="synSpecial">)</span><span class="synStatement">?</span> get_query_var<span class="synSpecial">(</span>'<span class="synConstant">paged</span>'<span class="synSpecial">)</span> <span class="synStatement">:</span> <span class="synConstant">1</span>;
  <span class="synStatement">$</span><span class="synIdentifier">args</span> <span class="synStatement">=</span> <span class="synType">array</span><span class="synSpecial">(</span>
    '<span class="synConstant">paged</span>' <span class="synStatement">=&gt;</span> <span class="synStatement">$</span><span class="synIdentifier">paged</span>,
    '<span class="synConstant">post_type</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">post</span>',
    '<span class="synConstant">posts_per_page</span>' <span class="synStatement">=&gt;</span> '<span class="synConstant">10</span>'
  <span class="synSpecial">)</span>;
<span class="synSpecial">?&gt;</span>
<span class="synSpecial">&lt;?php</span> <span class="synStatement">$</span><span class="synIdentifier">the_query</span> <span class="synStatement">=</span> <span class="synPreProc">new</span> WP_Query<span class="synSpecial">(</span> <span class="synStatement">$</span><span class="synIdentifier">args</span> <span class="synSpecial">)</span>; <span class="synSpecial">?&gt;</span>
<span class="synSpecial">&lt;?php</span> <span class="synStatement">if</span> <span class="synSpecial">(</span> <span class="synStatement">$</span><span class="synIdentifier">the_query</span><span class="synType">-&gt;</span>have_posts<span class="synSpecial">()</span> <span class="synSpecial">)</span><span class="synStatement">:</span> <span class="synSpecial">?&gt;</span>
  <span class="synSpecial">&lt;?php</span> <span class="synStatement">while</span> <span class="synSpecial">(</span> <span class="synStatement">$</span><span class="synIdentifier">the_query</span><span class="synType">-&gt;</span>have_posts<span class="synSpecial">()</span> <span class="synSpecial">)</span><span class="synStatement">:</span> <span class="synStatement">$</span><span class="synIdentifier">the_query</span><span class="synType">-&gt;</span>the_post<span class="synSpecial">()</span>; <span class="synSpecial">?&gt;</span>
    <span class="synComment">&lt;!-- ここにループ内容 --&gt;</span>
  <span class="synSpecial">&lt;?php</span> <span class="synStatement">endwhile</span>; <span class="synSpecial">?&gt;</span>
<span class="synSpecial">&lt;?php</span> <span class="synStatement">endif</span>; <span class="synSpecial">?&gt;</span>
<span class="synSpecial">&lt;?php</span> wp_reset_postdata<span class="synSpecial">()</span>; <span class="synSpecial">?&gt;</span>
<span class="synSpecial">&lt;?php</span>
  <span class="synComment">// ページネーション</span>
  <span class="synStatement">if</span><span class="synSpecial">(</span><span class="synIdentifier">function_exists</span><span class="synSpecial">(</span>'<span class="synConstant">wp_pagenavi</span>'<span class="synSpecial">))</span> <span class="synSpecial">{</span>
    <span class="synComment">// サブクエリを引数で渡してあげる</span>
    wp_pagenavi<span class="synSpecial">(</span><span class="synType">array</span><span class="synSpecial">(</span>'<span class="synConstant">query</span>' <span class="synStatement">=&gt;</span> <span class="synStatement">$</span><span class="synIdentifier">the_query</span><span class="synSpecial">))</span>;
  <span class="synSpecial">}</span>
<span class="synSpecial">?&gt;</span>
</pre>


<h2><code>meta_query</code> で複数条件</h2>

<p>これも何度かやっている気がしますが、<code>WP_Query</code> の <code>meta_query</code> で複数条件で指定したい場合</p>

<p><code>pre_get_posts</code> の場合</p>

<pre class="code lang-php" data-lang="php" data-unlink>$meta_query = array(
  'relation' =<span class="synError">&gt;</span> 'AND',
  array(
      'relation' =<span class="synError">&gt;</span> 'OR',
      array(
        'key' =<span class="synError">&gt;</span> 'checkFlag01',
        'value' =<span class="synError">&gt;</span> '0',
        'compare' =<span class="synError">&gt;</span> '=='
      ),
      array(
        'key' =<span class="synError">&gt;</span> 'checkFlag01',
        'value' =<span class="synError">&gt;</span> '',
        'compare' =<span class="synError">&gt;</span> 'NOT EXISTS'
      ),
  ),
  array(
    'relation' =<span class="synError">&gt;</span> 'OR',
    array(
      'key' =<span class="synError">&gt;</span> 'checkFlag02',
      'value' =<span class="synError">&gt;</span> '0',
      'compare' =<span class="synError">&gt;</span> '=='
    ),
    array(
      'key' =<span class="synError">&gt;</span> 'checkFlag02',
      'value' =<span class="synError">&gt;</span> '',
      'compare' =<span class="synError">&gt;</span> 'NOT EXISTS'
    )
  )
);
$query-<span class="synError">&gt;</span>set( 'meta_query', $meta_query );
</pre>


<p><code>checkFlag01</code> と <code>checkFlag02</code> というチェックボックスフィールド（<code>meta_key</code>）がない投稿の一覧などを表示する場合の例。</p>

<p><code>'value' =&gt; '0', 'compare' =&gt; '=='</code> と<br/>
<code>'value' =&gt; '', 'compare' =&gt; 'NOT EXISTS'</code> の
2 つ指定があるのは、フィールド作成前に更新した投稿と、フィールド作成した後に更新した投稿に対応するため</p>

<h2><code>acf_the_content</code> フィルター</h2>

<p>記事投稿のデフォルトの Wysiwyg エディターから出力される内容 <code>the_content</code> を対象に <code>&lt;img&gt;</code> や <code>&lt;iframe&gt;</code> があったらそれを囲う <code>&lt;div&gt;</code> を付与するなどの対応を ACF の Wysiwyg エディターの出力内容にも反映させるには、<code>acf_the_content</code> を使う。</p>

<p><code>PhotoSwipe_fanc</code> という PhotoSwipe プラグイン用の処理を加えた場合は下記のようになる。</p>

<p>functions.php</p>

<pre class="code lang-php" data-lang="php" data-unlink>add_filter('the_content', 'PhotoSwipe_fanc');
add_filter('acf_the_content', 'PhotoSwipe_fanc');
</pre>


<h2>WordPress で PhotoSwipe プラグインを使う</h2>

<p>上記の例の functions の中身。これと</p>

<ul>
<li>ライブラリ JS 読み込み</li>
<li>CSS 読み込み</li>
<li>フッターなどに <code>&lt;div class="pswp"~</code> のパーツ追加</li>
<li><code>main.js</code> などに <code>$('a.photo-swipe img:not("[data-size]")').each(function(){~</code> の追加</li>
</ul>


<p>で動作確認。</p>

<p>functions.php</p>

<pre class="code lang-php" data-lang="php" data-unlink>// PhotoSwipe 用のクラス付与
if ( !function_exists('PhotoSwipe_fanc') ) {
    function PhotoSwipe_fanc($content) {
        global $post;
        if ( $post-<span class="synError">&gt;</span>post_type == 'post' ) {
            $pattern = &quot;/(<span class="synIdentifier">&lt;</span><span class="synStatement">a</span><span class="synIdentifier">[^&gt;</span>]*?href=['\&quot;][^'\&quot;]+?\.(?:bmp|gif|jpg|jpeg|png)(\?\S{0,}){0,1}['\&quot;][^\<span class="synError">&gt;</span>]*)<span class="synError">&gt;</span>/i&quot;;
            $replacement = '$1 class=&quot;photo-swipe&quot;<span class="synError">&gt;</span>';
            $content = preg_replace($pattern, $replacement, $content);
            if ( ! preg_match_all( '/<span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> [^&gt;</span>]+<span class="synError">&gt;</span>/', $content, $matches ) ) {
                return $content;
            }
            $selected_images = $attachment_ids = array();
            foreach( $matches[0] as $image ) {
                if ( preg_match( '/wp-image-([0-9]+)/i', $image, $class_id ) <span class="synError">&amp;&amp;</span> ( $attachment_id = absint( $class_id[1] ) ) ) {
                    $selected_images[ $image ] = $attachment_id;
                    $attachment_ids[ $attachment_id ] = true;
                }
            }
            if ( count( $attachment_ids ) <span class="synError">&gt;</span> 1 ) {
                update_meta_cache( 'post', array_keys( $attachment_ids ) );
            }
            foreach ( $selected_images as $image =<span class="synError">&gt;</span> $attachment_id ) {
                $content = str_replace( $image, PhotoSwipe_fanc_set( $image, $attachment_id ), $content );
            }
        }
        return $content;
    }
    function PhotoSwipe_fanc_set($image, $attachment_id){
        global $post;
        if ( $post-<span class="synError">&gt;</span>post_type == 'post' ) {
            $image_src_full = wp_get_attachment_image_src( $attachment_id,'full' );
            if($image_src_full){
                $attr = 'data-size=&quot;'.$image_src_full[1].'x'.$image_src_full[2].'&quot;';
                $image = preg_replace( '/<span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> ([^&gt;</span>]+?)[\/ ]*<span class="synError">&gt;</span>/', '<span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> $1</span><span class="synConstant">' . $attr . '</span><span class="synIdentifier"> /&gt;</span>', $image );
            }
        }
        return $image;
    }
    add_filter('the_content', 'PhotoSwipe_fanc');
    add_filter('acf_the_content', 'PhotoSwipe_fanc');
}
</pre>


<h2>管理画面で権限ごとにクラス付与、要素非表示</h2>

<p>User Role Editor や Adminimize でもできますが、軽めに非表示にだけする場合</p>

<p>参考: <a href="http://www.warna.info/archives/2593/">WordPress の管理画面にユーザー権限グループに応じた class を出力する – Simple Colors</a></p>

<pre class="code lang-php" data-lang="php" data-unlink>// 管理画面で権限のclassをbodyに付与
function add_user_role_class( $admin_body_class ) {
    global $current_user;
    if ( ! $admin_body_class ) {
        $admin_body_class .= ' ';
    }
    $admin_body_class .= 'role-' . urlencode( $current_user-<span class="synError">&gt;</span>roles[0] );
    return $admin_body_class;
}
add_filter( 'admin_body_class', 'add_user_role_class' );

function my_dashboard_print_styles() {
?<span class="synError">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
<span class="synComment">/* 編集者権限では「ツール」を表示しない */</span>
<span class="synIdentifier">.role-editor</span> <span class="synIdentifier">#menu-tools</span> <span class="synIdentifier">{</span>
    <span class="synType">display</span>: <span class="synConstant">none</span>;
<span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">&lt;?php</span>
<span class="synSpecial">}</span>
add_action<span class="synSpecial">(</span> '<span class="synConstant">admin_print_styles</span>', '<span class="synConstant">my_dashboard_print_styles</span>' <span class="synSpecial">)</span>;
</pre>


<h2>スマホでは管理画面バーを隠す</h2>

<pre class="code lang-php" data-lang="php" data-unlink>// スマホではアドミンバーを隠す
function hide_admin_bar_sp() {
    $output = '
    <span class="synIdentifier">&lt;</span><span class="synStatement">style</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text/css&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synComment">@media</span><span class="synPreProc"> (</span><span class="synType">max-width</span><span class="synPreProc">: </span><span class="synConstant">782px</span><span class="synPreProc">) </span><span class="synIdentifier">{</span>
            <span class="synStatement">html</span> <span class="synIdentifier">{</span><span class="synType">margin-top</span>: <span class="synConstant">0</span> <span class="synSpecial">!important</span>;<span class="synIdentifier">}</span>
            <span class="synIdentifier">#wpadminbar</span> <span class="synIdentifier">{</span><span class="synType">display</span>: <span class="synConstant">none</span>;<span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span> ';
    echo $output;
}
add_action('wp_footer', 'hide_admin_bar_sp');
</pre>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】Vue.js入門 基礎から実践アプリケーション開発まで その5'
description: ''
publishDate: '02/06/2019 09:06:45'
---

[CONTENTS-START]
<ul>
<li>5.3 カスタムディレクティブ</li>
<li>5.4 描画関数</li>
<li>5.5 ミックスイン</li>
</ul>


<p>はスキップ。もう少し基礎的な部分を理解したらもう一度読み直そうと思います。。</p>

<h2>6 単一コンポーネントによる開発</h2>

<h3>6.2 単一コンポーネントとは</h3>

<blockquote><p>Vue.js では、上記のような単一ファイルコンポーネントのことを、単一コンポーネントの英語の呼び名の <code>Single File Components</code> の頭文字から、<code>SFC</code>、<code>sfc</code> と略して呼ぶことがあります。また、<code>Vueコンポーネント（Vue Components）</code> と呼ぶことがあります。</p></blockquote>

<ul>
<li>単一ファイルコンポーネント</li>
<li>Vue コンポーネント</li>
<li>SFC</li>
</ul>


<p>は同じ。</p>

<h3>6.5 単一コンポーネントの動作を体験する</h3>

<p>Vue CLI は <a href="https://yuheijotaki.hatenablog.com/entry/2018/12/28/025438">ネコ本のとき</a> にやったようなプロジェクト単位の作成でないと使えないと思っていましたが、単一のファイルでも <code>vue serve</code> を使えば使用が可能。<br/>
ちょっと試してみたいときなどにはいいですね。</p>

<p><code>hello.vue</code> ファイルの中身</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;message&quot;</span><span class="synIdentifier">&gt;</span>メッセージ: {{ msg }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">  </span><span class="synStatement">export</span><span class="synSpecial"> </span><span class="synStatement">default</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">    data</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      </span><span class="synStatement">return</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">        msg: </span><span class="synConstant">&quot;こんにちは&quot;</span>
<span class="synSpecial">      </span><span class="synIdentifier">}</span><span class="synSpecial">;</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span><span class="synSpecial">;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">.message</span> <span class="synIdentifier">{</span>
    <span class="synType">color</span>: <span class="synConstant">red</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
</pre>


<p>コマンドで、<code>hello.vue</code> ファイルの親フォルダに移動して、</p>

<pre class="code" data-lang="" data-unlink>$ vue serve hello.vue --open</pre>


<p>addon が必要と怒られたので、</p>

<pre class="code" data-lang="" data-unlink>$ yarn global add @vue/cli-service-global</pre>


<p>eslint がないと怒られたので、</p>

<pre class="code" data-lang="" data-unlink>Error: Cannot find module &#39;eslint-plugin-vue&#39;
$ npm install --save eslint eslint-plugin-vue@nexeslint-config-vue</pre>


<p>でもう一度、</p>

<pre class="code" data-lang="" data-unlink>$ vue serve hello.vue --open</pre>


<p>とすると、<code>http://localhost:8080/</code> の URL で <code>hello.vue</code> が展開される。</p>

<blockquote><p>ここでは、Vue CLI から、webpack と Vue Loader を使ってバンドルしています。</p></blockquote>

<h3>6.6 単一ファイルコンポーネントの機能</h3>

<h4>6.6.1 外部ファイルのインポート</h4>

<blockquote><p><code>src</code> 属性で以下のように外部ファイルの内容をインポートできます。
パスには、当該の単一ファイルコンポーネントからの相対パスを指定してください。</p></blockquote>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;./template.html&quot;</span><span class="synIdentifier">&gt;&lt;/</span>template<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;./script.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">style</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;./style.css&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
</pre>


<h4>6.6.2 スコープ付き CSS</h4>

<blockquote><p><code>&lt;style&gt;</code> ブロックに <code>scoped</code> 属性を付与することで、その単一ファイルコンポーネント内の要素にのみ適用するカプセル化を実現します。Vue.js の単一ファイルコンポーネントでは、スコープ付き CSS（Scoped CSS）と呼んでいます。</p></blockquote>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">style</span><span class="synIdentifier"> scoped&gt;</span>
  <span class="synIdentifier">.message</span> <span class="synIdentifier">{</span>
    <span class="synType">color</span>: <span class="synConstant">red</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>

<span class="synComment">&lt;!-- グローバルなCSSも同一ファイルに書ける --&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">.message</span> <span class="synIdentifier">{</span>
    <span class="synType">font-size</span>: <span class="synConstant">30px</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
</pre>


<p>とスコープすると、下記のように出力される。（例）</p>

<pre class="code lang-html" data-lang="html" data-unlink>...
<span class="synIdentifier">&lt;</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
<span class="synPreProc">  </span><span class="synIdentifier">&lt;</span><span class="synStatement">style</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text/css&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">.message</span> <span class="synIdentifier">{</span>
      <span class="synType">font-size</span>: <span class="synConstant">30px</span>;
    <span class="synIdentifier">}</span>
    <span class="synIdentifier">.message</span><span class="synSpecial">[</span><span class="synConstant">data-v-3bcf9374</span><span class="synSpecial">]</span> <span class="synIdentifier">{</span>
      <span class="synType">color</span>: <span class="synConstant">red</span>;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">head</span><span class="synIdentifier">&gt;</span>
...
</pre>


<h4>6.6.3 CSS モジュール</h4>

<p>CSS モジュールでも名前空間衝突を防止できる。</p>

<p><code>.vue</code>ファイル</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>template<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> :</span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;$style.message&quot;</span><span class="synIdentifier">&gt;</span>メッセージ: {{ msg }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">  </span><span class="synStatement">export</span><span class="synSpecial"> </span><span class="synStatement">default</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">    data</span>()<span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">      </span><span class="synStatement">return</span><span class="synSpecial"> </span><span class="synIdentifier">{</span>
<span class="synSpecial">        msg: </span><span class="synConstant">&quot;こんにちは&quot;</span>
<span class="synSpecial">      </span><span class="synIdentifier">}</span><span class="synSpecial">;</span>
<span class="synSpecial">    </span><span class="synIdentifier">}</span>
<span class="synSpecial">  </span><span class="synIdentifier">}</span><span class="synSpecial">;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">style</span><span class="synIdentifier"> module&gt;</span>
  <span class="synIdentifier">.message</span> <span class="synIdentifier">{</span>
    <span class="synType">color</span>: <span class="synConstant">blue</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
</pre>


<p>出力結果</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!-- 省略 --&gt;</span>
...
<span class="synIdentifier">&lt;</span><span class="synStatement">style</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text/css&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">.hello_message_1mO00</span> <span class="synIdentifier">{</span>
    <span class="synType">color</span>: <span class="synConstant">blue</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">style</span><span class="synIdentifier">&gt;</span>
<span class="synComment">&lt;!-- 省略 --&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;hello_message_1mO00&quot;</span><span class="synIdentifier">&gt;</span>メッセージ: こんにちは<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
...
<span class="synComment">&lt;!-- 省略 --&gt;</span>
</pre>


<p><strong>スコープ付き CSS</strong></p>

<p>接頭辞 <code>data-v-</code> とハッシュ値で構成されたカスタムデータ属性によりカプセル化</p>

<p><strong>CSS モジュール</strong></p>

<p>一意なスタイル識別子によってカプセル化。<br/>
スタイル識別子オブジェクトは算出プロパティ <code>$style</code> としてアクセス可能。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】Vue.js入門 基礎から実践アプリケーション開発まで その4'
description: ''
publishDate: '02/01/2019 10:05:46'
---

[CONTENTS-START]
<h2>5 Vue.js の高度な機能</h2>

<h3>5.1 トランジションアニメーション</h3>

<h4>5.1.1 <code>transition</code> ラッパーコンポーネント</h4>

<blockquote><p><code>transition</code> コンポーネントは、自身が囲んでいるコンポーネントあるいは要素が出入り（enter/leave）する際にトランジションを追加します。出入りは、以下の場合に起きます。</p></blockquote>

<ul>
<li><code>v-if</code> の条件が変わった時</li>
<li><code>v-show</code> の条件が変わった時</li>
<li>動的コンポーネント（<code>component</code>コンポーネント）の <code>is</code> 属性値が変わった時</li>
</ul>


<h4>5.1.2 トランジションクラス</h4>

<p><code>&lt;transition name="fade"&gt;</code> と指定すれば、<code>v-enter</code>ではなく、<code>fade-enter</code>というプレフィクスが付与される。</p>

<p>トランジションクラスの一覧</p>

<h5><code>v-enter</code></h5>

<p>要素が挿入される前に付与され、アニメーション開始時に削除されるクラスです。挿入のアニメーションの初期スタイルを適用するために使用します。</p>

<h5><code>v-enter-to</code></h5>

<p>挿入のアニメーションの開始時に付与され、アニメーション終了後に削除されるクラスです。挿入のアニメーションの終了時のスタイルを適用するために使用します。</p>

<h5><code>v-enter-active</code></h5>

<p>要素の挿入前からアニメーション終了まで付与されるクラスです。トランジションの設定を書くために使用します。</p>

<h5><code>v-leave</code></h5>

<p>削除のアニメーションの開始前に付与され、アニメーション開始時に削除されるクラスです。削除時のアニメーションの初期スタイルを適用するために使用します。</p>

<h5><code>v-leave-to</code></h5>

<p>削除のアニメーションの開始前に付与され、アニメーション終了時に削除されるクラスです。削除時のアニメーションの終了時のスタイルをあてるために使用します。</p>

<h5><code>v-leave-active</code></h5>

<p>削除のアニメーションの開始前から終了後まで付与されるクラスです。トランジションの設定を書くために使用します。</p>

<h4>5.1.3 <code>fade</code> トランジションの実装</h4>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;isShown = !isShown&quot;</span><span class="synIdentifier">&gt;</span>表示の切り替え<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>transition<span class="synIdentifier">&gt;</span> <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-show=</span><span class="synConstant">&quot;isShown&quot;</span><span class="synIdentifier">&gt;</span>Hello, world!<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span> <span class="synIdentifier">&lt;/</span>transition<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">.v-enter-active</span><span class="synSpecial">,</span>
<span class="synIdentifier">.v-leave-active</span> <span class="synIdentifier">{</span>
  <span class="synType">transition</span>: <span class="synType">opacity</span> <span class="synConstant">500ms</span> <span class="synConstant">ease-out</span>;
<span class="synIdentifier">}</span>

<span class="synIdentifier">.v-enter</span> <span class="synIdentifier">{</span>
  <span class="synType">opacity</span>: <span class="synConstant">0</span>;
<span class="synIdentifier">}</span>
<span class="synIdentifier">.v-enter-to</span> <span class="synIdentifier">{</span>
  <span class="synType">opacity</span>: <span class="synConstant">1</span>;
<span class="synIdentifier">}</span>

<span class="synIdentifier">.v-leave</span> <span class="synIdentifier">{</span>
  <span class="synType">opacity</span>: <span class="synConstant">1</span>;
<span class="synIdentifier">}</span>
<span class="synIdentifier">.v-leave-to</span> <span class="synIdentifier">{</span>
  <span class="synType">opacity</span>: <span class="synConstant">0</span>;
<span class="synIdentifier">}</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// Vue のマウント</span>
<span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      isShown: <span class="synConstant">false</span>
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>5.2 スロット</h3>

<h4>5.2.1 単一スロット</h4>

<p><code>&lt;my-button&gt;</code> 内にコンテンツがない場合は、<code>&lt;slot&gt;</code> 内の <code>OK</code> が表示される。</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- コンテンツありでコンポーネントを設置する --&gt;</span>
  <span class="synIdentifier">&lt;</span>my-<span class="synStatement">button</span><span class="synIdentifier">&gt;</span>送信する<span class="synIdentifier">&lt;/</span>my-<span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- コンテンツ無しでコンポーネントを設置する --&gt;</span>
  <span class="synIdentifier">&lt;</span>my-<span class="synStatement">button</span><span class="synIdentifier">&gt;&lt;/</span>my-<span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> MyButton = <span class="synIdentifier">{</span>
  template: `
    &lt;button&gt;
      &lt;!-- 親コンポーネントで渡されたコンテンツに差し替えられる --&gt;
      &lt;slot&gt;OK&lt;/slot&gt;
    &lt;/button&gt;
  `
<span class="synIdentifier">}</span>;

<span class="synComment">// Vue のマウント</span>
<span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  components: <span class="synIdentifier">{</span>
    MyButton: MyButton
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h4>5.2.2 名前付きスロット</h4>

<blockquote><p>スロットには <code>slot</code> 要素の <code>name</code>属性で名前を指定できます。これによって名前で指定した特定の箇所にスロットを挿入することが可能です。</p></blockquote>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>my-page<span class="synIdentifier">&gt;</span>
    <span class="synComment">&lt;!-- name 属性値が header の &lt;slot&gt; と置き換わるコンテンツ --&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier"> slot=</span><span class="synConstant">&quot;header&quot;</span><span class="synIdentifier">&gt;</span>This is my page<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
    <span class="synComment">&lt;!-- 単一スロットと置き換わるコンテンツ --&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>ここにテキストが入ります。<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synComment">&lt;!-- name 属性値が footer の &lt;slot&gt; と置き換わるコンテンツ --&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> slot=</span><span class="synConstant">&quot;footer&quot;</span><span class="synIdentifier">&gt;</span>This is footer<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span>my-page<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> MyPage = <span class="synIdentifier">{</span>
  template: `
    &lt;div&gt;
      &lt;header&gt;
        &lt;!-- ヘッダーのスロット（名前付きスロット） --&gt;
        &lt;slot name=<span class="synConstant">&quot;header&quot;</span>&gt;&lt;/slot&gt;
      &lt;/header&gt;
      &lt;main&gt;
        &lt;!-- ボディのスロット（単一スロット） --&gt;
        &lt;slot&gt;&lt;/slot&gt;
      &lt;/main&gt;
      &lt;footer&gt;
        &lt;!-- フッターのスロット（名前付きスロット） --&gt;
        &lt;slot name=<span class="synConstant">&quot;footer&quot;</span>&gt;&lt;/slot&gt;
      &lt;/footer&gt;
    &lt;/div&gt;
  `
<span class="synIdentifier">}</span>;

<span class="synComment">// Vue のマウント</span>
<span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  components: <span class="synIdentifier">{</span>
    MyPage: MyPage
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】Vue.js入門 基礎から実践アプリケーション開発まで その3'
description: ''
publishDate: '02/01/2019 08:33:22'
---

[CONTENTS-START]
<h2>4 Vue Router を活用したアプリケーション開発</h2>

<h3>4.2 ルーティングの基礎</h3>

<h4>4.2.2 ルーティング設計</h4>

<p><strong>ルート</strong> と <strong>ルーターコンストラクタ</strong> を用います。</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>router-<span class="synStatement">link</span><span class="synIdentifier"> to=</span><span class="synConstant">&quot;/top&quot;</span><span class="synIdentifier">&gt;</span>トップページ<span class="synIdentifier">&lt;/</span>router-<span class="synStatement">link</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>router-<span class="synStatement">link</span><span class="synIdentifier"> to=</span><span class="synConstant">&quot;/users&quot;</span><span class="synIdentifier">&gt;</span>ユーザー一覧ページ<span class="synIdentifier">&lt;/</span>router-<span class="synStatement">link</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>router-view<span class="synIdentifier">&gt;&lt;/</span>router-view<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://unpkg.com/vue@2.5.17&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://unpkg.com/vue-router@3.0.1&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;./assets/js/main.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// ルーターコンストラクタ</span>
<span class="synComment">// ルートオプションを渡してルーターインスタンスを生成</span>
<span class="synIdentifier">var</span> router = <span class="synStatement">new</span> VueRouter(<span class="synIdentifier">{</span>
  <span class="synComment">// ルート定義</span>
  routes: <span class="synIdentifier">[</span>
    <span class="synIdentifier">{</span>
      path: <span class="synConstant">&quot;/top&quot;</span>,
      component: <span class="synIdentifier">{</span>
        template: `&lt;div&gt;トップページです。&lt;/div&gt;`
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span>
      path: <span class="synConstant">&quot;/users&quot;</span>,
      component: <span class="synIdentifier">{</span>
        template: `&lt;div&gt;ユーザー一覧ページです。&lt;/div&gt;`
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">]</span>
<span class="synIdentifier">}</span>);

<span class="synComment">// Vue のマウント</span>
<span class="synComment">// ルーターのインスタンスをrootとなるVueインスタンスに渡す</span>
<span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  router: router,
  el: <span class="synConstant">&quot;#app&quot;</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>4.4 サンプルアプリケーションの実装</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>nav<span class="synIdentifier"> v-cloak&gt;</span>
    <span class="synComment">&lt;!-- `router-link` によるナビゲーション定義 --&gt;</span>
    <span class="synIdentifier">&lt;</span>router-<span class="synStatement">link</span><span class="synIdentifier"> to=</span><span class="synConstant">&quot;/top&quot;</span><span class="synIdentifier">&gt;</span>トップページ<span class="synIdentifier">&lt;/</span>router-<span class="synStatement">link</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span>router-<span class="synStatement">link</span><span class="synIdentifier"> to=</span><span class="synConstant">&quot;/users&quot;</span><span class="synIdentifier">&gt;</span>ユーザー一覧ページ<span class="synIdentifier">&lt;/</span>router-<span class="synStatement">link</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span>router-<span class="synStatement">link</span><span class="synIdentifier"> to=</span><span class="synConstant">&quot;/users/new?redirect=ture&quot;</span><span class="synIdentifier">&gt;</span>新規ユーザー登録<span class="synIdentifier">&lt;/</span>router-<span class="synStatement">link</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span>router-<span class="synStatement">link</span><span class="synIdentifier"> to=</span><span class="synConstant">&quot;/login&quot;</span><span class="synIdentifier"> v-show=</span><span class="synConstant">&quot;!Auth.loggedIn()&quot;</span><span class="synIdentifier">&gt;</span>ログイン<span class="synIdentifier">&lt;/</span>router-<span class="synStatement">link</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span>router-<span class="synStatement">link</span><span class="synIdentifier"> to=</span><span class="synConstant">&quot;/logout&quot;</span><span class="synIdentifier"> v-show=</span><span class="synConstant">&quot;Auth.loggedIn()&quot;</span><span class="synIdentifier">&gt;</span>ログアウト<span class="synIdentifier">&lt;/</span>router-<span class="synStatement">link</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span>nav<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>router-view<span class="synIdentifier">&gt;&lt;/</span>router-view<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://unpkg.com/vue@2.5.17&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://unpkg.com/vue-router@3.0.1&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>

<span class="synComment">&lt;!-- ユーザー一覧ページのテンプレート --&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text/x-template&quot;</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;user-list&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">  &lt;div&gt;</span>
<span class="synSpecial">    &lt;div </span><span class="synStatement">class</span><span class="synSpecial">=</span><span class="synConstant">&quot;loading&quot;</span><span class="synSpecial"> v-</span><span class="synStatement">if</span><span class="synSpecial">=</span><span class="synConstant">&quot;loading&quot;</span><span class="synSpecial">&gt;読み込み中&lt;/div&gt;</span>
<span class="synSpecial">    &lt;div v-</span><span class="synStatement">if</span><span class="synSpecial">=</span><span class="synConstant">&quot;error&quot;</span><span class="synSpecial"> </span><span class="synStatement">class</span><span class="synSpecial">=</span><span class="synConstant">&quot;error&quot;</span><span class="synSpecial">&gt;</span>
<span class="synSpecial">      </span><span class="synIdentifier">{{</span><span class="synSpecial"> error </span><span class="synIdentifier">}}</span>
<span class="synSpecial">    &lt;/div&gt;</span>
<span class="synSpecial">    </span><span class="synComment">&lt;!--</span><span class="synSpecial"> usersがロードされたら各ユーザーの名前を表示する </span><span class="synComment">--&gt;</span>
<span class="synSpecial">    &lt;div v-</span><span class="synStatement">for</span><span class="synSpecial">=</span><span class="synConstant">&quot;user in users&quot;</span><span class="synSpecial"> :key=</span><span class="synConstant">&quot;user.id&quot;</span><span class="synSpecial">&gt;</span>
<span class="synSpecial">      &lt;h2&gt;</span><span class="synIdentifier">{{</span><span class="synSpecial"> user.name </span><span class="synIdentifier">}}</span><span class="synSpecial">&lt;/h2&gt;</span>
<span class="synSpecial">    &lt;/div&gt;</span>
<span class="synSpecial">  &lt;/div&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>

<span class="synComment">&lt;!-- ユーザー詳細ページのテンプレート --&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text/x-template&quot;</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;user-detail&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">  &lt;div&gt;</span>
<span class="synSpecial">    &lt;div </span><span class="synStatement">class</span><span class="synSpecial">=</span><span class="synConstant">&quot;loading&quot;</span><span class="synSpecial"> v-</span><span class="synStatement">if</span><span class="synSpecial">=</span><span class="synConstant">&quot;loading&quot;</span><span class="synSpecial">&gt;読み込み中&lt;/div&gt;</span>
<span class="synSpecial">    &lt;div v-</span><span class="synStatement">if</span><span class="synSpecial">=</span><span class="synConstant">&quot;error&quot;</span><span class="synSpecial"> </span><span class="synStatement">class</span><span class="synSpecial">=</span><span class="synConstant">&quot;error&quot;</span><span class="synSpecial">&gt;</span>
<span class="synSpecial">      </span><span class="synIdentifier">{{</span><span class="synSpecial"> error </span><span class="synIdentifier">}}</span>
<span class="synSpecial">    &lt;/div&gt;</span>
<span class="synSpecial">    </span><span class="synComment">&lt;!--</span><span class="synSpecial"> users がロードされたら各ユーザの名前を表示する </span><span class="synComment">--&gt;</span>
<span class="synSpecial">    &lt;div v-</span><span class="synStatement">if</span><span class="synSpecial">=</span><span class="synConstant">&quot;user&quot;</span><span class="synSpecial">&gt;</span>
<span class="synSpecial">      &lt;h2&gt;</span><span class="synIdentifier">{{</span><span class="synSpecial"> user.name </span><span class="synIdentifier">}}</span><span class="synSpecial">&lt;/h2&gt;</span>
<span class="synSpecial">      &lt;p&gt;</span><span class="synIdentifier">{{</span><span class="synSpecial"> user.description </span><span class="synIdentifier">}}</span><span class="synSpecial">&lt;/p&gt;</span>
<span class="synSpecial">    &lt;/div&gt;</span>
<span class="synSpecial">  &lt;/div&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>

<span class="synComment">&lt;!-- ユーザー作成ページのテンプレート --&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text/x-template&quot;</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;user-create&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">  &lt;div&gt;</span>
<span class="synSpecial">    &lt;div </span><span class="synStatement">class</span><span class="synSpecial">=</span><span class="synConstant">&quot;sending&quot;</span><span class="synSpecial"> v-</span><span class="synStatement">if</span><span class="synSpecial">=</span><span class="synConstant">&quot;sending&quot;</span><span class="synSpecial">&gt;Sending&lt;/div&gt;</span>
<span class="synSpecial">    &lt;div&gt;</span>
<span class="synSpecial">      &lt;h2&gt;新規ユーザー作成&lt;/h2&gt;</span>
<span class="synSpecial">      &lt;div&gt;</span>
<span class="synSpecial">        &lt;label&gt;名前: &lt;/label&gt;</span>
<span class="synSpecial">        &lt;input type=</span><span class="synConstant">&quot;text&quot;</span><span class="synSpecial"> v-model=</span><span class="synConstant">&quot;user.name&quot;</span><span class="synSpecial">&gt;</span>
<span class="synSpecial">      &lt;/div&gt;</span>
<span class="synSpecial">      &lt;div&gt;</span>
<span class="synSpecial">        &lt;label&gt;説明文: &lt;/label&gt;</span>
<span class="synSpecial">        &lt;textarea v-model=</span><span class="synConstant">&quot;user.description&quot;</span><span class="synSpecial">&gt;&lt;/textarea&gt;</span>
<span class="synSpecial">      &lt;/div&gt;</span>
<span class="synSpecial">      &lt;div v-</span><span class="synStatement">if</span><span class="synSpecial">=</span><span class="synConstant">&quot;error&quot;</span><span class="synSpecial"> </span><span class="synStatement">class</span><span class="synSpecial">=</span><span class="synConstant">&quot;error&quot;</span><span class="synSpecial">&gt;</span>
<span class="synSpecial">        </span><span class="synIdentifier">{{</span><span class="synSpecial"> error </span><span class="synIdentifier">}}</span>
<span class="synSpecial">      &lt;/div&gt;</span>
<span class="synSpecial">      &lt;div&gt;</span>
<span class="synSpecial">        &lt;input type=</span><span class="synConstant">&quot;button&quot;</span><span class="synSpecial"> @click=</span><span class="synConstant">&quot;createUser&quot;</span><span class="synSpecial"> value=</span><span class="synConstant">&quot;送信&quot;</span><span class="synSpecial">&gt;</span>
<span class="synSpecial">      &lt;/div&gt;</span>
<span class="synSpecial">    &lt;/div&gt;</span>
<span class="synSpecial">  &lt;/div&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>

<span class="synComment">&lt;!-- ログインページのテンプレート --&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text/x-template&quot;</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;login&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synSpecial">  &lt;div&gt;</span>
<span class="synSpecial">    &lt;h2&gt;Login&lt;/h2&gt;</span>
<span class="synSpecial">    &lt;p v-</span><span class="synStatement">if</span><span class="synSpecial">=</span><span class="synConstant">&quot;$route.query.redirect&quot;</span><span class="synSpecial">&gt;</span>
<span class="synSpecial">      ログインしてください</span>
<span class="synSpecial">    &lt;/p&gt;</span>
<span class="synSpecial">    &lt;form @submit.prevent=</span><span class="synConstant">&quot;login&quot;</span><span class="synSpecial">&gt;</span>
<span class="synSpecial">      &lt;label&gt;&lt;input v-model=</span><span class="synConstant">&quot;email&quot;</span><span class="synSpecial"> placeholder=</span><span class="synConstant">&quot;email&quot;</span><span class="synSpecial">&gt;&lt;/label&gt;</span>
<span class="synSpecial">      &lt;label&gt;&lt;input v-model=</span><span class="synConstant">&quot;pass&quot;</span><span class="synSpecial"> placeholder=</span><span class="synConstant">&quot;password&quot;</span><span class="synSpecial"> type=</span><span class="synConstant">&quot;password&quot;</span><span class="synSpecial">&gt;&lt;/label&gt;</span>
<span class="synSpecial">      &lt;br&gt;</span>
<span class="synSpecial">      &lt;button type=</span><span class="synConstant">&quot;submit&quot;</span><span class="synSpecial">&gt;ログイン&lt;/button&gt;</span>
<span class="synSpecial">      &lt;p v-</span><span class="synStatement">if</span><span class="synSpecial">=</span><span class="synConstant">&quot;error&quot;</span><span class="synSpecial"> </span><span class="synStatement">class</span><span class="synSpecial">=</span><span class="synConstant">&quot;error&quot;</span><span class="synSpecial">&gt;ログインに失敗しました&lt;/p&gt;</span>
<span class="synSpecial">    &lt;/form&gt;</span>
<span class="synSpecial">  &lt;/div&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>

<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;./assets/js/main.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">//////////////////////////</span>
<span class="synComment">// ユーザー一覧</span>
<span class="synComment">//////////////////////////</span>
<span class="synIdentifier">var</span> getUsers = <span class="synIdentifier">function</span>(callback) <span class="synIdentifier">{</span>
  setTimeout(<span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    callback(<span class="synStatement">null</span>, <span class="synIdentifier">[</span>
      <span class="synIdentifier">{</span>
        id: 1,
        name: <span class="synConstant">&quot;Takuya Tejima&quot;</span>
      <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span>
        id: 2,
        name: <span class="synConstant">&quot;Yohei Noda&quot;</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">]</span>);
  <span class="synIdentifier">}</span>, 1000);
<span class="synIdentifier">}</span>;

<span class="synIdentifier">var</span> UserList = <span class="synIdentifier">{</span>
  template: <span class="synConstant">&quot;#user-list&quot;</span>,
  data: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      loading: <span class="synConstant">false</span>,
      users: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
        <span class="synStatement">return</span> <span class="synIdentifier">[]</span>; <span class="synComment">// 初期値の空配列</span>
      <span class="synIdentifier">}</span>,
      error: <span class="synStatement">null</span>
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>,
  <span class="synComment">// 初期化時にデータを取得する</span>
  created: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.fetchData();
  <span class="synIdentifier">}</span>,
  <span class="synComment">// $route の変更をwatchすることでルーティングが変更されたときに再度データを取得</span>
  watch: <span class="synIdentifier">{</span>
    $route: <span class="synConstant">&quot;fetchData&quot;</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    fetchData: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.loading = <span class="synConstant">true</span>;
      <span class="synComment">// 取得したデータの結果をusersに格納する</span>
      getUsers(
        <span class="synIdentifier">function</span>(err, users) <span class="synIdentifier">{</span>
          <span class="synIdentifier">this</span>.loading = <span class="synConstant">false</span>;
          <span class="synStatement">if</span> (err) <span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.error = err.toString();
          <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.users = users;
          <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>.bind(<span class="synIdentifier">this</span>)
      );
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;

<span class="synComment">//////////////////////////</span>
<span class="synComment">// ユーザー詳細</span>
<span class="synComment">//////////////////////////</span>
<span class="synIdentifier">var</span> userData = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span>
    id: 1,
    name: <span class="synConstant">&quot;Takuya Tejima&quot;</span>,
    description: <span class="synConstant">&quot;東南アジアで働くエンジニアです。&quot;</span>
  <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span>
    id: 2,
    name: <span class="synConstant">&quot;Yohei Noda&quot;</span>,
    description: <span class="synConstant">&quot;アウトドア・フットサルが趣味のエンジニアです。&quot;</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>;

<span class="synIdentifier">var</span> getUser = <span class="synIdentifier">function</span>(userId, callback) <span class="synIdentifier">{</span>
  setTimeout(<span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synIdentifier">var</span> filteredUsers = userData.filter(<span class="synIdentifier">function</span>(user) <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> user.id === parseInt(userId, 10);
    <span class="synIdentifier">}</span>);
    callback(<span class="synStatement">null</span>, filteredUsers &amp;&amp; filteredUsers<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>);
  <span class="synIdentifier">}</span>, 1000);
<span class="synIdentifier">}</span>;

<span class="synIdentifier">var</span> UserDetail = <span class="synIdentifier">{</span>
  template: <span class="synConstant">&quot;#user-detail&quot;</span>,
  data: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      loading: <span class="synConstant">false</span>,
      user: <span class="synStatement">null</span>,
      error: <span class="synStatement">null</span>
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>,
  <span class="synComment">// 初期化時にデータを取得する</span>
  created: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synIdentifier">this</span>.fetchData();
  <span class="synIdentifier">}</span>,
  <span class="synComment">// $route の変更をwatchすることでルーティングが変更されたときに再度データを取得</span>
  watch: <span class="synIdentifier">{</span>
    $route: <span class="synConstant">&quot;fetchData&quot;</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    fetchData: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.loading = <span class="synConstant">true</span>;
      <span class="synComment">// `this.$route.params.userId` に現在のURL上のパラメータに対応した userIdが格納される</span>
      getUser(
        <span class="synIdentifier">this</span>.$route.params.userId,
        <span class="synIdentifier">function</span>(err, user) <span class="synIdentifier">{</span>
          <span class="synIdentifier">this</span>.loading = <span class="synConstant">false</span>;
          <span class="synStatement">if</span> (err) <span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.error = err.toString();
          <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.user = user;
          <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>.bind(<span class="synIdentifier">this</span>)
      );
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;

<span class="synComment">//////////////////////////</span>
<span class="synComment">// ユーザー作成</span>
<span class="synComment">//////////////////////////</span>
<span class="synComment">// 擬似的にAPI経由で情報を更新したようにする</span>
<span class="synComment">// 実際のWebアプリケーションではサーバーへへPOSTリクエストを行う</span>
<span class="synIdentifier">var</span> postUser = <span class="synIdentifier">function</span>(params, callback) <span class="synIdentifier">{</span>
  setTimeout(<span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    params.id = userData.length + 1;
    userData.push(params);
    callback(<span class="synStatement">null</span>, params);
  <span class="synIdentifier">}</span>, 1000);
<span class="synIdentifier">}</span>;

<span class="synComment">// 新規ユーザー作成コンポーネント</span>
<span class="synIdentifier">var</span> UserCreate = <span class="synIdentifier">{</span>
  template: <span class="synConstant">&quot;#user-create&quot;</span>,
  data: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      sending: <span class="synConstant">false</span>,
      user: <span class="synIdentifier">this</span>.defaultUser(),
      error: <span class="synStatement">null</span>
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>,
  created: <span class="synIdentifier">function</span>() <span class="synIdentifier">{}</span>,
  methods: <span class="synIdentifier">{</span>
    defaultUser: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span>
        name: <span class="synConstant">&quot;&quot;</span>,
        description: <span class="synConstant">&quot;&quot;</span>
      <span class="synIdentifier">}</span>;
    <span class="synIdentifier">}</span>,
    createUser: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synComment">// 入力パラメーターのバリデーション</span>
      <span class="synStatement">if</span> (<span class="synIdentifier">this</span>.user.name.trim() === <span class="synConstant">&quot;&quot;</span>) <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.error = <span class="synConstant">&quot;Nameは必須です&quot;</span>;
        <span class="synStatement">return</span>;
      <span class="synIdentifier">}</span>
      <span class="synStatement">if</span> (<span class="synIdentifier">this</span>.user.description.trim() === <span class="synConstant">&quot;&quot;</span>) <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.error = <span class="synConstant">&quot;Descriptionは必須です&quot;</span>;
        <span class="synStatement">return</span>;
      <span class="synIdentifier">}</span>
      postUser(
        <span class="synIdentifier">this</span>.user,
        <span class="synIdentifier">function</span>(err, user) <span class="synIdentifier">{</span>
          <span class="synIdentifier">this</span>.sending = <span class="synConstant">false</span>;
          <span class="synStatement">if</span> (err) <span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.error = <span class="synStatement">null</span>;
          <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
            <span class="synComment">// デフォルトでフォームをリセット</span>
            <span class="synIdentifier">this</span>.user = <span class="synIdentifier">this</span>.defaultUser();
            <span class="synStatement">alert</span>(<span class="synConstant">&quot;新規ユーザーが登録されました&quot;</span>);
            <span class="synComment">// ユーザー一覧ページに戻る</span>
            <span class="synIdentifier">this</span>.$router.push(<span class="synConstant">&quot;/users&quot;</span>);
          <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>.bind(<span class="synIdentifier">this</span>)
      );
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;

<span class="synComment">//////////////////////////</span>
<span class="synComment">// ログイン・ログアウト</span>
<span class="synComment">//////////////////////////</span>
<span class="synIdentifier">var</span> Auth = <span class="synIdentifier">{</span>
  login: <span class="synIdentifier">function</span>(email, pass, cb) <span class="synIdentifier">{</span>
    <span class="synComment">// ダミーデータを使った疑似ログイン</span>
    setTimeout(<span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synStatement">if</span> (email === <span class="synConstant">&quot;vue@example.com&quot;</span> &amp;&amp; pass === <span class="synConstant">&quot;vue&quot;</span>) <span class="synIdentifier">{</span>
        <span class="synComment">// ログイン成功時はローカルストレージに taken を保存する</span>
        localStorage.token = Math.random()
          .toString(36)
          .substring(7);
        <span class="synStatement">if</span> (cb) <span class="synIdentifier">{</span>
          cb(<span class="synConstant">true</span>);
        <span class="synIdentifier">}</span>
      <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
        <span class="synStatement">if</span> (cb) <span class="synIdentifier">{</span>
          cb(<span class="synConstant">false</span>);
        <span class="synIdentifier">}</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>, 0);
  <span class="synIdentifier">}</span>,
  logout: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">delete</span> localStorage.token;
  <span class="synIdentifier">}</span>,
  loggedIn: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synComment">// ローカルストレージにtokenがあればログイン状態とみなす</span>
    <span class="synStatement">return</span> !!localStorage.token;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;

<span class="synIdentifier">var</span> Login = <span class="synIdentifier">{</span>
  template: <span class="synConstant">&quot;#login&quot;</span>,
  data: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      email: <span class="synConstant">&quot;vue@example.com&quot;</span>,
      pass: <span class="synConstant">&quot;&quot;</span>,
      error: <span class="synConstant">false</span>
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    login: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      Auth.login(
        <span class="synIdentifier">this</span>.email,
        <span class="synIdentifier">this</span>.pass,
        <span class="synIdentifier">function</span>(loggedIn) <span class="synIdentifier">{</span>
          <span class="synStatement">if</span> (!loggedIn) <span class="synIdentifier">{</span>
            <span class="synIdentifier">this</span>.error = <span class="synConstant">true</span>;
          <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
            <span class="synComment">// redirect パラメータがついている場合はそのパスに遷移</span>
            <span class="synIdentifier">this</span>.$router.replace(<span class="synIdentifier">this</span>.$route.query.redirect || <span class="synConstant">&quot;/&quot;</span>);
          <span class="synIdentifier">}</span>
        <span class="synIdentifier">}</span>.bind(<span class="synIdentifier">this</span>)
      );
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;

<span class="synComment">//////////////////////////</span>
<span class="synComment">// ルーター設定</span>
<span class="synComment">//////////////////////////</span>
<span class="synComment">// ルートオプションを渡してルーターインスタンスを生成</span>
<span class="synIdentifier">var</span> router = <span class="synStatement">new</span> VueRouter(<span class="synIdentifier">{</span>
  routes: <span class="synIdentifier">[</span>
    <span class="synIdentifier">{</span>
      path: <span class="synConstant">&quot;/top&quot;</span>,
      component: <span class="synIdentifier">{</span>
        template: `&lt;div&gt;トップページです。&lt;/div&gt;`
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span>
      path: <span class="synConstant">&quot;/users&quot;</span>,
      component: UserList
    <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span>
      <span class="synComment">// ルー定義を追加</span>
      path: <span class="synConstant">&quot;/users/new&quot;</span>,
      component: UserCreate,
      beforeEnter: <span class="synIdentifier">function</span>(to, from, next) <span class="synIdentifier">{</span>
        <span class="synComment">// 認証されていない状態でアクセスした時はloginページに遷移する</span>
        <span class="synStatement">if</span> (!Auth.loggedIn()) <span class="synIdentifier">{</span>
          next(<span class="synIdentifier">{</span>
            path: <span class="synConstant">&quot;/login&quot;</span>,
            query: <span class="synIdentifier">{</span> redirect: to.fullPath <span class="synIdentifier">}</span>
          <span class="synIdentifier">}</span>);
        <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
          <span class="synComment">// 認証済みであればそのまま新規ユーザー作成ページに進む</span>
          next();
        <span class="synIdentifier">}</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span>
      path: <span class="synConstant">&quot;/users/:userId&quot;</span>,
      component: UserDetail
    <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span>
      path: <span class="synConstant">&quot;/login&quot;</span>,
      component: Login
    <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span>
      path: <span class="synConstant">&quot;/logout&quot;</span>,
      beforeEnter: <span class="synIdentifier">function</span>(to, from, next) <span class="synIdentifier">{</span>
        Auth.logout();
        next(<span class="synConstant">&quot;/top&quot;</span>);
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>,
    <span class="synIdentifier">{</span>
      <span class="synComment">// 定義されていないパスへの対応。トップページへリダイレクトする。</span>
      path: <span class="synConstant">&quot;*&quot;</span>,
      redirect: <span class="synConstant">&quot;/top&quot;</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">]</span>
<span class="synIdentifier">}</span>);

<span class="synComment">//////////////////////////</span>
<span class="synComment">// Vue のマウント</span>
<span class="synComment">//////////////////////////</span>
<span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  data: <span class="synIdentifier">{</span>
    Auth: Auth
  <span class="synIdentifier">}</span>,
  router: router,
  el: <span class="synConstant">&quot;#app&quot;</span>
<span class="synIdentifier">}</span>);
</pre>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '2019年1月 振り返り'
description: ''
publishDate: '02/01/2019 07:56:02'
---

[CONTENTS-START]
<p>毎月のまとめとして月次の振り返りをしようと思います。</p>

<h2>結果</h2>

<h3>ブログ</h3>

<p><strong>目標：月 12 回（週 3 回）更新</strong><br/>
<strong>結果：月 22 回 更新</strong></p>

<h3>読書</h3>

<p><strong>目標：月 1 冊</strong><br/>
<strong>結果：月 2 冊</strong></p>

<h2>反省点など</h2>

<p>Vue.js は本を何冊かやっているが、実際の案件で用いるところまでは踏み込めてない印象。<br/>
AMP など、その他の技術に関しても少し自発的に調べたがあまりモノにはなっていないかも。<br/>
タスクランナー周り、コマンドやビルドなど、フロントエンドで用いるツールに関しては、会社の業務でだいぶ億劫な気持ちはなくなった。</p>

<p>1 月から新しい会社だったので、そちらへの慣れも必要で体調管理は気をつけて生活習慣を維持できたと思う。<br/>
少し月末にかけてペースが失速気味になってしまったところが反省点</p>

<h2>来月に向けて</h2>

<p>Vue.js 入門本を一通り写経し終わったら、自分で手を動かして独自の機能を持ったサイトを書いてみる。<br/>
3 月までにはポートフォリオサイトを Vue で作れるようにする。</p>

<p>読書に関しては技術本、デザイン（UI/UX）の本、自己啓発本 の 3 冊読めるようにしたい。
学習やアウトプットのペースはできるときに一気にやることよりも、今は一定のペース守って癖をつけることを優先でやっていきたいと思う。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】Vue.js入門 基礎から実践アプリケーション開発まで その2'
description: ''
publishDate: '01/29/2019 09:31:21'
---

[CONTENTS-START]
<h2>3 コンポーネントの基礎</h2>

<h3>3.2 Vue コンポーネントの定義</h3>

<h4>3.2.1 グローバルコンポーネントの定義</h4>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!-- グローバルコンポーネント --&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>fruits-list-<span class="synStatement">title</span><span class="synIdentifier">&gt;&lt;/</span>fruits-list-<span class="synStatement">title</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>fruits-list-description<span class="synIdentifier">&gt;&lt;/</span>fruits-list-description<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>fruits-list-<span class="synStatement">table</span><span class="synIdentifier">&gt;&lt;/</span>fruits-list-<span class="synStatement">table</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>fruits-list<span class="synIdentifier">&gt;&lt;/</span>fruits-list<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// グローバルコンポーネント</span>
Vue.component(<span class="synConstant">&quot;fruits-list-title&quot;</span>, <span class="synIdentifier">{</span>
  template: `&lt;h1&gt;一覧&lt;/h1&gt;`
<span class="synIdentifier">}</span>);

Vue.component(<span class="synConstant">&quot;fruits-list-description&quot;</span>, <span class="synIdentifier">{</span>
  template: `&lt;p&gt;ここに説明が入ります&lt;/p&gt;`
<span class="synIdentifier">}</span>);

Vue.component(<span class="synConstant">&quot;fruits-list-table&quot;</span>, <span class="synIdentifier">{</span>
  template: `
  &lt;table&gt;
    &lt;tr&gt;
      &lt;th&gt;季節&lt;/th&gt;
      &lt;th&gt;フルーツ&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;春&lt;/td&gt;
      &lt;td&gt;いちご&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;夏&lt;/td&gt;
      &lt;td&gt;スイカ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;
`
<span class="synIdentifier">}</span>);

<span class="synComment">// 子コンポーネント</span>
Vue.component(<span class="synConstant">&quot;fruits-list&quot;</span>, <span class="synIdentifier">{</span>
  template: `&lt;div&gt;&lt;fruits-list-table&gt;&lt;/fruits-list-table&gt;&lt;/div&gt;`
<span class="synIdentifier">}</span>);

<span class="synComment">// Vue のマウント</span>
<span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>
<span class="synIdentifier">}</span>);
</pre>


<h4>3.2.3 ローカルコンポーネントの定義</h4>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!-- ローカルコンポーネント --&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>fruits-list-<span class="synStatement">title</span><span class="synIdentifier">&gt;&lt;/</span>fruits-list-<span class="synStatement">title</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>fruits-list-description<span class="synIdentifier">&gt;&lt;/</span>fruits-list-description<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>fruits-list-<span class="synStatement">table</span><span class="synIdentifier">&gt;&lt;/</span>fruits-list-<span class="synStatement">table</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>fruits-list<span class="synIdentifier">&gt;&lt;/</span>fruits-list<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// ローカルコンポーネント</span>
<span class="synComment">// Vue のマウント</span>
<span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  components: <span class="synIdentifier">{</span>
    <span class="synConstant">&quot;fruits-list-title&quot;</span>: <span class="synIdentifier">{</span>
      template: `&lt;h1&gt;一覧&lt;/h1&gt;`
    <span class="synIdentifier">}</span>,
    <span class="synConstant">&quot;fruits-list-description&quot;</span>: <span class="synIdentifier">{</span>
      template: `&lt;p&gt;ここに説明が入ります&lt;/p&gt;`
    <span class="synIdentifier">}</span>,
    <span class="synConstant">&quot;fruits-list-table&quot;</span>: <span class="synIdentifier">{</span>
      template: `
      &lt;table&gt;
        &lt;tr&gt;
          &lt;th&gt;季節&lt;/th&gt;
          &lt;th&gt;フルーツ&lt;/th&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;春&lt;/td&gt;
          &lt;td&gt;いちご&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;夏&lt;/td&gt;
          &lt;td&gt;スイカ&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;`
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>3.3 コンポーネント間の通信</h3>

<p><strong>親コンポーネント → 子コンポーネント への通信： <code>props</code></strong><br/>
<strong>子コンポーネント → 親コンポーネント への通信： <code>event</code></strong></p>

<h4>3.3.1 親コンポーネントから子コンポーネントへデータ伝播</h4>

<p><code>props</code> の例</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!-- 親が `fruits-component` にマウントされたインスタンス --&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">ol</span><span class="synIdentifier">&gt;</span>
    <span class="synComment">&lt;!-- `v-for` で繰り返した各fruitを `props(fruits-item)に与えている` --&gt;</span>
    <span class="synIdentifier">&lt;</span>fruits-item-name
<span class="synIdentifier">      v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;fruit in fruitsItems&quot;</span>
<span class="synIdentifier">      :key=</span><span class="synConstant">&quot;fruit.name&quot;</span>
<span class="synIdentifier">      :fruits-item=</span><span class="synConstant">&quot;fruit&quot;</span>
<span class="synIdentifier">    &gt;&lt;/</span>fruits-item-name<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">ol</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink>Vue.component(<span class="synConstant">&quot;fruits-item-name&quot;</span>, <span class="synIdentifier">{</span>
  props: <span class="synIdentifier">{</span>
    fruitsItem: <span class="synIdentifier">{</span>
      <span class="synComment">// テンプレート中ではケバブケース</span>
      type: <span class="synType">Object</span>, <span class="synComment">// オブジェクトかどうか</span>
      required: <span class="synConstant">true</span> <span class="synComment">// このコンポーネントには必須なので `true`</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  template: <span class="synConstant">&quot;&lt;li&gt;{{fruitsItem.name}}&lt;/li&gt;&quot;</span>
<span class="synIdentifier">}</span>);

<span class="synComment">// Vue のマウント</span>
<span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    <span class="synComment">// 親では配列だが、`v-for` で `Object` として渡している</span>
    fruitsItems: <span class="synIdentifier">[{</span> name: <span class="synConstant">&quot;梨&quot;</span> <span class="synIdentifier">}</span>, <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;いちご&quot;</span> <span class="synIdentifier">}]</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h4>3.3.2 子コンポーネントから親コンポーネントへデータ伝播</h4>

<p>カスタムイベントを使用</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synComment">&lt;!-- カスタムイベントを `v-on` で補足 --&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;fruit in fruits&quot;</span><span class="synIdentifier">&gt;</span>
    {{ fruit.name }}:
    <span class="synIdentifier">&lt;</span>counter-<span class="synStatement">button</span><span class="synIdentifier"> v-on:increment=</span><span class="synConstant">&quot;incrementCartStatus()&quot;</span><span class="synIdentifier">&gt;&lt;/</span>counter-<span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>合計: {{ total }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> counterButton = Vue.extend(<span class="synIdentifier">{</span>
  template: `&lt;span&gt;<span class="synIdentifier">{{</span>counter<span class="synIdentifier">}}</span>個&lt;button v-on:click=<span class="synConstant">&quot;addToCart&quot;</span>&gt;追加&lt;/button&gt;&lt;/span&gt;`,
  data: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      counter: 0
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    addToCart: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.counter += 1;
      <span class="synIdentifier">this</span>.$emit(<span class="synConstant">&quot;increment&quot;</span>); <span class="synComment">// `increment`カスタムイベントの発火</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);

<span class="synComment">// Vue のマウント</span>
<span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  components: <span class="synIdentifier">{</span>
    <span class="synConstant">&quot;counter-button&quot;</span>: counterButton
  <span class="synIdentifier">}</span>,
  data: <span class="synIdentifier">{</span>
    total: 0,
    fruits: <span class="synIdentifier">[{</span> name: <span class="synConstant">&quot;梨&quot;</span> <span class="synIdentifier">}</span>, <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;いちご&quot;</span> <span class="synIdentifier">}]</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    incrementCartStatus: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.total += 1;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>3.4 コンポーネント間の設計</h3>

<h4>3.3.4 ログインフォームコンポーネントの作成</h4>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;login-example&quot;</span><span class="synIdentifier">&gt;&lt;</span>user-login<span class="synIdentifier">&gt;&lt;/</span>user-login<span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// コンポーネントの定義</span>
Vue.component(<span class="synConstant">&quot;user-login&quot;</span>, <span class="synIdentifier">{</span>
  template: `
  &lt;div id=<span class="synConstant">&quot;login-template&quot;</span>&gt;
    &lt;div&gt;
      &lt;input type=<span class="synConstant">&quot;text&quot;</span> placeholder=<span class="synConstant">&quot;ログインID&quot;</span> v-model=<span class="synConstant">&quot;userid&quot;</span>&gt;
    &lt;/div&gt;
    &lt;div&gt;
      &lt;input type=<span class="synConstant">&quot;password&quot;</span> placeholder=<span class="synConstant">&quot;パスワード&quot;</span> v-model=<span class="synConstant">&quot;password&quot;</span>&gt;
    &lt;/div&gt;
    &lt;button @click=<span class="synConstant">&quot;login()&quot;</span>&gt;ログイン&lt;/button&gt;
  &lt;/div&gt;
  `,
  data: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      userid: <span class="synConstant">&quot;&quot;</span>,
      password: <span class="synConstant">&quot;&quot;</span>
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    login: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      auth.login(<span class="synIdentifier">this</span>.userid, <span class="synIdentifier">this</span>.password);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);

<span class="synIdentifier">var</span> auth = <span class="synIdentifier">{</span>
  login: <span class="synIdentifier">function</span>(id, pass) <span class="synIdentifier">{</span>
    <span class="synStatement">window</span>.<span class="synStatement">alert</span>(<span class="synConstant">&quot;userid:&quot;</span> + id + <span class="synConstant">&quot;</span><span class="synSpecial">\n</span><span class="synConstant">&quot;</span> + <span class="synConstant">&quot;password:&quot;</span> + pass);
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;

<span class="synComment">// Vue のマウント</span>
<span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#login-example&quot;</span>
<span class="synIdentifier">}</span>);
</pre>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AMP amp-position-observer と amp-animation'
description: ''
publishDate: '01/27/2019 16:51:36'
---

[CONTENTS-START]
<p>AMP の <a href="https://www.ampproject.org/docs/reference/components/amp-position-observer">amp-position-observer</a> と <a href="https://www.ampproject.org/docs/reference/components/amp-animation">amp-animation</a>を使って、スクロール量に応じてナビゲーションの現在地のスタイルを変更するというのをやってみる。</p>

<h2>結果</h2>

<p class="codepen" data-height="400" data-theme-id="0" data-default-tab="html,result" data-user="yuheijotaki" data-slug-hash="zeqZVd" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="AMP amp-position-observer &amp;amp; amp-animation">
  <span>See the Pen <a href="https://codepen.io/yuheijotaki/pen/zeqZVd/">
  AMP amp-position-observer &amp; amp-animation</a> by jotaki (<a href="https://codepen.io/yuheijotaki">@yuheijotaki</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>


<script async src="https://static.codepen.io/assets/embed/ei.js"></script>


<h2>つまづいた点など</h2>

<h3><code>amp-position-observer</code> の取得フラグや位置の範囲</h3>

<p>その名の通り、ポジションを監視しますという AMP JS なのですが、デモを見ても分かる通り、どうやらブラウザ上で画面に表示されている領域にいる場合は <code>true</code> 状態といった模様。<br/>
つまり、</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span>section<span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;section_01&quot;</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;content&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>amp-position-observer<span class="synIdentifier"> on=</span><span class="synConstant">&quot;enter:section_01_on.start; exit:section_01_off.start&quot;</span><span class="synIdentifier"> layout=</span><span class="synConstant">&quot;nodisplay&quot;</span><span class="synIdentifier">&gt;&lt;/</span>amp-position-observer<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>section_01<span class="synIdentifier">&lt;/</span><span class="synStatement">h2</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span>section<span class="synIdentifier">&gt;</span>
</pre>


<p>例の場合、<code>&lt;section id="section_01"&gt;</code> の要素がブラウザ上で見えている限りは <code>true</code> の状態。</p>

<p>今回のようにナビゲーションの現在値を切り替える実装したい場合は、各セクションの高さがある場合は問題ないけれど、ブラウザの高さより低いコンテンツで実装する際は別方法か、<code>&lt;amp-position-observer&gt;</code> のマーカー自体を別 <code>&lt;div&gt;</code> などにいれてあげて処理しないと難しいかもしれない。（それでも無理っぽいですが）</p>

<h3><code>amp-position-observer</code> では引数が渡せない</h3>

<p>各箇所に <code>&lt;amp-position-observer&gt;</code> 設置するのはいいとして、アニメーション処理側の <code>&lt;amp-animation&gt;</code> に引数などが渡せないっぽいので、ひとつのナビとセクションごとに処理を記述する必要がありかなり冗長になってしまいました。</p>

<p>この点含め、日本語のドキュメントやブログもあまりないのでなかなか細々した処理系は結構難易度高いなと感じました。</p>

<h3><code>amp-animation</code> の <code>"keyframes"</code> では使えるプロパティが限られる。</h3>

<p>CSS3 でできるアニメーションはだいたいいけると思ってたのですが、 <a href="https://www.ampproject.org/ja/docs/design/responsive/style_pages">サポートされる CSS – AMP</a> の 「制約のあるスタイル
」である通り、<code>opacity</code>、<code>transform</code>、<code>-vendorPrefix-transform</code>しか動かせない。<br/>
なので仮にボーダー引くとかのアニメーションする場合は空 span 作って無理くりやるしかなさそうです。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'AMP 雑感'
description: ''
publishDate: '01/27/2019 08:45:49'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190127084534.png" alt="f:id:jotaki:20190127084534p:plain" title="f:id:jotaki:20190127084534p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>AMP を少し触ってみたので所感をメモしておきます。</p>

<h2>おおまかな制約</h2>

<h3>HTML</h3>

<ul>
<li>基本的に HTML のタグ要素は使える。</li>
<li>使えるタグは <a href="https://github.com/ampproject/amphtml/blob/master/spec/amp-tag-addendum.md">AMP HTML Tag Addendum</a> に記載。</li>
<li><code>&lt;img&gt;</code> 要素は <code>&lt;amp-img&gt;</code> で対応する。<code>width</code>, <code>height</code> 属性は必須。</li>
</ul>


<h3>CSS</h3>

<ul>
<li>CSS はインラインで記述。</li>
<li>基本的なプロパティと値は使える。ただし<a href="https://www.ampproject.org/ja/docs/design/responsive/style_pages">制約のあるスタイル</a>を除く。</li>
</ul>


<h3>JavaScript</h3>

<ul>
<li>ピュアな JavaScript は使えない。</li>
<li><a href="https://github.com/ampproject/amphtml/tree/master/src">AMP JS ライブラリ</a> からライブラリを読み込み、箇所箇所で <code>&lt;script type="application/ld+json"&gt;</code> 形式でオプション等の記述をする。</li>
</ul>


<h2>検証方法</h2>

<p>ブラウザ URL の末尾に <code>#development=1</code> をつけてコンソール確認。<br/>
<code>Powered by AMP ⚡ HTML – Version **********</code> など出力されれば AMP 可</p>

<p>詳しくは <a href="https://www.ampproject.org/ja/docs/fundamentals/validate">ブラウザの Developer Console</a> を参照する。</p>

<h2>その他ドキュメント</h2>

<ul>
<li><a href="https://www.ampproject.org/ja/docs/getting_started/create">公式スタートガイド</a></li>
<li><a href="https://www.ampproject.org/ja/docs/reference/components">公式リファレンス</a></li>
</ul>


<p>公式のドキュメント</p>

<ul>
<li><a href="https://ampbyexample.com/">Learn AMP by Example</a></li>
</ul>


<p>AMP で実装したデモを紹介</p>

<ul>
<li><a href="https://developers-jp.googleblog.com/search/label/AMP">Google Developers Japan: AMP</a></li>
</ul>


<p>Google Developers Japan のブログ。AMP の最新情報など</p>

<ul>
<li><a href="https://codepen.io/collection/nMJYrv/">Visual Effects in AMP - a Collection by Ali Ghassemi on CodePen</a></li>
</ul>


<p><code>amp-position-observer</code> と <code>amp-animation</code> を使ったデモ集。<br/>
ページトップだけでなくいろいろできそう。</p>

<ul>
<li><a href="https://www.craneto.co.jp/archives/467/">AMP HTML 入門 – AMP HTML を効率良く身につける – | Crane &amp; to.</a></li>
<li><a href="https://masup.net/2015/10/fits-amp-html.shtml">AMP(Accelerated Mobile Pages) HTML してみたという話 | masuP.net</a></li>
<li><a href="https://bulan.co/swings/amp-builds/">既存の Web ページを AMP に対応させてみる | Swings</a></li>
<li><a href="https://firstlayout.net/roadmap-of-amp-in-2019/">2019 年の AMP のロードマップ</a></li>
</ul>


<p>AMP 周りに詳しいブログなど</p>

<h2>感想</h2>

<p>今回調べたのはある要件があって、AMP でどこまで JS 使って実装可能かということでしたが、<br/>
現状の制約のなかだとなかなか難しいので、<a href="https://www.suzukikenichi.com/blog/js-in-amp-with-web-worker/">JS in AMP</a> などの実装が来ないかなと言う感じです。<br/>
ただ AMP ってそういう制約のなかで高速化していく仕組みと思っていたので、逆に何でもできることが正義じゃない感が少しします。</p>

<p>そういうところで、今の所 AMP JS のライブラリぜんぶ把握して、使いこなせるようにするまで学習するというのは、ちょっとモチベーションは湧かないかなと感じました。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Atom をマークダウンエディタとして使う'
description: ''
publishDate: '01/24/2019 22:12:32'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190124221203.png" alt="f:id:jotaki:20190124221203p:plain" title="f:id:jotaki:20190124221203p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>VS Code の MarkdownPreview が、開いていた右ペインのファイルを閉じてしまったり、相変わらず日本語変換が入力している文字に重なって使いづらいので<code>.md</code> ファイルだけ Atom で編集できるように設定しました。</p>

<p>主に <a href="https://qiita.com/kouichi-c-nakamura/items/5b04fb1a127aac8ba3b0">Atom を Markdown エディタとして整備 - Qiita</a> 感じなノリですが、そこまでパッケージ入れなくても自分仕様にできたのでそのメモです。</p>

<h2>Editor エディター設定</h2>

<p>Font Family: <code>Source Han Code JP</code><br/>
Line Height: <code>1.6</code><br/>
Show Invisibles: <code>on</code> （半角スペースを可視化）<br/>
Now Word Characters: <code>./\\()\"':,.;&lt;&gt;~!@#%^&amp;*|+=[]{}`~?</code> （クリックできる区切り文字）</p>

<h2>Package パッケージ</h2>

<h3><a href="https://atom.io/packages/markdown-preview">markdown-preview</a></h3>

<p>これはデフォルトで入っています。<br/>
<code>ctrl</code> + <code>shift</code> + <code>M</code> のショートカットで右ペインにプレビュー開始。<br/>
Use Github.com style: <code>on</code> で Github の<code>.md</code>プレビュー風スタイルになる。</p>

<h3><a href="https://atom.io/packages/markdown-scroll-sync">markdown-scroll-sync</a></h3>

<p>マークダウンプレビューのスクロール位置同期</p>

<h3><a href="https://atom.io/packages/prettier-atom">prettier-atom</a></h3>

<p>コード整形<br/>
Format Files on Save: <code>on</code> で ファイル保存時に整形が動作する</p>

<h3><a href="https://atom.io/packages/show-ideographic-space">show-ideographic-space</a></h3>

<p>全角スペースを可視化</p>

<h2>Themes テーマ</h2>

<p>Atom は UI テーマとエディタとで分かれるらしい<br/>
分かりづらかったのですが、Theme > Install > 検索窓の右のタブを <code>Themes</code> に切り替えてインストールする必要があります。</p>

<p>UI Theme: <code>One Dark</code><br/>
Syntax Theme: <code>Spacegray Atom Dark</code></p>

<h2>styles.less 独自 CSS</h2>

<p>テーマに上書きする形で CSS の調整を行える。<br/>
半角スペースを可視化したものの見えにくかったので、Theme > your stylesheet をクリックして下記を追記<br/>
参考：<a href="https://qiita.com/shibukk/items/e62931a7a3b6dc617623">Atom のスペースをはっきり見えるようにする - Qiita</a></p>

<pre class="code lang-sass" data-lang="sass" data-unlink><span class="synComment">// 半角スペースを見やすくする</span>
@invisible-color: rgba(255<span class="synSpecial">,</span> 255<span class="synSpecial">,</span> 255<span class="synSpecial">,</span> 0<span class="synSpecial">.</span><span class="synType">3</span>);
atom-<span class="synType">text</span>-editor<span class="synSpecial">.</span><span class="synType">editor</span> <span class="synIdentifier">{</span>
  <span class="synSpecial">.</span><span class="synType">indent-guide</span> <span class="synIdentifier">{</span>
    <span class="synType">color</span>: @invisible-color;
  <span class="synIdentifier">}</span>
  <span class="synSpecial">.</span><span class="synType">invisible-character</span> <span class="synIdentifier">{</span>
    <span class="synType">color</span>: @invisible-color;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<h2>Keybindings ショートカット</h2>

<p>タブ移動が Sublime の慣れで順番通りが良いので、<code>keymap.cson</code> に下記を追記。<br/>
参考：<a href="https://qiita.com/takuchan9104/items/237dd39bf5987879b106">Atom 1.7 からタブ切り替えが使いづらくてイライラするので従来式に戻す - Qiita</a></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synConstant">'body'</span>:
  <span class="synConstant">'ctrl-tab ^ctrl'</span>: <span class="synConstant">'unset!'</span>
  <span class="synConstant">'ctrl-tab'</span>: <span class="synConstant">'pane:show-next-item'</span>
  <span class="synConstant">'ctrl-shift-tab ^ctrl'</span>: <span class="synConstant">'unset!'</span>
  <span class="synConstant">'ctrl-shift-tab'</span>: <span class="synConstant">'pane:show-previous-item'</span>
</pre>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】Vue.js入門 基礎から実践アプリケーション開発まで その1'
description: ''
publishDate: '01/24/2019 21:04:17'
---

[CONTENTS-START]
<p>Vue.js入門 を読んでいます。<br/>
ネコ本、イヌ本を読んだので実践編と勝手に意気込んでいましたが、どうやら逆で概要や考え方的な内容からの記載が多く、より深く学べそうな気がします。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297100916/hatena-blog-22/"><img src="/images/hatena/20190726111853.jpg" class="hatena-asin-detail-image" alt="Vue.js入門 基礎から実践アプリケーション開発まで" title="Vue.js入門 基礎から実践アプリケーション開発まで"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297100916/hatena-blog-22/">Vue.js入門 基礎から実践アプリケーション開発まで</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 川口和也,喜多啓介,野田陽平,手島拓也,片山真也</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/09/22</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4297100916/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>2章までですが、気になった箇所を引用をしながら思ったことをメモしておきます。</p>

<h2>2 Vue.js の基本</h2>

<h3>2.1 Vue.js でUIを構築する際の考え方</h3>

<h4>2.1.2 Vue.js のUI構築</h4>

<blockquote><p>jQueryやDOM APIを利用したUIの構築では、DOMツリーやDOM要素がUIの状態を持ってしまうという問題がありました。これだとDOMツリー構造の変更が本来はDOMツリーやDOM要素と関係のないUIの状態を扱うロジックに影響を及ぼしてしまいます。仮にJavaScriptオブジェクトとしてUIの状態を持たせても、それをどのようにDOMツリーに反映するかまた別問題として出てきます。</p></blockquote>

<hr />

<blockquote><p>Vue.jsでは、UIの状態をJavaScriptオブジェクトとして、DOMツリーやDOM要素とは完全に切り離した上で、全勝で説明のあったリアクティブな単方向のデータバインディングにより、UIの状態の変更に伴う要素の更新を自動で行うことで、この問題を解決しています。</p></blockquote>

<p>ここではjQueryとの、UI構築やコーディングスタイルの比較が書かれています。
自分の頭のなかでは、「jQueryでできること」=「Vue.jsでもできる」という解釈だけでいてしまって、
尚且JavaScriptのライブラリ（フレームワーク）を扱うのが初めてだったので、構造的な視点でのVue.jsの特長を知るというところでは大変参考になりました。</p>

<h4>2.11.1 イベントオブジェクト</h4>

<h5>算出プロパティ <code>computed</code> について</h5>

<blockquote><p>依存しているデータが変更されない限り、一度計算した結果をキャッシュする特徴をもっています。つまり、サンプルで用いた <code>totalPrice</code> の場合、一度計算をおこなった後は購入個数が変わるまで再計算をおこなわないということです。</p></blockquote>

<h5>メソッドプロパティ <code>methods</code> について</h5>

<blockquote><p>算出プロパティと似た機能としてVueインスタンスにはメソッドもあります。以下のように合計金額を計算するメソッドを定義してテンプレートで呼び出す(<code>{{ totalPrice() }}</code>)ことでも同様のことを実現できます。メソッドはキャッシュされません。メソッドが呼ばれる度に計算がされます。</p></blockquote>

<h2>コード</h2>

<p>サンプルみながら書いたコードを貼っておきます。</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synComment">&lt;!-- `v-on` でイベントが発生したときに属性値で指定した式を評価する --&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in items&quot;</span><span class="synIdentifier"> v-bind:key=</span><span class="synConstant">&quot;item.name&quot;</span><span class="synIdentifier">&gt;</span>
        {{ item.name }}の個数: <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;number&quot;</span><span class="synIdentifier"> v-on:input=</span><span class="synConstant">&quot;item.quantity = $event.target.value&quot;</span><span class="synIdentifier"> v-bind:</span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item.quantity&quot;</span><span class="synIdentifier"> min=</span><span class="synConstant">&quot;0&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier">&gt;</span>
    <span class="synComment">&lt;!-- `v-on` ディレクティブの代わりに `v-model` を津使う --&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in items&quot;</span><span class="synIdentifier"> v-bind:key=</span><span class="synConstant">&quot;item.name&quot;</span><span class="synIdentifier">&gt;</span>
        {{ item.name }}の個数: <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;number&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;item.quantity&quot;</span><span class="synIdentifier"> min=</span><span class="synConstant">&quot;0&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-bind:</span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;errorMessageStyle&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
        <span class="synComment">&lt;!-- 各商品の単価と購入個数をリスト表示する --&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in items&quot;</span><span class="synIdentifier"> v-bind:key=</span><span class="synConstant">&quot;item.name&quot;</span><span class="synIdentifier">&gt;</span>
          {{ item.name }}: {{ item.price }} x {{ item.quantity }} = {{ item.price * item.quantity | numberWithDelimiter }} 円
        <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ items[0].name }} : {{ items[0].price }} x {{ items[0].quantity }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ items[0].name }} : {{ items[0].price * items[0].quantity }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>フィルタ処理例 : {{ 1000 | numberWithDelimiter }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>小計 : {{ totalPrice | numberWithDelimiter }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>合計（税込み） : {{ totalPriceWithTax | numberWithDelimiter }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-bind:</span><span class="synType">title</span><span class="synIdentifier">=</span><span class="synConstant">&quot;loggedInButton&quot;</span><span class="synIdentifier">&gt;</span>購入<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-bind:</span><span class="synType">disabled</span><span class="synIdentifier">=</span><span class="synConstant">&quot;!canBuy&quot;</span><span class="synIdentifier">&gt;</span>購入<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-show=</span><span class="synConstant">&quot;!canBuy&quot;</span><span class="synIdentifier">&gt;</span>
        {{ 1000 | numberWithDelimiter }}円以上からご購入いただけます
      <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-bind:</span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{shark: true, mecha: false}&quot;</span><span class="synIdentifier">&gt;</span>テキスト<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
      <span class="synComment">&lt;!-- JavaScript の式を用いた場合 `{error: !canBuy}` --&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-bind:</span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{error: !canBuy}&quot;</span><span class="synIdentifier">&gt;</span>1000円以上からご購入いただけます<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
      <span class="synComment">&lt;!-- クラスで定義した場合 `.errorMessageClass` --&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-bind:</span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;errorMessageClass&quot;</span><span class="synIdentifier">&gt;</span>1000円以上からご購入いただけます<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
      <span class="synComment">&lt;!-- ボタンが押されたら、メソッドを呼び出す --&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-bind:</span><span class="synType">disabled</span><span class="synIdentifier">=</span><span class="synConstant">&quot;!canBuy&quot;</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;doBuy&quot;</span><span class="synIdentifier">&gt;</span>購入<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.22/dist/vue.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;./assets/js/main.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// 商品の配列を作成</span>
<span class="synIdentifier">var</span> items = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span>
    name: <span class="synConstant">'鉛筆'</span>,
    price: 300,
    quantity: 1
  <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span>
    name: <span class="synConstant">'ノート'</span>,
    price: 400,
    quantity: 1
  <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span>
    name: <span class="synConstant">'消しゴム'</span>,
    price: 500,
    quantity: 0
  <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>

<span class="synIdentifier">var</span> vm = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">'#app'</span>,
  data: <span class="synIdentifier">{</span>
    items: items,
    loggedInButton: <span class="synConstant">'ログイン済みのため購入できます。'</span>,
    <span class="synComment">// canBuy: false</span>
  <span class="synIdentifier">}</span>,
  filters: <span class="synIdentifier">{</span>
    <span class="synComment">// この説で追加したフィルタの処理</span>
    numberWithDelimiter: <span class="synIdentifier">function</span> (value) <span class="synIdentifier">{</span>
      <span class="synStatement">if</span> (!value) <span class="synIdentifier">{</span>
        <span class="synStatement">return</span> <span class="synConstant">'0'</span>
      <span class="synIdentifier">}</span>
      <span class="synStatement">return</span> value.toString().replace(<span class="synConstant">/(\d)(?=(\d{3})+$)/g</span>, <span class="synConstant">'$1,'</span>);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    doBuy: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synComment">// 本来はここで、サーバーと通信を行う</span>
      <span class="synStatement">alert</span>(<span class="synIdentifier">this</span>.totalPriceWithTax + <span class="synConstant">'円のお買い上げ!'</span>);
      <span class="synIdentifier">this</span>.items.forEach(<span class="synIdentifier">function</span> (item) <span class="synIdentifier">{</span>
        item.quantity = 0;
      <span class="synIdentifier">}</span>);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  computed: <span class="synIdentifier">{</span>
    totalPrice: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synComment">// this経由でインスタンス内のデータにアクセス</span>
      <span class="synStatement">return</span> <span class="synIdentifier">this</span>.items.reduce(<span class="synIdentifier">function</span> (sum, item) <span class="synIdentifier">{</span>
        <span class="synStatement">return</span> sum + (item.price * item.quantity);
      <span class="synIdentifier">}</span>, 0)
    <span class="synIdentifier">}</span>,
    totalPriceWithTax: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synComment">// 算出プロパティに依存した算出プロパティも定義できる</span>
      <span class="synStatement">return</span> Math.floor(<span class="synIdentifier">this</span>.totalPrice * 1.08);
    <span class="synIdentifier">}</span>,
    canBuy: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">this</span>.totalPrice &gt;= 1000 <span class="synComment">// 1000円以上から購入可能にする</span>
    <span class="synIdentifier">}</span>,
    errorMessageClass: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synComment">// canBuy が偽のときに .error クラスを付与する</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span>
        error: !<span class="synIdentifier">this</span>.canBuy
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>,
    errorMessageStyle: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synComment">// canBuy が偽のときに赤く表示する</span>
      <span class="synStatement">return</span> <span class="synIdentifier">{</span>
        border: <span class="synIdentifier">this</span>.canBuy ? <span class="synConstant">''</span> : <span class="synConstant">'1px solid red'</span>,
        color: <span class="synIdentifier">this</span>.canBuy ? <span class="synConstant">''</span> : <span class="synConstant">'red'</span>,
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
<span class="synStatement">window</span>.vm = vm;

console.log(vm.items);
console.log(vm.totalPrice); <span class="synComment">// 算出プロパティはプロパティとしてアクセス可能</span>
</pre>


<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190124210333.png" alt="f:id:jotaki:20190124210333p:plain" title="f:id:jotaki:20190124210333p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Vue.js / JSON から情報を引っ張ってくる その1'
description: ''
publishDate: '01/20/2019 16:43:11'
---

[CONTENTS-START]
<p>Vue CLI を使って JSON から情報を引っ張る。<br/>
とりあえず WordPress の <code>/wp-json/</code> から。</p>

<h2>Vue CLI の導入</h2>

<p><a href="https://yuheijotaki.hatenablog.com/entry/2018/12/28/025438">こちら</a>とだいたい同じですが、SassとリセットCSSとaxiosを追加。</p>

<h3>Sass</h3>

<p>scssを有効化</p>

<pre class="code" data-lang="" data-unlink>npm install sass-loader node-sass --save-dev</pre>


<ul>
<li><a href="https://qiita.com/MariMurotani/items/5fbea5942d2edf149989">VueCLIでHelloWorld - Qiita</a></li>
</ul>


<h3>リセットCSS（normalize.css）</h3>

<p>normalize.css を読み込む</p>

<pre class="code" data-lang="" data-unlink>npm install -D normalize.css</pre>


<p>App.vue の js に追加</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// normalize.css を読み込む</span>
<span class="synStatement">import</span> <span class="synConstant">&quot;normalize.css&quot;</span>;
</pre>


<ul>
<li><a href="https://qiita.com/hogesuke_1/items/b12c65e8485289da4146">Vueプロジェクトでnormalize.cssを読み込む方法 - Qiita</a></li>
</ul>


<h3>axios</h3>

<pre class="code" data-lang="" data-unlink>npm install --save-dev axios</pre>


<p>App.vue の js に追加</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// Ajax通信ライブラリ</span>
<span class="synStatement">import</span> axios from <span class="synConstant">&quot;axios&quot;</span>;
</pre>


<ul>
<li><a href="https://qiita.com/sygnas/items/7eac9491b37a1bcba0cb">Vue.js初心者向け：Vue.jsとaxiosでJsonを取得してコンポーネントに反映するメモ - Qiita</a></li>
<li><a href="https://jp.vuejs.org/v2/cookbook/using-axios-to-consume-apis.html">axios を利用した API の使用 — Vue.js</a></li>
</ul>


<h2>Vue CLI のコマンド</h2>

<pre class="code" data-lang="" data-unlink># serve with hot reload at localhost:8080
# ローカルサーバー起動、コード監視
npm run dev

# build for production with minification
# ビルド（ `/dist/` へ書き出し）
npm run build</pre>


<h2>WordPress の /wp-json/</h2>

<p>知らなかったのですが、以前までパラメータ与えると投稿をフィルタして取得できたのですが、4.7から仕様が変わったようです。</p>

<blockquote><p>Wordpress4.7からfilterパラメーターは削除されているので、プラグインを利用してfilterパラメーターを利用できるようにする
<a href="http://umadash.hatenadiary.jp/entry/2019/01/09/093554">WP REST API v2を利用し、カスタム投稿タイプの記事をカスタムタクソノミーでフィルタリングして取得する - エンジニアうまの日記</a></p></blockquote>

<p>とりあえず JSON であればなんでも良いので <a href="https://blog.yuheijotaki.com/wp-json/">https://blog.yuheijotaki.com/wp-json/</a> から引っ張る</p>

<h2>App.vue</h2>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>name: {{results.name}}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>home: {{results.home}}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>timezone_string: {{results.timezone_string}}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// normalize.css を読み込む</span>
<span class="synStatement">import</span> <span class="synConstant">&quot;normalize.css&quot;</span>;
<span class="synComment">// Ajax通信ライブラリ</span>
<span class="synStatement">import</span> axios from <span class="synConstant">&quot;axios&quot;</span>;
<span class="synComment">// JSON の URL</span>
<span class="synStatement">const</span> jsonUrl = <span class="synConstant">&quot;https://blog.yuheijotaki.com/wp-json/&quot;</span>;

<span class="synStatement">export</span> <span class="synStatement">default</span> <span class="synIdentifier">{</span>
  name: <span class="synConstant">&quot;App&quot;</span>,
  data() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      results: <span class="synIdentifier">[]</span>
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>,
  mounted() <span class="synIdentifier">{</span>
    <span class="synComment">// JSON取得</span>
    axios.get(jsonUrl).then(response =&gt; <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.results = response.data;
    <span class="synIdentifier">}</span>);
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190120164159.png" alt="f:id:jotaki:20190120164159p:plain" title="f:id:jotaki:20190120164159p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>まとめ</h2>

<p><a href="https://github.com/yuheijotaki/vue-study_20190120"><strong>GitHub</strong></a></p>

<ul>
<li>sass の導入で少しつまずく。CLIじゃないともう少し面倒な模様。</li>
<li>JSONのURLが固定の場合は axios は必要ないらしいのですが、<code>axios.get()</code> 以外にJSON持ってくる方法がわからなかった。</li>
<li>Instagram や Twitter APIから引っ張るつもりでしたが、Instagram => JSON の形式が難解、Twitter => APIの利用申請が難解、のために断念しました。</li>
<li>Vue CLI で Router を入れてみて、ざっくりざっくりした概念は分かったような気がしました。</li>
<li>次回は投稿データをループして表示させるようにする。</li>
</ul>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'homebrew / node.js / nodebrew / npm とは'
description: ''
publishDate: '01/19/2019 16:00:00'
---

[CONTENTS-START]
<p>ググってコマンド打つものの、あまり意味が分かっていなかったのでおさらいします。</p>

<h2>homebrew とは？</h2>

<blockquote><p>「Mac OS Xオペレーティングシステム上でソフトウェアの導入を単純化するパッケージ管理システムのひとつである」</p></blockquote>

<p><a href="https://ja.wikipedia.org/wiki/Homebrew_%28%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E7%AE%A1%E7%90%86%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%29">Homebrew (パッケージ管理システム) - Wikipedia</a></p>

<blockquote><p>パッケージ管理システムとはこのパッケージのインストール（アンインストール）作業を一元的管理するものです。パッケージやライブラリの依存関係などが管理できます。</p></blockquote>

<p><a href="https://qiita.com/omega999/items/6f65217b81ad3fffe7e6">homebrewとは何者か。仕組みについて調べてみた - Qiita</a></p>

<pre class="code" data-lang="" data-unlink>$ brew list</pre>


<p>とコマンド打つと、</p>

<pre class="code" data-lang="" data-unlink>freetype jpeg        libtiff     nodebrew    xz
icu4c       libomp      libtool     openjpeg    yarn
imagemagick libpng      little-cms2 webp</pre>


<p>となるので、homebrew という管理システムを利用して、nodebrew や yarn のようなパッケージを管理しているということですね。</p>

<h2>Node.js とは？</h2>

<blockquote><p>Node.js® は、Chrome の V8 JavaScript エンジン で動作する JavaScript 環境です。</p></blockquote>

<p><a href="https://nodejs.org/ja/">Node.js</a></p>

<blockquote><ul>
<li>Node.jsは、フレームワークではありません。ライブラリでもありません。</li>
<li>JavaScript アプリケーションのプラットフォーム</li>
</ul>
</blockquote>

<p><a href="https://qiita.com/hshimo/items/1ecb7ed1b567aacbe559">Node.js を5分で大雑把に理解する - Qiita</a></p>

<h2>nodebrew とは？</h2>

<blockquote><p>nodebrewは、node.jsを自分のマシン内でversion管理するためのtoolです。</p></blockquote>

<p><a href="https://qiita.com/sinmetal/items/154e81823f386279b33c">node.jsのversionを管理するためにnodebrewを利用する</a></p>

<p>homebrew と混在していたのですが、全然別物ですね。。</p>

<pre class="code" data-lang="" data-unlink># Node.js の安定版をインストール
nodebrew install-binary stable

# インストールされている Node.js のバージョン一覧を表示
nodebrew ls

# Node.js のバージョンを指定して使用する
# nodebrew use v**.**.*
nodebrew use v10.15.0</pre>


<h2>npm (Node Package Manager) とは？</h2>

<blockquote><p>Node.js用に作られたライブラリやパッケージを管理する為の、パッケージマネージャーです。<br/>
( Node.jsをインストールすれば使用できます。)</p></blockquote>

<p><a href="https://qiita.com/PolarBear/items/62c0416492810b7ecf7c">Node.js / npm をインストール (Mac環境) - Qiita</a></p>

<pre class="code" data-lang="" data-unlink># package.json内に書かれたシェルスクリプトを実行する
$ npm run build</pre>


<p><a href="https://qiita.com/hashrock/items/15f4a4961183cfbb2658">フロントエンド開発の３ステップ（npmことはじめ） - Qiita</a></p>

<h2>まとめ</h2>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190119162244.png" alt="f:id:jotaki:20190119162244p:plain" title="f:id:jotaki:20190119162244p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】動かして学ぶ！Vue.js 開発入門 その11'
description: ''
publishDate: '01/19/2019 15:12:49'
---

[CONTENTS-START]
<h3>Chapter13 JSON データを表示させてみよう</h3>

<h4>01 JSON ファイルの読み込み方</h4>

<h5>JSON を読み込む</h5>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- JSON を読み込む --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;file&quot;</span><span class="synIdentifier"> v-on:change=</span><span class="synConstant">&quot;onFileChange&quot;</span><span class="synIdentifier"> /&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>読み込みデータ:<span class="synIdentifier">&lt;</span><span class="synStatement">br</span><span class="synIdentifier"> /&gt;</span>{{ loadData }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    loadData: <span class="synConstant">&quot;&quot;</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    onFileChange: <span class="synIdentifier">function</span>(e) <span class="synIdentifier">{</span>
      file = e.target.files<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>;
      <span class="synStatement">if</span> (file) <span class="synIdentifier">{</span>
        <span class="synIdentifier">var</span> reader = <span class="synStatement">new</span> FileReader();
        <span class="synIdentifier">var</span> vm = <span class="synIdentifier">this</span>;
        reader.onload = <span class="synIdentifier">function</span>(e) <span class="synIdentifier">{</span>
          json = JSON.parse(e.target.result);
          vm.loadData = json;
        <span class="synIdentifier">}</span>;
        reader.readAsText(file);
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>test.json</p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">[</span>
  <span class="synSpecial">{</span> &quot;<span class="synStatement">title</span>&quot;: &quot;<span class="synConstant">A</span>&quot;, &quot;<span class="synStatement">body</span>&quot;: &quot;<span class="synConstant">a</span>&quot; <span class="synSpecial">}</span>,
  <span class="synSpecial">{</span> &quot;<span class="synStatement">title</span>&quot;: &quot;<span class="synConstant">B</span>&quot;, &quot;<span class="synStatement">body</span>&quot;: &quot;<span class="synConstant">b</span>&quot; <span class="synSpecial">}</span>,
  <span class="synSpecial">{</span> &quot;<span class="synStatement">title</span>&quot;: &quot;<span class="synConstant">C</span>&quot;, &quot;<span class="synStatement">body</span>&quot;: &quot;<span class="synConstant">c</span>&quot; <span class="synSpecial">}</span>
<span class="synSpecial">]</span>
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190119151225.png" alt="f:id:jotaki:20190119151225p:plain" title="f:id:jotaki:20190119151225p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>02 JSON データを読み込んで、コンポーネントで並べる / 03 改良する：トランジションをつける</h4>

<h5>配列データをコンポーネントで並べる</h5>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- 配列データをコンポーネントで並べる --&gt;</span>
  <span class="synIdentifier">&lt;</span>transition-group<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in dataArray&quot;</span><span class="synIdentifier"> v-bind:key=</span><span class="synConstant">&quot;item.title&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span>my-product<span class="synIdentifier"> v-bind:</span><span class="synType">object</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item&quot;</span><span class="synIdentifier">&gt;&lt;/</span>my-product<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span>transition-group<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;sortData&quot;</span><span class="synIdentifier">&gt;</span>ソート<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;shuffleData&quot;</span><span class="synIdentifier">&gt;</span>シャッフル<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;file&quot;</span><span class="synIdentifier"> v-on:change=</span><span class="synConstant">&quot;loadData&quot;</span><span class="synIdentifier"> /&gt;&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> MyComponent = <span class="synIdentifier">{</span>
  props: <span class="synIdentifier">[</span><span class="synConstant">&quot;object&quot;</span><span class="synIdentifier">]</span>,
  template: <span class="synConstant">&quot;&lt;div&gt;&lt;p&gt;{{ object.title }}&lt;/p&gt;&lt;p&gt;解説：{{ object.body }}&lt;/p&gt;&lt;/div&gt;&quot;</span>
<span class="synIdentifier">}</span>;

<span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    dataArray: <span class="synIdentifier">[</span>
      <span class="synIdentifier">{</span> title: <span class="synConstant">&quot;AAA&quot;</span>, body: <span class="synConstant">&quot;aaa&quot;</span> <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> title: <span class="synConstant">&quot;BBB&quot;</span>, body: <span class="synConstant">&quot;bbb&quot;</span> <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> title: <span class="synConstant">&quot;CCC&quot;</span>, body: <span class="synConstant">&quot;ccc&quot;</span> <span class="synIdentifier">}</span>
    <span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>,
  components: <span class="synIdentifier">{</span>
    <span class="synConstant">&quot;my-product&quot;</span>: MyComponent
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    sortData: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.dataArray.sort(<span class="synIdentifier">function</span>(a, b) <span class="synIdentifier">{</span>
        <span class="synStatement">return</span> a.title &lt; b.title ? -1 : 1;
        <span class="synStatement">return</span> 0;
      <span class="synIdentifier">}</span>);
    <span class="synIdentifier">}</span>,
    shuffleData: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synIdentifier">var</span> buffer = <span class="synIdentifier">[]</span>;
      <span class="synIdentifier">var</span> len = <span class="synIdentifier">this</span>.dataArray.length;
      <span class="synStatement">for</span> (<span class="synIdentifier">var</span> i = len; len &gt; 0; len--) <span class="synIdentifier">{</span>
        <span class="synIdentifier">var</span> r = Math.floor(Math.random() * len);
        buffer.push(<span class="synIdentifier">this</span>.dataArray<span class="synIdentifier">[</span>r<span class="synIdentifier">]</span>);
        <span class="synIdentifier">this</span>.dataArray.splice(r, 1);
      <span class="synIdentifier">}</span>
      <span class="synIdentifier">this</span>.dataArray = buffer;
    <span class="synIdentifier">}</span>,
    loadData: <span class="synIdentifier">function</span>(e) <span class="synIdentifier">{</span>
      file = e.target.files<span class="synIdentifier">[</span>0<span class="synIdentifier">]</span>;
      <span class="synStatement">if</span> (file) <span class="synIdentifier">{</span>
        <span class="synIdentifier">var</span> reader = <span class="synStatement">new</span> FileReader();
        <span class="synIdentifier">var</span> vm = <span class="synIdentifier">this</span>;
        reader.onload = <span class="synIdentifier">function</span>(e) <span class="synIdentifier">{</span>
          json = JSON.parse(e.target.result);
          vm.dataArray = json;
        <span class="synIdentifier">}</span>;
        reader.readAsText(file);
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>program.json</p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">[</span>
  <span class="synSpecial">{</span>
    &quot;<span class="synStatement">title</span>&quot;: &quot;<span class="synConstant">Python言語</span>&quot;,
    &quot;<span class="synStatement">body</span>&quot;: &quot;<span class="synConstant">数値計算が得意な、シンプルなプログラミング言語です。人工知能の研究で注目の言語です。</span>&quot;
  <span class="synSpecial">}</span>,
  <span class="synSpecial">{</span>
    &quot;<span class="synStatement">title</span>&quot;: &quot;<span class="synConstant">C言語</span>&quot;,
    &quot;<span class="synStatement">body</span>&quot;: &quot;<span class="synConstant">ハードウェアやOS向けのプログラミング言語です。古くからある言語で、数多くのプログラミング言語の元になりました。</span>&quot;
  <span class="synSpecial">}</span>,
  <span class="synSpecial">{</span>
    &quot;<span class="synStatement">title</span>&quot;: &quot;<span class="synConstant">Java言語</span>&quot;,
    &quot;<span class="synStatement">body</span>&quot;: &quot;<span class="synConstant">ハードウェアに依存しないプログラミング言語です。</span>&quot;
  <span class="synSpecial">}</span>
<span class="synSpecial">]</span>
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190119151237.png" alt="f:id:jotaki:20190119151237p:plain" title="f:id:jotaki:20190119151237p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】動かして学ぶ！Vue.js 開発入門 その10'
description: ''
publishDate: '01/19/2019 14:42:38'
---

[CONTENTS-START]
<h3>Chapter12 部品にまとめるとき</h3>

<h4>01 部品にまとめる：コンポーネント</h4>

<blockquote><p><strong>部品にまとめるときは、<code>component</code></strong></p></blockquote>

<hr />

<blockquote><p>ある部品が HTML 上で「どのように表示されるのか」をオブジェクトとしてまとめるには、<strong><code>template</code> オプション</strong>を使います。そして、そのオブジェクトに名前（コンポーネントのタグ名）をつけたものを「コンポーネント」といいます。<br/>
コンポーネントを作るには、「1.グローバルに登録する方法」と「2.ローカルに登録する方法」の 2 種類があります。
しかし多くの場合、グローバル登録は理想的とはいえません。グローバルに登録したすべてのコンポーネントは、使用しなくなっても残り続けるからです。</p></blockquote>

<p>なので、ローカルに登録する方法でやってみる</p>

<h5>コンポーネントを作って表示する</h5>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- コンポーネントを作って表示する --&gt;</span>
  <span class="synIdentifier">&lt;</span>my-component<span class="synIdentifier">&gt;&lt;/</span>my-component<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>my-component<span class="synIdentifier">&gt;&lt;/</span>my-component<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>my-component<span class="synIdentifier">&gt;&lt;/</span>my-component<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// コンポーネントのオブジェクトを作成</span>
<span class="synComment">// `template:`にどのように表示されるかをHTMLで用意</span>
<span class="synIdentifier">var</span> MyConponent = <span class="synIdentifier">{</span>
  template: <span class="synConstant">'&lt;p class=&quot;my-comp&quot;&gt;Hello&lt;/p&gt;'</span>
<span class="synIdentifier">}</span>;
<span class="synComment">// Vue インスタンスの作成</span>
<span class="synComment">// `components:`には「コンポーネントのタグ名：コンポーネントのオブジェクト名」を指定</span>
<span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  components: <span class="synIdentifier">{</span>
    <span class="synConstant">&quot;my-component&quot;</span>: MyConponent
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190119144125.png" alt="f:id:jotaki:20190119144125p:plain" title="f:id:jotaki:20190119144125p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>02 コンポーネントの data は function にする</h4>

<p>コンポーネントオブジェクトの <code>data</code> では、function にする必要がある</p>

<h5>それぞれ別々にカウントするコンポーネント</h5>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- それぞれ別々にカウントするコンポーネント --&gt;</span>
  <span class="synIdentifier">&lt;</span>my-component<span class="synIdentifier">&gt;&lt;/</span>my-component<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>my-component<span class="synIdentifier">&gt;&lt;/</span>my-component<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>my-component<span class="synIdentifier">&gt;&lt;/</span>my-component<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> MyConponent = <span class="synIdentifier">{</span>
  template:
    <span class="synConstant">'&lt;p class=&quot;my-comp&quot;&gt;カウンター &lt;button v-on:click=&quot;addOne&quot;&gt;追加&lt;/button&gt; {{ count }}&lt;/p&gt;'</span>,
  data: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      count: 0
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    addOne: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.count++;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;

<span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  components: <span class="synIdentifier">{</span>
    <span class="synConstant">&quot;my-component&quot;</span>: MyConponent
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190119144132.png" alt="f:id:jotaki:20190119144132p:plain" title="f:id:jotaki:20190119144132p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>03 値を渡す：<code>props</code></h4>

<blockquote><p>コンポーネントには、HTML タグから値を受け渡すことができるので、それを試してみましょう。「<strong><code>props</code>オプション</strong>」です。</p></blockquote>

<hr />

<blockquote><p>Vue.js では、いろいろなタイミングで関数を実行できるライフサイクルフックという仕組みがあって、そのひとつが「<code>created:</code>」 です。</p></blockquote>

<p>ライフサイクルフックは、</p>

<ul>
<li><code>beforeCreate</code> インスタンスが初期化されるとき</li>
<li><code>Created</code> インスタンスが作成されたあと</li>
<li><code>beforeUpdate</code> インスタンス動作中（データが変更されるとき）</li>
<li><code>Updated</code> インスタンス動作中（データが変更されたあと）</li>
<li><code>beforeDestroy</code> インスタンスが破棄される直前</li>
</ul>


<p>がある。</p>

<h5>コンポーネントに値を渡す</h5>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- コンポーネントに値を渡す --&gt;</span>
  <span class="synIdentifier">&lt;</span>my-component<span class="synIdentifier"> my-</span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;Ichiro&quot;</span><span class="synIdentifier">&gt;&lt;/</span>my-component<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>my-component<span class="synIdentifier"> my-</span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;Hanako&quot;</span><span class="synIdentifier">&gt;&lt;/</span>my-component<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>my-component<span class="synIdentifier">&gt;&lt;/</span>my-component<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> MyConponent = <span class="synIdentifier">{</span>
  <span class="synComment">// `myName` を表示するHTMLタグ</span>
  template: <span class="synConstant">'&lt;p class=&quot;my-comp&quot;&gt;私は、{{ myName }}です。&lt;/p&gt;'</span>,
  <span class="synComment">// 名前をいれる `myName` を用意</span>
  props: <span class="synIdentifier">{</span>
    myName: <span class="synType">String</span>
  <span class="synIdentifier">}</span>,
  <span class="synComment">// インスタンスが作成されたあとに実行</span>
  created: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">if</span> (<span class="synIdentifier">this</span>.myName == <span class="synStatement">null</span>) <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.myName = <span class="synConstant">&quot;名前がありません&quot;</span>;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;

<span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  components: <span class="synIdentifier">{</span>
    <span class="synConstant">&quot;my-component&quot;</span>: MyConponent
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190119144142.png" alt="f:id:jotaki:20190119144142p:plain" title="f:id:jotaki:20190119144142p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h5>配列からコンポーネントを作って表示する</h5>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- 配列からコンポーネントを作って表示する --&gt;</span>
  <span class="synIdentifier">&lt;</span>my-component
<span class="synIdentifier">    v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;(item, index) in myArray&quot;</span>
<span class="synIdentifier">    v-bind:my-</span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item&quot;</span>
<span class="synIdentifier">  &gt;&lt;/</span>my-component<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> MyConponent = <span class="synIdentifier">{</span>
  <span class="synComment">// `myName` を表示するHTMLタグ</span>
  template: <span class="synConstant">'&lt;p class=&quot;my-comp&quot;&gt;私は、{{ myName }}です。&lt;/p&gt;'</span>,
  <span class="synComment">// 名前をいれる `myName` を用意</span>
  props: <span class="synIdentifier">{</span>
    myName: <span class="synType">String</span>
  <span class="synIdentifier">}</span>,
  <span class="synComment">// インスタンスが作成されたあとに実行</span>
  created: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">if</span> (<span class="synIdentifier">this</span>.myName == <span class="synStatement">null</span>) <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.myName = <span class="synConstant">&quot;名前がありません&quot;</span>;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;

<span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    myArray: <span class="synIdentifier">[</span><span class="synConstant">&quot;Taro&quot;</span>, <span class="synConstant">&quot;Hanako&quot;</span>, <span class="synConstant">&quot;Ichiro&quot;</span>, <span class="synConstant">&quot;Jiro&quot;</span><span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>,
  components: <span class="synIdentifier">{</span>
    <span class="synConstant">&quot;my-component&quot;</span>: MyConponent
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190119144145.png" alt="f:id:jotaki:20190119144145p:plain" title="f:id:jotaki:20190119144145p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】動かして学ぶ！Vue.js 開発入門 その9'
description: ''
publishDate: '01/18/2019 10:39:29'
---

[CONTENTS-START]
<h3>Chapter11 ToDoリストを作ってみよう</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- ToDoリスト --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;todo in todos&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;checkbox&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;todo.done&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">span</span><span class="synIdentifier"> v-bind:</span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{donestyle:todo.done}&quot;</span><span class="synIdentifier">&gt;</span>{{ todo.text }}<span class="synIdentifier">&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> v-model.trim=</span><span class="synConstant">&quot;addtext&quot;</span><span class="synIdentifier"> v-on:keyup.enter=</span><span class="synConstant">&quot;addToDo&quot;</span><span class="synIdentifier"> placeholder=</span><span class="synConstant">&quot;すること&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;cleanToDo&quot;</span><span class="synIdentifier">&gt;</span>処理済みを削除<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ remaining }} / {{ todos.length }}件処理<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    addtext: <span class="synConstant">''</span>,
    todos: <span class="synIdentifier">[</span>
      <span class="synIdentifier">{</span>
        done: <span class="synConstant">false</span>,
        text: <span class="synConstant">'パンを買う'</span>
      <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span>
        done: <span class="synConstant">false</span>,
        text: <span class="synConstant">'コーヒーを買う'</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>,
  computed: <span class="synIdentifier">{</span>
    <span class="synComment">// `todo` 配列から `filter` メソッドで `done` の値が `true` のものだけ取り出してその個数を返す</span>
    remaining: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">this</span>.todos.filter(<span class="synIdentifier">function</span> (val) <span class="synIdentifier">{</span>
        <span class="synStatement">return</span> val.done;
      <span class="synIdentifier">}</span>).length;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    <span class="synComment">// `done` の値を `false` にして、textに `this.addtext` を設定したオブジェクトを、`this.todos` 配列に追加</span>
    addToDo: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synStatement">if</span> (<span class="synIdentifier">this</span>.addtext) <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.todos.push(<span class="synIdentifier">{</span>
          done: <span class="synConstant">false</span>,
          text: <span class="synIdentifier">this</span>.addtext
        <span class="synIdentifier">}</span>);
        <span class="synIdentifier">this</span>.addtext = <span class="synConstant">'追加しました'</span>; <span class="synComment">// 追加したら input要素を空にするために `this.addtext` を空にする</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>,
    <span class="synComment">// `this.todo` の `done` が `false` だけのものが残るようにフィルターをかけて、`this.todos` に入れ直します。</span>
    cleanToDo: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.todos = <span class="synIdentifier">this</span>.todos.filter(<span class="synIdentifier">function</span> (val) <span class="synIdentifier">{</span>
        <span class="synStatement">return</span> val.done == <span class="synConstant">false</span>;
      <span class="synIdentifier">}</span>)
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>




<pre class="code lang-css" data-lang="css" data-unlink><span class="synComment">/* ToDoリスト */</span>
<span class="synIdentifier">.donestyle</span> <span class="synIdentifier">{</span>
  <span class="synType">text-decoration</span>: <span class="synConstant">line-through</span>;
  <span class="synType">color</span>: <span class="synConstant">lightgray</span>;
<span class="synIdentifier">}</span>
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190118103633.png" alt="f:id:jotaki:20190118103633p:plain" title="f:id:jotaki:20190118103633p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】動かして学ぶ！Vue.js 開発入門 その8'
description: ''
publishDate: '01/18/2019 10:37:43'
---

[CONTENTS-START]
<h3>Chapter10 アニメーションするとき</h3>

<h4>01 表示／非表示時にアニメーションする：<code>transition</code></h4>

<blockquote><p><strong>表示／非表示時にアニメーションするときは、<code>transition</code></strong></p></blockquote>

<h5>CSSスタイル</h5>

<p><strong>要素が現れるとき</strong></p>

<ul>
<li><code>.v-enter</code>：現れる前の状態</li>
<li><code>.v-enter-active</code>：現れている最中</li>
<li><code>.v-enter-to</code>：現れたときの状態</li>
</ul>


<p><strong>要素が消えるとき</strong></p>

<ul>
<li><code>.v-leave</code>：現れる前の状態</li>
<li><code>.v-leave-active</code>：現れている最中</li>
<li><code>.v-leave-to</code>：現れたときの状態</li>
</ul>


<p><strong>要素が移動するとき</strong></p>

<ul>
<li><code>.v-move</code>：要素が移動するとき</li>
</ul>


<h5>例</h5>

<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">.v-enter</span> <span class="synIdentifier">{</span>
  <span class="synType">opacity</span>: <span class="synConstant">0</span>;
<span class="synIdentifier">}</span>
<span class="synIdentifier">.v-enter-active</span> <span class="synIdentifier">{</span>
  <span class="synType">transition</span>: <span class="synConstant">1s</span>;
<span class="synIdentifier">}</span>
</pre>


<h5>チェックボックスで表示／非表示をアニメーションする</h5>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- チェックボックスで表示／非表示をアニメーションする --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;checkbox&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;isOK&quot;</span><span class="synIdentifier">&gt;</span>切り替える<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>transition<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;isOK&quot;</span><span class="synIdentifier">&gt;</span>表示、非表示のアニメ<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span>transition<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    isOK: <span class="synConstant">false</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>




<pre class="code lang-css" data-lang="css" data-unlink><span class="synComment">/* チェックボックスで表示／非表示をアニメーションする */</span>
<span class="synComment">/* 現れている最中と、消えている最中は0.5秒 */</span>
<span class="synIdentifier">.v-enter-active</span><span class="synSpecial">,</span>
<span class="synIdentifier">.v-leave-active</span> <span class="synIdentifier">{</span>
  <span class="synType">transition</span>: <span class="synConstant">0.5s</span>;
<span class="synIdentifier">}</span>
<span class="synComment">/* 現れる前の状態と、消えたときの状態は、透明度0で下へ10px移動 */</span>
<span class="synIdentifier">.v-enter</span><span class="synSpecial">,</span>
<span class="synIdentifier">.v-leave-to</span> <span class="synIdentifier">{</span>
  <span class="synType">opacity</span>: <span class="synConstant">0</span>;
  <span class="synType">transform</span>: <span class="synIdentifier">translateY(</span><span class="synConstant">10px</span><span class="synIdentifier">)</span>;
<span class="synIdentifier">}</span>
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190118103620.png" alt="f:id:jotaki:20190118103620p:plain" title="f:id:jotaki:20190118103620p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>02 リストのトランジション：<code>transition-group</code></h4>

<h5>ボタンを押してリストが増減するとき、アニメーションする</h5>

<pre class="code lang-html" data-lang="html" data-unlink>  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synComment">&lt;!-- ボタンを押してリストが増減するとき、アニメーションする --&gt;</span>
    <span class="synIdentifier">&lt;</span>transition-group<span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in dataArray&quot;</span><span class="synIdentifier"> v-bind:key=</span><span class="synConstant">&quot;item&quot;</span><span class="synIdentifier">&gt;</span>{{ item }}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span>transition-group<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;addItem&quot;</span><span class="synIdentifier"> placeholder=</span><span class="synConstant">&quot;追加するリスト&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;addList&quot;</span><span class="synIdentifier">&gt;</span>追加<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;removeLast&quot;</span><span class="synIdentifier">&gt;</span>最後の1つを削除<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    dataArray: <span class="synIdentifier">[</span><span class="synConstant">'Hanako'</span>, <span class="synConstant">'Ichiro'</span>, <span class="synConstant">'Tomoko'</span><span class="synIdentifier">]</span>,
    addItem: <span class="synConstant">''</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    addList: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.dataArray.push(<span class="synIdentifier">this</span>.addItem);
      <span class="synIdentifier">this</span>.addItem = <span class="synConstant">''</span>;
    <span class="synIdentifier">}</span>,
    removeLast: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synStatement">const</span> lastIndex = <span class="synIdentifier">this</span>.dataArray.length - 1;
      <span class="synIdentifier">this</span>.dataArray.splice(lastIndex, 1);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>




<pre class="code lang-css" data-lang="css" data-unlink><span class="synComment">/* ボタンを押してリストが増減するとき、アニメーションする */</span>
<span class="synComment">/* 現れている最中と、消えている最中は0.5秒 */</span>
<span class="synIdentifier">.v-enter-active</span><span class="synSpecial">,</span>
<span class="synIdentifier">.v-leave-active</span> <span class="synIdentifier">{</span>
  <span class="synType">transition</span>: <span class="synConstant">0.5s</span>;
<span class="synIdentifier">}</span>
<span class="synComment">/* 現れる前の状態と、消えたときの状態は、透明度0で右へ50px移動 */</span>
<span class="synIdentifier">.v-enter</span><span class="synSpecial">,</span>
<span class="synIdentifier">.v-leave-to</span> <span class="synIdentifier">{</span>
  <span class="synType">opacity</span>: <span class="synConstant">0</span>;
  <span class="synType">transform</span>: <span class="synIdentifier">translateX(</span><span class="synConstant">50px</span><span class="synIdentifier">)</span>;
<span class="synIdentifier">}</span>
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190118103623.png" alt="f:id:jotaki:20190118103623p:plain" title="f:id:jotaki:20190118103623p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>03 リストの並びが移動するトランジション</h4>

<h5>クリックしたらシャッフルする</h5>

<pre class="code lang-html" data-lang="html" data-unlink>  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synComment">&lt;!-- ボタンを押してリストが増減するとき、アニメーションする --&gt;</span>
    <span class="synIdentifier">&lt;</span>transition-group<span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in dataArray&quot;</span><span class="synIdentifier"> v-bind:key=</span><span class="synConstant">&quot;item&quot;</span><span class="synIdentifier">&gt;</span>{{ item }}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span>transition-group<span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;sortData&quot;</span><span class="synIdentifier">&gt;</span>ソートする<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;shuffleData&quot;</span><span class="synIdentifier">&gt;</span>シャッフルする<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    dataArray: <span class="synIdentifier">[</span><span class="synConstant">'one'</span>, <span class="synConstant">'two'</span>, <span class="synConstant">'three'</span>, <span class="synConstant">'four'</span>, <span class="synConstant">'five'</span><span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    sortData: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.dataArray.sort(<span class="synIdentifier">function</span> (a, b) <span class="synIdentifier">{</span>
        <span class="synStatement">if</span> (a &lt; b) <span class="synStatement">return</span> -1;
        <span class="synStatement">if</span> (a &gt; b) <span class="synStatement">return</span> 1;
        <span class="synStatement">return</span> 0;
      <span class="synIdentifier">}</span>);
    <span class="synIdentifier">}</span>,
    shuffleData: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synIdentifier">var</span> buffer = <span class="synIdentifier">[]</span>;
      <span class="synIdentifier">var</span> len = <span class="synIdentifier">this</span>.dataArray.length;
      <span class="synStatement">for</span> (<span class="synIdentifier">let</span> i = 0; len &gt; 0; len--) <span class="synIdentifier">{</span>
        <span class="synIdentifier">var</span> r = Math.floor(Math.random() * len);
        buffer.push(<span class="synIdentifier">this</span>.dataArray<span class="synIdentifier">[</span>r<span class="synIdentifier">]</span>);
        <span class="synIdentifier">this</span>.dataArray.splice(r, 1);
      <span class="synIdentifier">}</span>
      <span class="synIdentifier">this</span>.dataArray = buffer;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>




<pre class="code lang-css" data-lang="css" data-unlink><span class="synComment">/* 移動トランジションにかか秒数 */</span>
<span class="synIdentifier">.v-move</span> <span class="synIdentifier">{</span>
  <span class="synType">transition</span>: <span class="synConstant">0.25s</span>;
<span class="synIdentifier">}</span>
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190118103629.png" alt="f:id:jotaki:20190118103629p:plain" title="f:id:jotaki:20190118103629p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】動かして学ぶ！Vue.js 開発入門 その7'
description: ''
publishDate: '01/17/2019 09:25:28'
---

[CONTENTS-START]
<h3>Chapter9 Markdownエディタを作ってみよう</h3>

<h4>02 Markdownエディタを作る</h4>

<pre class="code lang-html" data-lang="html" data-unlink>  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">textarea</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;input&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">textarea</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-html=</span><span class="synConstant">&quot;convertMarkdown&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://cdnjs.cloudflare.com/ajax/libs/marked/0.4.0/marked.min.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    input: <span class="synConstant">''</span>
  <span class="synIdentifier">}</span>,
  computed: <span class="synIdentifier">{</span>
    <span class="synComment">// inputが変わったら、convertMarkdownを算出する</span>
    convertMarkdown: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> marked(<span class="synIdentifier">this</span>.input);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190117092501.png" alt="f:id:jotaki:20190117092501p:plain" title="f:id:jotaki:20190117092501p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<hr />

<p>昔作った <a href="https://yuheijotaki.com/demo/type_tester/1.1/">type tester</a> もVue.js使えばわりとキレイにできそうな気がします。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】動かして学ぶ！Vue.js 開発入門 その6'
description: ''
publishDate: '01/16/2019 11:51:33'
---

[CONTENTS-START]
<h3>Chapter8 データの変化を監視するとき</h3>

<h4>01 データを使って別の計算をする：算出プロパティ</h4>

<blockquote><p>マスタッシュタグの中に「JavaScriptの式」を書くのではなく「何を表示するのか」を書くほうがわかりやすくなります。それを「名前」で表したものが「<strong><code>computed</code></strong>オプション（算出プロパティ）です」。</p></blockquote>

<p>&nbsp;</p>

<blockquote><p><strong>データの値を計算して使うときは、<code>computed</code></strong></p></blockquote>

<h5>金額を入力したら、消費税込みの金額を計算する</h5>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- 金額を入力したら、消費税込みの金額を計算する --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> v-model.number=</span><span class="synConstant">&quot;price&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;number&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>消費税込みの金額{{ taxIncluded }}円<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    price: 100
  <span class="synIdentifier">}</span>,
  computed: <span class="synIdentifier">{</span>
    <span class="synComment">// price が変わったら消費税込みの金額を算出する</span>
    taxIncluded: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">this</span>.price * 1.08;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190116114834.png" alt="f:id:jotaki:20190116114834p:plain" title="f:id:jotaki:20190116114834p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h5>単位と個数を入力したら、税込み金額を計算する</h5>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- 単位と個数を入力したら、税込み金額を計算する --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> v-model.number=</span><span class="synConstant">&quot;price&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;number&quot;</span><span class="synIdentifier">&gt;</span> 円 x
  <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> v-model.number=</span><span class="synConstant">&quot;count&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;number&quot;</span><span class="synIdentifier">&gt;</span> 個
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>　　　合計：{{ sum }}円<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>税込み合計：{{ taxIncluded }}円<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    price: 100,
    count: 1
  <span class="synIdentifier">}</span>,
  computed: <span class="synIdentifier">{</span>
    <span class="synComment">// price か count が変わったら、合計金額を算出する</span>
    sum: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">this</span>.price * <span class="synIdentifier">this</span>.count;
    <span class="synIdentifier">}</span>,
    <span class="synComment">// price が変わったら消費税込みの金額を算出する</span>
    taxIncluded: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">this</span>.sum * 1.08;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190116114837.png" alt="f:id:jotaki:20190116114837p:plain" title="f:id:jotaki:20190116114837p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h5>文章を入力したら、残りの文字数を表示する</h5>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- 文章を入力したら、残りの文字数を表示する --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>ご感想は、140文字以内でご入力ください。<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">textarea</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myText&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">textarea</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-bind:</span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{color:computedColor}&quot;</span><span class="synIdentifier">&gt;</span>残り{{ remaining }} 文字です。<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    myText: <span class="synConstant">'今日は、いい天気です。'</span>
  <span class="synIdentifier">}</span>,
  computed: <span class="synIdentifier">{</span>
    <span class="synComment">// myText の長さが変わったら、残りの文字数を算出する</span>
    remaining: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> 140 - <span class="synIdentifier">this</span>.myText.length;
    <span class="synIdentifier">}</span>,
    <span class="synComment">// remainingが変わったらcomputedColorを算出する</span>
    computedColor: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      col = <span class="synConstant">&quot;green&quot;</span>;
      <span class="synStatement">if</span> (<span class="synIdentifier">this</span>.remaining &lt; 20) <span class="synIdentifier">{</span>
        col = <span class="synConstant">&quot;orange&quot;</span>;
      <span class="synIdentifier">}</span>
      <span class="synStatement">if</span> (<span class="synIdentifier">this</span>.remaining &lt; 1) <span class="synIdentifier">{</span>
        col = <span class="synConstant">&quot;red&quot;</span>;
      <span class="synIdentifier">}</span>
      <span class="synStatement">return</span> col;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190116114840.png" alt="f:id:jotaki:20190116114840p:plain" title="f:id:jotaki:20190116114840p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h5>文章を入力すると、その文字を含む項目だけ表示される</h5>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- 文章を入力すると、その文字を含む項目だけ表示される --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;findWord&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in findItems&quot;</span><span class="synIdentifier">&gt;</span>{{ item }}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    findWord: <span class="synConstant">''</span>,
    items: <span class="synIdentifier">[</span><span class="synConstant">'Hanako'</span>, <span class="synConstant">'Ichiro'</span>, <span class="synConstant">'Tomoko'</span><span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>,
  computed: <span class="synIdentifier">{</span>
    <span class="synComment">// this.findWord が変わったら、その文字が含まれるリストを算出する</span>
    findItems: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synStatement">if</span> (<span class="synIdentifier">this</span>.findWord) <span class="synIdentifier">{</span>
        <span class="synStatement">return</span> <span class="synIdentifier">this</span>.items.filter(<span class="synIdentifier">function</span> (value) <span class="synIdentifier">{</span>
          <span class="synStatement">return</span> (value.indexOf(<span class="synIdentifier">this</span>.findWord) &gt; -1);
        <span class="synIdentifier">}</span>, <span class="synIdentifier">this</span>);
      <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
        <span class="synComment">// this.findWord が空のときは、リストをそのまま返す</span>
        <span class="synStatement">return</span> <span class="synIdentifier">this</span>.items;
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190116115040.png" alt="f:id:jotaki:20190116115040p:plain" title="f:id:jotaki:20190116115040p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>02 データの変化を監視する：監視プロパティ</h4>

<blockquote><p>データや変数の値が変わったときに、何かの処理をするには「<strong><code>watch</code>オプション（監視プロパティ）</strong>」を使います。タイマーや、非同期の値など、自動的に変化する値などを監視する場合にも使います。</p></blockquote>

<p>&nbsp;</p>

<blockquote><p><strong>データの変化を監視するときは、<code>watch</code></strong></p></blockquote>

<h5>入力文字を監視して、禁止文字が入力されたらアラートを出す</h5>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- 入力文字を監視して、禁止文字が入力されたらアラートを出す --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>禁止文字は、「{{ forbiddenText }}」<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">textarea</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;inputText&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">textarea</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    forbiddenText: <span class="synConstant">'ダメ'</span>,
    inputText: <span class="synConstant">'今日は、天気です。'</span>
  <span class="synIdentifier">}</span>,
  watch: <span class="synIdentifier">{</span>
    <span class="synComment">// 入力された文字列を監視する</span>
    inputText: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synIdentifier">var</span> pos = <span class="synIdentifier">this</span>.inputText.indexOf(<span class="synIdentifier">this</span>.forbiddenText);
      <span class="synStatement">if</span> (pos &gt;= 0) <span class="synIdentifier">{</span>
        <span class="synStatement">alert</span>(<span class="synIdentifier">this</span>.forbiddenText + <span class="synConstant">&quot;は、入力できません。&quot;</span>);
        <span class="synIdentifier">this</span>.inputText = <span class="synIdentifier">this</span>.inputText.substr(0, pos);
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190116115043.png" alt="f:id:jotaki:20190116115043p:plain" title="f:id:jotaki:20190116115043p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>タイマーを作る</h4>

<blockquote><p><code>watch</code> オプションは「時間を監視する」こともできます。</p></blockquote>

<h5>残りの秒数を監視して表示し、0秒になったらアラートを出す</h5>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- 残りの秒数を監視して表示し、0秒になったらアラートを出す --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>あと {{ restSec }}秒<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;startTimer&quot;</span><span class="synIdentifier">&gt;</span>START<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    restSec: 5,
    timerObj: <span class="synStatement">null</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    startTimer: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synComment">// 残り5秒</span>
      <span class="synIdentifier">this</span>.restSec = 5;
      <span class="synComment">// タイマースタート。1秒（1000ミリ秒）ごとに1秒減らす</span>
      <span class="synIdentifier">this</span>.timerObj = setInterval(() =&gt; <span class="synIdentifier">{</span>
        <span class="synIdentifier">this</span>.restSec--;
      <span class="synIdentifier">}</span>, 1000);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  watch: <span class="synIdentifier">{</span>
    <span class="synComment">// 残り秒数を監視する</span>
    restSec: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synComment">// 0秒以下になったらアラート&amp;タイマー停止</span>
      <span class="synStatement">if</span> (<span class="synIdentifier">this</span>.restSec &lt;= 0) <span class="synIdentifier">{</span>
        <span class="synStatement">alert</span>(<span class="synConstant">'制限時間です。'</span>);
        clearInterval(<span class="synIdentifier">this</span>.timerObj);
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190116115049.png" alt="f:id:jotaki:20190116115049p:plain" title="f:id:jotaki:20190116115049p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h5>数字がくるくるとアニメーションをしながら値が増えるinput要素</h5>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://cdnjs.cloudflare.com/ajax/libs/gsap/1.19.1/TweenMax.min.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- 数字がくるくるとアニメーションをしながら値が増えるinput要素 --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>値は、{{ animeNumber }}です。<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> v-model.numebr=</span><span class="synConstant">&quot;myNumber&quot;</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;number&quot;</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    myNumber: 0,
    tweenedNumber: 0
  <span class="synIdentifier">}</span>,
  watch: <span class="synIdentifier">{</span>
    <span class="synComment">// myNumber を監視して、もし値が変わったら実行する</span>
    myNumber: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synComment">// data の tweenedNumber のプロパティを1行で myNumber まで増やす</span>
      TweenMax.to(<span class="synIdentifier">this</span>.$data, 1, <span class="synIdentifier">{</span> tweenedNumber: <span class="synIdentifier">this</span>.myNumber <span class="synIdentifier">}</span>);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>,
  computed: <span class="synIdentifier">{</span>
    <span class="synComment">// tweenedNumber が変わったら、変化中の animeNumber を算出する</span>
    animeNumber: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">this</span>.tweenedNumber.toFixed(0);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190116115053.png" alt="f:id:jotaki:20190116115053p:plain" title="f:id:jotaki:20190116115053p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<hr />

<h4>おさらい</h4>

<p><strong>データが変化したら、自動的に再計算するとき</strong></p>

<blockquote><p>1.HTMLで表示させたいところに「<strong>プロパティ名</strong>」を指定</p></blockquote>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ taxIncluded }} 円<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
</pre>


<blockquote><p>2.Vueインスタンスの「<code>computed:</code>」に、データが変化したら再計算する計算式を用意します。</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>computed: <span class="synIdentifier">{</span>
  taxIncluded: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">this</span>.price * 1.08;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p><strong>データが変化したら、自動的にメソッドを再実行するとき</strong></p>

<blockquote><p>1.HTMLのtextarea要素などに、「v-model="メソッド名"」と指定</p></blockquote>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">textarea</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;inputText&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">textarea</span><span class="synIdentifier">&gt;</span>
</pre>


<blockquote><p>2.Vueインスタンスの「<code>data:</code>」にそのプロパティを用意し、さらに「<code>watch:</code>」に、そのプロパティが変化したら再実行するメソッドを用意しておく</p></blockquote>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>data: <span class="synIdentifier">{</span>
  inputText: <span class="synConstant">&quot;&quot;</span>
<span class="synIdentifier">}</span>,
watch: <span class="synIdentifier">{</span>
  inputText: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synComment">// 再実行メソッド</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】動かして学ぶ！Vue.js 開発入門 その5'
description: ''
publishDate: '01/16/2019 09:11:01'
---

[CONTENTS-START]
<h3>Chapter7 Google Charts と連動させてみよう</h3>

<h4>02 Google Chartsと連動させる</h4>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;chart_div&quot;</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;height: 500px;&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;(item,c) in dataArray&quot;</span><span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;c&gt;0&quot;</span><span class="synIdentifier">&gt;</span>{{ item[0] }}：{{ item[1] }}
      <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;addOne(c)&quot;</span><span class="synIdentifier">&gt;</span>1票足す<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p><code>v-if="c&gt;0"</code>はデータを2つ目以降からの表示にするため（<code>['種類', '個数']</code>はデータに入れない）</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// グラフに使うデータ</span>
<span class="synIdentifier">var</span> orgdata = <span class="synIdentifier">[</span>
  <span class="synIdentifier">[</span><span class="synConstant">'種類'</span>, <span class="synConstant">'個数'</span><span class="synIdentifier">]</span>,
  <span class="synIdentifier">[</span><span class="synConstant">'野球'</span>, 3<span class="synIdentifier">]</span>, <span class="synIdentifier">[</span><span class="synConstant">'サッカー'</span>, 4<span class="synIdentifier">]</span>, <span class="synIdentifier">[</span><span class="synConstant">'バドミントン'</span>, 5<span class="synIdentifier">]</span>,
  <span class="synIdentifier">[</span><span class="synConstant">'陸上'</span>, 1<span class="synIdentifier">]</span>, <span class="synIdentifier">[</span><span class="synConstant">'ラグビー'</span>, 3<span class="synIdentifier">]</span>, <span class="synIdentifier">[</span><span class="synConstant">'その他'</span>, 1<span class="synIdentifier">]</span>
<span class="synIdentifier">]</span>;
google.charts.load(<span class="synConstant">'current'</span>, <span class="synIdentifier">{</span> packages: <span class="synIdentifier">[</span><span class="synConstant">'corechart'</span><span class="synIdentifier">]</span> <span class="synIdentifier">}</span>);
google.charts.setOnLoadCallback(drawBasic);

<span class="synComment">// グラフを表示する関数</span>
<span class="synIdentifier">function</span> drawBasic() <span class="synIdentifier">{</span>
  <span class="synIdentifier">var</span> data = google.visualization.arrayToDataTable(orgdata);
  <span class="synIdentifier">var</span> options = <span class="synIdentifier">{</span> title: <span class="synConstant">'好きなスポーツ'</span>, <span class="synConstant">&quot;is3D&quot;</span>: <span class="synConstant">true</span> <span class="synIdentifier">}</span>;
  <span class="synIdentifier">var</span> chart = <span class="synStatement">new</span> google.visualization.PieChart(
    <span class="synStatement">document</span>.getElementById(<span class="synConstant">'chart_div'</span>));
  chart.draw(data, options);
<span class="synIdentifier">}</span>

<span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    dataArray: orgdata
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    addOne: <span class="synIdentifier">function</span> (val) <span class="synIdentifier">{</span>
      <span class="synComment">// `val` 指定されたランチ番号</span>
      <span class="synIdentifier">var</span> obj = <span class="synIdentifier">this</span>.dataArray<span class="synIdentifier">[</span>val<span class="synIdentifier">]</span>; <span class="synComment">// 指定されたスポーツの投票数</span>
      obj<span class="synIdentifier">[</span>1<span class="synIdentifier">]</span>++; <span class="synComment">// +1 する</span>
      <span class="synIdentifier">this</span>.dataArray.splice(val, 1, obj); <span class="synComment">// `obj` と `splice` で入れ替える</span>
      drawBasic(); <span class="synComment">// 図を再描画</span>
      console.log(orgdata);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190116090050.png" alt="f:id:jotaki:20190116090050p:plain" title="f:id:jotaki:20190116090050p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】動かして学ぶ！Vue.js 開発入門 その4'
description: ''
publishDate: '01/15/2019 22:21:29'
---

[CONTENTS-START]
<h3>Chapter6 条件とくり返しを使うとき</h3>

<h4>01 条件によって表示する：<code>v-if</code></h4>

<blockquote><p><strong>条件で表示するときは、<code>v-if</code></strong></p></blockquote>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- true のときだけ表示する --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;checkbox&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myVisible&quot;</span><span class="synIdentifier">&gt;</span>表示する<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;myVisible&quot;</span><span class="synIdentifier">&gt;</span>チェックボックスはON<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- true と false で表示を切り替える --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;checkbox&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myVisible&quot;</span><span class="synIdentifier">&gt;</span>表示する<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;myVisible&quot;</span><span class="synIdentifier">&gt;</span>チェックボックスはON<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-else=</span><span class="synConstant">&quot;myVisible&quot;</span><span class="synIdentifier">&gt;</span>チェックボックスはOFF<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- クリックしたら「いいね！」ボタンが消える --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;isShow&quot;</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;like&quot;</span><span class="synIdentifier">&gt;</span>Like<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    myVisible: <span class="synConstant">false</span>,
    isShow: <span class="synConstant">true</span>,
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    like: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.isShow = <span class="synConstant">false</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190115222038.png" alt="f:id:jotaki:20190115222038p:plain" title="f:id:jotaki:20190115222038p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h4>02 くり返し表示する：<code>v-for</code></h4>

<blockquote><p><strong>くり返し表示するときは、<code>v-if</code></strong></p></blockquote>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- 配列データをリストで表示する --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in myArray&quot;</span><span class="synIdentifier">&gt;</span>{{ item }}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- 配列データを番号付きリストで表示する --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;(item, index) in myArray&quot;</span><span class="synIdentifier">&gt;</span>{{ index }}:{{ item }}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- オブジェクトの配列データをリストで表示する --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in objArray&quot;</span><span class="synIdentifier">&gt;</span>名前：{{ item.name }} / 年齢：{{ item.age }}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- 1x2〜10x2をくり返し表示する --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;n in 10&quot;</span><span class="synIdentifier">&gt;</span>{{ n }}x2={{ n * 2 }}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- 配列データをテーブルで表示する --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">h3</span><span class="synIdentifier">&gt;</span>出席ランキング<span class="synIdentifier">&lt;/</span><span class="synStatement">h3</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">table</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">thead</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">th</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in header&quot;</span><span class="synIdentifier">&gt;</span>{{ item }}<span class="synIdentifier">&lt;/</span><span class="synStatement">th</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">thead</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">tbody</span><span class="synIdentifier">&gt;</span>
      <span class="synComment">&lt;!-- 1行のくり返し --&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">tr</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;line in attendance&quot;</span><span class="synIdentifier">&gt;</span>
        <span class="synComment">&lt;!-- 1データのくり返し --&gt;</span>
        <span class="synIdentifier">&lt;</span><span class="synStatement">td</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in line&quot;</span><span class="synIdentifier">&gt;</span>{{ item }}<span class="synIdentifier">&lt;/</span><span class="synStatement">td</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;/</span><span class="synStatement">tr</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">tbody</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">table</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    myArray: <span class="synIdentifier">[</span><span class="synConstant">'Taro'</span>, <span class="synConstant">'Hanako'</span>, <span class="synConstant">'Ichiro'</span><span class="synIdentifier">]</span>,
    objArray: <span class="synIdentifier">[</span>
      <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Taro&quot;</span>, age: 20 <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Hanako&quot;</span>, age: 30 <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Ichiro&quot;</span>, age: 40 <span class="synIdentifier">}</span>
    <span class="synIdentifier">]</span>,
    header: <span class="synIdentifier">[</span><span class="synConstant">'名前/年'</span>, <span class="synConstant">'2016'</span>, <span class="synConstant">'2017'</span>, <span class="synConstant">'2018'</span>, <span class="synConstant">'2019'</span><span class="synIdentifier">]</span>,
    attendance: <span class="synIdentifier">[</span>
      <span class="synIdentifier">[</span><span class="synConstant">'Taro'</span>, 1, 2, 3, 4<span class="synIdentifier">]</span>,
      <span class="synIdentifier">[</span><span class="synConstant">'Hanako'</span>, 2, 3, 4, 1<span class="synIdentifier">]</span>,
      <span class="synIdentifier">[</span><span class="synConstant">'Ichiro'</span>, 1, 4, 3, 2<span class="synIdentifier">]</span>
    <span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190115222042.png" alt="f:id:jotaki:20190115222042p:plain" title="f:id:jotaki:20190115222042p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h5>配列データの追加と削除</h5>

<blockquote><p>Vue.js で配列を使うとき、注意するのは、<strong>値を変更</strong>するときも <strong><code>splice</code></strong> メソッドを使うということです。</p></blockquote>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- ボタンでリストの追加・削除を行う --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in myArray&quot;</span><span class="synIdentifier">&gt;</span>{{ item }}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;addLast&quot;</span><span class="synIdentifier">&gt;</span>末尾に追加<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;addObj(3)&quot;</span><span class="synIdentifier">&gt;</span>4つ目に追加<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;changeObj(0)&quot;</span><span class="synIdentifier">&gt;</span>1つ目を変更<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;deleteObj(1)&quot;</span><span class="synIdentifier">&gt;</span>2つ目を削除<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- ボタンをクリックしたらソートする --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in myNumber&quot;</span><span class="synIdentifier">&gt;</span>{{ item }}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;sortDataAsc(myNumber)&quot;</span><span class="synIdentifier">&gt;</span>ソートする（昇順）<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;sortDataDesc(myNumber)&quot;</span><span class="synIdentifier">&gt;</span>ソートする（降順）<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    myArray: <span class="synIdentifier">[</span><span class="synConstant">'1つ目'</span>, <span class="synConstant">'2つ目'</span>, <span class="synConstant">'3つ目'</span>, <span class="synConstant">'4つ目'</span>, <span class="synConstant">'5つ目'</span><span class="synIdentifier">]</span>,
    myNumber: <span class="synIdentifier">[</span>3, 4, 1, 5, 2<span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    addLast: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.myArray.push(<span class="synConstant">'[末尾に追加]'</span>);
    <span class="synIdentifier">}</span>,
    addObj: <span class="synIdentifier">function</span> (index) <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.myArray.splice(index, 0, <span class="synConstant">'[追加]'</span>);
    <span class="synIdentifier">}</span>,
    changeObj: <span class="synIdentifier">function</span> (index) <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.myArray.splice(index, 1, <span class="synConstant">'[変更]'</span>);
    <span class="synIdentifier">}</span>,
    deleteObj: <span class="synIdentifier">function</span> (index) <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.myArray.splice(index, 1);
    <span class="synIdentifier">}</span>,
    sortDataAsc: <span class="synIdentifier">function</span> (listData) <span class="synIdentifier">{</span>
      listData.sort(<span class="synIdentifier">function</span> (a, b) <span class="synIdentifier">{</span>
        <span class="synStatement">return</span> (a &lt; b ? -1 : 1);
      <span class="synIdentifier">}</span>);
    <span class="synIdentifier">}</span>,
    sortDataDesc: <span class="synIdentifier">function</span> (listData) <span class="synIdentifier">{</span>
      listData.sort(<span class="synIdentifier">function</span> (a, b) <span class="synIdentifier">{</span>
        <span class="synStatement">return</span> (a &gt; b ? -1 : 1);
      <span class="synIdentifier">}</span>);
    <span class="synIdentifier">}</span>,
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190115222046.png" alt="f:id:jotaki:20190115222046p:plain" title="f:id:jotaki:20190115222046p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h5><code>v-for</code> と <code>v-if</code> の組み合わせ</h5>

<blockquote><p><strong><code>v-for</code></strong> は <strong><code>v-if</code></strong> と組み合わせて使うこともできます。「くり返しを行いながら、条件を満たすときだけ表示させる」ということができます。</p></blockquote>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- 偶数だけ表示する --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in myArray&quot;</span><span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;item % 2 == 0&quot;</span><span class="synIdentifier">&gt;</span>{{ item }}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- ボタンをクリックしたら偶数だけ表示する --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in myArray&quot;</span><span class="synIdentifier">&gt;</span>{{ item }}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;eventDataEven()&quot;</span><span class="synIdentifier">&gt;</span>偶数だけ表示する<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    myArray: <span class="synIdentifier">[</span>1, 2, 3, 4, 5, 6<span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    eventDataEven: <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.myArray = <span class="synIdentifier">this</span>.myArray.filter(
        <span class="synIdentifier">function</span> (value) <span class="synIdentifier">{</span>
          <span class="synStatement">return</span> value % 2 == 0;
        <span class="synIdentifier">}</span>
      );
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190115222049.png" alt="f:id:jotaki:20190115222049p:plain" title="f:id:jotaki:20190115222049p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】動かして学ぶ！Vue.js 開発入門 その3'
description: ''
publishDate: '01/14/2019 15:37:59'
---

[CONTENTS-START]
<h3>Chapter5 ユーザーの操作をつなぐとき</h3>

<h4>01 イベントとつなぐ：<code>v-on</code></h4>

<blockquote><p><strong>イベントとメソッドをつなぐときは、<code>v-on</code></strong></p></blockquote>

<p>メソッドの作り方</p>

<blockquote><p><strong>メソッド（命令文）は、Vue インスタンスに <code>methods</code> オプションを追加して作ります。</strong><br/>
<strong><code>methods</code> オプション</strong>では、「どんな命令があるのか」を指定します。</p></blockquote>

<h5>ボタンをクリックしたとき</h5>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- クリックしたら1増やす --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ count }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;countUp&quot;</span><span class="synIdentifier">&gt;</span>1増やす<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- クリックしたら、2回目は押せなくなる --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;Like&quot;</span><span class="synIdentifier"> v-bind:</span><span class="synType">disabled</span><span class="synIdentifier">=</span><span class="synConstant">&quot;isLikeClick&quot;</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;oneClick&quot;</span><span class="synIdentifier">&gt;</span>
    Like
  <span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> like() <span class="synIdentifier">{</span>
  <span class="synStatement">alert</span>(<span class="synConstant">&quot;Like button clicked&quot;</span>);
<span class="synIdentifier">}</span>
<span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    count: 0,
    isLikeClick: <span class="synConstant">false</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    countUp: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.count++;
    <span class="synIdentifier">}</span>,
    oneClick: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.isLikeClick = <span class="synConstant">true</span>;
      like();
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190114153632.png" alt="f:id:jotaki:20190114153632p:plain" title="f:id:jotaki:20190114153632p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h5>引数を渡してメソッドを実行する</h5>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- クリックしたら、値をいろいろ増やす例 --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ count }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;countUp(1)&quot;</span><span class="synIdentifier">&gt;</span>1増やす<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;countUp(10)&quot;</span><span class="synIdentifier">&gt;</span>10増やす<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;countUp(100)&quot;</span><span class="synIdentifier">&gt;</span>100増やす<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    count: 0
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    countUp: <span class="synIdentifier">function</span>(value) <span class="synIdentifier">{</span>
      <span class="synIdentifier">this</span>.count += value;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190114153636.png" alt="f:id:jotaki:20190114153636p:plain" title="f:id:jotaki:20190114153636p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h5>キー入力したとき</h5>

<p>これはそこまで頻度なさそうですが</p>

<h6>キー修飾子</h6>

<ul>
<li><code>.enter</code></li>
<li><code>.tab</code></li>
<li><code>.delete</code>（「Delete」と「Backspace」両方）</li>
<li><code>.esc</code></li>
<li><code>.space</code></li>
<li><code>.up</code></li>
<li><code>.down</code></li>
<li><code>.left</code></li>
<li><code>.right</code></li>
<li><code>.48</code>〜<code>.57</code>（「0」〜「9」）</li>
<li><code>.65</code>〜<code>.90</code>（「A」〜「Z」）</li>
</ul>


<h6>システム修飾子キー</h6>

<ul>
<li><code>.ctrl</code></li>
<li><code>alt</code></li>
<li><code>shift</code></li>
<li><code>meta</code>（Win は「Windows」キー、Mac は「command」キー）</li>
</ul>


<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- Enterキーを押したらアラートを表示する --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> v-on:keyup.enter=</span><span class="synConstant">&quot;showAlert&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myText&quot;</span><span class="synIdentifier"> /&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ myText }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    myText: <span class="synConstant">&quot;Hello!!!&quot;</span>
  <span class="synIdentifier">}</span>,
  methods: <span class="synIdentifier">{</span>
    showAlert: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synStatement">alert</span>(<span class="synConstant">&quot;Enterキーが押されました。&quot;</span>);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190114153638.png" alt="f:id:jotaki:20190114153638p:plain" title="f:id:jotaki:20190114153638p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】動かして学ぶ！Vue.js 開発入門 その2'
description: ''
publishDate: '01/14/2019 14:42:35'
---

[CONTENTS-START]
<h3>Chapter3 属性の指定をするとき</h3>

<h4>01 要素の属性をデータで指定する：<code>v-bind</code></h4>

<blockquote><p>用意したデータで HTML の属性を指定したいときは、<code>v-bind</code>を使います。</p></blockquote>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- `src` --&gt;</span>
  <span class="synIdentifier">&lt;</span>figure<span class="synIdentifier">&gt;&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;face1.png&quot;</span><span class="synIdentifier"> /&gt;&lt;/</span>figure<span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>figure<span class="synIdentifier">&gt;&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> v-bind:</span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;fileName&quot;</span><span class="synIdentifier"> /&gt;&lt;/</span>figure<span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- `href` --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> </span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://yuheijotaki.com&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">リンクを直接指定</span><span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">a</span><span class="synIdentifier"> v-bind:</span><span class="synType">href</span><span class="synIdentifier">=</span><span class="synConstant">&quot;myURL&quot;</span><span class="synIdentifier">&gt;</span><span class="synUnderlined">リンクを `v-bind` で指定</span><span class="synIdentifier">&lt;/</span><span class="synStatement">a</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- `style` --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;color:#f00;background-color:#ff0&quot;</span><span class="synIdentifier">&gt;</span>文字色を直接指定<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-bind:</span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{color: myColor01,backgroundColor: myColor02}&quot;</span><span class="synIdentifier">&gt;</span>
    文字色を `v-bind` で指定
  <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- `class` --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;myClass&quot;</span><span class="synIdentifier">&gt;</span>直接クラスを指定<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-bind:</span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;myClass01&quot;</span><span class="synIdentifier">&gt;</span>`v-bind` でクラスを1つ指定<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-bind:</span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;[myClass01,myClass02]&quot;</span><span class="synIdentifier">&gt;</span>`v-bind` でクラスを複数指定<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-bind:</span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{'myClass01': isClassActive}&quot;</span><span class="synIdentifier">&gt;</span>データでクラスをON/OFF<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    fileName: <span class="synConstant">&quot;face1.png&quot;</span>,
    myURL: <span class="synConstant">&quot;https://yuheijotaki.com&quot;</span>,
    myColor01: <span class="synConstant">&quot;#f00&quot;</span>,
    myColor02: <span class="synConstant">&quot;#ff0&quot;</span>,
    myClass01: <span class="synConstant">&quot;my-class-01&quot;</span>,
    myClass02: <span class="synConstant">&quot;my-class-02&quot;</span>,
    isClassActive: <span class="synConstant">true</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190114144015.png" alt="f:id:jotaki:20190114144015p:plain" title="f:id:jotaki:20190114144015p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h3>Chapter4 ユーザーの入力をつなぐとき</h3>

<h4>01 入力フォームとデータをつなぐ：<code>v-model</code></h4>

<blockquote><p><strong>フォーム入力とデータをつなげるときは、<code>v-model</code></strong><br/>
<code>v-model</code> ディレクティブは、<code>input</code>要素、<code>select</code>要素、<code>textarea</code>要素などに使います。</p></blockquote>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- text --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myName&quot;</span><span class="synIdentifier"> placeholder=</span><span class="synConstant">&quot;お名前&quot;</span><span class="synIdentifier"> /&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>私は、{{ myName }}です。<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- textarea --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">textarea</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myText&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">textarea</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>文章は、「{{ myText }}」<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>文字数は、{{ myText.length }}文字です。<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- checkbox（単数） --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;checkbox&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myCheck&quot;</span><span class="synIdentifier">/&gt;&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>チェックボックスは、{{ myCheck }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- checkbox（複数） --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;checkbox&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;Taro&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myChecks&quot;</span><span class="synIdentifier"> /&gt;</span>Taro<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span>
<span class="synIdentifier">    &gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;checkbox&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;Hanako&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myChecks&quot;</span><span class="synIdentifier"> /&gt;</span>Hanako<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span>
<span class="synIdentifier">  &gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span>
<span class="synIdentifier">    &gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;checkbox&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;Ichiro&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myChecks&quot;</span><span class="synIdentifier"> /&gt;</span>Ichiro<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span>
<span class="synIdentifier">  &gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>選択したのは、{{ myChecks }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- button --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;checkbox&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myAgree&quot;</span><span class="synIdentifier"> /&gt;</span>同意します。<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-bind:</span><span class="synType">disabled</span><span class="synIdentifier">=</span><span class="synConstant">&quot;myAgree==false&quot;</span><span class="synIdentifier">&gt;</span>送信<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span> もしくは
    <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-bind:</span><span class="synType">disabled</span><span class="synIdentifier">=</span><span class="synConstant">&quot;!myAgree&quot;</span><span class="synIdentifier">&gt;</span>送信<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- radio --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;Taro&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myPicked&quot;</span><span class="synIdentifier"> /&gt;</span>Taro<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;Hanako&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myPicked&quot;</span><span class="synIdentifier"> /&gt;</span>Hanako<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;Ichiro&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myPicked&quot;</span><span class="synIdentifier"> /&gt;</span>Ichiro<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>選択したのは、{{ myPicked }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- radio で画像切り替え --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;face1.png&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myFace&quot;</span><span class="synIdentifier"> /&gt;</span>face1<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;face2.png&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myFace&quot;</span><span class="synIdentifier"> /&gt;</span>face2<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>選択したのは、{{ myFace }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">img</span><span class="synIdentifier"> v-bind:</span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;myFace&quot;</span><span class="synIdentifier"> /&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- select（単一） --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">select</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myColor&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;&quot;</span><span class="synIdentifier"> </span><span class="synType">disabled</span><span class="synIdentifier">&gt;</span>色を選択してください<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>red<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>blue<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>green<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>yellow<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>aqua<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">select</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-bind:</span><span class="synType">style</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{color:myColor}&quot;</span><span class="synIdentifier">&gt;</span>選んだのは、{{ myColor }}です<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- select（複数） --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">select</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;myColorMultiple&quot;</span><span class="synIdentifier"> </span><span class="synType">multiple</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>red<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>blue<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>green<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>yellow<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>aqua<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">select</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>選んだのは、{{ myColorMultiple }}です<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- 修飾子 `.lazy` --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> v-model.lazy=</span><span class="synConstant">&quot;myTextLazy&quot;</span><span class="synIdentifier"> /&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>入力後に表示「{{ myTextLazy }}」<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- 修飾子 `.number` --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;number&quot;</span><span class="synIdentifier"> v-model.number=</span><span class="synConstant">&quot;myNumber&quot;</span><span class="synIdentifier"> /&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>100を足して表示「{{ 100 + myNumber }}」<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- 修飾子 `.trim` --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> v-model.trim=</span><span class="synConstant">&quot;myTextTrim&quot;</span><span class="synIdentifier"> /&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>前後の空白を削除「{{ myTextTrim }}」<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    myName: <span class="synConstant">&quot;&quot;</span>,
    myText: <span class="synConstant">&quot;&quot;</span>,
    myCheck: <span class="synConstant">false</span>,
    myChecks: <span class="synIdentifier">[]</span>,
    myAgree: <span class="synConstant">false</span>,
    myPicked: <span class="synConstant">&quot;Taro&quot;</span>,
    myFace: <span class="synConstant">&quot;face1.png&quot;</span>,
    myColor: <span class="synConstant">&quot;&quot;</span>,
    myColorMultiple: <span class="synIdentifier">[]</span>,
    myTextLazy: <span class="synConstant">&quot;&quot;</span>,
    myNumber: 0,
    myTextTrim: <span class="synConstant">&quot;&quot;</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190114144019.png" alt="f:id:jotaki:20190114144019p:plain" title="f:id:jotaki:20190114144019p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>修飾子便利そうですね。だんだん理解できるようになってきました。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】動かして学ぶ！Vue.js 開発入門 その1'
description: ''
publishDate: '01/14/2019 12:07:42'
---

[CONTENTS-START]
<p>Vue.js の初心者向けの本が新しく出ていたので読みながらコード書きながら気になった箇所、覚えたい箇所をメモしていきます</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798158925/hatena-blog-22/"><img src="/images/hatena/20190726111911.jpg" class="hatena-asin-detail-image" alt="動かして学ぶ！Vue.js開発入門 (NEXT ONE)" title="動かして学ぶ！Vue.js開発入門 (NEXT ONE)"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4798158925/hatena-blog-22/">動かして学ぶ！Vue.js開発入門 (NEXT ONE)</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 森巧尚</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 翔泳社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2019/01/15</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4798158925/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p><a href="https://www.amazon.co.jp/dp/4863542453/">ネコ本</a> やったのもあり、基礎的な部分は復習になりますが、よりわかりやすく説明されている箇所もあったので良い勉強になりそうです。</p>

<h3>ネコ本との比較</h3>

<p>2 章までしかしていませんが、ネコ本よりもこちらの本の方が難易度は低いと思います。<br/>
図解がフルカラーなこと、コード上の文法の上で平易な文章で図解が書かれているので、理解がしやすかったです。</p>

<p>例えば CSS や CDN、SPA、<code>substr</code> などの用語やメソッドの概要に関しても Tips 枠（コラム/メモ/ワンポイント）で説明がされているので、不明な人はそこも読んで、理解している人は飛ばしても OK な内容があります。</p>

<p>ネコ本は最後に CLI や SPA、モジュールなど詰め込みが目立ったように感じましたが、こちらは Vue.js のほんとうに基礎（さわり）で HTML/CSS/JavaScript をなんとなく分かる人であれば最後まで理解しながら読み進めれると感じます。（いまのところ）</p>

<p>なので本を読んで Vue.js を学ぶ人のステップとしては、<br/>
<strong>Vue.js 開発入門（この本、イヌ本？）→ ネコ本 → Vue.js 入門</strong><br/>
が理解がスムーズにいくような気がします。</p>

<h3>Chapter2 データを表示するとき</h3>

<h4>01 Vue インスタンスを作る：<code>new Vue</code></h4>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: ,       <span class="synComment">// どのHTML要素とつながるのか</span>
  data: ,     <span class="synComment">// どんなデータがあるのか</span>
  methods: ,  <span class="synComment">// どんな処理を行うのか</span>
  computed: , <span class="synComment">// どのデータを使って別の計算をするのか</span>
  watch:      <span class="synComment">// どのデータを監視するのか</span>
<span class="synIdentifier">}</span>);
</pre>


<h4>02 データをそのまま表示する：<code>{{データ}}</code></h4>

<p>データバインディング</p>

<blockquote><p>「Vue インスタンスのデータが Web ページ上の表示と結合すること」を<strong>データバインディング</strong>といいます。</p></blockquote>

<p>ディレクティブ</p>

<blockquote><p><strong>ディレクティブ</strong>とは、「要素に対して Vue がどんなことを行うかを指示する命令」のことで頭に <code>v-</code> がついています。</p></blockquote>

<h4>03 使えるデータの種類</h4>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synComment">&lt;!-- 数値型 --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ myNumber }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- 文字列型 --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ myText }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- ブーリアン型 --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ myBool }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- 配列 --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ myArray }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ myArray[0] }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- オブジェクト型 --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ myObject }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ myObject.name }}：{{ myObject.gender }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- JavaScriptで用意したデータ --&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ jsObject }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ jsObject[1].name }}：{{ jsObject[1].gender }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">hr</span><span class="synIdentifier"> /&gt;</span>
  <span class="synComment">&lt;!-- データの出力 --&gt;</span>
  {{ $data }}
  <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;(item,key) in $data&quot;</span><span class="synIdentifier">&gt;</span>{{ key }}:{{ item }}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> jsList = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Hanako&quot;</span>, gender: <span class="synConstant">&quot;female&quot;</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Ichiro&quot;</span>, gender: <span class="synConstant">&quot;male&quot;</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Tomoko&quot;</span>, gender: <span class="synConstant">&quot;female&quot;</span> <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>;
<span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    myNumber: 12345,
    myText: <span class="synConstant">&quot;Hello!!!&quot;</span>,
    myBool: <span class="synConstant">true</span>,
    myArray: <span class="synIdentifier">[</span><span class="synConstant">&quot;Taro&quot;</span>, <span class="synConstant">&quot;Hanako&quot;</span>, <span class="synConstant">&quot;Ichiro&quot;</span>, <span class="synConstant">&quot;Tomoko&quot;</span><span class="synIdentifier">]</span>,
    myObject: <span class="synIdentifier">{</span>
      name: <span class="synConstant">&quot;Taro&quot;</span>,
      gender: <span class="synConstant">&quot;male&quot;</span>
    <span class="synIdentifier">}</span>,
    jsObject: jsList
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>結果</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20190114120502.png" alt="f:id:jotaki:20190114120502p:plain" title="f:id:jotaki:20190114120502p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【WordPress】Gutenberg 参考にしたリンクと所感'
description: ''
publishDate: '01/13/2019 21:35:35'
---

[CONTENTS-START]
<p>案件で初めて WordPress5.x 以降を触わり、Gutenberg に対応する際に参考にしたサイトをメモしておきます。</p>

<hr />

<h4><a href="https://qiita.com/ituki_b/items/0ad429d896378329a134">【WordPress】Gutenberg 周りの情報まとめ（随時更新） - Qiita</a></h4>

<p>包括的にまとまっているのはこちらでした。</p>

<h4><a href="https://wpmake.jp/contents/knowledge/gutenberg_manual/#Gutenberg-7">【2018 年最新版】Gutenberg の使い方！WordPress 初心者でもわかる図解あり｜ wp.geek</a></h4>

<p>Gutenberg の各ブロックの説明はこちらが詳しい。</p>

<h4><a href="https://www.nxworld.net/wordpress/wp-gutenberg-remove-default-block.html">WordPress：Gutenberg でデフォルト表示されているブロックを非表示にする方法 | NxWorld</a></h4>

<p>投稿画面で全てのブロックに対して CSS を用意するのは難しいので、使わないブロック機能を非表示にするときはこちら<br/>
最新だと Reddit など海外の人しか使わないであろう外部サービスも増えていて、もっと増えそう。。</p>

<hr />

<p>やっていて思ったのですが、CSS は書いたとおり（全体囲う <code>&lt;div&gt;</code> or <code>&lt;article&gt;</code> の中でタグごとに指定する）に動くので問題ないはないと行った感じです。<br/>
しかし仮にスクラッチのテーマ作成で Gutenberg + クラシックエディター（旧 WYSIWYG + TinyMCE）をフル対応するとかなり工数かかるなあという印象。<br/>
公式テーマをベースにカスタムテーマをいじるほうが主流になるかもしれないなあと感じました。</p>

<p>また編集画面 HTML からフィルターフックから大体変更がされているので、これまで使ってたスニペットを改変する or 調べ直す必要も。カテゴリー未選択時にアラート出すとか、5.x 以降では出回っているようなのだと動かなかった。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】メルカリ 希代のスタートアップ、野心と焦りと挑戦の 5 年間'
description: ''
publishDate: '01/13/2019 16:52:20'
---

[CONTENTS-START]
<p>今年は読書をしようと思って、本当は技術書を読んだほうがいいのですが、とりあえず習慣づけるためにライトな本を読みました。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822289508/hatena-blog-22/"><img src="/images/hatena/20190726111844.jpg" class="hatena-asin-detail-image" alt="メルカリ  希代のスタートアップ、野心と焦りと挑戦の5年間" title="メルカリ  希代のスタートアップ、野心と焦りと挑戦の5年間"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4822289508/hatena-blog-22/">メルカリ  希代のスタートアップ、野心と焦りと挑戦の5年間</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 奥平和行</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 日経BP社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/11/22</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本</li><li><a href="http://d.hatena.ne.jp/asin/4822289508/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>内容的には、メルカリ創業者の山田進太郎氏のウノウ設立から譲渡、メルカリ設立から昨年の上場までをまとめた本。<br/>
著者が後追いで取材して構成されていて、うまく話としては入ってきます。<br/>
ただ Amazon のレビューにもある通り、熱がない、というか割と淡々と読み進めました。</p>

<p>個人的に良かったのは、スタートアップのお金の考え方というか、資金調達がどんなものかイマイチ分かってなかったのでそこが勉強できたこと。<br/>
スタートアップ、またフリマアプリという所で特別なこともあるとは思いますが、どの時期にどの部署を作ったり、どこを強くしていくかということ。<br/>
企業規模が増えるにつれて、メルカリみたいな企業でも成長痛的な時期が訪れること。<br/>
CEO が方向見誤ったときは頭を下げる場面もあること。</p>

<p>一般的な読者を想定しているので技術的な話はないとは思っていましたが、最初のアプリ化の際に HTML5 を採用して、すぐにネイティブに切り替えたとかその程度でした。<br/>
技術的な話がもっとあればなというのがあるにはありますが、話として読み進められたのでそこは不満にはなりませんでした。</p>

<p>自分もメルカリ何度か使ったことあるので、現金問題とかアメリカ事業苦戦とか色々あると思いますが、日本のテックカンパニーとしてさらに成功して夢見させてほしいなと思います。<br/>
あといつもメルカリ主催の勉強会埋まるの早いのですが、1回は行こうと思いました。</p>

<hr />

<p>目標としては最低月 2 冊読んでこのブログに読書メモとしてアップしていく予定です。<br/>
積読したりするので、本屋に行っても買うのは 1 冊。分厚い本や難易度の高い本だと挫折しそうなので、ライトな本から習慣づけていきたいです。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '採用'
description: ''
publishDate: '01/04/2019 21:41:35'
---

[CONTENTS-START]
<p>インタビュー記事などいろいろ見ていて、主観ですが面白い取り組みや考え方のコンテンツをメモしておきます。</p>

<h5>開発者クレド</h5>

<p><a href="https://aiming-inc.com/ja/developer-credo/">Aiming &#x958B;&#x767A;&#x8005;&#x30AF;&#x30EC;&#x30C9; | &#x682A;&#x5F0F;&#x4F1A;&#x793E; Aiming(&#x30A8;&#x30A4;&#x30DF;&#x30F3;&#x30B0;)</a></p>

<p>ゲーム会社なのでひとつ目は当てはまりづらいですが、「チーム対問題の原則」の部分、採用に関しての取り組み方（エンジニア複数人が絡む、エンジニアしかエンジニアの評価はできない）のは合理的だなと感じました。</p>

<h5>採用の秘訣 / 私たちの失敗談</h5>

<p><a href="https://baigie.me/job/message/tips/">&#x63A1;&#x7528;&#x306E;&#x79D8;&#x8A23;&#xFF5C;&#x5FDC;&#x52DF;&#x8005;&#x3078;&#x306E;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#xFF5C;&#x63A1;&#x7528;&#x30B5;&#x30A4;&#x30C8;&#xFF5C;&#x6771;&#x4EAC;&#x306E;Web&#x5236;&#x4F5C;&#x4F1A;&#x793E;&#xFF5C;&#x682A;&#x5F0F;&#x4F1A;&#x793E;&#x30D9;&#x30A4;&#x30B8;&#xFF5C;baigie inc.</a></p>

<p><a href="https://baigie.me/job/message/mistake/">&#x79C1;&#x305F;&#x3061;&#x306E;&#x5931;&#x6557;&#x8AC7;&#xFF5C;&#x5FDC;&#x52DF;&#x8005;&#x3078;&#x306E;&#x30E1;&#x30C3;&#x30BB;&#x30FC;&#x30B8;&#xFF5C;&#x63A1;&#x7528;&#x30B5;&#x30A4;&#x30C8;&#xFF5C;&#x6771;&#x4EAC;&#x306E;Web&#x5236;&#x4F5C;&#x4F1A;&#x793E;&#xFF5C;&#x682A;&#x5F0F;&#x4F1A;&#x793E;&#x30D9;&#x30A4;&#x30B8;&#xFF5C;baigie inc.</a></p>

<p>マッチングという面で、求める人物像を細かに説明したり、失敗談を公開することでどういう価値観が分かりやすいなと感じます。</p>

<h5>仕事術（代表コラム）/ インタビュー / メンバー座談会</h5>

<p><a href="https://app.codegrid.net/series/pix-works/">&#x30D4;&#x30AF;&#x30BB;&#x30EB;&#x30B0;&#x30EA;&#x30C3;&#x30C9;&#x306E;&#x4ED5;&#x4E8B;&#x8853; | CodeGrid</a></p>

<p><a href="https://app.codegrid.net/series/future-works/">&#x30A8;&#x30F3;&#x30B8;&#x30CB;&#x30A2;&#x306B;&#x805E;&#x304F;&#x3001;&#x4ED5;&#x4E8B;&#x306E;&#x884C;&#x65B9; | CodeGrid</a></p>

<p><a href="https://app.codegrid.net/series/2018-round-up/">&#x884C;&#x304F;2018&#x5E74;&#x3001;&#x6765;&#x308B;2019&#x5E74; | CodeGrid</a></p>

<p>有料版でしか読めないかもしれませんが、CodeGrid の自社内コンテンツものは採用をかなり意識していると思います。<br/>
他の会社であれば実際に入ってみないと分からないことの多くが書かれているのと、技術のある会社がどのように動いているかが分かり面白かったです。<br/>
インタビューもこのくらい長いほうが好きです。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Sublime Text の独自スニペットを Visual Studio Code に移行'
description: ''
publishDate: '12/31/2018 00:11:24'
---

[CONTENTS-START]
<p>スニペットは Sublime Text の場合.xml、vscode は.json なので、変換ツール <a href="https://www.npmjs.com/package/convert-snippets-to-vscode">convert-snippets-to-vscode</a> を使いました。</p>

<h4>手順</h4>

<p><a href="https://vscode-doc-jp.github.io/docs/userguide/userdefinedsnippets.html">独自のスニペットを作成
</a> の通り <code>"editor.tabCompletion": true</code> に。</p>

<p>コマンドから convert-snippets-to-vscode をインストール</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>npm install <span class="synSpecial">-g</span> convert-snippets-to-vscode
</pre>


<p>デスクトップに移動して、あらかじめ html/scss/javascript/php など言語ごとに Sublime のスニペットをフォルダ分けしておく。</p>

<pre class="code" data-lang="" data-unlink>snippetToVsCode</pre>


<p>とすると</p>

<pre class="code" data-lang="" data-unlink>? Folder name: html</pre>


<p>でフォルダ名（html など）</p>

<pre class="code" data-lang="" data-unlink>? Output File Name: html.json</pre>


<p>で出力するファイル名（html.json など）を入力。</p>

<p><code>⁨ユーザ⁩/[ユーザー名]/⁨ライブラリ⁩/⁨Application Support⁩/⁨Code⁩/⁨User⁩/snippets/</code> 以下に各.json を格納</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Visual Studio Code で sftp'
description: ''
publishDate: '12/30/2018 23:00:24'
---

[CONTENTS-START]
<p><a href="https://marketplace.visualstudio.com/items?itemName=liximomo.sftp">sftp</a> の設定メモ</p>

<h4>設定手順</h4>

<p><code>Cmd+Shift+P</code> から <code>SFTP: config</code> を選択</p>

<h4>設定内容</h4>

<p><code>/.vscode/sftp.json</code> の設定内容</p>

<pre class="code lang-json" data-lang="json" data-unlink><span class="synSpecial">{</span>
  &quot;<span class="synStatement">protocol</span>&quot;: &quot;<span class="synConstant">sftp</span>&quot;,
  &quot;<span class="synStatement">host</span>&quot;: &quot;<span class="synConstant">[HostName]</span>&quot;,
  &quot;<span class="synStatement">username</span>&quot;: &quot;<span class="synConstant">[UserName]</span>&quot;,
  &quot;<span class="synStatement">password</span>&quot;: &quot;<span class="synConstant">[Password]</span>&quot;,
  &quot;<span class="synStatement">context</span>&quot;: &quot;<span class="synConstant">themes</span>&quot;, <span class="synError">// ローカルフォルダ内で参照するパス</span>
  &quot;<span class="synStatement">remotePath</span>&quot;: &quot;<span class="synConstant">/[WordPressFolder]/wp-content/themes/[ThemeName]</span>&quot;, <span class="synError">// リモートフォルダ先で参照（アップロード）するパス</span>
  &quot;<span class="synStatement">uploadOnSave</span>&quot;: <span class="synConstant">true</span>, <span class="synError">// 自動アップロード</span>
  &quot;<span class="synStatement">syncMode</span>&quot;: &quot;<span class="synConstant">full</span>&quot;, <span class="synError">// これは必要かな....</span>
  <span class="synError">// コンパイルされるファイルなどを監視する</span>
  &quot;<span class="synStatement">watcher</span>&quot;: <span class="synSpecial">{</span>
    &quot;<span class="synStatement">files</span>&quot;: &quot;<span class="synConstant">assets/css/*.{css,map}</span>&quot;,
    &quot;<span class="synStatement">autoUpload</span>&quot;: <span class="synConstant">true</span>,
    &quot;<span class="synStatement">autoDelete</span>&quot;: <span class="synConstant">true</span>
  <span class="synSpecial">}</span>,
  &quot;<span class="synStatement">ignore</span>&quot;: <span class="synSpecial">[</span>&quot;<span class="synConstant">.vscode</span>&quot;, &quot;<span class="synConstant">.git</span>&quot;, &quot;<span class="synConstant">.DS_Store</span>&quot;, &quot;<span class="synConstant">sftp-config(-alt</span><span class="synSpecial">\\</span><span class="synConstant">d?)?</span><span class="synSpecial">\\</span><span class="synConstant">.json</span>&quot;<span class="synSpecial">]</span>
<span class="synSpecial">}</span>
</pre>


<p>ほか ssh する際などは公式参照する</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'フロントエンドの学習についてなど'
description: ''
publishDate: '12/30/2018 20:42:58'
---

[CONTENTS-START]
<h2>概要</h2>

<p>今年 11 月末で Web 制作会社を退職、年明けから新しい会社で働くことになりました。<br/>
基本的に転職先の会社の業界や業務内容はそこまで変わらないのですが、フロントエンドエンジニアという職種でよりエンジニアらしい仕事が求められると思うので、11 月〜12 月の間に学習したこと、感じたことなどをメモしておこうと思います。</p>

<h2>学習したこと、試したこと</h2>

<h3>ツールやアプリ</h3>

<p>制作に関わるもの、テクノロジーに関わるものでこれまで試してこなかったことを積極的に試すようにしました。</p>

<h4>制作ツール</h4>

<ul>
<li>Adobe XD</li>
<li>Sketch</li>
<li>Visual Studio Code</li>
<li>Slack</li>
<li>box</li>
<li>Trello</li>
</ul>


<h4>メディア登録/購読など</h4>

<ul>
<li>note</li>
<li>NewsPicks</li>
<li>SmartNews</li>
<li>Reeder</li>
<li>CodeGrid</li>
<li>Progate</li>
<li>Udemy</li>
<li>Qiita</li>
<li>connpass</li>
<li>Pocket</li>
<li>はてなブログ</li>
</ul>


<h4>その他アプリ</h4>

<ul>
<li>PayPay</li>
<li>メルカリ</li>
<li>Uber Eats</li>
</ul>


<h3>ネット記事、インタビューなどを読む</h3>

<p>まとまった時間があったので、RSS や Qiita などは企業の技術ブログ中心にフロントエンドの強い会社フォローするようにしたり、積極的に情報発信している会社も知ることができました。<br/>
はてなブックマークから Pocket に移行しましたが、そのフローもだいぶスムーズになりました。</p>

<h3>JavaScript</h3>

<p>前職では jQuery を使ってなんとなく使っていた JS でしたので、基礎的なプログラミング力含めて学ばないとまずいという機運が今さら高まりました。<br/>
書籍や Progate / Udemy / Qiita の入門記事などをやってみました。</p>

<h3>Vue.js</h3>

<p>こちらもこれまでの制作会社業務では触れてこなかったのですが、Vue.js なり React.js なりできないと、ということで学習コストの低い Vue.js の書籍を読みながら学習しました。</p>

<h3>その他の技術など</h3>

<p>webpack / babel は触ったけれど、AMP や PWA、React あたりは触れませんでした。<br/>
あとプライベートで案件やったり、これまで作ったサイトを SSL 対応するなどアップデートしたり、、</p>

<h2>感じたこと</h2>

<h3>「フロントエンド」の領域</h3>

<p><a href="https://note.mu/yusukehirao/n/n6d0fccc09fcb">フロントエンドエンジニアの多様性｜平尾ゆうてん｜ note</a> で書かれているような話なのですが、フロントエンド周りの技術を学ぶにつれ、学ぶ領域の広さがとてつもなく広いな。。と感じました。<br/>
それでもまだまだ一通りはできるようになりたいなと思うのですが、現実的には実務でやってみたりして、得意なところ or より興味をもてるところに注力することになるのかなという予想です。</p>

<h3>情報が多い</h3>

<p>これはフロントエンド周りでも、IT 周りだけでなく、情報が多すぎるので、うまくフィルター掛けて気持ちが冷めないように効率よくやっていく必要があるかなと改めて思いました。</p>

<h3>アウトプット</h3>

<p>だいじですね。</p>

<h2>まとめ</h2>

<p>実務を経てではないのでまだなんともいえませんが、フロントエンドエンジニアの大枠の流れやここ最近の流れは追いつけたかと思います。<br/>
あとは作ってみてごりごり手を動かしてうまくいかないことも多いと思いますが、なんとかしようと思っています。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Web 制作会社でのマネジメント'
description: ''
publishDate: '12/25/2018 09:37:17'
---

[CONTENTS-START]
<p>前回に続き前職の話になりますが、マネジメントに関しても 1 月から一旦手から離れるので覚え書きしておきます。</p>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20181225093623.png" alt="f:id:jotaki:20181225093623p:plain" title="f:id:jotaki:20181225093623p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>概要</h2>

<ul>
<li>前職は Web 制作会社（全体 15〜20 名、時期による）</li>
<li>コーダーチームのマネジメント（3〜6 名、時期による）</li>
<li>入社から半年で前任が退職したため昇格し在職 2 年半</li>
<li>自身もプレイヤーとして手を動かす必要がある</li>
</ul>


<h3>担当範囲</h3>

<p>概要でも触れましたが、ある程度小規模な Web 制作会社のコーダーチームのマネジメントになります。<br/>
実態的には社内の案件の管理業務など、コーダーのみが関わる範囲以外の業務が多い形になります。</p>

<ul>
<li>工数出し</li>
<li>案件管理、コーダー担当割り振り</li>
<li>各コーダーのヘルプ</li>
<li>規約、文書の作成など</li>
<li>コーダー採用</li>
<li>人事評価、給与査定など</li>
</ul>


<h4>工数出し</h4>

<p>営業/ディレクターからチャットで送られる受注前の案件 or 実装確定前の仕様に関しての工数出し。<br/>
人日 ○ 万だからいくらではなく、いくらかの解釈は営業/ディレクターの範囲なので時間で出すように意識しました。<br/>
追加機能に関してはスタッフによっては各自で対応してもらいました。</p>

<h4>案件管理、コーダー担当割り振り</h4>

<p>営業/ディレクターからおりてくる案件の仕様（難易度）把握、それをどのスタッフが担当するかの割り振り。</p>

<h4>各コーダーのヘルプ</h4>

<p>基本的に制作フェーズに入った段階で、進捗管理はスタッフ各自に任せますが、スキル/仕様/期間によっては深くフォローをすることもありました。<br/>
あと教育的なところも人によってはだれか他のスタッフを専任にしたりもありましたが自分がすることもありました。<br/>
教育は長くなるので割愛します。</p>

<h4>規約、文書の作成など</h4>

<p>自分の入社当初はドキュメントを残す/更新するという文化があまりなかったので、テスト環境構築方法など同じ作業になるものはドキュメントにまとめました。<br/>
コーディング規約、チェックリストは元々ありましたがスプレッドシートで管理しました。<br/>
実装/構築面以外でも、面接時の質問リスト、新入社員の準備リストなど。</p>

<h4>採用</h4>

<p>コーダーの採用媒体申し込み、日程調整、面接、入社準備。<br/>
面接は結構な数やりましたが、何が正解かはそのときどきで変わるので難しいですね。</p>

<h4>人事評価、給与査定など</h4>

<p>これといって査定の決まったタイミングがあるわけではないですが、比較的忙しい時期を過ぎたら（年度末明けなど）<br/>
1 対 1 で最近の案件について/自身のスキルや成長について/今後やりたいことなどを各スタッフと面談しました。</p>

<p>給与に関しては自分が決定権を持っていたわけではないですが、実務面の評価は一番できるポジションだったので社長に進言するという形です。<br/>
会社全体の細かい数字も毎月共有してもらっていたので、それとのバランスもある程度は考えました。<br/>
ただ数字を分析できるわけではないのでそこはもったいない所かなと思います。</p>

<h2>感じたこと</h2>

<h4>リソースに対する考え方</h4>

<p>各案件のスケジュールを把握したり、スタッフのリソース管理やをしていると、結構ひとりの動きでだいぶ他の人も影響受けるんだなと言うことは発見だった気がします。<br/>
例えば簡単な話ですが、一人早退して誰かが巻き取るとか、そういうスパイラルが起こるなかでどこまで許容して、どういうところを改善しないといけないのかというのは深くまで考えるようになりました。</p>

<h4>時間に対する考え方</h4>

<p>リソースや割り振りにも関連しますが、今空いている人をアサインするというのは簡単で、誰でも分かりやすいのですが、<br/>
2 週間後に来る案件でこの人に担当してもらったほうが他の案件考えるとうまく回ったりするなど、簡単にするとそういう面で目先ばかりは見ないようになったと思います。</p>

<p>人の教育とか成長という目線でいうと、採用段階でのスキルよりもやる気みて 3 ヶ月〜半年後により戦力になるかなどのことです。<br/>
実務未経験だけど自分でサーバー契約してドメイン取って模写したりブログ書いている人や感覚がいい人と、30 代で 3、4 年経験があるけど特にスキルない人だと、半年後からその先会社に貢献するのは前者かなと思います。<br/>
いろいろな状況にもよりますけど。。</p>

<h4>細かいところ見る</h4>

<p>誰は何時に来てるとか、昼何食べてるとか、誰がゴミ捨てしているとか、、<br/>
チャットもはいっているグループは追うようにして、TO でもらったものは漏らさず返して、そういう細かい気遣い的な所から信頼は生まれるかなと実感しました。</p>

<h4>主体的に動くことの大切さ</h4>

<p>これは転職活動していても思いましたが、どこの会社でも求める人物像で主体性のある方、やセルフスターターの方、というところを目にしました。<br/>
その気持ちはすごい理解できたつもりで、マネジメントをしていると言わないとやらない人との接し方ってすごい困るし、<br/>
特にこういう業界でベンチャーの会社でそれをされると何のためにやっているのかまで考えさせられてしまったので、そこの重要性は感じました。<br/>
案件すごい早くできる人も助かるけど、会社にいろいろ文化を残してくれる人のほうが会社の成長にもつながる気がします。</p>

<h4>自分以外のことで頭使うの大変</h4>

<p>マネジメントってそういう仕事だと思うんですが、自分以外の人のことを色々考える必要があるので難しいですね。<br/>
マネジメントに限った話ではないと思いますが特に。。</p>

<h4>売上がないときつい</h4>

<p>良くも悪くも会社のお金が見えて、あまりうまくいかないときは調子が上向きになりづらかったので反省です。</p>

<h4>体調管理が大事</h4>

<p>これは誰でもですが、管理側なら特に。。<br/>
リモートワークなどはなかったので、毎日定時に会社に行って、スタッフの仕事みて評価してということができなくなるのは色々難しくなると思いました。<br/>
幸いなことに自分の体調は寝ればどうにでもなるので、1 日どのくらいの時間寝ないといけないのか把握したりは気を遣いました。</p>

<h2>反省点</h2>

<h4>モチベーション管理について</h4>

<p>コーダーチームの一番上なのでいわゆる CTO 的なポジションでもあったのですが、どちらかというと会社全体みて案件ベースに動くことが多かったので、各スタッフのモチベーション管理、最新技術キャッチアップして社内に持ち込む、エンジニア文化をつくる、みたいな所は実績として弱いなと思います。<br/>
自分がメインでやる案件があって、受託の売上も気にしてなので、今考えてもその上でこれらやるのは難しいかもしれないですが、できなかったこと、弱かったことの一つ。</p>

<h4>好かれるのが正解か、嫌われるのが正解か</h4>

<p>雰囲気よく和気あいあいと仕事をして生産効率を上げましょう！みたいな話と、いろいろ厳しくやっていくのがどっちが正しいのかは分かりませんが、ぜんぶバランスですね。<br/>
どちらかだけでうまくいかないと思うし、会社にもスタッフのスキルにもよるし、売上にもよるし。<br/>
帰って食べるご飯が借りてるお金から出てるのならあまりおいしく感じないだろうから、それなら仕事やるわって思ってたときもありましたが、貧乏性なのかな。。</p>

<h2>まとめ</h2>

<p>いろいろな経緯があってしたマネジメントでしたが、結果この年齢とスキルの段階でやってよかったなと思うしかないと思います。<br/>
実際に転職活動でこの部分を見てもらえた会社もありましたし、人とコミュニケーション取る大切さ/難しさや、人として成長したいというとはより強く思えたので。（もちろん逆に技術面弱いと思われた会社もあったと思いますが。。）</p>

<p>またいつかマネジメントやるのかやらないのか分かりませんが備忘録として記しておきます。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'オフショア拠点を持った際のコミュニケーションについて'
description: ''
publishDate: '12/19/2018 15:23:58'
---

[CONTENTS-START]
<p>前職の話になりますが、覚え書きしておきます。</p>

<h2>前提</h2>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20181219152117.png" alt="f:id:jotaki:20181219152117p:plain" title="f:id:jotaki:20181219152117p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<ul>
<li>筆者は日本側のフロントエンドチーム</li>
<li>オフショア拠点はフィリピン</li>
<li>オフショア拠点のメンバーはチームで 2 名 → 7,8 名</li>
<li>現地にブリッジ的な役割をしてくれる日本人ディレクターが常駐（案件の進行を担当）</li>
</ul>


<h2>英語力</h2>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20181219152122.png" alt="f:id:jotaki:20181219152122p:plain" title="f:id:jotaki:20181219152122p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>いちおう自分は大学受験で英語が得意科目でしたが、その際の勉強しか集中的にやり込んだことはないです。<br/>
DUO の CD を聞きながら単語覚えました。</p>

<p>就活の際に TOEIC を受けて 700 点程度。それから 5〜6 年ほど経過していたので、現状の点数的にはそれよりも低いと思います。<br/>
ざっくりとしたレベル感としては、少し難しい単語でも理解はできる程度ですが、スピーキングに関しては近くに Google 翻訳などがないとほぼほぼ喋れない感じです。</p>

<h2>求められた役割</h2>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20181219152129.png" alt="f:id:jotaki:20181219152129p:plain" title="f:id:jotaki:20181219152129p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>自身が絡むシチュエーションは下記が大きなところでした。</p>

<ul>
<li>日本人ディレクターからヘルプ要望に対して、現地メンバーにチャットベースでやり取り</li>
<li>Bitbucket にプッシュされるソースのチェック</li>
<li>現地フロントエンドのチャットグループに入って、日本人ディレクターと現地メンバーとのやりとりチェック</li>
<li>年 2 回ほど現地に行って勉強会、スキルチェック等</li>
</ul>


<p>基本的には各メンバーに担当してもらっている案件ベースで進行していき、</p>

<ul>
<li>実装に詰まっ際に状況を聞いてヘルプ（参考 or 正解のコードを送る / なぜそうなるかの説明）</li>
<li>現地はネットが貧弱なので、このフォルダアップして欲しいなどの要望受け付ける</li>
</ul>


<p>ことが多かったです。<br/>
そのほか、規約やマニュアルの翻訳、現地の採用や人事評価にも絡みましたが長くなるので割愛します。</p>

<h2>チャットワークと Google 翻訳</h2>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20181219152133.png" alt="f:id:jotaki:20181219152133p:plain" title="f:id:jotaki:20181219152133p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>チャットワークで現地のメンバーともコミュニケーションを取っていました。<br/>
説明の難しい部分は現地の日本人ディレクターにもフォロー入ってもらって、確実に理解しているかを確認してもらうなどしていました。</p>

<p>英語でメッセージする際は主に下記の手順でした。</p>

<ul>
<li>（確実に理解できるものでない限りは）もらったメッセージを Google 翻訳にかける</li>
<li>返信用メッセージを日本語で作成</li>
<li>Google 翻訳で日 → 英に</li>
<li>単語のおかしいところ（特に固有名詞や専門用語）を直して返信</li>
</ul>


<p>自分の場合、いかんせん文法が苦手だったので、骨組みを Google 翻訳に任せて、単語は結構弄ってエンジニアに伝わりやすいように調整しました。<br/>
定型文的な英語は「文章 + 『英語』」で検索すると、たいてい DMM 英会話のリンクが最初に引っかかるのでそちらなどを参考にしていました。</p>

<h2>注意したこと、細かいテクニック的なもの</h2>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20181219152138.png" alt="f:id:jotaki:20181219152138p:plain" title="f:id:jotaki:20181219152138p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<ul>
<li>Yes or No や 一番伝えたいことを先頭に</li>
<li>完璧な文章を求めないようにする</li>
<li>どんなときでも挨拶する</li>
<li>考える余白を残す</li>
</ul>


<h3>Yes or No や 一番伝えたいことを先頭に</h3>

<p>日本語でのコミュニケーションでも同じだと思いますが、この実装方法で OK か NG か、この考えで良いか悪いか、などメッセージの核になる部分はとりあえず先に言うようにしました。</p>

<p>日本ではあまりないのですが、もらったメッセージの意図が質問なのか、報告なのか、それ以外か読めない場合も、最初に聞いておいて認識合わせするところは特に意識しました。</p>

<h3>完璧な文章を求めないようにする</h3>

<p>立場などにもよると思いますが、自分の場合はよりよい英語でコミュニケーションを取るということよりは、詰まっている課題に対して答えを導くことのほうが優先されるべきと、自分も現地のメンバーも思ったいたので、最低限伝われば問題ないというスタンスでやっていました。（もちろんよりよい英語ができるに越したことはないですが）</p>

<h3>どんなときでも挨拶する</h3>

<p>リモートでコミュニケーション取ると当たり前ですが、その日の最初に挨拶（Hi! や Good Afternoon!など）は欠かさずしました。</p>

<h3>考える余白を残す</h3>

<p>これも日本と同じですが。。なるべく正解のコードを書いてあげるのではなくて、参考になるリンクやコードを送るようにして、そこから正解を出してもらえるようにして応用をつけてもらうように心がけました。<br/>
それどころじゃないときもありましたが。。</p>

<h2>今まで知らなかった用語や意味</h2>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20181219152142.png" alt="f:id:jotaki:20181219152142p:plain" title="f:id:jotaki:20181219152142p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h3>Sir</h3>

<p>Boss（上司）に対して、みんなしつこいくらいに Sir をつけるんですね。<br/>
Thank you, sir. など</p>

<h3>Noted</h3>

<p>分かりました、というのは I understood. や I got it. などより、<br/>
Noted.<br/>
This is noted.<br/>
のほうが多いんですね。</p>

<h3>Thank you.</h3>

<p>これは「ありがとう」以外に、日本語で言うところの「よろしくお願いします」という意味もあるのかなと。<br/>
しつこいくらいに Thank you を末尾につけますので、自分も真似していました。</p>

<h3>単語 or 肯定文 + ?</h3>

<p>これは主にスピーキングで手短にする感じですが結構使いました。<br/>
Any question?（他に質問はありますか？）など</p>

<h2>学んだこと</h2>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20181219152147.png" alt="f:id:jotaki:20181219152147p:plain" title="f:id:jotaki:20181219152147p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>このように書いていて思いましたが、日本人同士でコミュニケーション取る上でも大事なことを改めて気づかせてくれたなと思います。</p>

<p>自分はこのフィリピンでの経験しかありませんので比較対象がないのですが、</p>

<ul>
<li>基本的には言われたことはっちりやる</li>
<li>良くも悪くも日本人のように周りを気にする（気を使える）</li>
</ul>


<p>メンバーが多かったので、その点に助けられた部分もありました。<br/>
ただ別テーマになりますが、言われたことをきっちりやる点は、そこに頼っているとオペレーション作業になれてしまいがちなため、ある程度自由に考える力をつけることも意識が必要と思いました。</p>

<p>また日本でも何名かのスタッフはみていましたが、現地のメンバーに対しては本当に「力になりたい」と思うモチベーションが湧きました。<br/>
その根源はなんだろうと考えると、スケールは違いますが、最近読んだ下記の記事の「マネジメントは親心に似ている」という部分が大きいと感じました。</p>

<p><a href="https://medium.com/mixi-developers/changes-from-engineer-to-manager-6d40b05ad2a4">エンジニアからマネージャーになって変わったこと・変わらないこと</a></p>

<p>国籍や文化が違えど、そこに気を使う必要ももちろんありますが、結局は人と人との関係性のなかでコミュニケーションは成り立つと思います。<br/>
特にエンジニア同士ですと、コードという共通言語を別に持っているので、自分の場合は思ったよりもコミュニケーションに苦戦することはなかったように思います。</p>

<p>長くなってしまいましたが、1 月からこのような仕事とは離れそうなので備忘録として記しました。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】基礎から学ぶ Vue.js その5'
description: ''
publishDate: '12/18/2018 02:54:38'
---

[CONTENTS-START]
<ul>
<li>第 7 章 より大規模なアプリケーション開発</li>
</ul>


<h3>Vue CLI の導入</h3>

<h4>Vue CLI をグローバルにインストール</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>npm install <span class="synSpecial">-g</span> vue-cli
</pre>


<p>バージョン確認</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>vue <span class="synSpecial">--version</span>
</pre>


<h4>プロジェクトの作成</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>vue init webpack my-app <span class="synComment"># vue init [テンプレート名] [プロジェクト名]</span>
</pre>


<h4>プロジェクト作成時の質問</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment"># プロジェクトの名前</span>
Project name my-app
<span class="synComment"># プロジェクトの説明</span>
Project description A Vue.js project
<span class="synComment"># 作者の名前とメールアドレス</span>
Author XXXXX <span class="synStatement">&lt;</span>xxxxx@xxxxx.com<span class="synStatement">&gt;</span>
<span class="synComment"># テンプレートの定義に「.vue」ファイルのみを使用するなら「Runtime-only」を選択可能</span>
Vue build standalone
<span class="synComment"># Vue Router をインストールするか否か</span>
Install vue-router? No
<span class="synComment"># ESLint をインストールするか否か</span>
Use ESLint to lint your code? No
<span class="synComment"># 自動テストツール をインストールするか否か</span>
Set up unit tests No
<span class="synComment"># 不明</span>
Setup e2e tests with Nightwatch? Yes
<span class="synComment"># npmを使って自動インストール</span>
Should we run <span class="synSpecial">`npm install`</span> <span class="synStatement">for</span> you after the project has been created? <span class="synPreProc">(</span>recommended<span class="synPreProc">)</span> npm
</pre>


<h4>開発サーバーの起動</h4>

<p>下記でデフォルト<a href="http://localhost:8080/">http://localhost:8080/</a> で確認可能に</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>npm run dev
</pre>


<h4>ビルド</h4>

<p><code>/dist/</code> が作成される</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>npm run build
</pre>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】基礎から学ぶ Vue.js その4'
description: ''
publishDate: '12/18/2018 02:05:36'
---

[CONTENTS-START]
<ul>
<li>第 6 章 トランジションとアニメーション</li>
</ul>


<h3>基本的なトランジションの使い方</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;show=!show&quot;</span><span class="synIdentifier">&gt;</span>切り替え<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>transition<span class="synIdentifier">&gt;&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-show=</span><span class="synConstant">&quot;show&quot;</span><span class="synIdentifier">&gt;</span>トランジションする要素<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;&lt;/</span>transition<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">.v-enter-active</span><span class="synSpecial">,</span>
<span class="synIdentifier">.v-leave-active</span> <span class="synIdentifier">{</span>
  <span class="synType">transition</span>: <span class="synType">opacity</span> <span class="synConstant">1s</span>;
<span class="synIdentifier">}</span>
<span class="synIdentifier">.v-enter</span><span class="synSpecial">,</span>
<span class="synIdentifier">.v-leave-to</span> <span class="synIdentifier">{</span>
  <span class="synType">opacity</span>: <span class="synConstant">0</span>;
<span class="synIdentifier">}</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    show: <span class="synConstant">true</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p><code>v-show</code> ではなく <code>v-if</code> でも可能</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;show=!show&quot;</span><span class="synIdentifier">&gt;</span>切り替え<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>transition<span class="synIdentifier">&gt;&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;show&quot;</span><span class="synIdentifier">&gt;</span>トランジションする要素<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;&lt;/</span>transition<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<h3>プレフィクスの変更</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;show=!show&quot;</span><span class="synIdentifier">&gt;</span>切り替え<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>transition<span class="synIdentifier"> </span><span class="synType">name</span><span class="synIdentifier">=</span><span class="synConstant">&quot;hoge&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;show&quot;</span><span class="synIdentifier">&gt;</span>トランジションする要素<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span>transition<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">.hoge-enter-active</span><span class="synSpecial">,</span>
<span class="synIdentifier">.hoge-leave-active</span> <span class="synIdentifier">{</span>
  <span class="synType">transition</span>: <span class="synType">opacity</span> <span class="synConstant">1s</span>;
<span class="synIdentifier">}</span>
<span class="synIdentifier">.hoge-enter</span><span class="synSpecial">,</span>
<span class="synIdentifier">.hoge-leave-to</span> <span class="synIdentifier">{</span>
  <span class="synType">opacity</span>: <span class="synConstant">0</span>;
<span class="synIdentifier">}</span>
</pre>


<h3>初期描画時もアニメーションする <code>appear</code>属性</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>transition<span class="synIdentifier"> appear&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;show&quot;</span><span class="synIdentifier">&gt;</span>トランジションする要素<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span>transition<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<h3>キーの変化に反応してアニメーションする</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;count++&quot;</span><span class="synIdentifier">&gt;</span>+1する<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>transition<span class="synIdentifier"> mode=</span><span class="synConstant">&quot;out-in&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-bind:key=</span><span class="synConstant">&quot;count&quot;</span><span class="synIdentifier">&gt;</span>{{ count }}<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span>transition<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">.v-enter-active</span><span class="synSpecial">,</span>
<span class="synIdentifier">.v-leave-active</span> <span class="synIdentifier">{</span>
  <span class="synType">transition</span>: <span class="synType">opacity</span> <span class="synConstant">1s</span>;
<span class="synIdentifier">}</span>
<span class="synIdentifier">.v-enter</span><span class="synSpecial">,</span>
<span class="synIdentifier">.v-leave-to</span> <span class="synIdentifier">{</span>
  <span class="synType">opacity</span>: <span class="synConstant">0</span>;
<span class="synIdentifier">}</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    count: 0
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>リストトランジション</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;order=!order&quot;</span><span class="synIdentifier">&gt;</span>並び替え・変更<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>transition-group<span class="synIdentifier"> tag=</span><span class="synConstant">&quot;ul&quot;</span><span class="synIdentifier"> </span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;list&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in sortedList&quot;</span><span class="synIdentifier"> v-bind:key=</span><span class="synConstant">&quot;item.id&quot;</span><span class="synIdentifier">&gt;</span>
      {{ item.name }} {{ item.price }}円
    <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span>transition-group<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-css" data-lang="css" data-unlink><span class="synIdentifier">.v-enter-active</span><span class="synSpecial">,</span>
<span class="synIdentifier">.v-leave-active</span> <span class="synIdentifier">{</span>
  <span class="synType">transition</span>: <span class="synType">opacity</span> <span class="synConstant">1s</span>;
<span class="synIdentifier">}</span>
<span class="synIdentifier">.v-enter</span><span class="synSpecial">,</span>
<span class="synIdentifier">.v-leave-to</span> <span class="synIdentifier">{</span>
  <span class="synType">opacity</span>: <span class="synConstant">0</span>;
<span class="synIdentifier">}</span>
<span class="synIdentifier">.v-move</span> <span class="synIdentifier">{</span>
  <span class="synType">transition</span>: <span class="synType">transform</span> <span class="synConstant">1s</span>;
<span class="synIdentifier">}</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    order: <span class="synConstant">false</span>,
    list: <span class="synIdentifier">[</span>
      <span class="synIdentifier">{</span> id: 1, name: <span class="synConstant">&quot;りんご&quot;</span>, price: 100 <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> id: 2, name: <span class="synConstant">&quot;ばなな&quot;</span>, price: 200 <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> id: 3, name: <span class="synConstant">&quot;いちご&quot;</span>, price: 300 <span class="synIdentifier">}</span>
    <span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>,
  computed: <span class="synIdentifier">{</span>
    <span class="synComment">// orderの値でリストの順番を反転する算出プロパティ</span>
    sortedList: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synComment">// LodashのorderByメソッドを使用</span>
      <span class="synStatement">return</span> _.orderBy(<span class="synIdentifier">this</span>.list, <span class="synConstant">&quot;price&quot;</span>, <span class="synIdentifier">this</span>.order ? <span class="synConstant">&quot;desc&quot;</span> : <span class="synConstant">&quot;asc&quot;</span>);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】基礎から学ぶ Vue.js その3'
description: ''
publishDate: '12/17/2018 23:27:15'
---

[CONTENTS-START]
<ul>
<li>第 5 章 コンポーネントで UI 部品を作る</li>
</ul>


<h3>コンポーネントの登録</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;&lt;</span>my-component<span class="synIdentifier">&gt;&lt;/</span>my-component<span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink>Vue.component(<span class="synConstant">&quot;my-component&quot;</span>, <span class="synIdentifier">{</span>
  template: `&lt;p&gt;MyComponent&lt;/p&gt;`
<span class="synIdentifier">}</span>);

<span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>
<span class="synIdentifier">}</span>);
</pre>


<p>ローカルに登録 そのコンポーネントのスコープ内だけでの使用を制限する場合</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> MyComponent = <span class="synIdentifier">{</span>
  template: `&lt;p&gt;MyComponent&lt;/p&gt;`
<span class="synIdentifier">}</span>;

<span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  components: <span class="synIdentifier">{</span>
    <span class="synConstant">&quot;my-component&quot;</span>: MyComponent
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>親コンポーネント/子コンポーネント</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;&lt;</span>parent-component<span class="synIdentifier">&gt;&lt;/</span>parent-component<span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink>Vue.component(<span class="synConstant">&quot;child-component&quot;</span>, <span class="synIdentifier">{</span>
  template: <span class="synConstant">&quot;&lt;p&gt;ChildComponent&lt;/p&gt;&quot;</span>
<span class="synIdentifier">}</span>);

Vue.component(<span class="synConstant">&quot;parent-component&quot;</span>, <span class="synIdentifier">{</span>
  template: <span class="synConstant">&quot;&lt;child-component&gt;&lt;/child-component&gt;&quot;</span>
<span class="synIdentifier">}</span>);

<span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>コンポーネント内での<code>data</code></h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;&lt;</span>data-component<span class="synIdentifier">&gt;&lt;/</span>data-component<span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink>Vue.component(<span class="synConstant">&quot;data-component&quot;</span>, <span class="synIdentifier">{</span>
  template: <span class="synConstant">&quot;&lt;p&gt;{{ message }}&lt;/p&gt;&quot;</span>,
  data: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      message: <span class="synConstant">&quot;DataComponent&quot;</span>
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);

<span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>コンポーネント間の通信（親 → 子）<code>props down</code></h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;&lt;</span>props-parent-component<span class="synIdentifier">&gt;&lt;/</span>props-parent-component<span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink>Vue.component(<span class="synConstant">&quot;props-child-component&quot;</span>, <span class="synIdentifier">{</span>
  template: <span class="synConstant">&quot;&lt;p&gt;{{ val }}&lt;/p&gt;&quot;</span>,
  props: <span class="synIdentifier">[</span><span class="synConstant">&quot;val&quot;</span><span class="synIdentifier">]</span>
<span class="synIdentifier">}</span>);

Vue.component(<span class="synConstant">&quot;props-parent-component&quot;</span>, <span class="synIdentifier">{</span>
  template:
    <span class="synConstant">'&lt;props-child-component v-bind:val=&quot;message&quot;&gt;&lt;/props-child-component&gt;'</span>,
  data: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> <span class="synIdentifier">{</span>
      message: <span class="synConstant">&quot;propsParentComponent&quot;</span>
    <span class="synIdentifier">}</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);

<span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>
<span class="synIdentifier">}</span>);
</pre>


<p>コンポーネント間の通信（子 → 親）<code>event up ($emit)</code> はスキップ</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】基礎から学ぶ Vue.js その2'
description: ''
publishDate: '12/17/2018 20:44:15'
---

[CONTENTS-START]
<ul>
<li>第 3 章 イベントとフォーム入力の受け取り</li>
<li>第 4 章 データの監視と加工</li>
</ul>


<h3>インラインメソッド</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">button</span><span class="synIdentifier"> v-on:click=</span><span class="synConstant">&quot;handleClick&quot;</span><span class="synIdentifier">&gt;</span>click<span class="synIdentifier">&lt;/</span><span class="synStatement">button</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  methods: <span class="synIdentifier">{</span>
    handleClick: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synStatement">alert</span>(<span class="synConstant">&quot;clicked&quot;</span>);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>フォーム入力 双方向データバインディング</h3>

<h4><code>type="text"</code></h4>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;message&quot;</span><span class="synIdentifier"> /&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ message }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    message: <span class="synConstant">&quot;Hello Vue.js!&quot;</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h4><code>&lt;textarea&gt;</code></h4>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">textarea</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;message&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">textarea</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">pre</span><span class="synIdentifier">&gt;</span>{{ message }}<span class="synIdentifier">&lt;/</span><span class="synStatement">pre</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    message: <span class="synConstant">&quot;Hello Vue.js!&quot;</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h4><code>type="checkbox"</code>（単一）</h4>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;checkbox&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;val&quot;</span><span class="synIdentifier"> /&gt;</span> {{ val }}<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    val: <span class="synConstant">true</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h4><code>type="checkbox"</code>（複数）</h4>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;checkbox&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;val&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;A&quot;</span><span class="synIdentifier"> /&gt;</span> A<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;checkbox&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;val&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;B&quot;</span><span class="synIdentifier"> /&gt;</span> B<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;checkbox&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;val&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;C&quot;</span><span class="synIdentifier"> /&gt;</span> C<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ val }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    val: <span class="synIdentifier">[]</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h4><code>type="radio"</code></h4>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;a&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;val&quot;</span><span class="synIdentifier"> /&gt;</span> A<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;b&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;val&quot;</span><span class="synIdentifier"> /&gt;</span> B<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;c&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;val&quot;</span><span class="synIdentifier"> /&gt;</span> C<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ val }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    val: <span class="synConstant">&quot;&quot;</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h4><code>&lt;select&gt;</code></h4>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">select</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;val&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier"> </span><span class="synType">disabled</span><span class="synIdentifier">=</span><span class="synConstant">&quot;disabled&quot;</span><span class="synIdentifier">&gt;</span>選択してください<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;a&quot;</span><span class="synIdentifier">&gt;</span>A<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;b&quot;</span><span class="synIdentifier">&gt;</span>B<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">option</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;c&quot;</span><span class="synIdentifier">&gt;</span>C<span class="synIdentifier">&lt;/</span><span class="synStatement">option</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">select</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ val }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    val: <span class="synConstant">&quot;&quot;</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>算出プロパティ</h3>

<p>任意に処理を含めることのできるデータ</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ width }}の半分は{{ halfWidth }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    width: 800
  <span class="synIdentifier">}</span>,
  computed: <span class="synIdentifier">{</span>
    halfWidth: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> <span class="synIdentifier">this</span>.width / 2;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>ウォッチャ</h3>

<p>特定のデータまたは算出プロパティの状態の監視、変更があった場合に登録した処理の実行</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;a&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;val&quot;</span><span class="synIdentifier"> /&gt;</span> A<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;b&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;val&quot;</span><span class="synIdentifier"> /&gt;</span> B<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">label</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;radio&quot;</span><span class="synIdentifier"> </span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;c&quot;</span><span class="synIdentifier"> v-model=</span><span class="synConstant">&quot;val&quot;</span><span class="synIdentifier"> /&gt;</span> C<span class="synIdentifier">&lt;/</span><span class="synStatement">label</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    val: <span class="synConstant">&quot;&quot;</span>
  <span class="synIdentifier">}</span>,
  watch: <span class="synIdentifier">{</span>
    val: <span class="synIdentifier">{</span>
      handler: <span class="synIdentifier">function</span>(newVal, oldVal) <span class="synIdentifier">{</span>
        console.log(oldVal);
        console.log(newVal);
      <span class="synIdentifier">}</span>,
      deep: <span class="synConstant">true</span>, <span class="synComment">// ネストされたオブジェクトも監視する</span>
      immediate: <span class="synConstant">true</span> <span class="synComment">// 初期読み込み時にも呼び出す</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>フィルタ</h3>

<p>テキストベースの変換処理</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ price | localeNum }}円<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    price: 19800
  <span class="synIdentifier">}</span>,
  filters: <span class="synIdentifier">{</span>
    localeNum: <span class="synIdentifier">function</span>(val) <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> val.toLocaleString();
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>カスタムディレクティブ（<code>v-hogehoge</code>の自作、登録）はスキップ</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】基礎から学ぶ Vue.js その1'
description: ''
publishDate: '12/17/2018 14:07:16'
---

[CONTENTS-START]
<p><a href="https://cr-vue.mio3io.com/">基礎から学ぶ Vue.js</a> という本を読みながら Vue.js を触り始めたのでメモしておきます。<br/>
すべては長そうなのでポイントだけにしようと思いますが、とりあえず 2 章までで使いそうなものは改変して書こうと思います。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4863542453/hatena-blog-22/"><img src="/images/hatena/20190726111849.jpg" class="hatena-asin-detail-image" alt="基礎から学ぶ Vue.js" title="基礎から学ぶ Vue.js"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4863542453/hatena-blog-22/">基礎から学ぶ Vue.js</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> mio</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> シーアンドアール研究所</li><li><span class="hatena-asin-detail-label">発売日:</span> 2018/05/29</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4863542453/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<ul>
<li>第 1 章 Vue.js とフレームワークの基礎知識</li>
<li>第 2 章 データの登録と更新</li>
</ul>


<h3>読み込み</h3>

<p>CDN の場合は<a href="https://jp.vuejs.org/v2/guide/installation.html#CDN">公式</a>から最新バージョン</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">script</span><span class="synIdentifier"> </span><span class="synType">src</span><span class="synIdentifier">=</span><span class="synConstant">&quot;https://cdn.jsdelivr.net/npm/vue@2.5.21/dist/vue.js&quot;</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">script</span><span class="synIdentifier">&gt;</span>
</pre>


<h3>Hello world</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ message }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    message: <span class="synConstant">&quot;Hello world&quot;</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>コンソール</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>console.log(app.message); <span class="synComment">// Hello world</span>
</pre>


<h3>オブジェクトから</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ item.message }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    item: <span class="synIdentifier">{</span>
      message: <span class="synConstant">&quot;Hello world&quot;</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>下記にすると文字数を出力</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ item.message.length }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<h3>ループ（リスト）</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">ol</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in list&quot;</span><span class="synIdentifier">&gt;</span>{{ item }}<span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">ol</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    list: <span class="synIdentifier">[</span><span class="synConstant">&quot;りんご&quot;</span>, <span class="synConstant">&quot;ばなな&quot;</span>, <span class="synConstant">&quot;いちご&quot;</span><span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>下記にすると<code>りんご</code>を出力</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>{{ list[0] }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>配列への追加</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>app.list.push(<span class="synConstant">&quot;おれんじ&quot;</span>);
</pre>


<h3>ループ（オブジェクトから）</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">li</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in list&quot;</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>ID:{{ item.id }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>NAME:{{ item.name }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>PRICE:{{ item.price }}<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">li</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span><span class="synStatement">ul</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    list: <span class="synIdentifier">[</span>
      <span class="synIdentifier">{</span> id: 1, name: <span class="synConstant">&quot;りんご&quot;</span>, price: 100 <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> id: 2, name: <span class="synConstant">&quot;ばなな&quot;</span>, price: 200 <span class="synIdentifier">}</span>,
      <span class="synIdentifier">{</span> id: 3, name: <span class="synConstant">&quot;いちご&quot;</span>, price: 300 <span class="synIdentifier">}</span>
    <span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>下記にすると<code>1</code>〜<code>15</code>まで連番で出力</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">span</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in 15&quot;</span><span class="synIdentifier">&gt;</span>{{ item }}<span class="synIdentifier">&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<p>下記にすると<code>1,5,10,15</code>が出力</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">span</span><span class="synIdentifier"> v-</span><span class="synType">for</span><span class="synIdentifier">=</span><span class="synConstant">&quot;item in [1,5,10,15]&quot;</span><span class="synIdentifier">&gt;</span>{{ item }}<span class="synIdentifier">&lt;/</span><span class="synStatement">span</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>


<h3>属性のバインディング</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">input</span><span class="synIdentifier"> </span><span class="synType">type</span><span class="synIdentifier">=</span><span class="synConstant">&quot;text&quot;</span><span class="synIdentifier"> v-bind:</span><span class="synType">value</span><span class="synIdentifier">=</span><span class="synConstant">&quot;message&quot;</span><span class="synIdentifier"> /&gt;&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    message: <span class="synConstant">&quot;Hello world&quot;</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>クラスのバインディング</h3>

<p>クラス名にハイフン、アンダースコアがある場合は<code>'</code>で囲う</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-bind:</span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;{isActive:isActive,'js-active':jsActive}&quot;</span><span class="synIdentifier">&gt;</span>りんご<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    isActive: <span class="synConstant">true</span>,
    jsActive: <span class="synConstant">true</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p>オブジェクトでも可能</p>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">p</span><span class="synIdentifier"> v-bind:</span><span class="synType">class</span><span class="synIdentifier">=</span><span class="synConstant">&quot;classObject&quot;</span><span class="synIdentifier">&gt;</span>りんご<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    classObject: <span class="synIdentifier">{</span>
      isActive: <span class="synConstant">true</span>,
      <span class="synConstant">&quot;js-active&quot;</span>: <span class="synConstant">true</span>
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>条件分岐（<code>v-if</code>,<code>v-show</code>）</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;ok&quot;</span><span class="synIdentifier">&gt;</span>`ok: true`の場合出力される<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-show=</span><span class="synConstant">&quot;ok&quot;</span><span class="synIdentifier">&gt;</span>ok: true`の場合出力される<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    ok: <span class="synConstant">true</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<p><a href="https://jp.vuejs.org/v2/guide/conditional.html#v-if-vs-v-show">v-if vs v-show</a></p>

<blockquote><p>一般的に、v-if はより高い切り替えコストを持っているのに対して、 v-show はより高い初期描画コストを持っています。 そのため、とても頻繁に何かを切り替える必要があれば v-show を選び、条件が実行時に変更することがほとんどない場合は、v-if を選びます。</p></blockquote>

<h3>条件分岐（<code>&lt;template&gt;</code>）</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span>template<span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;ok&quot;</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>Vue.js<span class="synIdentifier">&lt;/</span><span class="synStatement">h1</span><span class="synIdentifier">&gt;</span>
      <span class="synIdentifier">&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>Hello world<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>
    <span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;/</span>template<span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    ok: <span class="synConstant">true</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>


<h3>条件分岐（<code>v-if</code>,<code>v-else-if</code>,<code>v-else</code>,）</h3>

<pre class="code lang-html" data-lang="html" data-unlink><span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> </span><span class="synType">id</span><span class="synIdentifier">=</span><span class="synConstant">&quot;app&quot;</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-if=</span><span class="synConstant">&quot;type === 'A'&quot;</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>`type: 'A'`の場合出力される<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-else-if=</span><span class="synConstant">&quot;type === 'B'&quot;</span><span class="synIdentifier">&gt;&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>`type: 'B'`の場合出力される<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
  <span class="synIdentifier">&lt;</span><span class="synStatement">div</span><span class="synIdentifier"> v-else&gt;&lt;</span><span class="synStatement">p</span><span class="synIdentifier">&gt;</span>すべての条件を満たさなかった場合出力される<span class="synIdentifier">&lt;/</span><span class="synStatement">p</span><span class="synIdentifier">&gt;&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
<span class="synIdentifier">&lt;/</span><span class="synStatement">div</span><span class="synIdentifier">&gt;</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> app = <span class="synStatement">new</span> Vue(<span class="synIdentifier">{</span>
  el: <span class="synConstant">&quot;#app&quot;</span>,
  data: <span class="synIdentifier">{</span>
    type: <span class="synConstant">&quot;A&quot;</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>);
</pre>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【読書メモ】改訂新版 JavaScript 本格入門'
description: ''
publishDate: '12/13/2018 12:14:39'
---

[CONTENTS-START]
<p>これまでなんとなく書いてやりすごしていた JavaScript を基礎から学習したいと思い、<a href="https://www.amazon.co.jp/dp/B01LYO6C1N/">改訂新版 JavaScript 本格入門</a> を読みました。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01LYO6C1N/hatena-blog-22/"><img src="/images/hatena/20190726111929.jpg" class="hatena-asin-detail-image" alt="改訂新版JavaScript本格入門 ?モダンスタイルによる基礎から現場での応用まで" title="改訂新版JavaScript本格入門 ?モダンスタイルによる基礎から現場での応用まで"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/B01LYO6C1N/hatena-blog-22/">改訂新版JavaScript本格入門 ?モダンスタイルによる基礎から現場での応用まで</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 山田祥寛</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2016/09/30</li><li><span class="hatena-asin-detail-label">メディア:</span> Kindle版</li><li><a href="http://d.hatena.ne.jp/asin/B01LYO6C1N/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<p>Amazon のレビューにあるとおり「初心者向け」ではなく、「本格的にやりたい人向けの入門書」といった感じでした。<br/>
他の言語をマスターしたり、プログラムの基礎知識ないと難しい部分（メンバーって何？みたいな）もあり、また全部が頭に入ったわけではないですが、最低限おおまかな JS でできることはわかった気がします。</p>

<p>結果、奥が深すぎる...という感想。。<br/>
シンボル、プロトタイプ、this、Promise などまだまだ理解しづらい所もあるので、何ヶ月かに読み返して深く理解できるようにしたいです。
DOM など、jQuery でやってきたことは異常に理解ができるので、要は慣れかな、、と思っています。<br/>
Storage オブジェクトはぼやっとしか知らなかったのですが、すごい便利そうです。いままで全部 cookie でやってました。</p>

<p>特に概念的に知らなかった/改めて言語化して理解できた箇所を引用します。</p>

<h3><em>3.1 オプジェクトとは (p.111)</em></h3>

<blockquote><p>オブジェクトには、オブジェクトを初期化するために、オブジェクトと同名のメソッドが用意されています。この初期化メソッドのことを<strong>コンストラクター</strong>と呼びます。オブジェクト名は、正確にはコンストラクター名です。<br/>
生成されたインスタンスは変数に格納され、以降は、その変数をオブジェクトとして扱えるようになります。インスタンスが格納された変数は、<strong>インスタンス変数</strong>、<strong>オブジェクト変数</strong>と呼ぶ場合もあります。</p></blockquote>

<h3><em>4.1 関数とは (p.177)</em></h3>

<blockquote><p><strong>引数</strong>は、関数の挙動を決めるためのパラメータです。呼び出し元から指定された値を受け取るための変数を、カンマ区切りで指定します。<strong>仮引数</strong>ともいい、関数の内部でのみ参照できます。<br/>
<strong>戻り値（返り値）</strong>は、関数が処理の結果、最終的に呼び出し元に返すための値のことです。通常、関数に末尾に<code>return</code>命令を記述して指定します。関数の途中で<code>return</code>命令を記述した場合、それ以降の処理は実行されないので、要注意です。</p></blockquote>

<h3><em>5.1 JavaScript におけるオブジェクト指向の特徴 (p.224)</em></h3>

<blockquote><p>ここまでに見てきたように、JavaScript はれっきとしたオブジェクト指向言語です。しかし、Java や C++、C#といったオブジェクト指向言語とは根本的に異なる点があります。
それは「『インスタンス化/インスタンス』という概念はあるものの、いわゆる『クラス』がなく、『プロトタイプ（ひな形）』という概念だけが存在する」という点です。<br/>
<strong>プロトタイプ</strong>とは、「あるオブジェクトの元となるオブジェクト」のこと。JavaScript では、（クラスの代わりに）プロトタイプを利用して、新たなオブジェクトを生成していくことになります。このような性質から、JavaScript のオブジェクト指向は、<strong>プロトタイプベースのオブジェクト指向</strong>と呼ばれることもあります。</p></blockquote>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Babel ターミナルで常時監視する（mac）'
description: ''
publishDate: '12/13/2018 11:32:56'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20181228215115.png" alt="f:id:jotaki:20181228215115p:plain" title="f:id:jotaki:20181228215115p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h2>Babel のインストール</h2>

<p>プロジェクトフォルダに移動して、</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install <span class="synSpecial">-g</span> babel-cli
</pre>


<p>babel-cli は Babel をコマンドから操作するためのツール</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install <span class="synSpecial">--save-dev</span> babel-preset-es2015
</pre>


<p>babel-preset-es2015 は ES2015 のコードをトランスコンパイルするためのプラグイン</p>

<h2>コードのトランスコンパイルと実行</h2>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ babel <span class="synSpecial">-w</span> assets/es6.js <span class="synSpecial">-o</span> assets/es5.js <span class="synSpecial">--presets</span> es2015
</pre>


<p>この場合、assets/es6.js （ES6）を assets/es5.js（ES5）へトランスコンパイル<br/>
<code>-w</code>オプションで常時監視</p>

<h2>Polyfill ライブラリの有効化</h2>

<p>babel コマンドが変換対象とするのは、class/export などの ES6 の新文法が中心。<br/>
Map/Set などの新しい組み込みオブジェクト/メソッドを旧来のブラウザで利用するには Polyfill ライブラリを有効化する必要がある。</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>$ npm install <span class="synSpecial">--save</span> babel-polyfill
</pre>


<p>でライブラリのインストール。<br/>
<code>&lt;script src"node_modules⁩/babel-polyfill⁩/dist⁩/polyfill.min.js"&gt;</code>を読み込み</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'webpack 導入編'
description: ''
publishDate: '12/08/2018 00:00:00'
---

[CONTENTS-START]
<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20181228214933.png" alt="f:id:jotaki:20181228214933p:plain" title="f:id:jotaki:20181228214933p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<h3>参考</h3>

<ul>
<li><a href="https://ics.media/entry/12140">最新版で学ぶ webpack 4 入門 - JavaScript のモジュールバンドラ - ICS MEDIA</a></li>
<li><a href="https://ky-yk-d.hatenablog.com/entry/2018/06/09/191849">フロントエンド弱者が腹を括って Webpack に触ってみた - こまどブログ</a></li>
<li><a href="https://qiita.com/soarflat/items/28bf799f7e0335b68186">webpack 4 入門 - Qiita</a></li>
<li><a href="http://albatrosary.hateblo.jp/entry/2018/03/06/153042">Webpack 4 Tutorial やってみた - albatrosary's blog</a></li>
</ul>


<h4>既定値で <code>package.json</code> 作成</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synStatement">cd</span> <span class="synStatement">[</span>project folder<span class="synStatement">]</span>
npm init <span class="synSpecial">-y</span>
</pre>


<h4><code>webpack-cli</code> と <code>webpack-dev-server</code> のインストール</h4>

<pre class="code lang-sh" data-lang="sh" data-unlink>npm i <span class="synSpecial">-D</span> webpack webpack-cli webpack-dev-server
</pre>


<p><code>i</code> は <code>install</code>、<code>-D</code> は <code>devDependencies</code></p>

<h4>ビルド実行</h4>

<p>とりあえず初期値で <code>webpack.config.js</code> は作らずに実行</p>

<p><code>package.json</code></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">{</span>
  <span class="synConstant">&quot;scripts&quot;</span>: <span class="synIdentifier">{</span>
    <span class="synConstant">&quot;build&quot;</span>: <span class="synConstant">&quot;webpack --config webpack.config.js&quot;</span>,
    <span class="synConstant">&quot;start&quot;</span>: <span class="synConstant">&quot;webpack-dev-server&quot;</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>
</pre>


<p>ビルドの実行</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>npm run build
</pre>


<h4><code>webpack.config.js</code> での <code>webpack-dev-server</code> の設定</h4>

<p><a href="https://qiita.com/riversun/items/d27f6d3ab7aaa119deab">webpack4 対応 webpack-dev-server の主要な設定オプション(CLI,webpack.config.js)の意味と挙動 - Qiita</a> が参考になりました。</p>

<p><code>webpack.config.js</code></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// パスの取得</span>
<span class="synStatement">const</span> path = require(<span class="synConstant">&quot;path&quot;</span>);
<span class="synComment">// [定数] webpack の出力オプションを指定します</span>
<span class="synComment">// 'production' か 'development' を指定</span>
<span class="synStatement">const</span> MODE = <span class="synConstant">&quot;development&quot;</span>;

module.exports = <span class="synIdentifier">{</span>
  mode: MODE,
  <span class="synComment">// エントリーポイントとなる.jsファイル（ /src/index.js の場合は省略可能）</span>
  entry: `./src/assets/js/index.js`,
  <span class="synComment">// ファイルの出力設定</span>
  output: <span class="synIdentifier">{</span>
    path: path.join(__dirname, <span class="synConstant">&quot;dist&quot;</span>), <span class="synComment">// 出力ファイルのディレクトリ名（ /dist/ の場合は省略可能）</span>
    publicPath: <span class="synConstant">&quot;/assets/js/&quot;</span>, <span class="synComment">// ブラウザからバンドルにアクセスする際のパス</span>
    filename: <span class="synConstant">&quot;bundle.js&quot;</span> <span class="synComment">// 出力ファイル名</span>
  <span class="synIdentifier">}</span>,
  plugins: <span class="synIdentifier">[</span>
    <span class="synStatement">new</span> HtmlWebPackPlugin(<span class="synIdentifier">{</span>
      template: <span class="synConstant">&quot;./src/index.html&quot;</span>,
      filename: <span class="synConstant">&quot;index.html&quot;</span>
    <span class="synIdentifier">}</span>)
  <span class="synIdentifier">]</span>,
  <span class="synComment">// devServer ローカル開発用環境を立ち上げる</span>
  devServer: <span class="synIdentifier">{</span>
    contentBase: path.join(__dirname, <span class="synConstant">&quot;dist&quot;</span>), <span class="synComment">// HTML等コンテンツのルートディレクトリ</span>
    open: <span class="synConstant">true</span>, <span class="synComment">//実行時にブラウザが自動的に localhost を開く</span>
    port: 3000, <span class="synComment">// ポート番号</span>
    watchContentBase: <span class="synConstant">true</span> <span class="synComment">// コンテンツの変更監視をする</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
</pre>


<p><code>webpack-dev-server</code> で自動監視実行</p>

<pre class="code lang-sh" data-lang="sh" data-unlink>npm run <span class="synStatement">start</span>
</pre>


<h4>HTML / CSS(Sass) / JavaScript(Babel) のコンパイル</h4>

<ul>
<li><a href="https://ema-hiro.hatenablog.com/entry/2017/10/12/015748">webpack で html ファイルも出力する - emahiro/b.log</a></li>
<li><a href="https://ics.media/entry/17376">最新版で学ぶ webpack 4 入門 - スタイルシート(CSS や Sass)を取り込む方法 - ICS MEDIA</a></li>
<li><a href="https://ics.media/entry/16028#">最新版で学ぶ webpack 4 入門 - Babel 7 で ES2018 環境の構築(React, Vue, Three.js, jQuery のサンプル付き) - ICS MEDIA</a></li>
</ul>


<h5>各パッケージ、プラグインのインストール</h5>

<pre class="code lang-sh" data-lang="sh" data-unlink><span class="synComment"># HTML</span>
npm i <span class="synSpecial">-D</span> webpack webpack-cli html-webpack-plugin html-loader
<span class="synComment"># CSS(Sass)</span>
npm i <span class="synSpecial">-D</span> webpack webpack-cli sass-loader node-sass style-loader css-loader
<span class="synComment"># JavaScript(Babel)</span>
npm install <span class="synSpecial">-D</span> webpack webpack-cli babel-loader @babel/core @babel/preset-env
</pre>


<h4><code>webpack.config.js</code> での設定</h4>

<p><details><summary> <strong><code>webpack.config.js</code> を展開する</strong> </summary><div></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// パスの取得</span>
<span class="synStatement">const</span> path = require(<span class="synConstant">&quot;path&quot;</span>);
<span class="synComment">// [定数] webpack の出力オプションを指定します</span>
<span class="synComment">// 'production' か 'development' を指定</span>
<span class="synStatement">const</span> MODE = <span class="synConstant">&quot;development&quot;</span>;
<span class="synComment">// ソースマップの利用有無(productionのときはソースマップを利用しない)</span>
<span class="synStatement">const</span> enabledSourceMap = MODE === <span class="synConstant">&quot;development&quot;</span>;
<span class="synComment">// プラグイン</span>
<span class="synStatement">const</span> HtmlWebPackPlugin = require(<span class="synConstant">&quot;html-webpack-plugin&quot;</span>);

module.exports = <span class="synIdentifier">{</span>
  <span class="synComment">// production: 最適化された状態で出力</span>
  <span class="synComment">// development: ソースマップが有効された状態でJSファイルが出力</span>
  mode: MODE,
  <span class="synComment">// エントリーポイントとなる.jsファイル（ /src/index.js の場合は省略可能）</span>
  entry: `./src/assets/js/index.js`,
  <span class="synComment">// ファイルの出力設定</span>
  output: <span class="synIdentifier">{</span>
    path: path.join(__dirname, <span class="synConstant">&quot;dist&quot;</span>), <span class="synComment">// 出力ファイルのディレクトリ名（ /dist/ の場合は省略可能）</span>
    publicPath: <span class="synConstant">&quot;/assets/js/&quot;</span>, <span class="synComment">// ブラウザからバンドルにアクセスする際のパス</span>
    filename: <span class="synConstant">&quot;bundle.js&quot;</span> <span class="synComment">// 出力ファイル名</span>
  <span class="synIdentifier">}</span>,
  module: <span class="synIdentifier">{</span>
    rules: <span class="synIdentifier">[</span>
      <span class="synIdentifier">{</span>
        <span class="synComment">// .js の場合</span>
        test: <span class="synConstant">/\.js$/</span>,
        use: <span class="synIdentifier">[</span>
          <span class="synIdentifier">{</span>
            <span class="synComment">// Babel を利用する</span>
            loader: <span class="synConstant">&quot;babel-loader&quot;</span>,
            <span class="synComment">// Babel のオプションを指定する</span>
            options: <span class="synIdentifier">{</span>
              presets: <span class="synIdentifier">[</span>
                <span class="synComment">// プリセットを指定することで、ES2018 を ES5 に変換</span>
                <span class="synConstant">&quot;@babel/preset-env&quot;</span>
              <span class="synIdentifier">]</span>
            <span class="synIdentifier">}</span>
          <span class="synIdentifier">}</span>
        <span class="synIdentifier">]</span>
      <span class="synIdentifier">}</span>,
      <span class="synComment">// .html の場合</span>
      <span class="synIdentifier">{</span>
        test: <span class="synConstant">/\.html$/</span>,
        use: <span class="synIdentifier">[</span>
          <span class="synIdentifier">{</span>
            loader: <span class="synConstant">&quot;html-loader&quot;</span>,
            options: <span class="synIdentifier">{</span> minimize: <span class="synConstant">true</span> <span class="synIdentifier">}</span>
          <span class="synIdentifier">}</span>
        <span class="synIdentifier">]</span>
      <span class="synIdentifier">}</span>,
      <span class="synComment">// .scss の場合</span>
      <span class="synIdentifier">{</span>
        test: <span class="synConstant">/\.scss/</span>, <span class="synComment">// 対象となるファイルの拡張子</span>
        use: <span class="synIdentifier">[</span>
          <span class="synComment">// linkタグに出力する機能</span>
          <span class="synConstant">&quot;style-loader&quot;</span>,
          <span class="synComment">// CSSをバンドルするための機能</span>
          <span class="synIdentifier">{</span>
            loader: <span class="synConstant">&quot;css-loader&quot;</span>,
            options: <span class="synIdentifier">{</span>
              <span class="synComment">// オプションでCSS内のurl()メソッドの取り込みを禁止する</span>
              url: <span class="synConstant">false</span>,
              <span class="synComment">// ソースマップの利用有無</span>
              sourceMap: enabledSourceMap,
              <span class="synComment">// 0 =&gt; no loaders (default);</span>
              <span class="synComment">// 1 =&gt; postcss-loader;</span>
              <span class="synComment">// 2 =&gt; postcss-loader, sass-loader</span>
              importLoaders: 2
            <span class="synIdentifier">}</span>
          <span class="synIdentifier">}</span>,
          <span class="synIdentifier">{</span>
            loader: <span class="synConstant">&quot;sass-loader&quot;</span>,
            options: <span class="synIdentifier">{</span>
              <span class="synComment">// ソースマップの利用有無</span>
              sourceMap: enabledSourceMap
            <span class="synIdentifier">}</span>
          <span class="synIdentifier">}</span>
        <span class="synIdentifier">]</span>
      <span class="synIdentifier">}</span>
    <span class="synIdentifier">]</span>
  <span class="synIdentifier">}</span>,
  plugins: <span class="synIdentifier">[</span>
    <span class="synStatement">new</span> HtmlWebPackPlugin(<span class="synIdentifier">{</span>
      template: <span class="synConstant">&quot;./src/index.html&quot;</span>,
      filename: <span class="synConstant">&quot;index.html&quot;</span>
    <span class="synIdentifier">}</span>)
  <span class="synIdentifier">]</span>,
  <span class="synComment">// devServer ローカル開発用環境を立ち上げる</span>
  devServer: <span class="synIdentifier">{</span>
    contentBase: path.join(__dirname, <span class="synConstant">&quot;dist&quot;</span>), <span class="synComment">// HTML等コンテンツのルートディレクトリ</span>
    open: <span class="synConstant">true</span>, <span class="synComment">//実行時にブラウザが自動的に localhost を開く</span>
    port: 3000, <span class="synComment">// ポート番号</span>
    watchContentBase: <span class="synConstant">true</span> <span class="synComment">// コンテンツの変更監視をする</span>
    <span class="synComment">// inline: true // ライブリロードをページ全体に適用</span>
    <span class="synComment">// hot: false // 変更のあったコンポーネントのみをリロード</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
</pre>


<p></div></details></p>

<p>とりあえずこのような形で 1 ページものならなんとか作れるようになりそうです。<br/>
フォルダ階層などに関してはあまり案件ベースでのイメージが湧かないままです。
Babel などは設定細かく見ていこうと思います。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Visual Studio Code の初期設定など'
description: ''
publishDate: '12/07/2018 00:00:00'
---

[CONTENTS-START]
<p>Sublime Text 2 のときから 5 年ほど使用していましたが、空いたタイミングで移行しました。
まだ慣れない所、設定できていない所などありますが、移行メモを残しておきます。</p>

<p>環境：Mac
職種：フロントエンドエンジニア（主に HTML/CSS を書きます。）</p>

<h2>テーマ</h2>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20181214053541.png" alt="f:id:jotaki:20181214053541p:plain" title="f:id:jotaki:20181214053541p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>だいたい有名どころは Sublime Text と同一のテーマが配布されているようです。
自分は <a href="https://marketplace.visualstudio.com/items?itemName=ionutvmi.spacegray-vscode">Spacegray</a> が見慣れているので vscode でもこちらにしました。</p>

<p><a href="https://vscodethemes.com/">vscodethemes</a> のページからプレビュー見ながら人気のテーマも選べます。
その他、有名どころはコリスさんの記事 <a href="https://coliss.com/articles/build-websites/operation/work/best-of-visual-studio-code-themes.html">Visual Studio Code で見やすいテーマファイルのまとめ</a> も参考にしました。</p>

<p>UI のパーツひとつひとつ設定できるみたいですが、そこまではこだわって設定はしていません。
<a href="https://code.visualstudio.com/docs/getstarted/theme-color-reference">Visual Studio Code Theme Color Reference</a></p>

<h2>settings.json</h2>

<p>基本的にはデフォルトで vscode 側の設定があり、そこから上書きしたい場合はユーザー設定 or ワークスペースごとに変更するという形のようです。</p>

<p>設定方法は 「cmd」+「,」 で Settings ファイルを開いて編集画面から編集するか、右上の「・・・」から「settings.json を開く」を選択して json を追記します。
編集画面から編集するものに関しては、一度手を入れてデフォルト地に戻しても、json 上では設定値としては残ってしまうようです。
悩み中でこれからいじるかもしれないものは、デフォルト値の設定項目が入っています。</p>

<p>主に参考にしたのは下記の 3 記事になります。コメントも拝借させていただきました。</p>

<ul>
<li><a href="https://qiita.com/hi85/items/eaede5ebb509f21f27f5">Visual Studio Code の初期設定と最低限必要な拡張機能 - フロントエンド向け - - Qiita</a></li>
<li><a href="https://qiita.com/shimoju/items/e31e5f4092953297f486">今日からはじめる Visual Studio Code 設定 - Qiita</a></li>
<li><a href="https://qiita.com/4_mio_11/items/e7b0a5e65c89ac9d6d7f">今日から Unity + Visual Studio Code を用いた快適な開発生活(随時更新中) - Qiita</a></li>
</ul>


<p><details><summary><strong>settings.json を展開する</strong></summary><div></p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">{</span>
  <span class="synConstant">&quot;breadcrumbs.enabled&quot;</span>: <span class="synConstant">true</span>, <span class="synComment">// 開いているファイルのパンくず（パス）の表示</span>
  <span class="synConstant">&quot;editor.formatOnPaste&quot;</span>: <span class="synConstant">true</span>, <span class="synComment">// ペースト時に自動でフォーマット</span>
  <span class="synConstant">&quot;editor.formatOnSave&quot;</span>: <span class="synConstant">true</span>, <span class="synComment">// ファイル保存時に自動でフォーマット</span>
  <span class="synConstant">&quot;editor.formatOnType&quot;</span>: <span class="synConstant">true</span>, <span class="synComment">// 入力した行を自動でフォーマット</span>
  <span class="synConstant">&quot;editor.cursorBlinking&quot;</span>: <span class="synConstant">&quot;smooth&quot;</span>, <span class="synComment">// カーソルがにゅるっと点滅する</span>
  <span class="synConstant">&quot;editor.fontFamily&quot;</span>: <span class="synConstant">&quot;Source Han Code JP&quot;</span>, <span class="synComment">// フォントファミリー</span>
  <span class="synConstant">&quot;editor.fontSize&quot;</span>: 13,
  <span class="synConstant">&quot;editor.multiCursorModifier&quot;</span>: <span class="synConstant">&quot;ctrlCmd&quot;</span>, <span class="synComment">// マルチカーソルのショートカットキー</span>
  <span class="synConstant">&quot;editor.renderWhitespace&quot;</span>: <span class="synConstant">&quot;all&quot;</span>, <span class="synComment">// 半角スペースを常に表示</span>
  <span class="synConstant">&quot;editor.snippetSuggestions&quot;</span>: <span class="synConstant">&quot;top&quot;</span>, <span class="synComment">// Emmet などのスニペット候補を優先して表示</span>
  <span class="synConstant">&quot;editor.scrollBeyondLastLine&quot;</span>: <span class="synConstant">true</span>, <span class="synComment">// エディタで最後の行を超えてスクロールを行うか。</span>
  <span class="synConstant">&quot;editor.showFoldingControls&quot;</span>: <span class="synConstant">&quot;always&quot;</span>,
  <span class="synConstant">&quot;editor.tabSize&quot;</span>: 2, <span class="synComment">// タブのサイズ変更</span>
  <span class="synConstant">&quot;editor.wordWrap&quot;</span>: <span class="synConstant">&quot;on&quot;</span>, <span class="synComment">// エディターの幅で折り返し</span>
  <span class="synConstant">&quot;editor.wordSeparators&quot;</span>: <span class="synConstant">&quot;./</span><span class="synSpecial">\\</span><span class="synConstant">()</span><span class="synSpecial">\&quot;</span><span class="synConstant">':,.;&lt;&gt;~!@#%^&amp;*|+=[]{}`~?&quot;</span>, <span class="synComment">// 選択単語の区切り文字</span>
  <span class="synConstant">&quot;editor.minimap.enabled&quot;</span>: <span class="synConstant">false</span>, <span class="synComment">// ミニマップの表示</span>
  <span class="synConstant">&quot;extensions.autoUpdate&quot;</span>: <span class="synConstant">true</span>, <span class="synComment">// 拡張機能を自動更新</span>
  <span class="synConstant">&quot;emmet.showSuggestionsAsSnippets&quot;</span>: <span class="synConstant">true</span>, <span class="synComment">// Emmet の候補を表示</span>
  <span class="synConstant">&quot;emmet.triggerExpansionOnTab&quot;</span>: <span class="synConstant">true</span>, <span class="synComment">// TAB キーで Emmet を展開できるようにする</span>
  <span class="synConstant">&quot;emmet.variables&quot;</span>: <span class="synIdentifier">{</span> <span class="synConstant">&quot;lang&quot;</span>: <span class="synConstant">&quot;ja&quot;</span> <span class="synIdentifier">}</span>, <span class="synComment">// Emmet で展開される HTML の言語を変更</span>
  <span class="synConstant">&quot;files.insertFinalNewline&quot;</span>: <span class="synConstant">true</span>, <span class="synComment">// ファイルの保存時に末尾を改行</span>
  <span class="synConstant">&quot;files.trimFinalNewlines&quot;</span>: <span class="synConstant">true</span>, <span class="synComment">// ファイルの保存時に最終行以降をトリミング</span>
  <span class="synConstant">&quot;files.trimTrailingWhitespace&quot;</span>: <span class="synConstant">true</span>, <span class="synComment">// ファイルの保存時に行末の空白をトリミング</span>
  <span class="synConstant">&quot;[markdown]&quot;</span>: <span class="synIdentifier">{</span> <span class="synConstant">&quot;files.trimTrailingWhitespace&quot;</span>: <span class="synConstant">false</span> <span class="synIdentifier">}</span>, <span class="synComment">// Markdown のファイルは行末の空白をトリミングしない</span>
  <span class="synConstant">&quot;files.encoding&quot;</span>: <span class="synConstant">&quot;utf8&quot;</span>, <span class="synComment">// ファイルの読み取り/書き込みで使用する規定の文字エンコーディング</span>
  <span class="synConstant">&quot;sftp.debug&quot;</span>: <span class="synConstant">true</span>, <span class="synComment">// 拡張機能 SFTP設定</span>
  <span class="synConstant">&quot;window.closeWhenEmpty&quot;</span>: <span class="synConstant">true</span>, <span class="synComment">// 最後のエディタを閉じたときに、VS Code 自体も自動的に閉じる</span>
  <span class="synConstant">&quot;window.openFilesInNewWindow&quot;</span>: <span class="synConstant">&quot;off&quot;</span>, <span class="synComment">// 再起動時に開いていたウインドウをすべて復元する</span>
  <span class="synConstant">&quot;window.title&quot;</span>: <span class="synConstant">&quot;${activeEditorMedium}${separator}${rootName}&quot;</span>, <span class="synComment">// ウインドウ上部に表示する文字列の設定</span>
  <span class="synConstant">&quot;workbench.statusBar.feedback.visible&quot;</span>: <span class="synConstant">false</span>, <span class="synComment">// 下部ステータスバーのTwitterのフィードバックの非表示</span>
  <span class="synConstant">&quot;workbench.colorTheme&quot;</span>: <span class="synConstant">&quot;Spacegray Ocean Dark&quot;</span>, <span class="synComment">// テーマ</span>
  <span class="synConstant">&quot;workbench.startupEditor&quot;</span>: <span class="synConstant">&quot;none&quot;</span>, <span class="synComment">// Welcome Page を表示しない</span>
  <span class="synConstant">&quot;workbench.editor.labelFormat&quot;</span>: <span class="synConstant">&quot;short&quot;</span>, <span class="synComment">// タブに表示する文字列の設定</span>
  <span class="synConstant">&quot;workbench.editor.tabSizing&quot;</span>: <span class="synConstant">&quot;shrink&quot;</span> <span class="synComment">// タブの表示設定</span>
<span class="synIdentifier">}</span>
</pre>


<p></div></details></p>

<p>全部について書くと長くなるので、3 つだけピックアップします。</p>

<h3>マルチカーソルのショートカットキー変更</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synConstant">&quot;editor.multiCursorModifier&quot;</span>: <span class="synConstant">&quot;ctrlCmd&quot;</span>
</pre>


<p>vscode でのデフォルトが「option」になっているので、Sublime Text で「cmd」にしている人は必要と思います。</p>

<h3>選択単語の区切り文字</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synConstant">&quot;editor.wordSeparators&quot;</span>: <span class="synConstant">&quot;./</span><span class="synSpecial">\\</span><span class="synConstant">()</span><span class="synSpecial">\&quot;</span><span class="synConstant">':,.;&lt;&gt;~!@#%^&amp;*|+=[]{}`~?&quot;</span>
</pre>


<p>自分の好みとしてハイフンも入ってたほうがやりやすいのでハイフンを追加しています。</p>

<h3>TAB キーで Emmet を展開できるようにする</h3>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synConstant">&quot;emmet.triggerExpansionOnTab&quot;</span>: <span class="synConstant">true</span>
</pre>


<p>もともと vscode には Emmet がインストールされていて、.html ファイルを編集すると使用可能なのですが、Tab で展開したいときは上記を追記 or 設定する必要があります。</p>

<p>参考
<a href="https://qiita.com/bushi/items/82cc7133f809d34c0da1">vscode で Emmet が Tab(ショートカットキー)で動かない人へ - Qiita</a></p>

<h2>拡張機能</h2>

<p>入れたものを箇条書きしておきます。
一気に入れたのでまだ使えていない or 機能を把握できていないものもあります。</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag">Auto Close Tag</a></h4>

<p>自動的に閉じタグを補完する
<code>"auto-close-tag.SublimeText3Mode": true</code> とすると<code>&lt;/</code>とタイプした際に自動で補完します。</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag">Auto Rename Tag</a></h4>

<p>例えば、<code>&lt;h1&gt;タイトル&lt;/h1&gt;</code> というテキストがある場合、
開始タグの<code>&lt;h1&gt;</code>を<code>&lt;p&gt;</code>に変更すると、閉じタグの<code>&lt;/h1&gt;</code>も<code>&lt;/p&gt;</code>に自動的にリネームする</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=hnw.vscode-auto-open-markdown-preview">Auto-Open Markdown Preview</a></h4>

<p>.md ファイルを開いた際に自動的にプレビュー画面を分割して表示する</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer-2">Bracket Pair Colorizer 2</a></h4>

<p>対応するカッコに対してそれぞれ別色をつける</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=ecmel.vscode-html-css">HTML CSS Support</a></h4>

<p>CSS の編集の際に class 名や ID 名の補完を行う</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-ja">Japanese Language Pack for Visual Studio Code</a></h4>

<p>vscode を日本語にローカライズする</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets">JavaScript (ES6) code snippets</a></h4>

<p>JavaScript (ES6) の入力補完をする</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer">Live Server</a></h4>

<p>ローカルサーバーを立ち上げる。まだ使えていないので webpack のと比べてどちらか使うか決めたいです。</p>

<p>参考</p>

<ul>
<li><a href="https://www.nxworld.net/services-resource/vscode-extension-live-server.html">VS Code：ライブリロード機能を備えた簡易ローカルサーバーを起動できる拡張機能「Live Server」 | NxWorld</a></li>
<li><a href="https://www.hypertextcandy.com/live-reload-web-servers">自動リロードするローカル Web サーバーを起動する方法 | Hypertext Candy</a></li>
</ul>


<h4><a href="https://marketplace.visualstudio.com/items?itemName=bierner.markdown-preview-github-styles">Markdown Preview Github Styling</a></h4>

<p>GitHub の.md ファイル表示のような見た目にプレビューをスタイリングする</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint">markdownlint</a></h4>

<p>.md ファイルの lint 機能</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=ryu1kn.partial-diff">Partial Diff</a></h4>

<p>コード選択して右クリックから差分を表示する。複数テキスト選択でもクリップボードでも可能。</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense">Path Intellisense</a></h4>

<p>ファイルのパス補完をする <code>link</code> <code>src</code> など</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier - Code formatter</a></h4>

<p>コードの整形。settings.json に <code>"editor.formatOnSave": true</code> で保存時自動整形になる。</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=robinbentley.sass-indented">Sass</a></h4>

<p>Sass のシンタックスハイライト、自動補完、スニペット</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=liximomo.sftp">sftp</a></h4>

<p>vscode 上で SFTP のサーバーアップロード。sftp.json への設定で保存時自動アップロードなども可能。</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=shardulm94.trailing-spaces">Trailing Spaces</a></h4>

<p>半角スペースを赤色で明示する。</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=tomoki1207.vscode-input-sequence">vscode-input-sequence</a></h4>

<p>連番の入力補助。
マルチカーソル状態で「option」+「cmd」+「0」でパネル表示。
連番のフォーマット（「1」や「01」）を入力すると「1/2/3...」もしくは「01/02/03...」のように入力されます。
Sublime Text の <a href="https://github.com/kazu1107/InputSequence">InputSequence</a> と同じ感じです。</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=hollowtree.vue-snippets">Vue 2 Snippets</a></h4>

<p>Vue.js のスニペット。</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=tungvn.wordpress-snippet">WordPress Snippet</a></h4>

<p>WordPress のテンプレートタグなどのスニペット。</p>

<h4><a href="https://marketplace.visualstudio.com/items?itemName=mosapride.zenkaku">zenkaku</a></h4>

<p>全角スペースを白半透明色で明示する。</p>

<h2>ショートカット</h2>

<p>ファイルのタブの動きだけでほかはデフォルトにしています。</p>

<p><details><summary><strong>keybindings.json を展開する</strong></summary><div></p>

<pre class="code" data-lang="" data-unlink>[
  {
    key: &#34;ctrl+shift+tab&#34;,
    command: &#34;workbench.action.previousEditor&#34;
  },
  {
    key: &#34;ctrl+pageup&#34;,
    command: &#34;-workbench.action.previousEditor&#34;
  },
  {
    key: &#34;ctrl+tab&#34;,
    command: &#34;workbench.action.nextEditor&#34;
  },
  {
    key: &#34;ctrl+pagedown&#34;,
    command: &#34;-workbench.action.nextEditor&#34;
  }
];</pre>


<p></div></details></p>

<h2>スニペット</h2>

<p>こちらは未設定なのでこれからですが、<a href="https://marketplace.visualstudio.com/items?itemName=deerawan.vscode-dash">Dash 連携</a>とも悩みますが、vscode の独自スニペットで設定と思います。</p>

<ul>
<li><a href="https://vscode-doc-jp.github.io/docs/userguide/userdefinedsnippets.html">独自のスニペットを作成 | 非公式 - Visual Studio Code Docs</a></li>
<li><a href="https://qiita.com/kz_kazuki/items/d26946c1e7169847aeef">Visual Studio Code で、ユーザー定義スニペットで楽をする - Qiita</a></li>
<li><a href="https://web-guided.com/post-620">Visual Studio Code ユーザー スニペットの使い方まとめ │ Web-Guided – web 制作の現場で使えるカモしれない備忘録</a></li>
</ul>


<h2>困っていること</h2>

<h4>日本語入力がしづらい</h4>

<p><span itemscope itemtype="http://schema.org/Photograph"><img src="/images/hatena/20181214053621.png" alt="f:id:jotaki:20181214053621p:plain" title="f:id:jotaki:20181214053621p:plain" class="hatena-fotolife" itemprop="image" /></span></p>

<p>Google 日本語入力の IME を ON にしている場合、サジェストが文字にかぶってしまうのでかなり打ちづらいです。
<a href="https://github.com/Microsoft/vscode/issues/45629">こちらの issue</a>にも上がっていますが、現状ですと過去参照とリアルタイムをオフにしないといけなそうで、結局見づらいと思いながらも使っています。</p>

<p>また日本語で文字を打ち間違えた際にバックスペース連打すると、半角スペースが空いてしまうのがデフォルト（？）のようで、そこが慣れていないです。</p>

<h4>画面分割がしづらい</h4>

<p>自動で画面分割になったりするのは良いのですが、「option」+「cmd」+「2」で同じファイルが両画面に表示されたり、ただ均等にしたいだけなのに 3 分割になってしまうというのは、
ショートカットキー変更すべきかこちらに慣れるべきか迷っているところです。</p>

<hr />

<p>ほかは今の所満足です。細かい所で気になると思いますが、そのうち慣れそうです。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'フロントエンドまわりの略語の意味と読み方'
description: ''
publishDate: '12/02/2018 16:08:41'
---

[CONTENTS-START]
<p>分類順がバラバラですが。</p>

<h3>フォーマット、言語</h3>

<h4>HTML</h4>

<p>エイチティーエムエル<br/>
HyperText Markup Language</p>

<h4>CSS</h4>

<p>シーエスエス<br/>
Cascading Style Sheets</p>

<h4>JS</h4>

<p>ジャバスクリプト<br/>
JavaScript</p>

<h4>PHP</h4>

<p>ピー・エイチ・ピー<br/>
Hypertext Preprocessor を再帰的に略したもの</p>

<h4>JPEG</h4>

<p>ジェイペグ<br/>
Joint Photographic Experts Group</p>

<h4>PNG</h4>

<p>ピーエヌジー or ピング<br/>
Portable Network Graphics</p>

<h4>APNG</h4>

<p>エーピング<br/>
Animated Portable Network Graphics</p>

<h4>WEBP</h4>

<p>ウェッピー<br/>
※略語ではなく拡張子</p>

<h3>テンプレートエンジン、フレームワーク</h3>

<h4>JST</h4>

<p>ジェイエスティー<br/>
JavaScript Templates</p>

<h4>PUG</h4>

<p>パグ<br/>
※略語ではなく単語<br/>
<a href="https://gist.github.com/retorillo/356251a381414643474a">pug/jade HTML テンプレートエンジンに関するメモ</a></p>

<h4>Haml</h4>

<p>ハムル<br/>
HTML abstraction markup language</p>

<h3>メタ言語</h3>

<h4>Sass</h4>

<p>サース or サス<br/>
Syntactically Awesome Stylesheets</p>

<h4>SCSS</h4>

<p>エスシーエスエス<br/>
Sassy CSS</p>

<h3>命名規則</h3>

<h4>BEM</h4>

<p>ベム<br/>
Block Element Modifier</p>

<h4>OOCSS</h4>

<p>オーオーシーエスエス<br/>
Object Oriented CSS</p>

<h4>SMACCS</h4>

<p>スマックス<br/>
Scalable and Modular Architecture for CSS</p>

<h3>プログラミング全般</h3>

<h4>API</h4>

<p>エーピーアイ<br/>
Application Programming Interface</p>

<h3>団体など</h3>

<h4>W3C</h4>

<p>ダブリュースリーシー<br/>
World Wide Web Consortium</p>

<h4>MDN</h4>

<p>エムディーエヌ<br/>
Mozilla Developer Network</p>

<h3>HTML 関連</h3>

<h4>DOM</h4>

<p>ドム<br/>
Document Object Model</p>

<h3>JS 関連</h3>

<h4>JSON</h4>

<p>ジェイソン<br/>
JavaScript Object Notation</p>

<h4>ES</h4>

<p>イーエス<br/>
ECMAScript<br/>
※ECMA は標準化団体で European Computer Manufacturers Association の略<br/>
<a href="https://ja.wikipedia.org/wiki/Ecma%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%8A%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB">Ecma インターナショナル</a></p>

<h3>パッケージ</h3>

<h4>npm</h4>

<p>エヌピーエム<br/>
Node Package Manager</p>

<h4>YARN</h4>

<p>ヤーン<br/>
Yet Another Resource Negotiator</p>

<h4>CLI</h4>

<p>シーエルアイ<br/>
Command Line Interface</p>

<h3>ネットワーク</h3>

<h4>CDN</h4>

<p>シーディーエヌ<br/>
Content Delivery Network</p>

<h3>デザインパターン</h3>

<h4>MVC</h4>

<p>エムヴィーシー<br/>
Model View Controller</p>

<h3>開発アーキテクチャ</h3>

<h4>SPA</h4>

<p> スパ<br/>
Single Page Application</p>

<h3>デザイン設計</h3>

<h4>UI</h4>

<p>ユーアイ<br/>
User Interface</p>

<h4>UX</h4>

<p>ユーエックス<br/>
User Experience</p>

<h3>開発機能</h3>

<h4>AMP</h4>

<p>アンプ<br/>
Accelerated Mobile Pages</p>

<h4>PWA</h4>

<p>ピーダブリューエー<br/>
Progressive Web Apps</p>

<h3>バックエンド、クラウド</h3>

<h4>CMS</h4>

<p>シーエムエス<br/>
Content Management System</p>

<h4>SaaS</h4>

<p>サース<br/>
Software as a Service<br/>
必要な機能を必要な分だけサービスとして利用できるようにしたソフトウェア（主にアプリケーションソフトウェア）もしくはその提供形態のこと<br/>
<a href="https://ja.wikipedia.org/wiki/SaaS">https://ja.wikipedia.org/wiki/SaaS</a></p>

<h4>PaaS</h4>

<p>パース or パーズ<br/>
Platform as a Service<br/>
ソフトウェアを構築および稼動させるための土台となるプラットフォームを、インターネット経由のサービスとして提供する<br/>
<a href="https://ja.wikipedia.org/wiki/Platform_as_a_Service">https://ja.wikipedia.org/wiki/Platform_as_a_Service</a></p>

<h4>IaaS</h4>

<p>イアース or アイアース<br/>
Infrastructure as a Service<br/>
アプリケーションを利用する環境も含めて一括で提供する SaaS とは異なり、IaaS はサーバーやストレージ、ネットワークなどのハードウェアやインフラまでを提供するサービス<br/>
<a href="https://cloud.nifty.com/navi/beginner/iaas.htm">https://cloud.nifty.com/navi/beginner/iaas.htm</a></p>

<h4>AWS</h4>

<p>エーダブリューエス<br/>
Amazon Web Services</p>

<h3>ツール</h3>

<h4>VS Code</h4>

<p>ブイエスコード<br/>
Visual Studio Code</p>

<h3>役職</h3>

<h4>CTO</h4>

<p>シーティーオー<br/>
Chief Technical Officer<br/>
最高技術責任者</p>

<h4>CXO</h4>

<p>シーエックスオー<br/>
Chief Experience Officer</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】[Udemy] JavaScriptエンジニアのためのES6完全ガイド 勉強メモ その2'
description: ''
publishDate: '11/30/2018 00:30:00'
---

[CONTENTS-START]
<h2>概要</h2>

<p><a href="https://www.udemy.com/javascriptes6/">【世界で 2 万人が受講】JavaScript エンジニアのための ES6 完全ガイド | Udemy</a> を学習したのでメモしておきます。</p>

<p><a href="https://yuheijotaki.hatenablog.com/entry/2018/11/30/000000">その 1</a>の続きです。</p>

<h2>構文編</h2>

<h3><code>const</code>と<code>let</code></h3>

<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/const">const - JavaScript | MDN</a>
<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Statements/let">let - JavaScript | MDN</a></p>

<p>変更される可能性がない場合（定数）は<code>const</code>、変わる可能性がある場合は<code>let</code>を使う。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// var name = 'Taro';</span>
<span class="synComment">// var job = 'Frontend Engineer';</span>
<span class="synComment">// var hourlySalary = 4000;</span>

<span class="synComment">// ES6</span>
<span class="synStatement">const</span> name = <span class="synConstant">&quot;Taro&quot;</span>;
<span class="synIdentifier">let</span> job = <span class="synConstant">&quot;Frontend Engineer&quot;</span>;
<span class="synIdentifier">let</span> hourlySalary = 4000;

<span class="synComment">// 時間が経過したとして...</span>
job = <span class="synConstant">&quot;Technical Director&quot;</span>;
hourlySalary = 6000;
</pre>


<h3>テンプレートリテラル</h3>

<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/template_strings">テンプレート文字列 - JavaScript | MDN</a></p>

<p>テンプレート文字列、テンプレートストリング ともいう。</p>

<p>ES5</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> getMessage() <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> year = <span class="synStatement">new</span> <span class="synType">Date</span>().getFullYear();
  <span class="synStatement">return</span> <span class="synConstant">&quot;今年は&quot;</span> + year + <span class="synConstant">&quot;年です。&quot;</span>;
<span class="synIdentifier">}</span>
getMessage();
</pre>


<p>テンプレートリテラルを使った場合</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> getMessage() <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> year = <span class="synStatement">new</span> <span class="synType">Date</span>().getFullYear();
  <span class="synStatement">return</span> `今年は$<span class="synIdentifier">{</span>year<span class="synIdentifier">}</span>年です。`; <span class="synComment">// ひとつのまとまりとしてわかりやすく文字列を表現</span>
  <span class="synComment">// return `今年は${year+10}年です。`; // こういうこともできる</span>
<span class="synIdentifier">}</span>
getMessage();
</pre>


<h3>アロー関数</h3>

<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Functions/Arrow_functions">アロー関数 - JavaScript | MDN</a></p>

<p>ES5</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> add = <span class="synIdentifier">function</span>(a, b) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> a + b;
<span class="synIdentifier">}</span>;
add(1, 2);
</pre>


<p>アロー関数を使った場合</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> add = (a, b) =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> a + b;
<span class="synIdentifier">}</span>;
add(1, 2);
</pre>


<p>関数内に 1 個しか評価項目がない場合、中括弧、return を削除、1 行に省略することもできる</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> add = (a, b) =&gt; a + b;
add(1, 2);
</pre>


<p><code>map</code>を使う場合の例
ES5</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> numbers = <span class="synIdentifier">[</span>1, 2, 3<span class="synIdentifier">]</span>;
numbers.map(<span class="synIdentifier">function</span>(number) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> 2 * number;
<span class="synIdentifier">}</span>);
</pre>


<p>アロー関数を使った場合</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> numbers = <span class="synIdentifier">[</span>1, 2, 3<span class="synIdentifier">]</span>;
numbers.map(number =&gt; <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> 2 * number;
<span class="synIdentifier">}</span>);

<span class="synComment">// もしくは</span>
numbers.map(number =&gt; 2 * number);
</pre>


<p>Lexical 'this'（レキシカル ディス）<br/>
記述する場所によって<code>this</code>が決まる。<code>.bind</code>や<code>self</code>を使う必要がない。<br/>
※lexical = 語彙の、構文的な</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> team = <span class="synIdentifier">{</span>
  members: <span class="synIdentifier">[</span><span class="synConstant">&quot;Taro&quot;</span>, <span class="synConstant">&quot;Hanako&quot;</span><span class="synIdentifier">]</span>,
  teamName: <span class="synConstant">&quot;ONE PROJECT TEAM&quot;</span>,
  teamSummary: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synComment">// アロー関数を書く場所で囲っているthisがアロー関数内のthisになる。</span>
    <span class="synComment">// この場合、this === team</span>
    <span class="synStatement">return</span> <span class="synIdentifier">this</span>.members.map(member =&gt; <span class="synIdentifier">{</span>
      <span class="synStatement">return</span> `$<span class="synIdentifier">{</span>member<span class="synIdentifier">}</span>は$<span class="synIdentifier">{this</span>.teamName<span class="synIdentifier">}</span>の所属です。`; <span class="synComment">// このコールバックは別世界で実行されている</span>
    <span class="synIdentifier">}</span>);
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>;
team.teamSummary();
</pre>


<h3>オブジェクトリテラル</h3>

<p><a href="https://qiita.com/dondoko-susumu/items/aa79159d137c39251060">ES6 オブジェクトリテラルの拡張 - Qiita</a></p>

<p>ES5</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> createMusicShop(inventory) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    inventory: inventory,
    inventoryValue: <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
      <span class="synComment">// 配列のpriceを足して合計を求める</span>
      <span class="synStatement">return</span> <span class="synIdentifier">this</span>.inventory.reduce((total, music) =&gt; total + music.price, 0);
    <span class="synIdentifier">}</span>,
    priceForTitle: <span class="synIdentifier">function</span>(title) <span class="synIdentifier">{</span>
      <span class="synComment">// タイトルに対応した価格を返す</span>
      <span class="synStatement">return</span> <span class="synIdentifier">this</span>.inventory.find(music =&gt; music.title === title).price;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>

<span class="synStatement">const</span> inventory = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span> title: <span class="synConstant">&quot;KESHIKI&quot;</span>, price: 2500 <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> title: <span class="synConstant">&quot;aiqing&quot;</span>, price: 3000 <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>;
<span class="synStatement">const</span> musicShop = createMusicShop(inventory);

musicShop.inventoryValue(); <span class="synComment">// 5500</span>
(<span class="synConstant">&quot;&quot;</span>);
musicShop.priceForTitle(<span class="synConstant">&quot;KESHIKI&quot;</span>); <span class="synComment">// 2500</span>
</pre>


<p>ES6</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> createMusicShop(inventory) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">{</span>
    inventory, <span class="synComment">// オブジェクトのkeyとvalueが同じ場合は省略できる</span>
    inventoryValue() <span class="synIdentifier">{</span>
      <span class="synComment">// ': function' を省略できる</span>
      <span class="synStatement">return</span> <span class="synIdentifier">this</span>.inventory.reduce((total, music) =&gt; total + music.price, 0);
    <span class="synIdentifier">}</span>,
    priceForTitle(title) <span class="synIdentifier">{</span>
      <span class="synComment">// ': function' を省略できる</span>
      <span class="synStatement">return</span> <span class="synIdentifier">this</span>.inventory.find(music =&gt; music.title === title).price;
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>;
<span class="synIdentifier">}</span>
</pre>


<h3>関数のデフォルト引数</h3>

<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Functions/Default_parameters">デフォルト引数 - JavaScript | MDN</a></p>

<p>ES5</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// デフォルトの引数をif文で記述する必要がある</span>
<span class="synIdentifier">function</span> makeAjaxRequest(url, method) <span class="synIdentifier">{</span>
  <span class="synStatement">if</span> (!method) <span class="synIdentifier">{</span>
    method = <span class="synConstant">&quot;GET&quot;</span>;
  <span class="synIdentifier">}</span>
  <span class="synComment">// ajaxリクエストをするロジックがここにあると想定</span>
  <span class="synComment">// ...</span>
  <span class="synStatement">return</span> method;
<span class="synIdentifier">}</span>

makeAjaxRequest(<span class="synConstant">&quot;google.com&quot;</span>); <span class="synComment">// methodがGETになる</span>
makeAjaxRequest(<span class="synConstant">&quot;google.com&quot;</span>, <span class="synConstant">&quot;POST&quot;</span>); <span class="synComment">// methodがPOSTになる</span>
</pre>


<p>ES6</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// makeAjaxRequest の第2引数で指定するとif文が不要になる</span>
<span class="synIdentifier">function</span> makeAjaxRequest(url, method = <span class="synConstant">&quot;GET&quot;</span>) <span class="synIdentifier">{</span>
  <span class="synComment">// ajaxリクエストをするロジックがここにあると想定</span>
  <span class="synComment">// ...</span>
  <span class="synStatement">return</span> method;
<span class="synIdentifier">}</span>

makeAjaxRequest(<span class="synConstant">&quot;google.com&quot;</span>); <span class="synComment">// methodがGETになる</span>
makeAjaxRequest(<span class="synConstant">&quot;google.com&quot;</span>, <span class="synConstant">&quot;POST&quot;</span>); <span class="synComment">// methodがPOSTになる</span>
</pre>


<h3>Rest と Spread 演算子</h3>

<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Spread_syntax">スプレッド構文 - JavaScript | MDN</a></p>

<p>引数の部分に Rest 演算子を用いると可変長でまとめて配列に処理する</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> addNumbers(a, b, c, d, e) <span class="synIdentifier">{</span>
  <span class="synStatement">const</span> numbers = <span class="synIdentifier">[</span>a, b, c, d, e<span class="synIdentifier">]</span>;
  <span class="synStatement">return</span> numbers.reduce((sum, number) =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> sum + number;
  <span class="synIdentifier">}</span>, 0);
<span class="synIdentifier">}</span>

addNumbers(1, 2, 3, 4, 5);
</pre>


<p>渡す引数<code>(a,b,c,d,e)</code>を可変長にしたい場合 Rest 演算子を使う</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> addNumbers(...numbers) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> numbers.reduce((sum, number) =&gt; <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> sum + number;
  <span class="synIdentifier">}</span>, 0);
<span class="synIdentifier">}</span>

addNumbers(1, 2, 3, 4, 5, 6, 7);
</pre>


<p>Spread 演算子 = 展開する、広げる、フラットする = まとまっているものを分解する演算子（Rest とは逆）</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">const</span> defaultMembers = <span class="synIdentifier">[</span><span class="synConstant">&quot;Taro&quot;</span>, <span class="synConstant">&quot;Hanako&quot;</span><span class="synIdentifier">]</span>;
<span class="synStatement">const</span> addedMembers = <span class="synIdentifier">[</span><span class="synConstant">&quot;Ichiro&quot;</span>, <span class="synConstant">&quot;Tomoko&quot;</span><span class="synIdentifier">]</span>;
<span class="synStatement">const</span> favoriteMembers = <span class="synIdentifier">[</span><span class="synConstant">&quot;Jiro&quot;</span>, <span class="synConstant">&quot;Sachiko&quot;</span><span class="synIdentifier">]</span>;
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// これらをひとまとまりにしたい</span>
<span class="synComment">// ES5</span>
defaultMembers.concat(addedMembers); <span class="synComment">// [&quot;Taro&quot;,&quot;Hanako&quot;,&quot;Ichiro&quot;,&quot;Tomoko&quot;]</span>

<span class="synComment">// Spread演算子を使う（配列の中身を展開してくれる）concatと同じ結果に</span>
<span class="synIdentifier">[</span>...defaultMembers, ...addedMembers<span class="synIdentifier">]</span>; <span class="synComment">// [&quot;Taro&quot;,&quot;Hanako&quot;,&quot;Ichiro&quot;,&quot;Tomoko&quot;]</span>

<span class="synComment">// favoriteMembers を先頭に持ってきたい</span>
<span class="synIdentifier">[</span>...favoriteMembers, ...defaultMembers, ...addedMembers<span class="synIdentifier">]</span>; <span class="synComment">// [&quot;Jiro&quot;,&quot;Sachiko&quot;,&quot;Taro&quot;,&quot;Hanako&quot;,&quot;Ichiro&quot;,&quot;Tomoko&quot;]</span>

<span class="synComment">// favoriteMembers の前に1つだけ'Saburo'を持ってきたい</span>
<span class="synComment">// 間に'Kanako'を持ってきたい</span>
<span class="synIdentifier">[</span><span class="synConstant">&quot;Saburo&quot;</span>, ...favoriteMembers, <span class="synConstant">&quot;Kanako&quot;</span>, ...defaultMembers, ...addedMembers<span class="synIdentifier">]</span>; <span class="synComment">// [&quot;Saburo&quot;,&quot;Jiro&quot;,&quot;Sachiko&quot;,&quot;Kanako&quot;,&quot;Taro&quot;,&quot;Hanako&quot;,&quot;Ichiro&quot;,&quot;Tomoko&quot;]</span>
</pre>




<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> validateNameList(...names) <span class="synIdentifier">{</span>
  <span class="synComment">// Rest演算子</span>
  <span class="synStatement">if</span> (names.indexOf(<span class="synConstant">&quot;Taro&quot;</span>) &lt; 0) <span class="synIdentifier">{</span>
    <span class="synComment">// もし'Taro'がなかったら、'Taro'を入れる</span>
    <span class="synStatement">return</span> <span class="synIdentifier">[</span><span class="synConstant">&quot;Taro&quot;</span>, ...names<span class="synIdentifier">]</span>; <span class="synComment">// Spread演算子 [&quot;Taro&quot;, &quot;Hanako&quot;, &quot;Ichiro&quot;]</span>
  <span class="synIdentifier">}</span>
  <span class="synStatement">return</span> names;
<span class="synIdentifier">}</span>

validateNameList(<span class="synConstant">&quot;Hanako&quot;</span>, <span class="synConstant">&quot;Ichiro&quot;</span>);
</pre>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: '【学習メモ】[Udemy] JavaScriptエンジニアのためのES6完全ガイド 勉強メモ その1'
description: ''
publishDate: '11/30/2018 00:00:00'
---

[CONTENTS-START]
<h2>概要</h2>

<p><a href="https://www.udemy.com/javascriptes6/">【世界で 2 万人が受講】JavaScript エンジニアのための ES6 完全ガイド | Udemy</a> を学習したのでメモしておきます。<br/>
動画内で図解を用いたくわしい解説や小テストがフェーズごとにあります。<br/>
こちらに記載しているコードは自分なりに発展させたものになります。</p>

<p>講座は基本的には ES5 までの書き方が分かっている人向けだと思いました。<br/>
ES5 ではこう書く必要があるけど、ES6 ではこう書けますよ。仕組みとしてはこういう考え方で処理されます。といった形で説明されています。</p>

<p>自分のような ES5 をまともに書けないけど、for 文って何、配列って何、といった超初級者向けでもない人だったらギリギリついていけるレベルに感じました。</p>

<p>またオリジナルは英語の動画ですが、ES6 でできることを網羅して解説するのが目的と思いますので、特定のメソッドや機能に関して完璧に解説されているものではないと思います。<br/>
パフォーマンス的にどうこいう、ということより、パッとコードを見た際に ES6 で書いたほうが見やすいですよね、などそのあたりがざっくりと感じられる人は気になるかもしれません。</p>

<h3>その他参考</h3>

<ul>
<li><a href="https://qiita.com/itagakishintaro/items/29e301f3125760b81302">JavaScript で forEach, filter, map, reduce とか - Qiita</a></li>
<li><a href="https://qiita.com/i_am_master_yoda/items/224ff73443b4566ec8e8">JavaScript の some と every がすごく便利 - Qiita</a></li>
<li><a href="http://38fanjia.hatenablog.com/entry/2016/10/10/170900">配列の操作(forEach,map,filter,find,some,every)について - だれも聞いていないと思って歌え</a></li>
</ul>


<h2>メソッド編</h2>

<h3><code>forEach</code></h3>

<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">Array.prototype.forEach() - JavaScript | MDN</a></p>

<p><code>for</code>を使う場合</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> names = <span class="synIdentifier">[</span><span class="synConstant">&quot;Taro&quot;</span>, <span class="synConstant">&quot;Hanako&quot;</span>, <span class="synConstant">&quot;Ichiro&quot;</span><span class="synIdentifier">]</span>;

<span class="synComment">// ここから for</span>
<span class="synStatement">for</span> (<span class="synIdentifier">var</span> i = 0; i &lt; names.length; i++) <span class="synIdentifier">{</span>
  console.log(names<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>); <span class="synComment">// &quot;Taro&quot; &quot;Hanako&quot; &quot;Ichiro&quot;</span>
<span class="synIdentifier">}</span>
</pre>


<p><code>forEach</code>を使う場合</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// ここから forEach</span>
names.forEach(<span class="synIdentifier">function</span>(name) <span class="synIdentifier">{</span>
  console.log(name); <span class="synComment">// &quot;Taro&quot; &quot;Hanako&quot; &quot;Ichiro&quot;</span>
<span class="synIdentifier">}</span>);
</pre>


<p>この場合 <code>function(name) { console.log(name); }</code> がコールバック関数となる。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> numbers = <span class="synIdentifier">[</span>1, 2, 3, 4, 5<span class="synIdentifier">]</span>;
<span class="synIdentifier">var</span> sum = 0; <span class="synComment">// 合計を保持する変数</span>

<span class="synComment">// ここから forEach</span>
<span class="synComment">// 配列の一つ一つの数字を合計に足す</span>
numbers.forEach(<span class="synIdentifier">function</span>(number) <span class="synIdentifier">{</span>
  sum += number;
<span class="synIdentifier">}</span>);

<span class="synComment">// 合計を表示する</span>
console.log(sum); <span class="synComment">// 15</span>
</pre>


<p>匿名関数を使わず名前付きの関数を用意する場合</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// ここから forEach</span>
<span class="synIdentifier">function</span> adder(number) <span class="synIdentifier">{</span>
  sum += number;
<span class="synIdentifier">}</span>
<span class="synComment">// 配列の一つ一つの数字を合計に足す</span>
numbers.forEach(adder);

<span class="synComment">// 合計を表示する</span>
console.log(sum); <span class="synComment">// 15</span>
</pre>


<h3><code>map</code></h3>

<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/map">Array.prototype.map() - JavaScript | MDN</a></p>

<p><code>for</code>を使う場合</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> numbers = <span class="synIdentifier">[</span>1, 2, 3<span class="synIdentifier">]</span>;

<span class="synComment">// ここから for</span>
<span class="synIdentifier">var</span> doubleNumbers = <span class="synIdentifier">[]</span>; <span class="synComment">// 2倍にする数字を格納する変数。既存の配列は書き換えずに新しく用意したほうがよい</span>
<span class="synStatement">for</span> (<span class="synIdentifier">var</span> i = 0; i &lt; numbers.length; i++) <span class="synIdentifier">{</span>
  <span class="synComment">// numbers[i] = numbers[i] * 2</span>
  doubleNumbers.push(numbers<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span> * 2);
<span class="synIdentifier">}</span>

console.log(doubleNumbers); <span class="synComment">// [2, 4, 6]</span>
</pre>


<p><code>map</code>を使う場合
この場合 numbers 配列は変更されず、結果の配列は新しく作成されている</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// ここから map</span>
<span class="synIdentifier">var</span> doubled = numbers.map(<span class="synIdentifier">function</span>(number) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> number * 2; <span class="synComment">// 戻り値として新しい配列に渡される</span>
<span class="synIdentifier">}</span>);

console.log(doubled); <span class="synComment">// [2, 4, 6]</span>
</pre>


<p><code>map</code>は配列のなかの特定の値を引っ張るときなどに有効</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> members = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Taro&quot;</span>, gender: <span class="synConstant">&quot;male&quot;</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Hanako&quot;</span>, gender: <span class="synConstant">&quot;female&quot;</span> <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>;

<span class="synComment">// ここから map</span>
<span class="synComment">// members配列からgenderのmale/femaleを引っ張ってきたい</span>
<span class="synIdentifier">var</span> mapGenders = members.map(<span class="synIdentifier">function</span>(name) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> name.gender;
<span class="synIdentifier">}</span>);

console.log(mapGenders); <span class="synComment">// [&quot;male&quot;, &quot;female&quot;]</span>
</pre>


<h3><code>filter</code></h3>

<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">Array.prototype.filter() - JavaScript | MDN</a></p>

<p><code>for</code>を使う場合</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> members = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Taro&quot;</span>, gender: <span class="synConstant">&quot;male&quot;</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Hanako&quot;</span>, gender: <span class="synConstant">&quot;female&quot;</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Ichiro&quot;</span>, gender: <span class="synConstant">&quot;male&quot;</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Tomoko&quot;</span>, gender: <span class="synConstant">&quot;female&quot;</span> <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>;

<span class="synComment">// ここから for</span>
<span class="synIdentifier">var</span> filterMembers = <span class="synIdentifier">[]</span>;
<span class="synStatement">for</span> (<span class="synIdentifier">var</span> i = 0; i &lt; members.length; i++) <span class="synIdentifier">{</span>
  <span class="synStatement">if</span> (members<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>.gender === <span class="synConstant">&quot;female&quot;</span>) <span class="synIdentifier">{</span>
    filterMembers.push(members<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>);
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>

console.log(filterMembers);

<span class="synComment">/*** 結果 ***</span>
<span class="synComment">[[object Object] {</span>
<span class="synComment">  gender: &quot;female&quot;,</span>
<span class="synComment">  name: &quot;Hanako&quot;</span>
<span class="synComment">}, [object Object] {</span>
<span class="synComment">  gender: &quot;female&quot;,</span>
<span class="synComment">  name: &quot;Tomoko&quot;</span>
<span class="synComment">}]</span>
<span class="synComment">*** 結果 ***/</span>
</pre>


<p><code>filter</code>を使う場合</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// ここから filter</span>
<span class="synIdentifier">var</span> filterMembers = members.filter(<span class="synIdentifier">function</span>(member) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> member.gender === <span class="synConstant">&quot;female&quot;</span>;
  <span class="synComment">/*** 下記のようにif文にする必要はない ***</span>
<span class="synComment">  if (member.gender === 'female') {</span>
<span class="synComment">    return true;</span>
<span class="synComment">  }</span>
<span class="synComment">  ***/</span>
<span class="synIdentifier">}</span>);

console.log(filterMembers);

<span class="synComment">/*** 結果 ***</span>
<span class="synComment">[[object Object] {</span>
<span class="synComment">  gender: &quot;female&quot;,</span>
<span class="synComment">  name: &quot;Hanako&quot;</span>
<span class="synComment">}, [object Object] {</span>
<span class="synComment">  gender: &quot;female&quot;,</span>
<span class="synComment">  name: &quot;Tomoko&quot;</span>
<span class="synComment">}]</span>
<span class="synComment">*** 結果 ***/</span>
</pre>


<p>複数の条件で絞り込みする</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> members = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Taro&quot;</span>, gender: <span class="synConstant">&quot;male&quot;</span>, age: 30 <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Hanako&quot;</span>, gender: <span class="synConstant">&quot;female&quot;</span>, age: 20 <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Ichiro&quot;</span>, gender: <span class="synConstant">&quot;male&quot;</span>, age: 50 <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Tomoko&quot;</span>, gender: <span class="synConstant">&quot;female&quot;</span>, age: 40 <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>;

<span class="synComment">// ここから filter</span>
<span class="synComment">// gender:'male' / age:30以上 の配列を絞り込む</span>
<span class="synIdentifier">var</span> filterMembers = members.filter(<span class="synIdentifier">function</span>(member) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> member.gender === <span class="synConstant">&quot;male&quot;</span> &amp;&amp; member.age &gt;= 30;
<span class="synIdentifier">}</span>);

console.log(filterMembers);

<span class="synComment">/*** 結果 ***</span>
<span class="synComment">[[object Object] {</span>
<span class="synComment">  age: 30,</span>
<span class="synComment">  gender: &quot;male&quot;,</span>
<span class="synComment">  name: &quot;Taro&quot;</span>
<span class="synComment">}, [object Object] {</span>
<span class="synComment">  age: 50,</span>
<span class="synComment">  gender: &quot;male&quot;,</span>
<span class="synComment">  name: &quot;Ichiro&quot;</span>
<span class="synComment">}]</span>
<span class="synComment">*** 結果 ***/</span>
</pre>


<p>ブログのようなデータから関連するデータだけに絞り込みたい</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> post = <span class="synIdentifier">{</span> id: 1, title: <span class="synConstant">&quot;投稿のタイトルです。&quot;</span> <span class="synIdentifier">}</span>;
<span class="synIdentifier">var</span> comments = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span> postId: 1, content: <span class="synConstant">&quot;コメント01&quot;</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> postId: 99, content: <span class="synConstant">&quot;コメント02&quot;</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> postId: 1, content: <span class="synConstant">&quot;コメント03&quot;</span> <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>;

<span class="synComment">// ここから filter</span>
<span class="synComment">// ID:1の投稿に紐づく投稿を取得する</span>
<span class="synIdentifier">function</span> commentsForPost(post, comments) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> comments.filter(<span class="synIdentifier">function</span>(comment) <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> comment.postId === post.id;
  <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>

console.log(commentsForPost(post, comments));

<span class="synComment">/*** 結果 ***</span>
<span class="synComment">[[object Object] {</span>
<span class="synComment">  content: &quot;コメント01&quot;,</span>
<span class="synComment">  postId: 1</span>
<span class="synComment">}, [object Object] {</span>
<span class="synComment">  content: &quot;コメント03&quot;,</span>
<span class="synComment">  postId: 1</span>
<span class="synComment">}]</span>
<span class="synComment">*** 結果 ***/</span>
</pre>


<h3><code>find</code></h3>

<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/find">Array.prototype.find() - JavaScript | MDN</a></p>

<p>ある配列から自分の探したい要素を引っ張ってくる
<code>for</code>の場合</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> members = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Taro&quot;</span>, age: 30 <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Hanako&quot;</span> <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Ichiro&quot;</span>, age: 50 <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Tomoko&quot;</span> <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>;
<span class="synIdentifier">var</span> findMembers;

<span class="synComment">// ここから for</span>
<span class="synStatement">for</span> (<span class="synIdentifier">var</span> i = 0; i &lt; members.length; i++) <span class="synIdentifier">{</span>
  <span class="synStatement">if</span> (members<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>.name === <span class="synConstant">&quot;Ichiro&quot;</span>) <span class="synIdentifier">{</span>
    findMembers = members<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>;
    <span class="synStatement">break</span>;
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>

console.log(findMembers);

<span class="synComment">/*** 結果 ***</span>
<span class="synComment">[object Object] {</span>
<span class="synComment">  age: 50,</span>
<span class="synComment">  name: &quot;Ichiro&quot;</span>
<span class="synComment">}</span>
<span class="synComment">*** 結果 ***/</span>
</pre>


<p><code>find</code>の場合
<code>filter</code>とは違い、<code>find</code>は 1 番目に見つかった要素が返される。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// ここから find</span>
<span class="synIdentifier">var</span> findMembers = members.find(<span class="synIdentifier">function</span>(member) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> member.name === <span class="synConstant">&quot;Ichiro&quot;</span>;
<span class="synIdentifier">}</span>);

console.log(findMembers);

<span class="synComment">/*** 結果 ***</span>
<span class="synComment">[object Object] {</span>
<span class="synComment">  age: 50,</span>
<span class="synComment">  name: &quot;Ichiro&quot;</span>
<span class="synComment">}</span>
<span class="synComment">*** 結果 ***/</span>
</pre>


<p>Ichiro を探したい</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> Member(name) <span class="synIdentifier">{</span>
  <span class="synIdentifier">this</span>.name = name;
<span class="synIdentifier">}</span>

<span class="synIdentifier">var</span> members = <span class="synIdentifier">[</span><span class="synStatement">new</span> Member(<span class="synConstant">&quot;Taro&quot;</span>), <span class="synStatement">new</span> Member(<span class="synConstant">&quot;Hanako&quot;</span>), <span class="synStatement">new</span> Member(<span class="synConstant">&quot;Ichiro&quot;</span>)<span class="synIdentifier">]</span>;

<span class="synIdentifier">var</span> findMembers = members.find(<span class="synIdentifier">function</span>(member) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> member.name === <span class="synConstant">&quot;Ichiro&quot;</span>;
<span class="synIdentifier">}</span>);

console.log(findMembers);

<span class="synComment">/*** 結果 ***</span>
<span class="synComment">[object Object] {</span>
<span class="synComment">  name: &quot;Ichiro&quot;</span>
<span class="synComment">}</span>
<span class="synComment">*** 結果 ***/</span>
</pre>


<p>コメントに紐づく投稿を探す</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> posts = <span class="synIdentifier">[{</span> id: 1, title: <span class="synConstant">&quot;古い投稿&quot;</span> <span class="synIdentifier">}</span>, <span class="synIdentifier">{</span> id: 2, title: <span class="synConstant">&quot;新しい投稿&quot;</span> <span class="synIdentifier">}]</span>;
<span class="synIdentifier">var</span> comment = <span class="synIdentifier">{</span> postId: 2, content: <span class="synConstant">&quot;いいね！&quot;</span> <span class="synIdentifier">}</span>;

<span class="synIdentifier">function</span> postForComment(post, comment) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> posts.find(<span class="synIdentifier">function</span>(post) <span class="synIdentifier">{</span>
    <span class="synStatement">return</span> post.id === comment.postId;
  <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>

console.log(postForComment(posts, comment));

<span class="synComment">/*** 結果 ***</span>
<span class="synComment">[object Object] {</span>
<span class="synComment">  id: 2,</span>
<span class="synComment">  title: &quot;新しい投稿&quot;</span>
<span class="synComment">}</span>
<span class="synComment">*** 結果 ***/</span>
</pre>


<h3><code>every</code>,<code>some</code></h3>

<p><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/every">Array.prototype.every() - JavaScript | MDN</a>
<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/some">Array.prototype.some() - JavaScript | MDN</a></p>

<p><code>for</code>の場合</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> members = <span class="synIdentifier">[</span>
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Taro&quot;</span>, age: 30 <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Hanako&quot;</span>, age: 20 <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Ichiro&quot;</span>, age: 50 <span class="synIdentifier">}</span>,
  <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Sachiko&quot;</span>, age: 10 <span class="synIdentifier">}</span>
<span class="synIdentifier">]</span>;

<span class="synComment">// ageが20以上のmemberを探す</span>
<span class="synIdentifier">var</span> allMembersAdult = <span class="synConstant">true</span>; <span class="synComment">// すべての人が20歳以上の場合のフラグ</span>
<span class="synIdentifier">var</span> someMembersAdult = <span class="synConstant">false</span>; <span class="synComment">// だれか一人でも20歳以上の場合のフラグ</span>

<span class="synComment">// ここから for</span>
<span class="synStatement">for</span> (<span class="synIdentifier">var</span> i = 0; i &lt; members.length; i++) <span class="synIdentifier">{</span>
  <span class="synIdentifier">var</span> member = members<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>;
  <span class="synStatement">if</span> (member.age &lt; 20) <span class="synIdentifier">{</span>
    allMembersAdult = <span class="synConstant">false</span>; <span class="synComment">// すべての人が20歳以上の場合</span>
  <span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
    someMembersAdult = <span class="synConstant">true</span>; <span class="synComment">// だれか一人でも20歳以上の場合</span>
  <span class="synIdentifier">}</span>
<span class="synIdentifier">}</span>

console.log(allMembersAdult); <span class="synComment">// false</span>
console.log(someMembersAdult); <span class="synComment">// true</span>
</pre>


<p><code>every</code>と<code>some</code>の場合</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// ここから every</span>
<span class="synComment">// 論理積を取る（trueが全部である）</span>
allMembersAdult = members.every(<span class="synIdentifier">function</span>(member) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> member.age &gt;= 20;
<span class="synIdentifier">}</span>);

console.log(allMembersAdult); <span class="synComment">// false</span>

<span class="synComment">// ここから some</span>
<span class="synComment">// 論理和を取る（trueがひとつでもある）</span>
someMembersAdult = members.some(<span class="synIdentifier">function</span>(member) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> member.age &gt;= 20;
<span class="synIdentifier">}</span>);

console.log(someMembersAdult); <span class="synComment">// true</span>
</pre>


<p>すべて名前の文字数は 5 文字以上か調べる</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> names = <span class="synIdentifier">[</span><span class="synConstant">&quot;Taro&quot;</span>, <span class="synConstant">&quot;Hanako&quot;</span>, <span class="synConstant">&quot;Ichiro&quot;</span>, <span class="synConstant">&quot;Tomoko&quot;</span>, <span class="synConstant">&quot;Jiro&quot;</span><span class="synIdentifier">]</span>;

<span class="synComment">// すべて名前の文字数は5文字以上か調べる</span>
allNamesMoreThan5 = names.every(<span class="synIdentifier">function</span>(name) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> name.length &gt;= 5;
<span class="synIdentifier">}</span>);

console.log(allNamesMoreThan5); <span class="synComment">// false</span>

<span class="synComment">// どれか名前の文字数は5文字以上か調べる</span>
someNamesMoreThan5 = names.some(<span class="synIdentifier">function</span>(name) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> name.length &gt;= 5;
<span class="synIdentifier">}</span>);

console.log(someNamesMoreThan5); <span class="synComment">// true</span>
</pre>


<p><code>every</code>,<code>some</code>の使いどころ</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">function</span> Field(value) <span class="synIdentifier">{</span>
  <span class="synIdentifier">this</span>.value = value;
<span class="synIdentifier">}</span>

Field.prototype.validate = <span class="synIdentifier">function</span> () <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> <span class="synIdentifier">this</span>.value.length &gt; 0;
<span class="synIdentifier">}</span>

<span class="synIdentifier">var</span> username = <span class="synStatement">new</span> Field(<span class="synConstant">'my_username'</span>);
<span class="synIdentifier">var</span> password = <span class="synStatement">new</span> Field(<span class="synConstant">'my_password'</span>);
<span class="synIdentifier">var</span> birthday = <span class="synStatement">new</span> Field(<span class="synConstant">'my_password'</span>);

<span class="synComment">// username.validate() &amp;&amp; password.validate() &amp;&amp; birthday.validate();</span>
<span class="synComment">// 上記のように書くと無限に増える...</span>
<span class="synComment">// こういうときにeveryを使う</span>

<span class="synIdentifier">var</span> fields <span class="synIdentifier">[</span>
  username,
  password,
  birthday
<span class="synIdentifier">]</span>;

<span class="synIdentifier">var</span> formIsValid = fields.every(<span class="synIdentifier">function</span>(field) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> field.validate();
<span class="synIdentifier">}</span>);

<span class="synStatement">if</span> (formIsValid) <span class="synIdentifier">{</span>
  <span class="synComment">// サーバーにリクエストを投げる</span>
<span class="synIdentifier">}</span> <span class="synStatement">else</span> <span class="synIdentifier">{</span>
  <span class="synComment">// エラーを表示する</span>
<span class="synIdentifier">}</span>
</pre>


<h3><code>reduce</code></h3>

<p>徐々に配列に何個もあるものが 1 個に集約していく動きをするのが <code>reduce</code>
<code>for</code>の場合</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> numbers = <span class="synIdentifier">[</span>10, 20, 30<span class="synIdentifier">]</span>;
<span class="synIdentifier">var</span> sum = 0;

<span class="synComment">// for文 ここから</span>
<span class="synStatement">for</span> (<span class="synIdentifier">let</span> i = 0; i &lt; numbers.length; i++) <span class="synIdentifier">{</span>
  sum += numbers<span class="synIdentifier">[</span>i<span class="synIdentifier">]</span>; <span class="synComment">// 60</span>
<span class="synIdentifier">}</span>

console.log(sum); <span class="synComment">// 60</span>
</pre>


<p><code>reduce</code>の場合</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synComment">// reduce ここから</span>
<span class="synIdentifier">var</span> sum = numbers.reduce(<span class="synIdentifier">function</span>(sum, number) <span class="synIdentifier">{</span>
  <span class="synStatement">return</span> sum + number; <span class="synComment">// 60</span>
<span class="synIdentifier">}</span>, 0); <span class="synComment">// ここの第2引数の0が初期値、-100でも100でもなんでもOK</span>

console.log(sum); <span class="synComment">// 60</span>
</pre>


<p>初期値に数字ではないものを入れる場合</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synIdentifier">var</span> members = <span class="synIdentifier">[{</span> name: <span class="synConstant">&quot;Taro&quot;</span> <span class="synIdentifier">}</span>, <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Hanako&quot;</span> <span class="synIdentifier">}</span>, <span class="synIdentifier">{</span> name: <span class="synConstant">&quot;Ichiro&quot;</span> <span class="synIdentifier">}]</span>;

<span class="synComment">// ['Taro','Hanako','Ichiro'] という配列を作りたい</span>
<span class="synComment">// mapを使うとやりやすい</span>
<span class="synIdentifier">var</span> reduceMembers = members.reduce(<span class="synIdentifier">function</span>(previous, member) <span class="synIdentifier">{</span>
  previous.push(member.name);
  <span class="synStatement">return</span> previous;
<span class="synIdentifier">}</span>, <span class="synIdentifier">[]</span>); <span class="synComment">// 初期値として空の配列を入れる</span>

console.log(reduceMembers); <span class="synComment">// [&quot;Taro&quot;, &quot;Hanako&quot;, &quot;Ichiro&quot;]</span>
</pre>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'Mac 初期設定'
description: ''
publishDate: '11/28/2018 00:00:00'
---

[CONTENTS-START]
<p>手動で設定した際の自分用メモです。</p>

<ol>
<li><a href="#section01">はじめにやること</a></li>
<li><a href="#section02">アプリケーションのインストール</a></li>
<li><a href="#section03">アプリケーションの設定</a></li>
<li><a href="#section04">Node.js と npm のインストール</a></li>
<li><a href="#section05">Mac 環境設定関連</a></li>
</ol>


<p><a name="section01"></a></p>

<h2>はじめにやること</h2>

<ul>
<li>OS アップデート</li>
<li>Touch ID 有効<br/>
<a href="https://support.apple.com/ja-jp/HT207054">Mac で Touch ID を使う</a></li>
<li>Dock 見えないようにする</li>
<li>トラックパッド、マウス早くする</li>
<li>アニメーション早くする<br/>
<a href="https://memo.brdr.jp/post/156787133366/mac%E3%81%AE%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E9%80%9F%E3%81%8F%E3%81%99%E3%82%8B%E3%81%A8%E5%BF%AB%E9%81%A9">Mac のアニメーションを速くすると快適</a><br/>
<a href="https://qiita.com/soushiy/items/b56d4961d54972bc4b9e">【決定版】MacOS X 高速化テクニック</a></li>
<li>Chrome、Alfred、1Password のインストール</li>
</ul>


<p><a name="section02"></a></p>

<h2>アプリケーションのインストール</h2>

<p>直接のサイトから DL/インストールと、Mac App Store からインストールで手順が違う場合あり</p>

<h3>ブラウザ</h3>

<ul>
<li><a href="https://www.google.com/intl/ja_ALL/chrome/">Google Chrome</a></li>
<li><a href="https://www.mozilla.org/ja/firefox/new/">Firefox</a></li>
</ul>


<h3>開発</h3>

<ul>
<li><a href="https://www.sublimetext.com/">Sublime Text</a> ※ライセンスキーは購入時のメール</li>
<li><a href="https://code.visualstudio.com/">Visual Studio Code</a></li>
<li><a href="https://kapeli.com/dash">Dash</a></li>
<li><a href="https://panic.com/transmit/">Transmit</a> ※有料版はメールリンクから</li>
<li><a href="https://www.mamp.info/en/">MAMP / MAMP PRO</a></li>
<li><a href="https://desktop.github.com/">GitHub Desktop</a></li>
<li><a href="https://ja.atlassian.com/software/sourcetree">Sourcetree</a></li>
</ul>


<h3>デザイン</h3>

<ul>
<li><a href="https://www.adobe.com/jp/creativecloud/catalog/desktop.html">Adobe Creative Cloud</a>

<ul>
<li>Adobe Illustrator CC 2019</li>
<li>Adobe Photoshop CC 2019</li>
<li>Adobe XD CC</li>
</ul>
</li>
<li><a href="https://www.sketchapp.com/get/">Sketch</a> ※ライセンスキーは購入時のメール</li>
</ul>


<h3>コミュニケーション</h3>

<ul>
<li><a href="https://www.skype.com/ja/get-skype/skype-for-mac/">Skype</a></li>
<li><a href="https://itunes.apple.com/jp/app/slack/id803453959?mt=12">Slack</a></li>
<li><a href="https://itunes.apple.com/jp/app/line/id539883307?mt=12">LINE</a></li>
</ul>


<h3>その他ツール</h3>

<ul>
<li><a href="https://itunes.apple.com/jp/app/1password-7-password-manager/id1333542190?mt=12">1Password</a></li>
<li><a href="https://www.alfredapp.com/">Alfred 3</a> ※ライセンスキーは購入時のメール</li>
<li><a href="https://www.box.com/ja-jp/resources/downloads">Box</a></li>
<li><a href="https://www.dropbox.com/ja/install">Dropbox</a></li>
<li><a href="https://www.google.co.jp/ime/">Google 日本語入力</a></li>
<li><a href="https://www.spotify.com/jp/download/mac/">Spotify</a></li>
</ul>


<p><a name="section03"></a></p>

<h2>アプリケーションの設定</h2>

<h3>Google Chrome</h3>

<p>ブックマークはアカウントログインで同期</p>

<h3>Sublime Text</h3>

<p>入れているパッケージ</p>

<ul>
<li>WordPress</li>
<li>AutoFileName</li>
<li>CSS3</li>
<li>DashDoc</li>
<li>EditorConfig</li>
<li>Emmet</li>
<li>Goto-CSS-Declaration</li>
<li>HTML5</li>
<li>Image2tag</li>
<li>jQuery</li>
<li>Package Control</li>
<li>Sass</li>
<li>SCSS</li>
<li>Sublimerge 3</li>
<li>Theme - Spacegray</li>
</ul>


<h3>Dash</h3>

<p>環境設定 -> Snippets から .dash ファイルをエクスポート</p>

<h3>Transmit</h3>

<p>お気に入り -> 書き出し でエクスポート
お気に入り -> 読み込み でインポート</p>

<h3>1Password</h3>

<p>iPhone からバーコードでログイン/同期可能</p>

<h3>Google 日本語入力</h3>

<p>デフォルトの入力メニュー削除、英数(Google)とひらがな(Google)だけ残す</p>

<h3>メール</h3>

<p>ツールバーのカスタマイズ</p>

<p><a name="section04"></a></p>

<h2>Node.js と npm のインストール</h2>

<h3>Node.js</h3>

<ul>
<li><a href="https://qiita.com/kyosuke5_20/items/c5f68fc9d89b84c0df09">Mac に Node.js をインストール</a></li>
</ul>


<h3>npm package</h3>

<ul>
<li><a href="https://www.npmjs.com/package/sass">sass</a></li>
<li><a href="https://www.npmjs.com/package/gulp">gulp</a></li>
<li><a href="https://www.npmjs.com/package/webpack">webpack</a><br/>
※webpack に関してはこちらも <a href="https://qiita.com/yosisa/items/61cfd3ede598e194813b">webpack で始めるイマドキのフロントエンド開発</a></li>
</ul>


<p><a name="section05"></a></p>

<h2>Mac 環境設定関連</h2>

<h3>Finder</h3>

<ul>
<li>ツールバー、サイドバーのカスタマイズ</li>
<li>デスクトップの表示オプション<br/>
アイコンサイズ:16x16 / テキストサイズ:11 / ラベルの位置:右側</li>
<li>不可視ファイルの表示<br/>
<a href="https://qiita.com/TsukasaHasegawa/items/fa8e783a556dc1a08f51">【Mac】隠しファイル・隠しフォルダを表示する方法</a></li>
</ul>


<h3>その他</h3>

<ul>
<li>次のウィンドウを操作対象にする Cmd + Ctrl + Tab<br/>
<a href="https://dev.classmethod.jp/tool/mac-next-window-shortcut/">[小ネタ][Mac] 同一アプリケーションでウィンドウを切り替えるショートカット</a></li>
</ul>

[CONTENS-END]
[ARTICLE-END]



[ARTICLE-START]
---
title: '【読書メモ】Webフロントエンド ハイパフォーマンス チューニング'
description: ''
publishDate: '11/25/2018 00:00:00'
---

[CONTENTS-START]
<p><a href="https://www.amazon.co.jp//dp/4774189677">Web フロントエンド ハイパフォーマンス チューニング</a>を読みました。<br/>
フロントエンドのフの字も知識もない自分ですが、勉強になったポイントなどを備忘録しておきます。</p>

<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774189677/hatena-blog-22/"><img src="/images/hatena/20190726111915.jpg" class="hatena-asin-detail-image" alt="Webフロントエンド ハイパフォーマンス チューニング" title="Webフロントエンド ハイパフォーマンス チューニング"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774189677/hatena-blog-22/">Webフロントエンド ハイパフォーマンス チューニング</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> 久保田光則</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> 技術評論社</li><li><span class="hatena-asin-detail-label">発売日:</span> 2017/05/26</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4774189677/hatena-blog-22" target="_blank">この商品を含むブログを見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

<ol>
<li><a href="#section_01">概要</a></li>
<li><a href="#section_02">気になったところ</a></li>
<li><a href="#section_03">感想</a></li>
</ol>


<p><a name="section_01"></a></p>

<h2>概要</h2>

<h3>高速化のための Tips 本ではない</h3>

<p>最初に説明されていますが、よく Web 上で転がっている「サイト高速化のための ○○ 個の方法」のような Tips を集めただけの内容ではありません。</p>

<ul>
<li>URL を叩いてからブラウザへの表示されるまでの仕組みを理解する</li>
<li>表示の計測方法を理解する</li>
<li>その際に一般的に用いられる指標を理解する</li>
</ul>


<p>ことで誤った知識でパフォーマンスを悪化させる/コストパフォーマンスの低いチューニングをすることを避けることができます、というスタンスと理解しました。</p>

<h3>チューニングには多くのトレードオフが発生する</h3>

<p>また挙げられているチューニングテクニックも多くの場合トレードオフが含まれることを念頭に置くことが前提、ということです。</p>

<ul>
<li>開発者の時間的リソース</li>
<li>コードの単純さ（可読性、保守性、拡張性）</li>
</ul>


<p>に関して意識せずにチューニングすることは避けてください、といった言葉もこの本のスタンスと理解しました。
その前提の上で気になった点を箇条書きにします。</p>

<p><a name="section_02"></a></p>

<h2>気になったところ</h2>

<h3>CSS セレクタのマッチング（p.39/p.221/p.226）</h3>

<p>よく言及されるがセレクタのマッチングは右から左に向けて処理される。
高速な記述をするために、</p>

<ul>
<li>CSS セレクタをシンプルにする</li>
<li>子孫セレクタ・間接セレクタ・全称セレクタなど避ける</li>
</ul>


<p>処理側が辿る要素を少なくしてあげましょうという形です。</p>

<h3>RAIL（p.55）</h3>

<p>Google の開発者が提唱したパフォーマンスモデルです。
Response, Animation, Idle, Load の頭文字をとったもの。</p>

<p>（ほか参考にみたもの）<br/>
<a href="https://developers.google.com/web/fundamentals/performance/rail?hl=ja">RAIL モデルでパフォーマンスを計測する  |  Web  |  Google Developers</a><br/>
<a href="https://qiita.com/soarflat/items/32a164bfc34bfd344c99">Web パフォーマンス最適化のために「RAIL」というパフォーマンス基準を知っておく - Qiita</a><br/>
<a href="https://havelog.ayumusato.com/develop/performance/e664-rail_performance_model.html">RAIL という Web パフォーマンスモデルの概要 ::ハブろぐ</a></p>

<h3>Chrome DevTools（p.68）</h3>

<p>このページあたりから Dev Tools で実際にどのような機能があるかや、どのように計測できるかが書いてあります。
広く使われるのは Network, Performance, Memory の 3 つのパネル。</p>

<h3>Lighthouse（p.87）</h3>

<p>Lighthouse は Chrome DevTool 内の機能。
知らなかったのですが、内容は PageSpeed Insights に似た感じですが、
PWA の準拠度やアクセシビリティ対応の計測など詳細にパフォーマンスの解析が可能。</p>

<p>（ほか参考にみたもの）<br/>
<a href="https://developers.google.com/web/tools/lighthouse/?hl=ja">Lighthouse によるウェブアプリの監査  |  Tools for Web Developers  |  Google Developers</a><br/>
<a href="https://qiita.com/kyoshidajp/items/e3f9be02a7ccd00aa7d7">Chrome 60 DevTools の新機能/変更点 - Qiita</a></p>

<h3>リソースの事前読み込み（p.115）</h3>

<p>rel 属性に prefetch を指定できる。
<code>&lt;link rel="prefetch" href="./image.gif"&gt;</code></p>

<p>Safari 以外のモダンブラウザ、IE11 もサポートしている。<br/>
（ほか参考にみたもの）<br/>
<a href="https://caniuse.com/#feat=link-rel-prefetch">Can I use... link rel="prefetch"</a></p>

<h3>高頻度で発火する DOM イベント（p.183）</h3>

<p><code>scroll</code>や<code>resize</code>イベントを使う場合、レンダリングまで含めると RAIL の指標に収まらない場合が多い。
この場合処理を一定の頻度のみ実行する対策が効果的。</p>

<p>ふつうはこうするが、</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink><span class="synStatement">window</span>.addEventListener(<span class="synConstant">&quot;scroll&quot;</span>, <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
  doSomething();
  <span class="synComment">// 高頻度で処理が呼ばれる</span>
<span class="synIdentifier">}</span>);
</pre>


<p>requestAnimationFrame()を使って下記のような形にするのがよい。</p>

<pre class="code lang-javascript" data-lang="javascript" data-unlink>(<span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
  <span class="synIdentifier">var</span> running = <span class="synConstant">false</span>;
  <span class="synIdentifier">var</span> optimizedCallback = <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    doSomething();
    <span class="synComment">// 実際の処理をここに記述する</span>
  <span class="synIdentifier">}</span>;
  <span class="synStatement">window</span>.addEventListener(<span class="synConstant">&quot;scroll&quot;</span>, <span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
    <span class="synStatement">if</span> (running) <span class="synIdentifier">{</span>
      running = <span class="synConstant">true</span>;
      <span class="synStatement">window</span>.requestAnimationFrame(<span class="synIdentifier">function</span>() <span class="synIdentifier">{</span>
        running = <span class="synConstant">false</span>;
        optimizedCallback();
      <span class="synIdentifier">}</span>);
    <span class="synIdentifier">}</span>
  <span class="synIdentifier">}</span>);
<span class="synIdentifier">}</span>)();
</pre>


<h3>requestAnimationFrame（p.210）</h3>

<p>requestAnimationFrame()メソッドは JavaScript からアニメーション処理に最適化された機能を提供します。<br/>
<code>setTimeOut()</code>や<code>setInterval</code>では原理的に適切なタイミングでアニメーションを呼び出すことが難しいことに加え、ブラウザのタブが　非アクティブ時でも処理されるため、アニメーションで使用するのは適切でない。</p>

<p>（ほか参考にみたもの）<br/>
<a href="https://developer.mozilla.org/ja/docs/Web/API/Window/requestAnimationFrame">window.requestAnimationFrame - Web API | MDN</a></p>

<h3>BEM（p.230）</h3>

<p>いろいろな設計規約があるなかで、BEM は高い保守性と同時に優れたパフォーマンスを出せます。</p>

<ul>
<li>CSS セレクタを記述する際に基本的に 1 つのクラスセレクタのみを用いることを強制する規約になっているから</li>
<li>CSS セレクタをクラスセレクタのみを宣言することで、CSS ルールセットごとのマッチング処理のオーバーヘッドを最小限に抑えることができる</li>
</ul>


<p>（ほか参考にみたもの）<br/>
<a href="https://developers.google.com/web/fundamentals/performance/rendering/reduce-the-scope-and-complexity-of-style-calculations?hl=ja">スタイル計算のスコープと複雑さの軽減  |  Web  |  Google Developers</a><br/>
<a href="https://ics.media/entry/15166">ウェブ制作者なら意識してほしい CSS 設計の基礎知識 - ICS MEDIA</a></p>

<p><a name="section_03"></a></p>

<h2>感想</h2>

<p>第 2 章が「ブラウザのレンダリングの仕組み」という章で、Loading / Scripting / Rendering / Painting の各流れを説明しています。<br/>
特に Loading フェーズでリソースの取得するためにネットワークプロトコルの内容などがありちょっと挫折しかけたのですが（すべての語句は頭に入っていない）、IP と DNS はどういう感じで通信しているかや、SSL もそこでひとつ処理を挟むかをなんとなくでも理解はできました。<br/>
これは結構大きなことで、Web サイトに触れ始めて 10 年くらいになりますが、実際に毎日みている Web の見方が少し変わる機会になりました。</p>

<p>また肝心のパフォーマンス改良に関しても、そもそもの概念的な考え方を理解できたのはもちろん良かったです。<br/>
CSS の内容に関してはだいたい理解できましたが、JavaScript に関しては理解が及ばない部分があったので、半年〜1 年後に読み返して改めて理解を深めたいなとも思いました。</p>

[CONTENS-END]
[ARTICLE-END]

[ARTICLE-START]
---
title: 'はてなブログ'
description: ''
publishDate: '11/24/2018 00:00:00'
---

[CONTENTS-START]
<p><a href="https://blog.yuheijotaki.com/">前のブログ</a> はWordPressで更新していましたが、はてなブログに移行しました。<br/>
当面は技術的なことのアウトプットをしていこうと思います。</p>

[CONTENS-END]
[ARTICLE-END]